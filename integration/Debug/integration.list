
integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e354  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000690f4  0800e518  0800e518  0000f518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807760c  0807760c  00079284  2**0
                  CONTENTS
  4 .ARM          00000008  0807760c  0807760c  0007860c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08077614  08077614  00079284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08077614  08077614  00078614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08077618  08077618  00078618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20040000  0807761c  00079000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000848  20040284  080778a0  00079284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20040acc  080778a0  00079acc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00079284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f5c3  00000000  00000000  000792b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045e3  00000000  00000000  00098877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  0009ce60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001497  00000000  00000000  0009e920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000308e2  00000000  00000000  0009fdb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024266  00000000  00000000  000d0699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f6c3  00000000  00000000  000f48ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00213fc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080f0  00000000  00000000  00214008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0021c0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040284 	.word	0x20040284
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e4fc 	.word	0x0800e4fc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040288 	.word	0x20040288
 80001fc:	0800e4fc 	.word	0x0800e4fc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <camera_init>:

/*
 * PUBLIC CAMERA INTERFACE
 */

void camera_init(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	printf("Initializing Camera... ");
 8000f6c:	4811      	ldr	r0, [pc, #68]	@ (8000fb4 <camera_init+0x4c>)
 8000f6e:	f00b f987 	bl	800c280 <iprintf>
	image_size = 0;
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <camera_init+0x50>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
	cur_image_idx = 0;
 8000f78:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <camera_init+0x54>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]

	pic_index = 0;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <camera_init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	801a      	strh	r2, [r3, #0]

	//  has to be mod 100 bcz file names have to be like 8 chars
	rand_seed = rand() % 100;
 8000f84:	f00a fc24 	bl	800b7d0 <rand>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc4 <camera_init+0x5c>)
 8000f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f90:	1151      	asrs	r1, r2, #5
 8000f92:	17da      	asrs	r2, r3, #31
 8000f94:	1a8a      	subs	r2, r1, r2
 8000f96:	2164      	movs	r1, #100	@ 0x64
 8000f98:	fb01 f202 	mul.w	r2, r1, r2
 8000f9c:	1a9a      	subs	r2, r3, r2
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <camera_init+0x60>)
 8000fa2:	801a      	strh	r2, [r3, #0]

	camera_ready = true;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <camera_init+0x64>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
	printf(" Successful!\n\r");
 8000faa:	4809      	ldr	r0, [pc, #36]	@ (8000fd0 <camera_init+0x68>)
 8000fac:	f00b f968 	bl	800c280 <iprintf>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	0800e518 	.word	0x0800e518
 8000fb8:	200402a4 	.word	0x200402a4
 8000fbc:	200402a8 	.word	0x200402a8
 8000fc0:	200402ac 	.word	0x200402ac
 8000fc4:	51eb851f 	.word	0x51eb851f
 8000fc8:	200402ae 	.word	0x200402ae
 8000fcc:	200402a0 	.word	0x200402a0
 8000fd0:	0800e530 	.word	0x0800e530

08000fd4 <camera_take_photo>:

uint8_t camera_take_photo(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
	if (!camera_ready) {
 8000fda:	4b23      	ldr	r3, [pc, #140]	@ (8001068 <camera_take_photo+0x94>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	f083 0301 	eor.w	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <camera_take_photo+0x18>
		return 0; // camera not ready, return failure
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e039      	b.n	8001060 <camera_take_photo+0x8c>
	}

	// instruct the physical camera to take a photo
	uint8_t success = VC0706_StopCapture();
 8000fec:	f001 fee8 	bl	8002dc0 <VC0706_StopCapture>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]

	// Verify success and update state
	if (!success) {
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <camera_take_photo+0x2a>
		return 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e030      	b.n	8001060 <camera_take_photo+0x8c>
	}

	HAL_Delay(100);
 8000ffe:	2064      	movs	r0, #100	@ 0x64
 8001000:	f002 fa44 	bl	800348c <HAL_Delay>


	success = VC0706_TakePhoto();
 8001004:	f001 fea4 	bl	8002d50 <VC0706_TakePhoto>
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]

	if (!success) {
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <camera_take_photo+0x42>
		return 0;
 8001012:	2300      	movs	r3, #0
 8001014:	e024      	b.n	8001060 <camera_take_photo+0x8c>
	}

	HAL_Delay(100);
 8001016:	2064      	movs	r0, #100	@ 0x64
 8001018:	f002 fa38 	bl	800348c <HAL_Delay>

	/*
	 * Read in the length of the image
	 */
	image_size = VC0706_ReadImageDataLength();
 800101c:	f001 ff06 	bl	8002e2c <VC0706_ReadImageDataLength>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <camera_take_photo+0x98>)
 8001026:	601a      	str	r2, [r3, #0]

	/*
	 * Now initialize the file handle
	 */
	char img_name[9];
	sprintf(img_name, "%d%d.jpg", pic_index, rand_seed);
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <camera_take_photo+0x9c>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <camera_take_photo+0xa0>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	1d38      	adds	r0, r7, #4
 8001034:	4910      	ldr	r1, [pc, #64]	@ (8001078 <camera_take_photo+0xa4>)
 8001036:	f00b f935 	bl	800c2a4 <siprintf>
//	FRESULT fres = f_open(&(file_writer), img_name, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
	f_open(&(file_writer), img_name, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	221a      	movs	r2, #26
 800103e:	4619      	mov	r1, r3
 8001040:	480e      	ldr	r0, [pc, #56]	@ (800107c <camera_take_photo+0xa8>)
 8001042:	f009 ff91 	bl	800af68 <f_open>

	pic_index++;
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <camera_take_photo+0x9c>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <camera_take_photo+0x9c>)
 8001050:	801a      	strh	r2, [r3, #0]

	/*
	 * now must initialize the camera struct to be able to start receiving photos
	 */

	cur_image_idx = 0;
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <camera_take_photo+0xac>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	camera_ready = 0; // no longer ready to take a new photo
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <camera_take_photo+0x94>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]

	return 1;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200402a0 	.word	0x200402a0
 800106c:	200402a4 	.word	0x200402a4
 8001070:	200402ac 	.word	0x200402ac
 8001074:	200402ae 	.word	0x200402ae
 8001078:	0800e540 	.word	0x0800e540
 800107c:	200402dc 	.word	0x200402dc
 8001080:	200402a8 	.word	0x200402a8

08001084 <finish_image>:

static void finish_image(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
	VC0706_ReadImageBlock(img_read_buf, cur_image_idx);
 800108a:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <finish_image+0x68>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4619      	mov	r1, r3
 8001090:	4817      	ldr	r0, [pc, #92]	@ (80010f0 <finish_image+0x6c>)
 8001092:	f001 fef5 	bl	8002e80 <VC0706_ReadImageBlock>

	UINT bytes_wrote;

	for (uint32_t i = 1; i < 32; i++) {
 8001096:	2301      	movs	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	e016      	b.n	80010ca <finish_image+0x46>
		if (img_read_buf[i-1 + 5] == 0xFF && img_read_buf[i + 5] == 0xD9) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3304      	adds	r3, #4
 80010a0:	4a13      	ldr	r2, [pc, #76]	@ (80010f0 <finish_image+0x6c>)
 80010a2:	5cd3      	ldrb	r3, [r2, r3]
 80010a4:	2bff      	cmp	r3, #255	@ 0xff
 80010a6:	d10d      	bne.n	80010c4 <finish_image+0x40>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3305      	adds	r3, #5
 80010ac:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <finish_image+0x6c>)
 80010ae:	5cd3      	ldrb	r3, [r2, r3]
 80010b0:	2bd9      	cmp	r3, #217	@ 0xd9
 80010b2:	d107      	bne.n	80010c4 <finish_image+0x40>
			// found end sequence
			f_write(&file_writer, img_read_buf + 5, i + 1, &bytes_wrote);
 80010b4:	490f      	ldr	r1, [pc, #60]	@ (80010f4 <finish_image+0x70>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	463b      	mov	r3, r7
 80010bc:	480e      	ldr	r0, [pc, #56]	@ (80010f8 <finish_image+0x74>)
 80010be:	f00a f90d 	bl	800b2dc <f_write>
			break;
 80010c2:	e005      	b.n	80010d0 <finish_image+0x4c>
	for (uint32_t i = 1; i < 32; i++) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3301      	adds	r3, #1
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b1f      	cmp	r3, #31
 80010ce:	d9e5      	bls.n	800109c <finish_image+0x18>
		}
	}

	f_close(&file_writer);
 80010d0:	4809      	ldr	r0, [pc, #36]	@ (80010f8 <finish_image+0x74>)
 80010d2:	f00a faf6 	bl	800b6c2 <f_close>

	camera_ready = true; // ready to take a new image
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <finish_image+0x78>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
	printf("Camera Processing Completed!\n\r");
 80010dc:	4808      	ldr	r0, [pc, #32]	@ (8001100 <finish_image+0x7c>)
 80010de:	f00b f8cf 	bl	800c280 <iprintf>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200402a8 	.word	0x200402a8
 80010f0:	200402b0 	.word	0x200402b0
 80010f4:	200402b5 	.word	0x200402b5
 80010f8:	200402dc 	.word	0x200402dc
 80010fc:	200402a0 	.word	0x200402a0
 8001100:	0800e54c 	.word	0x0800e54c

08001104 <process_chunk>:

static uint8_t process_chunk(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	if (cur_image_idx >= image_size - CAMERA_READ_IMG_SIZE) {
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <process_chunk+0x58>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f1a3 0220 	sub.w	r2, r3, #32
 8001112:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <process_chunk+0x5c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	d803      	bhi.n	8001122 <process_chunk+0x1e>
		finish_image(); // needs to perform the final processing in this->finish_image
 800111a:	f7ff ffb3 	bl	8001084 <finish_image>
		return 1;
 800111e:	2301      	movs	r3, #1
 8001120:	e018      	b.n	8001154 <process_chunk+0x50>
	}

	uint8_t status = VC0706_ReadImageBlock(img_read_buf, cur_image_idx);
 8001122:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <process_chunk+0x5c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4619      	mov	r1, r3
 8001128:	480e      	ldr	r0, [pc, #56]	@ (8001164 <process_chunk+0x60>)
 800112a:	f001 fea9 	bl	8002e80 <VC0706_ReadImageBlock>
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]

	if (!status) {
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <process_chunk+0x38>
		return 0;
 8001138:	2300      	movs	r3, #0
 800113a:	e00b      	b.n	8001154 <process_chunk+0x50>
	}

	UINT bytes_wrote;
	f_write(&file_writer, img_read_buf + 5, CAMERA_READ_IMG_SIZE, &bytes_wrote);
 800113c:	490a      	ldr	r1, [pc, #40]	@ (8001168 <process_chunk+0x64>)
 800113e:	463b      	mov	r3, r7
 8001140:	2220      	movs	r2, #32
 8001142:	480a      	ldr	r0, [pc, #40]	@ (800116c <process_chunk+0x68>)
 8001144:	f00a f8ca 	bl	800b2dc <f_write>

	cur_image_idx += 0x20;
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <process_chunk+0x5c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3320      	adds	r3, #32
 800114e:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <process_chunk+0x5c>)
 8001150:	6013      	str	r3, [r2, #0]

	return 0; //normal case
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200402a4 	.word	0x200402a4
 8001160:	200402a8 	.word	0x200402a8
 8001164:	200402b0 	.word	0x200402b0
 8001168:	200402b5 	.word	0x200402b5
 800116c:	200402dc 	.word	0x200402dc

08001170 <camera_get_percent_done>:

uint32_t camera_get_percent_done() {
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	return (100 * cur_image_idx) / image_size;
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <camera_get_percent_done+0x20>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2264      	movs	r2, #100	@ 0x64
 800117a:	fb03 f202 	mul.w	r2, r3, r2
 800117e:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <camera_get_percent_done+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	200402a8 	.word	0x200402a8
 8001194:	200402a4 	.word	0x200402a4

08001198 <camera_process>:


uint8_t camera_process(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
	printf("Camera Processing Image - %d%% Completed\n\r", camera_get_percent_done());
 800119e:	f7ff ffe7 	bl	8001170 <camera_get_percent_done>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4619      	mov	r1, r3
 80011a6:	480c      	ldr	r0, [pc, #48]	@ (80011d8 <camera_process+0x40>)
 80011a8:	f00b f86a 	bl	800c280 <iprintf>
	uint8_t end_flag = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	71fb      	strb	r3, [r7, #7]
	uint8_t num_chunks_processed = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	71bb      	strb	r3, [r7, #6]

	while (!end_flag && num_chunks_processed++ < CAMERA_PROCESS_CHUNKS) {
 80011b4:	e003      	b.n	80011be <camera_process+0x26>
		end_flag = process_chunk();
 80011b6:	f7ff ffa5 	bl	8001104 <process_chunk>
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	while (!end_flag && num_chunks_processed++ < CAMERA_PROCESS_CHUNKS) {
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <camera_process+0x36>
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	71ba      	strb	r2, [r7, #6]
 80011ca:	2b09      	cmp	r3, #9
 80011cc:	d9f3      	bls.n	80011b6 <camera_process+0x1e>
	}

	return end_flag; // 1 means the last chunk was read
 80011ce:	79fb      	ldrb	r3, [r7, #7]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	0800e56c 	.word	0x0800e56c

080011dc <camera_get_ready>:


uint8_t camera_get_ready() {
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	return camera_ready;
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <camera_get_ready+0x14>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	200402a0 	.word	0x200402a0

080011f4 <init_peripherals>:
#define PS_RESET_THRESHOLD 10000	// Put your hand on the feeder to reset it from the out_of_food state after refill
#define COOLDOWN_ISR_ITERATIONS 20
#define MAX_DISPENSE_ITERATIONS 5


void init_peripherals() {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_Delay(2500);
 80011f8:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80011fc:	f002 f946 	bl	800348c <HAL_Delay>

	camera_init();
 8001200:	f7ff feb2 	bl	8000f68 <camera_init>

	ir_sensor_init();
 8001204:	f000 f92e 	bl	8001464 <ir_sensor_init>
	ps_init();
 8001208:	f000 fbde 	bl	80019c8 <ps_init>

	// shared between the IR sensor and pressure sensor
	HAL_TIM_Base_Start_IT(&IR_SENSOR_TIMER_HANDLE);
 800120c:	4808      	ldr	r0, [pc, #32]	@ (8001230 <init_peripherals+0x3c>)
 800120e:	f005 ff8f 	bl	8007130 <HAL_TIM_Base_Start_IT>

//	lcd_init(&feeder);

	feeder.state = WAITING_FOR_SQUIRREL;
 8001212:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <init_peripherals+0x40>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
	feeder.squirrel_count = 0;
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <init_peripherals+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
	feeder.out_of_food = false;
 800121e:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <init_peripherals+0x40>)
 8001220:	2200      	movs	r2, #0
 8001222:	721a      	strb	r2, [r3, #8]

	// start main timer
	HAL_TIM_Base_Start_IT(&MAIN_TIMER_HANDLE);
 8001224:	4804      	ldr	r0, [pc, #16]	@ (8001238 <init_peripherals+0x44>)
 8001226:	f005 ff83 	bl	8007130 <HAL_TIM_Base_Start_IT>

	// start LCD timer
//	HAL_TIM_Base_Start_IT(&LCD_TIMER_HANDLE);

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20040844 	.word	0x20040844
 8001234:	2004050c 	.word	0x2004050c
 8001238:	200408dc 	.word	0x200408dc

0800123c <main_isr>:
static void dispensing_isr();
static void cooldown_isr();
static void out_of_food_isr();

// main program logic interrupt routine
void main_isr() {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	printf("#### Main Service Routine ###\n\r");
 8001240:	4819      	ldr	r0, [pc, #100]	@ (80012a8 <main_isr+0x6c>)
 8001242:	f00b f81d 	bl	800c280 <iprintf>

	// send the feeder state to the lcd and update it
	switch (feeder.state) {
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <main_isr+0x70>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b04      	cmp	r3, #4
 800124c:	d82a      	bhi.n	80012a4 <main_isr+0x68>
 800124e:	a201      	add	r2, pc, #4	@ (adr r2, 8001254 <main_isr+0x18>)
 8001250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001254:	08001269 	.word	0x08001269
 8001258:	08001275 	.word	0x08001275
 800125c:	08001281 	.word	0x08001281
 8001260:	0800128d 	.word	0x0800128d
 8001264:	08001299 	.word	0x08001299
	case WAITING_FOR_SQUIRREL:
		printf("state -- waiting for squirrel\n\r");
 8001268:	4811      	ldr	r0, [pc, #68]	@ (80012b0 <main_isr+0x74>)
 800126a:	f00b f809 	bl	800c280 <iprintf>
		waiting_for_squirrel_isr();
 800126e:	f000 f829 	bl	80012c4 <waiting_for_squirrel_isr>
		break;
 8001272:	e017      	b.n	80012a4 <main_isr+0x68>
	case DETECTED_SQUIRREL:
		printf("state -- detected squirrel\n\r");
 8001274:	480f      	ldr	r0, [pc, #60]	@ (80012b4 <main_isr+0x78>)
 8001276:	f00b f803 	bl	800c280 <iprintf>
		detected_squirrel_isr();
 800127a:	f000 f84b 	bl	8001314 <detected_squirrel_isr>
		break;
 800127e:	e011      	b.n	80012a4 <main_isr+0x68>
	case DISPENSING:
		printf("state -- dispensing\n\r");
 8001280:	480d      	ldr	r0, [pc, #52]	@ (80012b8 <main_isr+0x7c>)
 8001282:	f00a fffd 	bl	800c280 <iprintf>
		dispensing_isr();
 8001286:	f000 f859 	bl	800133c <dispensing_isr>
		break;
 800128a:	e00b      	b.n	80012a4 <main_isr+0x68>
	case COOLDOWN:
		printf("state -- cooldown\n\r");
 800128c:	480b      	ldr	r0, [pc, #44]	@ (80012bc <main_isr+0x80>)
 800128e:	f00a fff7 	bl	800c280 <iprintf>
		cooldown_isr();
 8001292:	f000 f89d 	bl	80013d0 <cooldown_isr>
		break;
 8001296:	e005      	b.n	80012a4 <main_isr+0x68>
	case OUT_OF_FOOD:
		printf("state -- out of food\n\r");
 8001298:	4809      	ldr	r0, [pc, #36]	@ (80012c0 <main_isr+0x84>)
 800129a:	f00a fff1 	bl	800c280 <iprintf>
		out_of_food_isr();
 800129e:	f000 f8b7 	bl	8001410 <out_of_food_isr>
		break;
 80012a2:	bf00      	nop
	}
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	0800e598 	.word	0x0800e598
 80012ac:	2004050c 	.word	0x2004050c
 80012b0:	0800e5b8 	.word	0x0800e5b8
 80012b4:	0800e5d8 	.word	0x0800e5d8
 80012b8:	0800e5f8 	.word	0x0800e5f8
 80012bc:	0800e610 	.word	0x0800e610
 80012c0:	0800e624 	.word	0x0800e624

080012c4 <waiting_for_squirrel_isr>:

static void waiting_for_squirrel_isr() {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	printf("Current Distance Reading: %f", get_cur_distance_average());
 80012c8:	f000 f952 	bl	8001570 <get_cur_distance_average>
 80012cc:	ee10 3a10 	vmov	r3, s0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f951 	bl	8000578 <__aeabi_f2d>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	480b      	ldr	r0, [pc, #44]	@ (8001308 <waiting_for_squirrel_isr+0x44>)
 80012dc:	f00a ffd0 	bl	800c280 <iprintf>

	if(get_cur_distance_average() > IR_DISTANCE_THRESHOLD) {
 80012e0:	f000 f946 	bl	8001570 <get_cur_distance_average>
 80012e4:	eef0 7a40 	vmov.f32	s15, s0
 80012e8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80012ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f4:	dc00      	bgt.n	80012f8 <waiting_for_squirrel_isr+0x34>
		printf("DETECTED SQUIRREL!\n\r");
		feeder.state = DETECTED_SQUIRREL;
	}
}
 80012f6:	e005      	b.n	8001304 <waiting_for_squirrel_isr+0x40>
		printf("DETECTED SQUIRREL!\n\r");
 80012f8:	4804      	ldr	r0, [pc, #16]	@ (800130c <waiting_for_squirrel_isr+0x48>)
 80012fa:	f00a ffc1 	bl	800c280 <iprintf>
		feeder.state = DETECTED_SQUIRREL;
 80012fe:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <waiting_for_squirrel_isr+0x4c>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	0800e63c 	.word	0x0800e63c
 800130c:	0800e65c 	.word	0x0800e65c
 8001310:	2004050c 	.word	0x2004050c

08001314 <detected_squirrel_isr>:

static void detected_squirrel_isr() {
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	feeder.squirrel_count++;
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <detected_squirrel_isr+0x24>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	3301      	adds	r3, #1
 800131e:	4a06      	ldr	r2, [pc, #24]	@ (8001338 <detected_squirrel_isr+0x24>)
 8001320:	6053      	str	r3, [r2, #4]

	feeder.needs_to_take_picture = true;
 8001322:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <detected_squirrel_isr+0x24>)
 8001324:	2201      	movs	r2, #1
 8001326:	725a      	strb	r2, [r3, #9]

	motor_start();
 8001328:	f001 f8c8 	bl	80024bc <motor_start>

	feeder.state = DISPENSING;
 800132c:	4b02      	ldr	r3, [pc, #8]	@ (8001338 <detected_squirrel_isr+0x24>)
 800132e:	2202      	movs	r2, #2
 8001330:	701a      	strb	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2004050c 	.word	0x2004050c

0800133c <dispensing_isr>:

static uint32_t times_dispensed = 0;
static void dispensing_isr() {
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	printf("Times Dispensed: %d\n\r", times_dispensed);
 8001340:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <dispensing_isr+0x7c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	481d      	ldr	r0, [pc, #116]	@ (80013bc <dispensing_isr+0x80>)
 8001348:	f00a ff9a 	bl	800c280 <iprintf>
	printf("PS reading: %d,  Threshold: %d\n\r", ps_get_reading(), PS_FOOD_THRESHOLD);
 800134c:	f000 fb54 	bl	80019f8 <ps_get_reading>
 8001350:	4603      	mov	r3, r0
 8001352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001356:	4619      	mov	r1, r3
 8001358:	4819      	ldr	r0, [pc, #100]	@ (80013c0 <dispensing_isr+0x84>)
 800135a:	f00a ff91 	bl	800c280 <iprintf>

	if (ps_get_reading() >= PS_FOOD_THRESHOLD) {
 800135e:	f000 fb4b 	bl	80019f8 <ps_get_reading>
 8001362:	4603      	mov	r3, r0
 8001364:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001368:	4293      	cmp	r3, r2
 800136a:	dd0b      	ble.n	8001384 <dispensing_isr+0x48>
		printf("Transitioning to COOLDOWN\n\r");
 800136c:	4815      	ldr	r0, [pc, #84]	@ (80013c4 <dispensing_isr+0x88>)
 800136e:	f00a ff87 	bl	800c280 <iprintf>
		// Must have dispensed enough food
		motor_stop();
 8001372:	f001 f8b7 	bl	80024e4 <motor_stop>

		feeder.state = COOLDOWN;
 8001376:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <dispensing_isr+0x8c>)
 8001378:	2203      	movs	r2, #3
 800137a:	701a      	strb	r2, [r3, #0]
		times_dispensed = 0;
 800137c:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <dispensing_isr+0x7c>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]

		return;
 8001382:	e017      	b.n	80013b4 <dispensing_isr+0x78>
	}

	if (times_dispensed >= MAX_DISPENSE_ITERATIONS) {
 8001384:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <dispensing_isr+0x7c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b04      	cmp	r3, #4
 800138a:	d90b      	bls.n	80013a4 <dispensing_isr+0x68>
		printf("Transitioning to out_of_food state\n\r");
 800138c:	480f      	ldr	r0, [pc, #60]	@ (80013cc <dispensing_isr+0x90>)
 800138e:	f00a ff77 	bl	800c280 <iprintf>
		// has dispensed 5 times on this iteration already -- out of food
		motor_stop();
 8001392:	f001 f8a7 	bl	80024e4 <motor_stop>

		feeder.state = OUT_OF_FOOD;
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <dispensing_isr+0x8c>)
 8001398:	2204      	movs	r2, #4
 800139a:	701a      	strb	r2, [r3, #0]
		times_dispensed = 0;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <dispensing_isr+0x7c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]

		return;
 80013a2:	e007      	b.n	80013b4 <dispensing_isr+0x78>
	}

	// Down here is "average" use case -- needs to continue dispensing
	++times_dispensed;
 80013a4:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <dispensing_isr+0x7c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	4a03      	ldr	r2, [pc, #12]	@ (80013b8 <dispensing_isr+0x7c>)
 80013ac:	6013      	str	r3, [r2, #0]

	// Stay in the same state
	feeder.state = DISPENSING;
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <dispensing_isr+0x8c>)
 80013b0:	2202      	movs	r2, #2
 80013b2:	701a      	strb	r2, [r3, #0]
}
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20040518 	.word	0x20040518
 80013bc:	0800e674 	.word	0x0800e674
 80013c0:	0800e68c 	.word	0x0800e68c
 80013c4:	0800e6b0 	.word	0x0800e6b0
 80013c8:	2004050c 	.word	0x2004050c
 80013cc:	0800e6cc 	.word	0x0800e6cc

080013d0 <cooldown_isr>:

/*
 * Prevents the system from dispensing food over and over again
 */
static uint32_t cooldown_cur_iteration = 0;
static void cooldown_isr(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	cooldown_cur_iteration += 1;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <cooldown_isr+0x34>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	4a0a      	ldr	r2, [pc, #40]	@ (8001404 <cooldown_isr+0x34>)
 80013dc:	6013      	str	r3, [r2, #0]

	printf("Current cooldown iteration: %d\n\r", cooldown_cur_iteration);
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <cooldown_isr+0x34>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	4808      	ldr	r0, [pc, #32]	@ (8001408 <cooldown_isr+0x38>)
 80013e6:	f00a ff4b 	bl	800c280 <iprintf>

	if (cooldown_cur_iteration == COOLDOWN_ISR_ITERATIONS) {
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <cooldown_isr+0x34>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b14      	cmp	r3, #20
 80013f0:	d105      	bne.n	80013fe <cooldown_isr+0x2e>
		cooldown_cur_iteration = 0;
 80013f2:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <cooldown_isr+0x34>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
		feeder.state = WAITING_FOR_SQUIRREL;
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <cooldown_isr+0x3c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
	}
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2004051c 	.word	0x2004051c
 8001408:	0800e6f4 	.word	0x0800e6f4
 800140c:	2004050c 	.word	0x2004050c

08001410 <out_of_food_isr>:

// In order to reset the feeder, just put your hand on the pressure sensor
static void out_of_food_isr() {	// We don't have a great way to determine when food is added back
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	feeder.out_of_food = true;
 8001414:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <out_of_food_isr+0x38>)
 8001416:	2201      	movs	r2, #1
 8001418:	721a      	strb	r2, [r3, #8]

	printf("Current PS Reading: %d\n\r", ps_get_reading());
 800141a:	f000 faed 	bl	80019f8 <ps_get_reading>
 800141e:	4603      	mov	r3, r0
 8001420:	4619      	mov	r1, r3
 8001422:	480a      	ldr	r0, [pc, #40]	@ (800144c <out_of_food_isr+0x3c>)
 8001424:	f00a ff2c 	bl	800c280 <iprintf>

	if (ps_get_reading() > PS_RESET_THRESHOLD) {
 8001428:	f000 fae6 	bl	80019f8 <ps_get_reading>
 800142c:	4603      	mov	r3, r0
 800142e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001432:	4293      	cmp	r3, r2
 8001434:	dd05      	ble.n	8001442 <out_of_food_isr+0x32>
		feeder.out_of_food = false;
 8001436:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <out_of_food_isr+0x38>)
 8001438:	2200      	movs	r2, #0
 800143a:	721a      	strb	r2, [r3, #8]
		feeder.state = WAITING_FOR_SQUIRREL;
 800143c:	4b02      	ldr	r3, [pc, #8]	@ (8001448 <out_of_food_isr+0x38>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
	}
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2004050c 	.word	0x2004050c
 800144c:	0800e718 	.word	0x0800e718

08001450 <get_feeder>:

Feeder *get_feeder() {
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	return &feeder;
 8001454:	4b02      	ldr	r3, [pc, #8]	@ (8001460 <get_feeder+0x10>)
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	2004050c 	.word	0x2004050c

08001464 <ir_sensor_init>:

static float distance_measurements[NUM_MEASUREMENTS_TO_AVG];
static uint8_t distance_idx = 0;


void ir_sensor_init() {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
	printf("Initializing IR Sensor...");
 800146a:	480c      	ldr	r0, [pc, #48]	@ (800149c <ir_sensor_init+0x38>)
 800146c:	f00a ff08 	bl	800c280 <iprintf>
	// make sure doesn't auto trigger without readings
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 8001470:	2300      	movs	r3, #0
 8001472:	71fb      	strb	r3, [r7, #7]
 8001474:	e008      	b.n	8001488 <ir_sensor_init+0x24>
		distance_measurements[i] = 1000;
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	4a09      	ldr	r2, [pc, #36]	@ (80014a0 <ir_sensor_init+0x3c>)
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <ir_sensor_init+0x40>)
 8001480:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	3301      	adds	r3, #1
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	2b07      	cmp	r3, #7
 800148c:	d9f3      	bls.n	8001476 <ir_sensor_init+0x12>
	}
	printf(" Successful!\n\r");
 800148e:	4806      	ldr	r0, [pc, #24]	@ (80014a8 <ir_sensor_init+0x44>)
 8001490:	f00a fef6 	bl	800c280 <iprintf>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	0800e734 	.word	0x0800e734
 80014a0:	20040520 	.word	0x20040520
 80014a4:	447a0000 	.word	0x447a0000
 80014a8:	0800e750 	.word	0x0800e750
 80014ac:	00000000 	.word	0x00000000

080014b0 <read_distance>:

static float read_distance() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
	 uint32_t ADC_VAL = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]

	 HAL_ADC_Start(&IR_ADC_HANDLE);//start conversion
 80014ba:	481b      	ldr	r0, [pc, #108]	@ (8001528 <read_distance+0x78>)
 80014bc:	f002 fb2a 	bl	8003b14 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&IR_ADC_HANDLE, 0xFFFFFFFF);//wait for conversion to finish
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	4818      	ldr	r0, [pc, #96]	@ (8001528 <read_distance+0x78>)
 80014c6:	f002 fb88 	bl	8003bda <HAL_ADC_PollForConversion>
	 ADC_VAL = HAL_ADC_GetValue(&IR_ADC_HANDLE);//retrieve value
 80014ca:	4817      	ldr	r0, [pc, #92]	@ (8001528 <read_distance+0x78>)
 80014cc:	f002 fc14 	bl	8003cf8 <HAL_ADC_GetValue>
 80014d0:	60f8      	str	r0, [r7, #12]

	 float voltage = (3.3* ADC_VAL)/4025.0;
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f7ff f82e 	bl	8000534 <__aeabi_ui2d>
 80014d8:	a30f      	add	r3, pc, #60	@ (adr r3, 8001518 <read_distance+0x68>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f8a3 	bl	8000628 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	a30d      	add	r3, pc, #52	@ (adr r3, 8001520 <read_distance+0x70>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f9c4 	bl	800087c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fb6c 	bl	8000bd8 <__aeabi_d2f>
 8001500:	4603      	mov	r3, r0
 8001502:	60bb      	str	r3, [r7, #8]

	 // TODO  - special conversion if we need to
	 float distance = voltage;
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	607b      	str	r3, [r7, #4]

	 return distance;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	ee07 3a90 	vmov	s15, r3
}
 800150e:	eeb0 0a67 	vmov.f32	s0, s15
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	66666666 	.word	0x66666666
 800151c:	400a6666 	.word	0x400a6666
 8001520:	00000000 	.word	0x00000000
 8001524:	40af7200 	.word	0x40af7200
 8001528:	20040554 	.word	0x20040554

0800152c <ir_sensor_interrupt_routine>:

void ir_sensor_interrupt_routine() {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
	float curr = read_distance();
 8001532:	f7ff ffbd 	bl	80014b0 <read_distance>
 8001536:	ed87 0a01 	vstr	s0, [r7, #4]

	distance_measurements[distance_idx++] = curr;
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <ir_sensor_interrupt_routine+0x3c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	b2d1      	uxtb	r1, r2
 8001542:	4a09      	ldr	r2, [pc, #36]	@ (8001568 <ir_sensor_interrupt_routine+0x3c>)
 8001544:	7011      	strb	r1, [r2, #0]
 8001546:	4a09      	ldr	r2, [pc, #36]	@ (800156c <ir_sensor_interrupt_routine+0x40>)
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	601a      	str	r2, [r3, #0]
	distance_idx %= NUM_MEASUREMENTS_TO_AVG;
 8001550:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <ir_sensor_interrupt_routine+0x3c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <ir_sensor_interrupt_routine+0x3c>)
 800155c:	701a      	strb	r2, [r3, #0]
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20040540 	.word	0x20040540
 800156c:	20040520 	.word	0x20040520

08001570 <get_cur_distance_average>:

float get_cur_distance_average() {
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
	float ttl = 0;
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 800157c:	2300      	movs	r3, #0
 800157e:	70fb      	strb	r3, [r7, #3]
 8001580:	e00e      	b.n	80015a0 <get_cur_distance_average+0x30>
		ttl += distance_measurements[i];
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	4a0f      	ldr	r2, [pc, #60]	@ (80015c4 <get_cur_distance_average+0x54>)
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001596:	edc7 7a01 	vstr	s15, [r7, #4]
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	3301      	adds	r3, #1
 800159e:	70fb      	strb	r3, [r7, #3]
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	2b07      	cmp	r3, #7
 80015a4:	d9ed      	bls.n	8001582 <get_cur_distance_average+0x12>
	}

	return ttl / NUM_MEASUREMENTS_TO_AVG;
 80015a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015aa:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80015ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80015b6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	20040520 	.word	0x20040520

080015c8 <lcd_between>:
	ILI9341_Init();

	lcd_feeder_ref = feeder;
}

static void lcd_between(){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
//	HAL_Delay(1000);
	ILI9341_FillScreen(ILI9341_WHITE);
 80015cc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80015d0:	f001 fe8e 	bl	80032f0 <ILI9341_FillScreen>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <squirrel_clip>:




void squirrel_clip() {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af02      	add	r7, sp, #8
	ILI9341_DrawImage((ILI9341_WIDTH - 320)/2,(ILI9341_HEIGHT-240)/2,320,240,(const uint16_t*)squirrelclip);
 80015de:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <squirrel_clip+0x24>)
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	23f0      	movs	r3, #240	@ 0xf0
 80015e4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015e8:	2100      	movs	r1, #0
 80015ea:	2000      	movs	r0, #0
 80015ec:	f001 fe92 	bl	8003314 <ILI9341_DrawImage>
	LcdState = SQUIRREL_RES;
 80015f0:	4b03      	ldr	r3, [pc, #12]	@ (8001600 <squirrel_clip+0x28>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	0802fd28 	.word	0x0802fd28
 8001600:	20040548 	.word	0x20040548

08001604 <squirrel_res>:

void squirrel_res() {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af02      	add	r7, sp, #8
	ILI9341_DrawImage((ILI9341_WIDTH - 320)/2,(ILI9341_HEIGHT-213)/2,320,213,(const uint16_t*)squirrelres);
 800160a:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <squirrel_res+0x24>)
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	23d5      	movs	r3, #213	@ 0xd5
 8001610:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001614:	210d      	movs	r1, #13
 8001616:	2000      	movs	r0, #0
 8001618:	f001 fe7c 	bl	8003314 <ILI9341_DrawImage>
	LcdState = M_LOGO;
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <squirrel_res+0x28>)
 800161e:	2202      	movs	r2, #2
 8001620:	701a      	strb	r2, [r3, #0]
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	0800e8a8 	.word	0x0800e8a8
 800162c:	20040548 	.word	0x20040548

08001630 <m_logo>:

void m_logo() {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af02      	add	r7, sp, #8
	ILI9341_DrawImage((ILI9341_WIDTH - 320)/2,(ILI9341_HEIGHT-203)/2,320,203,(const uint16_t*)MLogo);
 8001636:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <m_logo+0x24>)
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	23cb      	movs	r3, #203	@ 0xcb
 800163c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001640:	2112      	movs	r1, #18
 8001642:	2000      	movs	r0, #0
 8001644:	f001 fe66 	bl	8003314 <ILI9341_DrawImage>
	LcdState = STATISTICS;
 8001648:	4b03      	ldr	r3, [pc, #12]	@ (8001658 <m_logo+0x28>)
 800164a:	2203      	movs	r2, #3
 800164c:	701a      	strb	r2, [r3, #0]
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	08055528 	.word	0x08055528
 8001658:	20040548 	.word	0x20040548

0800165c <display_stats>:

void display_stats() {
 800165c:	b580      	push	{r7, lr}
 800165e:	b098      	sub	sp, #96	@ 0x60
 8001660:	af04      	add	r7, sp, #16
	const char* team1 = "FEED";
 8001662:	4b49      	ldr	r3, [pc, #292]	@ (8001788 <display_stats+0x12c>)
 8001664:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const char* team2 = "THE";
 8001666:	4b49      	ldr	r3, [pc, #292]	@ (800178c <display_stats+0x130>)
 8001668:	64bb      	str	r3, [r7, #72]	@ 0x48
	const char* team3 = "SQUIRRELS";
 800166a:	4b49      	ldr	r3, [pc, #292]	@ (8001790 <display_stats+0x134>)
 800166c:	647b      	str	r3, [r7, #68]	@ 0x44
	const char* class = "FROM EECS 373";
 800166e:	4b49      	ldr	r3, [pc, #292]	@ (8001794 <display_stats+0x138>)
 8001670:	643b      	str	r3, [r7, #64]	@ 0x40
	const char* linebrk = "-*-*-*-*-*-";
 8001672:	4b49      	ldr	r3, [pc, #292]	@ (8001798 <display_stats+0x13c>)
 8001674:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// Needs help
	char str_squirrels_fed[20];
	sprintf(str_squirrels_fed, "Squirrels Fed: %lu", lcd_feeder_ref->squirrel_count);
 8001676:	4b49      	ldr	r3, [pc, #292]	@ (800179c <display_stats+0x140>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001680:	4947      	ldr	r1, [pc, #284]	@ (80017a0 <display_stats+0x144>)
 8001682:	4618      	mov	r0, r3
 8001684:	f00a fe0e 	bl	800c2a4 <siprintf>

//	const char* squcount = strcat("Squirrels Fed: ", strSquirrels);
//	const char* flevels = strcat("Food Dispensed: ", strWeight);

	// FEED THE SQUIRRELS FROM EECS 383 -*-*-*-*-*
	ILI9341_WriteString(10, 10, team1, Font_16x26, ILI9341_YELLOW, ILI9341_BLUE);
 8001688:	4b46      	ldr	r3, [pc, #280]	@ (80017a4 <display_stats+0x148>)
 800168a:	221f      	movs	r2, #31
 800168c:	9202      	str	r2, [sp, #8]
 800168e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001692:	9201      	str	r2, [sp, #4]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	9200      	str	r2, [sp, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800169c:	210a      	movs	r1, #10
 800169e:	200a      	movs	r0, #10
 80016a0:	f001 fd6c 	bl	800317c <ILI9341_WriteString>
	ILI9341_WriteString(10, 40, team2, Font_16x26, ILI9341_YELLOW, ILI9341_BLUE);
 80016a4:	4b3f      	ldr	r3, [pc, #252]	@ (80017a4 <display_stats+0x148>)
 80016a6:	221f      	movs	r2, #31
 80016a8:	9202      	str	r2, [sp, #8]
 80016aa:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80016ae:	9201      	str	r2, [sp, #4]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	9200      	str	r2, [sp, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80016b8:	2128      	movs	r1, #40	@ 0x28
 80016ba:	200a      	movs	r0, #10
 80016bc:	f001 fd5e 	bl	800317c <ILI9341_WriteString>
	ILI9341_WriteString(10, 70, team3, Font_16x26, ILI9341_YELLOW, ILI9341_BLUE);
 80016c0:	4b38      	ldr	r3, [pc, #224]	@ (80017a4 <display_stats+0x148>)
 80016c2:	221f      	movs	r2, #31
 80016c4:	9202      	str	r2, [sp, #8]
 80016c6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80016ca:	9201      	str	r2, [sp, #4]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	9200      	str	r2, [sp, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80016d4:	2146      	movs	r1, #70	@ 0x46
 80016d6:	200a      	movs	r0, #10
 80016d8:	f001 fd50 	bl	800317c <ILI9341_WriteString>
	ILI9341_WriteString(10, 100, class, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 80016dc:	4b32      	ldr	r3, [pc, #200]	@ (80017a8 <display_stats+0x14c>)
 80016de:	221f      	movs	r2, #31
 80016e0:	9202      	str	r2, [sp, #8]
 80016e2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80016e6:	9201      	str	r2, [sp, #4]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	9200      	str	r2, [sp, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016f0:	2164      	movs	r1, #100	@ 0x64
 80016f2:	200a      	movs	r0, #10
 80016f4:	f001 fd42 	bl	800317c <ILI9341_WriteString>
	ILI9341_WriteString(10, 130, linebrk, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 80016f8:	4b2b      	ldr	r3, [pc, #172]	@ (80017a8 <display_stats+0x14c>)
 80016fa:	221f      	movs	r2, #31
 80016fc:	9202      	str	r2, [sp, #8]
 80016fe:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001702:	9201      	str	r2, [sp, #4]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	9200      	str	r2, [sp, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800170c:	2182      	movs	r1, #130	@ 0x82
 800170e:	200a      	movs	r0, #10
 8001710:	f001 fd34 	bl	800317c <ILI9341_WriteString>

	// Squirrels Fed: squcount
	// Food Dispensed: strWeight
	ILI9341_WriteString(10, 160, str_squirrels_fed, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 8001714:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <display_stats+0x14c>)
 8001716:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800171a:	221f      	movs	r2, #31
 800171c:	9202      	str	r2, [sp, #8]
 800171e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001722:	9201      	str	r2, [sp, #4]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	9200      	str	r2, [sp, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	460a      	mov	r2, r1
 800172c:	21a0      	movs	r1, #160	@ 0xa0
 800172e:	200a      	movs	r0, #10
 8001730:	f001 fd24 	bl	800317c <ILI9341_WriteString>
//	ILI9341_WriteString(10, 190, flevels, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);

	// DISPLAY CAMERA STATUS
	char camera_ready[40];
	if (camera_get_ready()) {
 8001734:	f7ff fd52 	bl	80011dc <camera_get_ready>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <display_stats+0xee>
		sprintf(camera_ready, "Camera: Ready");
 800173e:	463b      	mov	r3, r7
 8001740:	491a      	ldr	r1, [pc, #104]	@ (80017ac <display_stats+0x150>)
 8001742:	4618      	mov	r0, r3
 8001744:	f00a fdae 	bl	800c2a4 <siprintf>
 8001748:	e007      	b.n	800175a <display_stats+0xfe>
	} else {
		sprintf(camera_ready, "Camera: %lu%% Done", camera_get_percent_done());
 800174a:	f7ff fd11 	bl	8001170 <camera_get_percent_done>
 800174e:	4602      	mov	r2, r0
 8001750:	463b      	mov	r3, r7
 8001752:	4917      	ldr	r1, [pc, #92]	@ (80017b0 <display_stats+0x154>)
 8001754:	4618      	mov	r0, r3
 8001756:	f00a fda5 	bl	800c2a4 <siprintf>
	}

	ILI9341_WriteString(10, 190, camera_ready, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 800175a:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <display_stats+0x14c>)
 800175c:	4639      	mov	r1, r7
 800175e:	221f      	movs	r2, #31
 8001760:	9202      	str	r2, [sp, #8]
 8001762:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001766:	9201      	str	r2, [sp, #4]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	9200      	str	r2, [sp, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	460a      	mov	r2, r1
 8001770:	21be      	movs	r1, #190	@ 0xbe
 8001772:	200a      	movs	r0, #10
 8001774:	f001 fd02 	bl	800317c <ILI9341_WriteString>

	LcdState = SQUIRREL_CLIP;
 8001778:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <display_stats+0x158>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	3750      	adds	r7, #80	@ 0x50
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	0800e760 	.word	0x0800e760
 800178c:	0800e768 	.word	0x0800e768
 8001790:	0800e76c 	.word	0x0800e76c
 8001794:	0800e778 	.word	0x0800e778
 8001798:	0800e788 	.word	0x0800e788
 800179c:	20040544 	.word	0x20040544
 80017a0:	0800e794 	.word	0x0800e794
 80017a4:	20040094 	.word	0x20040094
 80017a8:	2004008c 	.word	0x2004008c
 80017ac:	0800e7a8 	.word	0x0800e7a8
 80017b0:	0800e7b8 	.word	0x0800e7b8
 80017b4:	20040548 	.word	0x20040548

080017b8 <display_out_of_food>:

// DISPLAY OUT OF FOOD WARNING
void display_out_of_food() {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af04      	add	r7, sp, #16
	const char* out_of_food_str = "!! OUT OF FOOD !!";
 80017be:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <display_out_of_food+0x40>)
 80017c0:	607b      	str	r3, [r7, #4]
	ILI9341_WriteString(10, 70, out_of_food_str, Font_16x26, ILI9341_YELLOW, ILI9341_BLUE);
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <display_out_of_food+0x44>)
 80017c4:	221f      	movs	r2, #31
 80017c6:	9202      	str	r2, [sp, #8]
 80017c8:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80017cc:	9201      	str	r2, [sp, #4]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	9200      	str	r2, [sp, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	2146      	movs	r1, #70	@ 0x46
 80017d8:	200a      	movs	r0, #10
 80017da:	f001 fccf 	bl	800317c <ILI9341_WriteString>

	if (lcd_feeder_ref->state != OUT_OF_FOOD) {
 80017de:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <display_out_of_food+0x48>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d002      	beq.n	80017ee <display_out_of_food+0x36>
		LcdState = STATISTICS;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <display_out_of_food+0x4c>)
 80017ea:	2203      	movs	r2, #3
 80017ec:	701a      	strb	r2, [r3, #0]
	}
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	0800e7cc 	.word	0x0800e7cc
 80017fc:	20040094 	.word	0x20040094
 8001800:	20040544 	.word	0x20040544
 8001804:	20040548 	.word	0x20040548

08001808 <lcd_isr>:

// MAIN LCD INTERRUPT SERVICE ROUTINE
void lcd_isr() {
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	lcd_between();
 800180c:	f7ff fedc 	bl	80015c8 <lcd_between>

	if (lcd_feeder_ref->state == OUT_OF_FOOD) {
 8001810:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <lcd_isr+0x60>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b04      	cmp	r3, #4
 8001818:	d102      	bne.n	8001820 <lcd_isr+0x18>
		LcdState = OUT_OF_FOOD_WARNING;
 800181a:	4b14      	ldr	r3, [pc, #80]	@ (800186c <lcd_isr+0x64>)
 800181c:	2204      	movs	r2, #4
 800181e:	701a      	strb	r2, [r3, #0]
	}

	switch(LcdState) {
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <lcd_isr+0x64>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b04      	cmp	r3, #4
 8001826:	d81c      	bhi.n	8001862 <lcd_isr+0x5a>
 8001828:	a201      	add	r2, pc, #4	@ (adr r2, 8001830 <lcd_isr+0x28>)
 800182a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182e:	bf00      	nop
 8001830:	08001845 	.word	0x08001845
 8001834:	0800184b 	.word	0x0800184b
 8001838:	08001851 	.word	0x08001851
 800183c:	08001857 	.word	0x08001857
 8001840:	0800185d 	.word	0x0800185d
	case SQUIRREL_CLIP:
		squirrel_clip();
 8001844:	f7ff fec8 	bl	80015d8 <squirrel_clip>
		break;
 8001848:	e00b      	b.n	8001862 <lcd_isr+0x5a>
	case SQUIRREL_RES:
		squirrel_res();
 800184a:	f7ff fedb 	bl	8001604 <squirrel_res>
		break;
 800184e:	e008      	b.n	8001862 <lcd_isr+0x5a>
	case M_LOGO:
		m_logo();
 8001850:	f7ff feee 	bl	8001630 <m_logo>
		break;
 8001854:	e005      	b.n	8001862 <lcd_isr+0x5a>
	case STATISTICS:
		display_stats();
 8001856:	f7ff ff01 	bl	800165c <display_stats>
		break;
 800185a:	e002      	b.n	8001862 <lcd_isr+0x5a>
	case OUT_OF_FOOD_WARNING:
		display_out_of_food();
 800185c:	f7ff ffac 	bl	80017b8 <display_out_of_food>
		break;
 8001860:	bf00      	nop
	}
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20040544 	.word	0x20040544
 800186c:	20040548 	.word	0x20040548

08001870 <microDelay>:

/*
 * Really short delay function
 */
static void microDelay(uint16_t delay)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
	return;
 800187a:	bf00      	nop
  __HAL_TIM_SET_COUNTER(&PS_TIMER_HANDLE, 0);
  while (__HAL_TIM_GET_COUNTER(&PS_TIMER_HANDLE) < delay);
}
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <getHX711>:

/*
 * reads in data value from HX711
 */
static int32_t getHX711(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 8001892:	f001 fdef 	bl	8003474 <HAL_GetTick>
 8001896:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(PS0_DATA_GPIO_Port, PS0_DATA_Pin) == GPIO_PIN_SET)
 8001898:	e008      	b.n	80018ac <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 800189a:	f001 fdeb 	bl	8003474 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2bc8      	cmp	r3, #200	@ 0xc8
 80018a6:	d901      	bls.n	80018ac <getHX711+0x24>
      return 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	e045      	b.n	8001938 <getHX711+0xb0>
  while(HAL_GPIO_ReadPin(PS0_DATA_GPIO_Port, PS0_DATA_Pin) == GPIO_PIN_SET)
 80018ac:	2108      	movs	r1, #8
 80018ae:	4824      	ldr	r0, [pc, #144]	@ (8001940 <getHX711+0xb8>)
 80018b0:	f003 f956 	bl	8004b60 <HAL_GPIO_ReadPin>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d0ef      	beq.n	800189a <getHX711+0x12>
  }

  for(int8_t len=0; len<24 ; len++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	72fb      	strb	r3, [r7, #11]
 80018be:	e022      	b.n	8001906 <getHX711+0x7e>
  {
    HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	2102      	movs	r1, #2
 80018c4:	481e      	ldr	r0, [pc, #120]	@ (8001940 <getHX711+0xb8>)
 80018c6:	f003 f963 	bl	8004b90 <HAL_GPIO_WritePin>
    microDelay(1);
 80018ca:	2001      	movs	r0, #1
 80018cc:	f7ff ffd0 	bl	8001870 <microDelay>
    data = data << 1;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2102      	movs	r1, #2
 80018da:	4819      	ldr	r0, [pc, #100]	@ (8001940 <getHX711+0xb8>)
 80018dc:	f003 f958 	bl	8004b90 <HAL_GPIO_WritePin>
    microDelay(1);
 80018e0:	2001      	movs	r0, #1
 80018e2:	f7ff ffc5 	bl	8001870 <microDelay>
    if(HAL_GPIO_ReadPin(PS0_DATA_GPIO_Port, PS0_DATA_Pin) == GPIO_PIN_SET)
 80018e6:	2108      	movs	r1, #8
 80018e8:	4815      	ldr	r0, [pc, #84]	@ (8001940 <getHX711+0xb8>)
 80018ea:	f003 f939 	bl	8004b60 <HAL_GPIO_ReadPin>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d102      	bne.n	80018fa <getHX711+0x72>
      data ++;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3301      	adds	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 80018fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	3301      	adds	r3, #1
 8001902:	b2db      	uxtb	r3, r3
 8001904:	72fb      	strb	r3, [r7, #11]
 8001906:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800190a:	2b17      	cmp	r3, #23
 800190c:	ddd8      	ble.n	80018c0 <getHX711+0x38>
  }

  data = data ^ 0x800000;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8001914:	60fb      	str	r3, [r7, #12]

  /*
   * END BIT
   */
  HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_SET);
 8001916:	2201      	movs	r2, #1
 8001918:	2102      	movs	r1, #2
 800191a:	4809      	ldr	r0, [pc, #36]	@ (8001940 <getHX711+0xb8>)
 800191c:	f003 f938 	bl	8004b90 <HAL_GPIO_WritePin>
  microDelay(1);
 8001920:	2001      	movs	r0, #1
 8001922:	f7ff ffa5 	bl	8001870 <microDelay>
  HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	2102      	movs	r1, #2
 800192a:	4805      	ldr	r0, [pc, #20]	@ (8001940 <getHX711+0xb8>)
 800192c:	f003 f930 	bl	8004b90 <HAL_GPIO_WritePin>
  microDelay(1);
 8001930:	2001      	movs	r0, #1
 8001932:	f7ff ff9d 	bl	8001870 <microDelay>

  return data;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	48000800 	.word	0x48000800

08001944 <weigh>:


static int weigh()
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
  int32_t  total = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  int32_t  samples = 50;
 800194e:	2332      	movs	r3, #50	@ 0x32
 8001950:	60fb      	str	r3, [r7, #12]
  int milligram;
  float coefficient;

  for(uint16_t i=0 ; i<samples ; i++)
 8001952:	2300      	movs	r3, #0
 8001954:	827b      	strh	r3, [r7, #18]
 8001956:	e008      	b.n	800196a <weigh+0x26>
  {
      total += getHX711();
 8001958:	f7ff ff96 	bl	8001888 <getHX711>
 800195c:	4602      	mov	r2, r0
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	4413      	add	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
  for(uint16_t i=0 ; i<samples ; i++)
 8001964:	8a7b      	ldrh	r3, [r7, #18]
 8001966:	3301      	adds	r3, #1
 8001968:	827b      	strh	r3, [r7, #18]
 800196a:	8a7b      	ldrh	r3, [r7, #18]
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	429a      	cmp	r2, r3
 8001970:	dcf2      	bgt.n	8001958 <weigh+0x14>
  }
  int32_t average = (int32_t)(total / samples);
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	fb92 f3f3 	sdiv	r3, r2, r3
 800197a:	60bb      	str	r3, [r7, #8]
  coefficient = knownOriginal / knownHX711;
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <weigh+0x78>)
 800197e:	edd3 6a00 	vldr	s13, [r3]
 8001982:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <weigh+0x7c>)
 8001984:	ed93 7a00 	vldr	s14, [r3]
 8001988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800198c:	edc7 7a01 	vstr	s15, [r7, #4]
  milligram = (int)(average-PS0_TARE)*coefficient;
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <weigh+0x80>)
 8001994:	4413      	add	r3, r2
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800199e:	edd7 7a01 	vldr	s15, [r7, #4]
 80019a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019aa:	ee17 3a90 	vmov	r3, s15
 80019ae:	603b      	str	r3, [r7, #0]
  return milligram;
 80019b0:	683b      	ldr	r3, [r7, #0]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20040000 	.word	0x20040000
 80019c0:	20040004 	.word	0x20040004
 80019c4:	ff7e8f5e 	.word	0xff7e8f5e

080019c8 <ps_init>:


void ps_init() {};
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <ps_take_reading>:

static bool NEEDS_READING = false;

void ps_take_reading() {
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	NEEDS_READING = false;
 80019dc:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <ps_take_reading+0x18>)
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
	CURRENT_READING = weigh();
 80019e2:	f7ff ffaf 	bl	8001944 <weigh>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a02      	ldr	r2, [pc, #8]	@ (80019f4 <ps_take_reading+0x1c>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20040550 	.word	0x20040550
 80019f4:	2004054c 	.word	0x2004054c

080019f8 <ps_get_reading>:

int ps_get_reading() {
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
	return CURRENT_READING;
 80019fc:	4b03      	ldr	r3, [pc, #12]	@ (8001a0c <ps_get_reading+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	2004054c 	.word	0x2004054c

08001a10 <ps_set_needs_reading>:


// sets whether or not the pressure sensor needs to take a reading
void ps_set_needs_reading(bool val) {
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
	NEEDS_READING = val;
 8001a1a:	4a04      	ldr	r2, [pc, #16]	@ (8001a2c <ps_set_needs_reading+0x1c>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	7013      	strb	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	20040550 	.word	0x20040550

08001a30 <ps_needs_reading>:

// returns whether or not the pressure sensor needs to take a reading
bool ps_needs_reading() {
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
	return NEEDS_READING;
 8001a34:	4b03      	ldr	r3, [pc, #12]	@ (8001a44 <ps_needs_reading+0x14>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20040550 	.word	0x20040550

08001a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	f5ad 6d8d 	sub.w	sp, sp, #1128	@ 0x468
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a50:	f001 fca8 	bl	80033a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a54:	f000 f85c 	bl	8001b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a58:	f000 fb7a 	bl	8002150 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001a5c:	f000 f94e 	bl	8001cfc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001a60:	f000 f998 	bl	8001d94 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001a64:	f006 ffb2 	bl	80089cc <MX_FATFS_Init>
  MX_SPI3_Init();
 8001a68:	f000 f9d2 	bl	8001e10 <MX_SPI3_Init>
  MX_ADC1_Init();
 8001a6c:	f000 f896 	bl	8001b9c <MX_ADC1_Init>
  MX_TIM2_Init();
 8001a70:	f000 fa0c 	bl	8001e8c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001a74:	f000 fa58 	bl	8001f28 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001a78:	f000 faa4 	bl	8001fc4 <MX_TIM5_Init>
  MX_TIM15_Init();
 8001a7c:	f000 faf0 	bl	8002060 <MX_TIM15_Init>
  MX_TIM16_Init();
 8001a80:	f000 fb40 	bl	8002104 <MX_TIM16_Init>
  MX_LPUART1_UART_Init();
 8001a84:	f000 f8ee 	bl	8001c64 <MX_LPUART1_UART_Init>

  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  printf("#########################################################\n\r");
 8001a88:	481d      	ldr	r0, [pc, #116]	@ (8001b00 <main+0xb8>)
 8001a8a:	f00a fbf9 	bl	800c280 <iprintf>
  printf("                INITIALIZING SQURREL FEEDER . . .        \n\r");
 8001a8e:	481d      	ldr	r0, [pc, #116]	@ (8001b04 <main+0xbc>)
 8001a90:	f00a fbf6 	bl	800c280 <iprintf>
  printf("#########################################################\n\r");
 8001a94:	481a      	ldr	r0, [pc, #104]	@ (8001b00 <main+0xb8>)
 8001a96:	f00a fbf3 	bl	800c280 <iprintf>
  printf("\n\r\n\r");
 8001a9a:	481b      	ldr	r0, [pc, #108]	@ (8001b08 <main+0xc0>)
 8001a9c:	f00a fbf0 	bl	800c280 <iprintf>

  fres = f_mount(&FatFs, "", 1); //1=mount now
 8001aa0:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4919      	ldr	r1, [pc, #100]	@ (8001b0c <main+0xc4>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f009 fa17 	bl	800aedc <f_mount>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f887 3467 	strb.w	r3, [r7, #1127]	@ 0x467
  while (fres != FR_OK);
 8001ab4:	bf00      	nop
 8001ab6:	f897 3467 	ldrb.w	r3, [r7, #1127]	@ 0x467
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1fb      	bne.n	8001ab6 <main+0x6e>

  init_peripherals();
 8001abe:	f7ff fb99 	bl	80011f4 <init_peripherals>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (get_feeder()->needs_to_take_picture) {
 8001ac2:	f7ff fcc5 	bl	8001450 <get_feeder>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	7a5b      	ldrb	r3, [r3, #9]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d009      	beq.n	8001ae2 <main+0x9a>
		if (camera_take_photo()) {
 8001ace:	f7ff fa81 	bl	8000fd4 <camera_take_photo>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d004      	beq.n	8001ae2 <main+0x9a>
			get_feeder()->needs_to_take_picture = false;
 8001ad8:	f7ff fcba 	bl	8001450 <get_feeder>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2200      	movs	r2, #0
 8001ae0:	725a      	strb	r2, [r3, #9]
		}
	}

	if (!camera_get_ready()) {
 8001ae2:	f7ff fb7b 	bl	80011dc <camera_get_ready>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <main+0xa8>
		camera_process();
 8001aec:	f7ff fb54 	bl	8001198 <camera_process>
	}

	if (ps_needs_reading()) {
 8001af0:	f7ff ff9e 	bl	8001a30 <ps_needs_reading>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0e3      	beq.n	8001ac2 <main+0x7a>
		ps_take_reading();
 8001afa:	f7ff ff6d 	bl	80019d8 <ps_take_reading>
	if (get_feeder()->needs_to_take_picture) {
 8001afe:	e7e0      	b.n	8001ac2 <main+0x7a>
 8001b00:	0800e7e0 	.word	0x0800e7e0
 8001b04:	0800e81c 	.word	0x0800e81c
 8001b08:	0800e858 	.word	0x0800e858
 8001b0c:	0800e860 	.word	0x0800e860

08001b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b096      	sub	sp, #88	@ 0x58
 8001b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	2244      	movs	r2, #68	@ 0x44
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f00a fc23 	bl	800c36a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b24:	463b      	mov	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b32:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b36:	f003 f863 	bl	8004c00 <HAL_PWREx_ControlVoltageScaling>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b40:	f000 fc68 	bl	8002414 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b44:	2310      	movs	r3, #16
 8001b46:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b50:	2360      	movs	r3, #96	@ 0x60
 8001b52:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 f903 	bl	8004d68 <HAL_RCC_OscConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001b68:	f000 fc54 	bl	8002414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b70:	2300      	movs	r3, #0
 8001b72:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f003 fd09 	bl	800559c <HAL_RCC_ClockConfig>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001b90:	f000 fc40 	bl	8002414 <Error_Handler>
  }
}
 8001b94:	bf00      	nop
 8001b96:	3758      	adds	r7, #88	@ 0x58
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
 8001bb0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bb2:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001bb4:	4a29      	ldr	r2, [pc, #164]	@ (8001c5c <MX_ADC1_Init+0xc0>)
 8001bb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bb8:	4b27      	ldr	r3, [pc, #156]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bbe:	4b26      	ldr	r3, [pc, #152]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bc4:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bca:	4b23      	ldr	r3, [pc, #140]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bd0:	4b21      	ldr	r3, [pc, #132]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bd6:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001be2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bfc:	4b16      	ldr	r3, [pc, #88]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c04:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c12:	4811      	ldr	r0, [pc, #68]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001c14:	f001 fe38 	bl	8003888 <HAL_ADC_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001c1e:	f000 fbf9 	bl	8002414 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <MX_ADC1_Init+0xc4>)
 8001c24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c26:	2306      	movs	r3, #6
 8001c28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c2e:	237f      	movs	r3, #127	@ 0x7f
 8001c30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c32:	2304      	movs	r3, #4
 8001c34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4806      	ldr	r0, [pc, #24]	@ (8001c58 <MX_ADC1_Init+0xbc>)
 8001c40:	f002 f868 	bl	8003d14 <HAL_ADC_ConfigChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001c4a:	f000 fbe3 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20040554 	.word	0x20040554
 8001c5c:	50040000 	.word	0x50040000
 8001c60:	36902000 	.word	0x36902000

08001c64 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001c68:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <MX_LPUART1_UART_Init+0x90>)
 8001c6a:	4a23      	ldr	r2, [pc, #140]	@ (8001cf8 <MX_LPUART1_UART_Init+0x94>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001c6e:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <MX_LPUART1_UART_Init+0x90>)
 8001c70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c74:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c76:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf4 <MX_LPUART1_UART_Init+0x90>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf4 <MX_LPUART1_UART_Init+0x90>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001c82:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf4 <MX_LPUART1_UART_Init+0x90>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001c88:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <MX_LPUART1_UART_Init+0x90>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8e:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <MX_LPUART1_UART_Init+0x90>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c94:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <MX_LPUART1_UART_Init+0x90>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c9a:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <MX_LPUART1_UART_Init+0x90>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca0:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <MX_LPUART1_UART_Init+0x90>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001ca6:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <MX_LPUART1_UART_Init+0x90>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001cac:	4811      	ldr	r0, [pc, #68]	@ (8001cf4 <MX_LPUART1_UART_Init+0x90>)
 8001cae:	f005 fec7 	bl	8007a40 <HAL_UART_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cb8:	f000 fbac 	bl	8002414 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	480d      	ldr	r0, [pc, #52]	@ (8001cf4 <MX_LPUART1_UART_Init+0x90>)
 8001cc0:	f006 fdba 	bl	8008838 <HAL_UARTEx_SetTxFifoThreshold>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001cca:	f000 fba3 	bl	8002414 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4808      	ldr	r0, [pc, #32]	@ (8001cf4 <MX_LPUART1_UART_Init+0x90>)
 8001cd2:	f006 fdef 	bl	80088b4 <HAL_UARTEx_SetRxFifoThreshold>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001cdc:	f000 fb9a 	bl	8002414 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001ce0:	4804      	ldr	r0, [pc, #16]	@ (8001cf4 <MX_LPUART1_UART_Init+0x90>)
 8001ce2:	f006 fd70 	bl	80087c6 <HAL_UARTEx_DisableFifoMode>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001cec:	f000 fb92 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200405bc 	.word	0x200405bc
 8001cf8:	40008000 	.word	0x40008000

08001cfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d00:	4b22      	ldr	r3, [pc, #136]	@ (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d02:	4a23      	ldr	r2, [pc, #140]	@ (8001d90 <MX_USART3_UART_Init+0x94>)
 8001d04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001d06:	4b21      	ldr	r3, [pc, #132]	@ (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d08:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001d0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d20:	4b1a      	ldr	r3, [pc, #104]	@ (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d22:	220c      	movs	r2, #12
 8001d24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d26:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	@ (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d32:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d38:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d44:	4811      	ldr	r0, [pc, #68]	@ (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d46:	f005 fe7b 	bl	8007a40 <HAL_UART_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d50:	f000 fb60 	bl	8002414 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d54:	2100      	movs	r1, #0
 8001d56:	480d      	ldr	r0, [pc, #52]	@ (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d58:	f006 fd6e 	bl	8008838 <HAL_UARTEx_SetTxFifoThreshold>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d62:	f000 fb57 	bl	8002414 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d66:	2100      	movs	r1, #0
 8001d68:	4808      	ldr	r0, [pc, #32]	@ (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d6a:	f006 fda3 	bl	80088b4 <HAL_UARTEx_SetRxFifoThreshold>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001d74:	f000 fb4e 	bl	8002414 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d78:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d7a:	f006 fd24 	bl	80087c6 <HAL_UARTEx_DisableFifoMode>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001d84:	f000 fb46 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20040650 	.word	0x20040650
 8001d90:	40004800 	.word	0x40004800

08001d94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <MX_SPI1_Init+0x74>)
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e0c <MX_SPI1_Init+0x78>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <MX_SPI1_Init+0x74>)
 8001da0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001da4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001da6:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <MX_SPI1_Init+0x74>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dac:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <MX_SPI1_Init+0x74>)
 8001dae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001db2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <MX_SPI1_Init+0x74>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dba:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <MX_SPI1_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <MX_SPI1_Init+0x74>)
 8001dc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <MX_SPI1_Init+0x74>)
 8001dca:	2218      	movs	r2, #24
 8001dcc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	@ (8001e08 <MX_SPI1_Init+0x74>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <MX_SPI1_Init+0x74>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <MX_SPI1_Init+0x74>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001de0:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <MX_SPI1_Init+0x74>)
 8001de2:	2207      	movs	r2, #7
 8001de4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <MX_SPI1_Init+0x74>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dec:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <MX_SPI1_Init+0x74>)
 8001dee:	2208      	movs	r2, #8
 8001df0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001df2:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <MX_SPI1_Init+0x74>)
 8001df4:	f004 fba8 	bl	8006548 <HAL_SPI_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001dfe:	f000 fb09 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200406e4 	.word	0x200406e4
 8001e0c:	40013000 	.word	0x40013000

08001e10 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e14:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <MX_SPI3_Init+0x74>)
 8001e16:	4a1c      	ldr	r2, [pc, #112]	@ (8001e88 <MX_SPI3_Init+0x78>)
 8001e18:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <MX_SPI3_Init+0x74>)
 8001e1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e20:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e22:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <MX_SPI3_Init+0x74>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e28:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <MX_SPI3_Init+0x74>)
 8001e2a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e2e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e30:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <MX_SPI3_Init+0x74>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e36:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <MX_SPI3_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <MX_SPI3_Init+0x74>)
 8001e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e42:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <MX_SPI3_Init+0x74>)
 8001e46:	2228      	movs	r2, #40	@ 0x28
 8001e48:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <MX_SPI3_Init+0x74>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <MX_SPI3_Init+0x74>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e56:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <MX_SPI3_Init+0x74>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <MX_SPI3_Init+0x74>)
 8001e5e:	2207      	movs	r2, #7
 8001e60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <MX_SPI3_Init+0x74>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <MX_SPI3_Init+0x74>)
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e6e:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <MX_SPI3_Init+0x74>)
 8001e70:	f004 fb6a 	bl	8006548 <HAL_SPI_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001e7a:	f000 facb 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20040748 	.word	0x20040748
 8001e88:	40003c00 	.word	0x40003c00

08001e8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e92:	f107 0310 	add.w	r3, r7, #16
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f24 <MX_TIM2_Init+0x98>)
 8001eac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001eb0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f24 <MX_TIM2_Init+0x98>)
 8001eb4:	2247      	movs	r2, #71	@ 0x47
 8001eb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f24 <MX_TIM2_Init+0x98>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001ebe:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <MX_TIM2_Init+0x98>)
 8001ec0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ec4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec6:	4b17      	ldr	r3, [pc, #92]	@ (8001f24 <MX_TIM2_Init+0x98>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ecc:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <MX_TIM2_Init+0x98>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ed2:	4814      	ldr	r0, [pc, #80]	@ (8001f24 <MX_TIM2_Init+0x98>)
 8001ed4:	f005 f8d4 	bl	8007080 <HAL_TIM_Base_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ede:	f000 fa99 	bl	8002414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	4619      	mov	r1, r3
 8001eee:	480d      	ldr	r0, [pc, #52]	@ (8001f24 <MX_TIM2_Init+0x98>)
 8001ef0:	f005 fac4 	bl	800747c <HAL_TIM_ConfigClockSource>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001efa:	f000 fa8b 	bl	8002414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4806      	ldr	r0, [pc, #24]	@ (8001f24 <MX_TIM2_Init+0x98>)
 8001f0c:	f005 fcf2 	bl	80078f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f16:	f000 fa7d 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	3720      	adds	r7, #32
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200407ac 	.word	0x200407ac

08001f28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f46:	4b1d      	ldr	r3, [pc, #116]	@ (8001fbc <MX_TIM4_Init+0x94>)
 8001f48:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc0 <MX_TIM4_Init+0x98>)
 8001f4a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 127;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <MX_TIM4_Init+0x94>)
 8001f4e:	227f      	movs	r2, #127	@ 0x7f
 8001f50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <MX_TIM4_Init+0x94>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 62;
 8001f58:	4b18      	ldr	r3, [pc, #96]	@ (8001fbc <MX_TIM4_Init+0x94>)
 8001f5a:	223e      	movs	r2, #62	@ 0x3e
 8001f5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	@ (8001fbc <MX_TIM4_Init+0x94>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f64:	4b15      	ldr	r3, [pc, #84]	@ (8001fbc <MX_TIM4_Init+0x94>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f6a:	4814      	ldr	r0, [pc, #80]	@ (8001fbc <MX_TIM4_Init+0x94>)
 8001f6c:	f005 f888 	bl	8007080 <HAL_TIM_Base_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001f76:	f000 fa4d 	bl	8002414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	4619      	mov	r1, r3
 8001f86:	480d      	ldr	r0, [pc, #52]	@ (8001fbc <MX_TIM4_Init+0x94>)
 8001f88:	f005 fa78 	bl	800747c <HAL_TIM_ConfigClockSource>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001f92:	f000 fa3f 	bl	8002414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4806      	ldr	r0, [pc, #24]	@ (8001fbc <MX_TIM4_Init+0x94>)
 8001fa4:	f005 fca6 	bl	80078f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001fae:	f000 fa31 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	3720      	adds	r7, #32
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200407f8 	.word	0x200407f8
 8001fc0:	40000800 	.word	0x40000800

08001fc4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fca:	f107 0310 	add.w	r3, r7, #16
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8002058 <MX_TIM5_Init+0x94>)
 8001fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800205c <MX_TIM5_Init+0x98>)
 8001fe6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <MX_TIM5_Init+0x94>)
 8001fea:	220f      	movs	r2, #15
 8001fec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <MX_TIM5_Init+0x94>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001ff4:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <MX_TIM5_Init+0x94>)
 8001ff6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ffa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffc:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <MX_TIM5_Init+0x94>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <MX_TIM5_Init+0x94>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002008:	4813      	ldr	r0, [pc, #76]	@ (8002058 <MX_TIM5_Init+0x94>)
 800200a:	f005 f839 	bl	8007080 <HAL_TIM_Base_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002014:	f000 f9fe 	bl	8002414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800201c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	4619      	mov	r1, r3
 8002024:	480c      	ldr	r0, [pc, #48]	@ (8002058 <MX_TIM5_Init+0x94>)
 8002026:	f005 fa29 	bl	800747c <HAL_TIM_ConfigClockSource>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002030:	f000 f9f0 	bl	8002414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002034:	2300      	movs	r3, #0
 8002036:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	4619      	mov	r1, r3
 8002040:	4805      	ldr	r0, [pc, #20]	@ (8002058 <MX_TIM5_Init+0x94>)
 8002042:	f005 fc57 	bl	80078f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800204c:	f000 f9e2 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	3720      	adds	r7, #32
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20040844 	.word	0x20040844
 800205c:	40000c00 	.word	0x40000c00

08002060 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002066:	f107 0310 	add.w	r3, r7, #16
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800207e:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <MX_TIM15_Init+0x9c>)
 8002080:	4a1f      	ldr	r2, [pc, #124]	@ (8002100 <MX_TIM15_Init+0xa0>)
 8002082:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 255;
 8002084:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <MX_TIM15_Init+0x9c>)
 8002086:	22ff      	movs	r2, #255	@ 0xff
 8002088:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208a:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <MX_TIM15_Init+0x9c>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002090:	4b1a      	ldr	r3, [pc, #104]	@ (80020fc <MX_TIM15_Init+0x9c>)
 8002092:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002096:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002098:	4b18      	ldr	r3, [pc, #96]	@ (80020fc <MX_TIM15_Init+0x9c>)
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800209e:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <MX_TIM15_Init+0x9c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a4:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <MX_TIM15_Init+0x9c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80020aa:	4814      	ldr	r0, [pc, #80]	@ (80020fc <MX_TIM15_Init+0x9c>)
 80020ac:	f004 ffe8 	bl	8007080 <HAL_TIM_Base_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80020b6:	f000 f9ad 	bl	8002414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4619      	mov	r1, r3
 80020c6:	480d      	ldr	r0, [pc, #52]	@ (80020fc <MX_TIM15_Init+0x9c>)
 80020c8:	f005 f9d8 	bl	800747c <HAL_TIM_ConfigClockSource>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80020d2:	f000 f99f 	bl	8002414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	4806      	ldr	r0, [pc, #24]	@ (80020fc <MX_TIM15_Init+0x9c>)
 80020e4:	f005 fc06 	bl	80078f4 <HAL_TIMEx_MasterConfigSynchronization>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80020ee:	f000 f991 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	3720      	adds	r7, #32
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20040890 	.word	0x20040890
 8002100:	40014000 	.word	0x40014000

08002104 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002108:	4b0f      	ldr	r3, [pc, #60]	@ (8002148 <MX_TIM16_Init+0x44>)
 800210a:	4a10      	ldr	r2, [pc, #64]	@ (800214c <MX_TIM16_Init+0x48>)
 800210c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 128;
 800210e:	4b0e      	ldr	r3, [pc, #56]	@ (8002148 <MX_TIM16_Init+0x44>)
 8002110:	2280      	movs	r2, #128	@ 0x80
 8002112:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002114:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <MX_TIM16_Init+0x44>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800211a:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <MX_TIM16_Init+0x44>)
 800211c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002120:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002122:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <MX_TIM16_Init+0x44>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002128:	4b07      	ldr	r3, [pc, #28]	@ (8002148 <MX_TIM16_Init+0x44>)
 800212a:	2200      	movs	r2, #0
 800212c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <MX_TIM16_Init+0x44>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002134:	4804      	ldr	r0, [pc, #16]	@ (8002148 <MX_TIM16_Init+0x44>)
 8002136:	f004 ffa3 	bl	8007080 <HAL_TIM_Base_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002140:	f000 f968 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}
 8002148:	200408dc 	.word	0x200408dc
 800214c:	40014400 	.word	0x40014400

08002150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	@ 0x30
 8002154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002156:	f107 031c 	add.w	r3, r7, #28
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002166:	4b9c      	ldr	r3, [pc, #624]	@ (80023d8 <MX_GPIO_Init+0x288>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216a:	4a9b      	ldr	r2, [pc, #620]	@ (80023d8 <MX_GPIO_Init+0x288>)
 800216c:	f043 0320 	orr.w	r3, r3, #32
 8002170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002172:	4b99      	ldr	r3, [pc, #612]	@ (80023d8 <MX_GPIO_Init+0x288>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	4b96      	ldr	r3, [pc, #600]	@ (80023d8 <MX_GPIO_Init+0x288>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002182:	4a95      	ldr	r2, [pc, #596]	@ (80023d8 <MX_GPIO_Init+0x288>)
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800218a:	4b93      	ldr	r3, [pc, #588]	@ (80023d8 <MX_GPIO_Init+0x288>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	4b90      	ldr	r3, [pc, #576]	@ (80023d8 <MX_GPIO_Init+0x288>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219a:	4a8f      	ldr	r2, [pc, #572]	@ (80023d8 <MX_GPIO_Init+0x288>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a2:	4b8d      	ldr	r3, [pc, #564]	@ (80023d8 <MX_GPIO_Init+0x288>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ae:	4b8a      	ldr	r3, [pc, #552]	@ (80023d8 <MX_GPIO_Init+0x288>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b2:	4a89      	ldr	r2, [pc, #548]	@ (80023d8 <MX_GPIO_Init+0x288>)
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ba:	4b87      	ldr	r3, [pc, #540]	@ (80023d8 <MX_GPIO_Init+0x288>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	4b84      	ldr	r3, [pc, #528]	@ (80023d8 <MX_GPIO_Init+0x288>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ca:	4a83      	ldr	r2, [pc, #524]	@ (80023d8 <MX_GPIO_Init+0x288>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d2:	4b81      	ldr	r3, [pc, #516]	@ (80023d8 <MX_GPIO_Init+0x288>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021de:	4b7e      	ldr	r3, [pc, #504]	@ (80023d8 <MX_GPIO_Init+0x288>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e2:	4a7d      	ldr	r2, [pc, #500]	@ (80023d8 <MX_GPIO_Init+0x288>)
 80021e4:	f043 0308 	orr.w	r3, r3, #8
 80021e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ea:	4b7b      	ldr	r3, [pc, #492]	@ (80023d8 <MX_GPIO_Init+0x288>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021f6:	4b78      	ldr	r3, [pc, #480]	@ (80023d8 <MX_GPIO_Init+0x288>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fa:	4a77      	ldr	r2, [pc, #476]	@ (80023d8 <MX_GPIO_Init+0x288>)
 80021fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002202:	4b75      	ldr	r3, [pc, #468]	@ (80023d8 <MX_GPIO_Init+0x288>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800220e:	f002 fd9b 	bl	8004d48 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PS1_CLK_Pin|M1_2_Pin|M1_3_Pin|LCD_CS_Pin
 8002212:	2200      	movs	r2, #0
 8002214:	f24c 0129 	movw	r1, #49193	@ 0xc029
 8002218:	4870      	ldr	r0, [pc, #448]	@ (80023dc <MX_GPIO_Init+0x28c>)
 800221a:	f002 fcb9 	bl	8004b90 <HAL_GPIO_WritePin>
                          |LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PS0_CLK_Pin|M0_0_Pin|M0_1_Pin|M0_2_Pin
 800221e:	2200      	movs	r2, #0
 8002220:	f641 7102 	movw	r1, #7938	@ 0x1f02
 8002224:	486e      	ldr	r0, [pc, #440]	@ (80023e0 <MX_GPIO_Init+0x290>)
 8002226:	f002 fcb3 	bl	8004b90 <HAL_GPIO_WritePin>
                          |M0_3_Pin|M1_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800222a:	2200      	movs	r2, #0
 800222c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002230:	486c      	ldr	r0, [pc, #432]	@ (80023e4 <MX_GPIO_Init+0x294>)
 8002232:	f002 fcad 	bl	8004b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_CS_Pin|M1_1_Pin, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	f244 0104 	movw	r1, #16388	@ 0x4004
 800223c:	486a      	ldr	r0, [pc, #424]	@ (80023e8 <MX_GPIO_Init+0x298>)
 800223e:	f002 fca7 	bl	8004b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PS1_CLK_Pin M1_2_Pin M1_3_Pin LCD_CS_Pin
                           LCD_DC_Pin */
  GPIO_InitStruct.Pin = PS1_CLK_Pin|M1_2_Pin|M1_3_Pin|LCD_CS_Pin
 8002242:	f24c 0329 	movw	r3, #49193	@ 0xc029
 8002246:	61fb      	str	r3, [r7, #28]
                          |LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002248:	2301      	movs	r3, #1
 800224a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	4619      	mov	r1, r3
 800225a:	4860      	ldr	r0, [pc, #384]	@ (80023dc <MX_GPIO_Init+0x28c>)
 800225c:	f002 faee 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pin : PS1_DATA_Pin */
  GPIO_InitStruct.Pin = PS1_DATA_Pin;
 8002260:	2302      	movs	r3, #2
 8002262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PS1_DATA_GPIO_Port, &GPIO_InitStruct);
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	4619      	mov	r1, r3
 8002272:	485a      	ldr	r0, [pc, #360]	@ (80023dc <MX_GPIO_Init+0x28c>)
 8002274:	f002 fae2 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pins : PS0_CLK_Pin M0_0_Pin M0_1_Pin M0_2_Pin
                           M0_3_Pin M1_0_Pin */
  GPIO_InitStruct.Pin = PS0_CLK_Pin|M0_0_Pin|M0_1_Pin|M0_2_Pin
 8002278:	f641 7302 	movw	r3, #7938	@ 0x1f02
 800227c:	61fb      	str	r3, [r7, #28]
                          |M0_3_Pin|M1_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227e:	2301      	movs	r3, #1
 8002280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800228a:	f107 031c 	add.w	r3, r7, #28
 800228e:	4619      	mov	r1, r3
 8002290:	4853      	ldr	r0, [pc, #332]	@ (80023e0 <MX_GPIO_Init+0x290>)
 8002292:	f002 fad3 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pin : PS0_DATA_Pin */
  GPIO_InitStruct.Pin = PS0_DATA_Pin;
 8002296:	2308      	movs	r3, #8
 8002298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PS0_DATA_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	4619      	mov	r1, r3
 80022a8:	484d      	ldr	r0, [pc, #308]	@ (80023e0 <MX_GPIO_Init+0x290>)
 80022aa:	f002 fac7 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80022ae:	f44f 53fc 	mov.w	r3, #8064	@ 0x1f80
 80022b2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022c0:	2301      	movs	r3, #1
 80022c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c4:	f107 031c 	add.w	r3, r7, #28
 80022c8:	4619      	mov	r1, r3
 80022ca:	4846      	ldr	r0, [pc, #280]	@ (80023e4 <MX_GPIO_Init+0x294>)
 80022cc:	f002 fab6 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80022d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80022e2:	f107 031c 	add.w	r3, r7, #28
 80022e6:	4619      	mov	r1, r3
 80022e8:	483e      	ldr	r0, [pc, #248]	@ (80023e4 <MX_GPIO_Init+0x294>)
 80022ea:	f002 faa7 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80022ee:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80022f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8002300:	2303      	movs	r3, #3
 8002302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002304:	f107 031c 	add.w	r3, r7, #28
 8002308:	4619      	mov	r1, r3
 800230a:	4836      	ldr	r0, [pc, #216]	@ (80023e4 <MX_GPIO_Init+0x294>)
 800230c:	f002 fa96 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002310:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8002314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002322:	230d      	movs	r3, #13
 8002324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4619      	mov	r1, r3
 800232c:	482f      	ldr	r0, [pc, #188]	@ (80023ec <MX_GPIO_Init+0x29c>)
 800232e:	f002 fa85 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin M1_1_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|M1_1_Pin;
 8002332:	f244 0304 	movw	r3, #16388	@ 0x4004
 8002336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002338:	2301      	movs	r3, #1
 800233a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	4619      	mov	r1, r3
 800234a:	4827      	ldr	r0, [pc, #156]	@ (80023e8 <MX_GPIO_Init+0x298>)
 800234c:	f002 fa76 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002350:	2340      	movs	r3, #64	@ 0x40
 8002352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002360:	230d      	movs	r3, #13
 8002362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002364:	f107 031c 	add.w	r3, r7, #28
 8002368:	4619      	mov	r1, r3
 800236a:	481d      	ldr	r0, [pc, #116]	@ (80023e0 <MX_GPIO_Init+0x290>)
 800236c:	f002 fa66 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002380:	2302      	movs	r3, #2
 8002382:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002384:	f107 031c 	add.w	r3, r7, #28
 8002388:	4619      	mov	r1, r3
 800238a:	4815      	ldr	r0, [pc, #84]	@ (80023e0 <MX_GPIO_Init+0x290>)
 800238c:	f002 fa56 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8002390:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239e:	2303      	movs	r3, #3
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023a2:	230a      	movs	r3, #10
 80023a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	4619      	mov	r1, r3
 80023ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023b0:	f002 fa44 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ba:	2300      	movs	r3, #0
 80023bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c2:	f107 031c 	add.w	r3, r7, #28
 80023c6:	4619      	mov	r1, r3
 80023c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023cc:	f002 fa36 	bl	800483c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023d0:	bf00      	nop
 80023d2:	3730      	adds	r7, #48	@ 0x30
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	48001400 	.word	0x48001400
 80023e0:	48000800 	.word	0x48000800
 80023e4:	48001000 	.word	0x48001000
 80023e8:	48000c00 	.word	0x48000c00
 80023ec:	48000400 	.word	0x48000400

080023f0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80023f8:	1d39      	adds	r1, r7, #4
 80023fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023fe:	2201      	movs	r2, #1
 8002400:	4803      	ldr	r0, [pc, #12]	@ (8002410 <__io_putchar+0x20>)
 8002402:	f005 fb6d 	bl	8007ae0 <HAL_UART_Transmit>
  return ch;
 8002406:	687b      	ldr	r3, [r7, #4]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	200405bc 	.word	0x200405bc

08002414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002418:	b672      	cpsid	i
}
 800241a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <Error_Handler+0x8>

08002420 <stepper_rotate_clockwise_ir>:
	{1, 0, 0, 1} };

static bool motor_running = false;
static uint32_t cur_rotation_idx = 0;

void stepper_rotate_clockwise_ir() {
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(M0_0_GPIO_Port, M0_0_Pin, steps[cur_rotation_idx][0]);
 8002424:	4b22      	ldr	r3, [pc, #136]	@ (80024b0 <stepper_rotate_clockwise_ir+0x90>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a22      	ldr	r2, [pc, #136]	@ (80024b4 <stepper_rotate_clockwise_ir+0x94>)
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	4413      	add	r3, r2
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002438:	481f      	ldr	r0, [pc, #124]	@ (80024b8 <stepper_rotate_clockwise_ir+0x98>)
 800243a:	f002 fba9 	bl	8004b90 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(M0_1_GPIO_Port, M0_1_Pin, steps[cur_rotation_idx][1]);
 800243e:	4b1c      	ldr	r3, [pc, #112]	@ (80024b0 <stepper_rotate_clockwise_ir+0x90>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1c      	ldr	r2, [pc, #112]	@ (80024b4 <stepper_rotate_clockwise_ir+0x94>)
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	4413      	add	r3, r2
 8002448:	3304      	adds	r3, #4
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002454:	4818      	ldr	r0, [pc, #96]	@ (80024b8 <stepper_rotate_clockwise_ir+0x98>)
 8002456:	f002 fb9b 	bl	8004b90 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(M0_2_GPIO_Port, M0_2_Pin, steps[cur_rotation_idx][2]);
 800245a:	4b15      	ldr	r3, [pc, #84]	@ (80024b0 <stepper_rotate_clockwise_ir+0x90>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a15      	ldr	r2, [pc, #84]	@ (80024b4 <stepper_rotate_clockwise_ir+0x94>)
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	4413      	add	r3, r2
 8002464:	3308      	adds	r3, #8
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002470:	4811      	ldr	r0, [pc, #68]	@ (80024b8 <stepper_rotate_clockwise_ir+0x98>)
 8002472:	f002 fb8d 	bl	8004b90 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(M0_3_GPIO_Port, M0_3_Pin, steps[cur_rotation_idx][3]);
 8002476:	4b0e      	ldr	r3, [pc, #56]	@ (80024b0 <stepper_rotate_clockwise_ir+0x90>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a0e      	ldr	r2, [pc, #56]	@ (80024b4 <stepper_rotate_clockwise_ir+0x94>)
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	4413      	add	r3, r2
 8002480:	330c      	adds	r3, #12
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800248c:	480a      	ldr	r0, [pc, #40]	@ (80024b8 <stepper_rotate_clockwise_ir+0x98>)
 800248e:	f002 fb7f 	bl	8004b90 <HAL_GPIO_WritePin>

	 // ALSO M1 TODO

	 cur_rotation_idx++;
 8002492:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <stepper_rotate_clockwise_ir+0x90>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3301      	adds	r3, #1
 8002498:	4a05      	ldr	r2, [pc, #20]	@ (80024b0 <stepper_rotate_clockwise_ir+0x90>)
 800249a:	6013      	str	r3, [r2, #0]
	 if (cur_rotation_idx == 8) {
 800249c:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <stepper_rotate_clockwise_ir+0x90>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d102      	bne.n	80024aa <stepper_rotate_clockwise_ir+0x8a>
		 cur_rotation_idx = 0;
 80024a4:	4b02      	ldr	r3, [pc, #8]	@ (80024b0 <stepper_rotate_clockwise_ir+0x90>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
	 }
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2004092c 	.word	0x2004092c
 80024b4:	20040008 	.word	0x20040008
 80024b8:	48000800 	.word	0x48000800

080024bc <motor_start>:
//
//	// enable motor timer interrupt
//	HAL_TIM_Base_Start_IT(&MOTOR_TIMER_HANDLE);
//}

void motor_start() {
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
	if (motor_running) {
 80024c0:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <motor_start+0x20>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d106      	bne.n	80024d6 <motor_start+0x1a>
		return;
	}

	motor_running = true;
 80024c8:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <motor_start+0x20>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&MOTOR_TIMER_HANDLE);
 80024ce:	4804      	ldr	r0, [pc, #16]	@ (80024e0 <motor_start+0x24>)
 80024d0:	f004 fe2e 	bl	8007130 <HAL_TIM_Base_Start_IT>
 80024d4:	e000      	b.n	80024d8 <motor_start+0x1c>
		return;
 80024d6:	bf00      	nop
}
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20040928 	.word	0x20040928
 80024e0:	200407f8 	.word	0x200407f8

080024e4 <motor_stop>:

void motor_stop() {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	if (!motor_running) {
 80024e8:	4b07      	ldr	r3, [pc, #28]	@ (8002508 <motor_stop+0x24>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	f083 0301 	eor.w	r3, r3, #1
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <motor_stop+0x20>
		return;
	}

	motor_running = false;
 80024f6:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <motor_stop+0x24>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&MOTOR_TIMER_HANDLE);
 80024fc:	4803      	ldr	r0, [pc, #12]	@ (800250c <motor_stop+0x28>)
 80024fe:	f004 fe87 	bl	8007210 <HAL_TIM_Base_Stop_IT>
 8002502:	e000      	b.n	8002506 <motor_stop+0x22>
		return;
 8002504:	bf00      	nop
}
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20040928 	.word	0x20040928
 800250c:	200407f8 	.word	0x200407f8

08002510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <HAL_MspInit+0x44>)
 8002518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251a:	4a0e      	ldr	r2, [pc, #56]	@ (8002554 <HAL_MspInit+0x44>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6613      	str	r3, [r2, #96]	@ 0x60
 8002522:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <HAL_MspInit+0x44>)
 8002524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <HAL_MspInit+0x44>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002532:	4a08      	ldr	r2, [pc, #32]	@ (8002554 <HAL_MspInit+0x44>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002538:	6593      	str	r3, [r2, #88]	@ 0x58
 800253a:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_MspInit+0x44>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000

08002558 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b0b0      	sub	sp, #192	@ 0xc0
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002570:	f107 0318 	add.w	r3, r7, #24
 8002574:	2294      	movs	r2, #148	@ 0x94
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f009 fef6 	bl	800c36a <memset>
  if(hadc->Instance==ADC1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a35      	ldr	r2, [pc, #212]	@ (8002658 <HAL_ADC_MspInit+0x100>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d162      	bne.n	800264e <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002588:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800258c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800258e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002592:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002596:	2301      	movs	r3, #1
 8002598:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800259a:	2301      	movs	r3, #1
 800259c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800259e:	2310      	movs	r3, #16
 80025a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80025a2:	2302      	movs	r3, #2
 80025a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80025a6:	2302      	movs	r3, #2
 80025a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80025aa:	2302      	movs	r3, #2
 80025ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80025ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025b2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025b4:	f107 0318 	add.w	r3, r7, #24
 80025b8:	4618      	mov	r0, r3
 80025ba:	f003 faad 	bl	8005b18 <HAL_RCCEx_PeriphCLKConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80025c4:	f7ff ff26 	bl	8002414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80025c8:	4b24      	ldr	r3, [pc, #144]	@ (800265c <HAL_ADC_MspInit+0x104>)
 80025ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025cc:	4a23      	ldr	r2, [pc, #140]	@ (800265c <HAL_ADC_MspInit+0x104>)
 80025ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025d4:	4b21      	ldr	r3, [pc, #132]	@ (800265c <HAL_ADC_MspInit+0x104>)
 80025d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e0:	4b1e      	ldr	r3, [pc, #120]	@ (800265c <HAL_ADC_MspInit+0x104>)
 80025e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e4:	4a1d      	ldr	r2, [pc, #116]	@ (800265c <HAL_ADC_MspInit+0x104>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ec:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <HAL_ADC_MspInit+0x104>)
 80025ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f8:	4b18      	ldr	r3, [pc, #96]	@ (800265c <HAL_ADC_MspInit+0x104>)
 80025fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fc:	4a17      	ldr	r2, [pc, #92]	@ (800265c <HAL_ADC_MspInit+0x104>)
 80025fe:	f043 0304 	orr.w	r3, r3, #4
 8002602:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002604:	4b15      	ldr	r3, [pc, #84]	@ (800265c <HAL_ADC_MspInit+0x104>)
 8002606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002610:	2308      	movs	r3, #8
 8002612:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002616:	230b      	movs	r3, #11
 8002618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002626:	4619      	mov	r1, r3
 8002628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800262c:	f002 f906 	bl	800483c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IR0_ADC_Pin|IR1_ADC_Pin;
 8002630:	2330      	movs	r3, #48	@ 0x30
 8002632:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002636:	230b      	movs	r3, #11
 8002638:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002642:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002646:	4619      	mov	r1, r3
 8002648:	4805      	ldr	r0, [pc, #20]	@ (8002660 <HAL_ADC_MspInit+0x108>)
 800264a:	f002 f8f7 	bl	800483c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800264e:	bf00      	nop
 8002650:	37c0      	adds	r7, #192	@ 0xc0
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	50040000 	.word	0x50040000
 800265c:	40021000 	.word	0x40021000
 8002660:	48000800 	.word	0x48000800

08002664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b0b0      	sub	sp, #192	@ 0xc0
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800267c:	f107 0318 	add.w	r3, r7, #24
 8002680:	2294      	movs	r2, #148	@ 0x94
 8002682:	2100      	movs	r1, #0
 8002684:	4618      	mov	r0, r3
 8002686:	f009 fe70 	bl	800c36a <memset>
  if(huart->Instance==LPUART1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a43      	ldr	r2, [pc, #268]	@ (800279c <HAL_UART_MspInit+0x138>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d13e      	bne.n	8002712 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002694:	2320      	movs	r3, #32
 8002696:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002698:	2300      	movs	r3, #0
 800269a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800269c:	f107 0318 	add.w	r3, r7, #24
 80026a0:	4618      	mov	r0, r3
 80026a2:	f003 fa39 	bl	8005b18 <HAL_RCCEx_PeriphCLKConfig>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026ac:	f7ff feb2 	bl	8002414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80026b0:	4b3b      	ldr	r3, [pc, #236]	@ (80027a0 <HAL_UART_MspInit+0x13c>)
 80026b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b4:	4a3a      	ldr	r2, [pc, #232]	@ (80027a0 <HAL_UART_MspInit+0x13c>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80026bc:	4b38      	ldr	r3, [pc, #224]	@ (80027a0 <HAL_UART_MspInit+0x13c>)
 80026be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026c8:	4b35      	ldr	r3, [pc, #212]	@ (80027a0 <HAL_UART_MspInit+0x13c>)
 80026ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026cc:	4a34      	ldr	r2, [pc, #208]	@ (80027a0 <HAL_UART_MspInit+0x13c>)
 80026ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d4:	4b32      	ldr	r3, [pc, #200]	@ (80027a0 <HAL_UART_MspInit+0x13c>)
 80026d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80026e0:	f002 fb32 	bl	8004d48 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80026e4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80026e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	2302      	movs	r3, #2
 80026ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f8:	2303      	movs	r3, #3
 80026fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80026fe:	2308      	movs	r3, #8
 8002700:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002704:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002708:	4619      	mov	r1, r3
 800270a:	4826      	ldr	r0, [pc, #152]	@ (80027a4 <HAL_UART_MspInit+0x140>)
 800270c:	f002 f896 	bl	800483c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002710:	e040      	b.n	8002794 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a24      	ldr	r2, [pc, #144]	@ (80027a8 <HAL_UART_MspInit+0x144>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d13b      	bne.n	8002794 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800271c:	2304      	movs	r3, #4
 800271e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002720:	2300      	movs	r3, #0
 8002722:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002724:	f107 0318 	add.w	r3, r7, #24
 8002728:	4618      	mov	r0, r3
 800272a:	f003 f9f5 	bl	8005b18 <HAL_RCCEx_PeriphCLKConfig>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002734:	f7ff fe6e 	bl	8002414 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002738:	4b19      	ldr	r3, [pc, #100]	@ (80027a0 <HAL_UART_MspInit+0x13c>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273c:	4a18      	ldr	r2, [pc, #96]	@ (80027a0 <HAL_UART_MspInit+0x13c>)
 800273e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002742:	6593      	str	r3, [r2, #88]	@ 0x58
 8002744:	4b16      	ldr	r3, [pc, #88]	@ (80027a0 <HAL_UART_MspInit+0x13c>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002748:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002750:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <HAL_UART_MspInit+0x13c>)
 8002752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002754:	4a12      	ldr	r2, [pc, #72]	@ (80027a0 <HAL_UART_MspInit+0x13c>)
 8002756:	f043 0308 	orr.w	r3, r3, #8
 800275a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800275c:	4b10      	ldr	r3, [pc, #64]	@ (80027a0 <HAL_UART_MspInit+0x13c>)
 800275e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CAM_TX_Pin|CAM_RX_Pin;
 8002768:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800276c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002782:	2307      	movs	r3, #7
 8002784:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002788:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800278c:	4619      	mov	r1, r3
 800278e:	4807      	ldr	r0, [pc, #28]	@ (80027ac <HAL_UART_MspInit+0x148>)
 8002790:	f002 f854 	bl	800483c <HAL_GPIO_Init>
}
 8002794:	bf00      	nop
 8002796:	37c0      	adds	r7, #192	@ 0xc0
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40008000 	.word	0x40008000
 80027a0:	40021000 	.word	0x40021000
 80027a4:	48001800 	.word	0x48001800
 80027a8:	40004800 	.word	0x40004800
 80027ac:	48000c00 	.word	0x48000c00

080027b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	@ 0x30
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002888 <HAL_SPI_MspInit+0xd8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d129      	bne.n	8002826 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027d2:	4b2e      	ldr	r3, [pc, #184]	@ (800288c <HAL_SPI_MspInit+0xdc>)
 80027d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d6:	4a2d      	ldr	r2, [pc, #180]	@ (800288c <HAL_SPI_MspInit+0xdc>)
 80027d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80027de:	4b2b      	ldr	r3, [pc, #172]	@ (800288c <HAL_SPI_MspInit+0xdc>)
 80027e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027e6:	61bb      	str	r3, [r7, #24]
 80027e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ea:	4b28      	ldr	r3, [pc, #160]	@ (800288c <HAL_SPI_MspInit+0xdc>)
 80027ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ee:	4a27      	ldr	r2, [pc, #156]	@ (800288c <HAL_SPI_MspInit+0xdc>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027f6:	4b25      	ldr	r3, [pc, #148]	@ (800288c <HAL_SPI_MspInit+0xdc>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002802:	23e0      	movs	r3, #224	@ 0xe0
 8002804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280e:	2303      	movs	r3, #3
 8002810:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002812:	2305      	movs	r3, #5
 8002814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002816:	f107 031c 	add.w	r3, r7, #28
 800281a:	4619      	mov	r1, r3
 800281c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002820:	f002 f80c 	bl	800483c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002824:	e02c      	b.n	8002880 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a19      	ldr	r2, [pc, #100]	@ (8002890 <HAL_SPI_MspInit+0xe0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d127      	bne.n	8002880 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002830:	4b16      	ldr	r3, [pc, #88]	@ (800288c <HAL_SPI_MspInit+0xdc>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002834:	4a15      	ldr	r2, [pc, #84]	@ (800288c <HAL_SPI_MspInit+0xdc>)
 8002836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800283a:	6593      	str	r3, [r2, #88]	@ 0x58
 800283c:	4b13      	ldr	r3, [pc, #76]	@ (800288c <HAL_SPI_MspInit+0xdc>)
 800283e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002840:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002848:	4b10      	ldr	r3, [pc, #64]	@ (800288c <HAL_SPI_MspInit+0xdc>)
 800284a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284c:	4a0f      	ldr	r2, [pc, #60]	@ (800288c <HAL_SPI_MspInit+0xdc>)
 800284e:	f043 0302 	orr.w	r3, r3, #2
 8002852:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002854:	4b0d      	ldr	r3, [pc, #52]	@ (800288c <HAL_SPI_MspInit+0xdc>)
 8002856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8002860:	2328      	movs	r3, #40	@ 0x28
 8002862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286c:	2303      	movs	r3, #3
 800286e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002870:	2306      	movs	r3, #6
 8002872:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002874:	f107 031c 	add.w	r3, r7, #28
 8002878:	4619      	mov	r1, r3
 800287a:	4806      	ldr	r0, [pc, #24]	@ (8002894 <HAL_SPI_MspInit+0xe4>)
 800287c:	f001 ffde 	bl	800483c <HAL_GPIO_Init>
}
 8002880:	bf00      	nop
 8002882:	3730      	adds	r7, #48	@ 0x30
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40013000 	.word	0x40013000
 800288c:	40021000 	.word	0x40021000
 8002890:	40003c00 	.word	0x40003c00
 8002894:	48000400 	.word	0x48000400

08002898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b090      	sub	sp, #64	@ 0x40
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b8:	d129      	bne.n	800290e <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ba:	4b67      	ldr	r3, [pc, #412]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 80028bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028be:	4a66      	ldr	r2, [pc, #408]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80028c6:	4b64      	ldr	r3, [pc, #400]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d2:	4b61      	ldr	r3, [pc, #388]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 80028d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d6:	4a60      	ldr	r2, [pc, #384]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 80028d8:	f043 0302 	orr.w	r3, r3, #2
 80028dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028de:	4b5e      	ldr	r3, [pc, #376]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028fc:	2301      	movs	r3, #1
 80028fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002900:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002904:	4619      	mov	r1, r3
 8002906:	4855      	ldr	r0, [pc, #340]	@ (8002a5c <HAL_TIM_Base_MspInit+0x1c4>)
 8002908:	f001 ff98 	bl	800483c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800290c:	e0a0      	b.n	8002a50 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM4)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a53      	ldr	r2, [pc, #332]	@ (8002a60 <HAL_TIM_Base_MspInit+0x1c8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d131      	bne.n	800297c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002918:	4b4f      	ldr	r3, [pc, #316]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 800291a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291c:	4a4e      	ldr	r2, [pc, #312]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6593      	str	r3, [r2, #88]	@ 0x58
 8002924:	4b4c      	ldr	r3, [pc, #304]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	623b      	str	r3, [r7, #32]
 800292e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002930:	4b49      	ldr	r3, [pc, #292]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002934:	4a48      	ldr	r2, [pc, #288]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800293c:	4b46      	ldr	r3, [pc, #280]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 800293e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002948:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800294c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	2300      	movs	r3, #0
 8002958:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800295a:	2302      	movs	r3, #2
 800295c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800295e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002962:	4619      	mov	r1, r3
 8002964:	483f      	ldr	r0, [pc, #252]	@ (8002a64 <HAL_TIM_Base_MspInit+0x1cc>)
 8002966:	f001 ff69 	bl	800483c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	201e      	movs	r0, #30
 8002970:	f001 ff2d 	bl	80047ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002974:	201e      	movs	r0, #30
 8002976:	f001 ff46 	bl	8004806 <HAL_NVIC_EnableIRQ>
}
 800297a:	e069      	b.n	8002a50 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM5)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a39      	ldr	r2, [pc, #228]	@ (8002a68 <HAL_TIM_Base_MspInit+0x1d0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d114      	bne.n	80029b0 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002986:	4b34      	ldr	r3, [pc, #208]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298a:	4a33      	ldr	r2, [pc, #204]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	6593      	str	r3, [r2, #88]	@ 0x58
 8002992:	4b31      	ldr	r3, [pc, #196]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	61bb      	str	r3, [r7, #24]
 800299c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	2032      	movs	r0, #50	@ 0x32
 80029a4:	f001 ff13 	bl	80047ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80029a8:	2032      	movs	r0, #50	@ 0x32
 80029aa:	f001 ff2c 	bl	8004806 <HAL_NVIC_EnableIRQ>
}
 80029ae:	e04f      	b.n	8002a50 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM15)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a2d      	ldr	r2, [pc, #180]	@ (8002a6c <HAL_TIM_Base_MspInit+0x1d4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d131      	bne.n	8002a1e <HAL_TIM_Base_MspInit+0x186>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80029ba:	4b27      	ldr	r3, [pc, #156]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 80029bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029be:	4a26      	ldr	r2, [pc, #152]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80029c6:	4b24      	ldr	r3, [pc, #144]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 80029c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d2:	4b21      	ldr	r3, [pc, #132]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 80029d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d6:	4a20      	ldr	r2, [pc, #128]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029de:	4b1e      	ldr	r3, [pc, #120]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80029ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f8:	2300      	movs	r3, #0
 80029fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80029fc:	230e      	movs	r3, #14
 80029fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a04:	4619      	mov	r1, r3
 8002a06:	4815      	ldr	r0, [pc, #84]	@ (8002a5c <HAL_TIM_Base_MspInit+0x1c4>)
 8002a08:	f001 ff18 	bl	800483c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2100      	movs	r1, #0
 8002a10:	2018      	movs	r0, #24
 8002a12:	f001 fedc 	bl	80047ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002a16:	2018      	movs	r0, #24
 8002a18:	f001 fef5 	bl	8004806 <HAL_NVIC_EnableIRQ>
}
 8002a1c:	e018      	b.n	8002a50 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM16)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a13      	ldr	r2, [pc, #76]	@ (8002a70 <HAL_TIM_Base_MspInit+0x1d8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d113      	bne.n	8002a50 <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a32:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a34:	4b08      	ldr	r3, [pc, #32]	@ (8002a58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002a40:	2200      	movs	r2, #0
 8002a42:	2100      	movs	r1, #0
 8002a44:	2019      	movs	r0, #25
 8002a46:	f001 fec2 	bl	80047ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a4a:	2019      	movs	r0, #25
 8002a4c:	f001 fedb 	bl	8004806 <HAL_NVIC_EnableIRQ>
}
 8002a50:	bf00      	nop
 8002a52:	3740      	adds	r7, #64	@ 0x40
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	48000400 	.word	0x48000400
 8002a60:	40000800 	.word	0x40000800
 8002a64:	48000c00 	.word	0x48000c00
 8002a68:	40000c00 	.word	0x40000c00
 8002a6c:	40014000 	.word	0x40014000
 8002a70:	40014400 	.word	0x40014400

08002a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a78:	bf00      	nop
 8002a7a:	e7fd      	b.n	8002a78 <NMI_Handler+0x4>

08002a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a80:	bf00      	nop
 8002a82:	e7fd      	b.n	8002a80 <HardFault_Handler+0x4>

08002a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <MemManage_Handler+0x4>

08002a8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a90:	bf00      	nop
 8002a92:	e7fd      	b.n	8002a90 <BusFault_Handler+0x4>

08002a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <UsageFault_Handler+0x4>

08002a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aca:	f000 fcbf 	bl	800344c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002ad8:	4803      	ldr	r0, [pc, #12]	@ (8002ae8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002ada:	f004 fbc8 	bl	800726e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  lcd_isr();
 8002ade:	f7fe fe93 	bl	8001808 <lcd_isr>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20040890 	.word	0x20040890

08002aec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002af0:	4803      	ldr	r0, [pc, #12]	@ (8002b00 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002af2:	f004 fbbc 	bl	800726e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  main_isr();
 8002af6:	f7fe fba1 	bl	800123c <main_isr>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200408dc 	.word	0x200408dc

08002b04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b08:	4803      	ldr	r0, [pc, #12]	@ (8002b18 <TIM4_IRQHandler+0x14>)
 8002b0a:	f004 fbb0 	bl	800726e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  stepper_rotate_clockwise_ir();
 8002b0e:	f7ff fc87 	bl	8002420 <stepper_rotate_clockwise_ir>

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200407f8 	.word	0x200407f8

08002b1c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002b20:	4804      	ldr	r0, [pc, #16]	@ (8002b34 <TIM5_IRQHandler+0x18>)
 8002b22:	f004 fba4 	bl	800726e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  ir_sensor_interrupt_routine();
 8002b26:	f7fe fd01 	bl	800152c <ir_sensor_interrupt_routine>
  ps_set_needs_reading(true);
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	f7fe ff70 	bl	8001a10 <ps_set_needs_reading>
//  ps_isr();

  /* USER CODE END TIM5_IRQn 1 */
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20040844 	.word	0x20040844

08002b38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return 1;
 8002b3c:	2301      	movs	r3, #1
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <_kill>:

int _kill(int pid, int sig)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b52:	f009 fc5d 	bl	800c410 <__errno>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2216      	movs	r2, #22
 8002b5a:	601a      	str	r2, [r3, #0]
  return -1;
 8002b5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <_exit>:

void _exit (int status)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b70:	f04f 31ff 	mov.w	r1, #4294967295
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff ffe7 	bl	8002b48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b7a:	bf00      	nop
 8002b7c:	e7fd      	b.n	8002b7a <_exit+0x12>

08002b7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b086      	sub	sp, #24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	e00a      	b.n	8002ba6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b90:	f3af 8000 	nop.w
 8002b94:	4601      	mov	r1, r0
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	60ba      	str	r2, [r7, #8]
 8002b9c:	b2ca      	uxtb	r2, r1
 8002b9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	dbf0      	blt.n	8002b90 <_read+0x12>
  }

  return len;
 8002bae:	687b      	ldr	r3, [r7, #4]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	e009      	b.n	8002bde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	60ba      	str	r2, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fc0c 	bl	80023f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	dbf1      	blt.n	8002bca <_write+0x12>
  }
  return len;
 8002be6:	687b      	ldr	r3, [r7, #4]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_close>:

int _close(int file)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c18:	605a      	str	r2, [r3, #4]
  return 0;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <_isatty>:

int _isatty(int file)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c30:	2301      	movs	r3, #1
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c60:	4a14      	ldr	r2, [pc, #80]	@ (8002cb4 <_sbrk+0x5c>)
 8002c62:	4b15      	ldr	r3, [pc, #84]	@ (8002cb8 <_sbrk+0x60>)
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c6c:	4b13      	ldr	r3, [pc, #76]	@ (8002cbc <_sbrk+0x64>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c74:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <_sbrk+0x64>)
 8002c76:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <_sbrk+0x68>)
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c7a:	4b10      	ldr	r3, [pc, #64]	@ (8002cbc <_sbrk+0x64>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d207      	bcs.n	8002c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c88:	f009 fbc2 	bl	800c410 <__errno>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	220c      	movs	r2, #12
 8002c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
 8002c96:	e009      	b.n	8002cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c98:	4b08      	ldr	r3, [pc, #32]	@ (8002cbc <_sbrk+0x64>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c9e:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <_sbrk+0x64>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	4a05      	ldr	r2, [pc, #20]	@ (8002cbc <_sbrk+0x64>)
 8002ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002caa:	68fb      	ldr	r3, [r7, #12]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	200a0000 	.word	0x200a0000
 8002cb8:	00000400 	.word	0x00000400
 8002cbc:	20040930 	.word	0x20040930
 8002cc0:	20040ad0 	.word	0x20040ad0

08002cc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002cc8:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <SystemInit+0x20>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cce:	4a05      	ldr	r2, [pc, #20]	@ (8002ce4 <SystemInit+0x20>)
 8002cd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <VC0706_SendCommand>:
/* VC0706_SendCommand
 * cmd - one of the command a data bytes
 * params - array of additional command bytes
 * params_len - length of parameters array
 */
void VC0706_SendCommand(uint8_t cmd, uint8_t *params, uint8_t params_len) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	6039      	str	r1, [r7, #0]
 8002cf2:	71fb      	strb	r3, [r7, #7]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[16];

    /*
     * Universal Command Prefix
     */
    buffer[0] = VC0706_CMD_PREFIX;
 8002cf8:	2356      	movs	r3, #86	@ 0x56
 8002cfa:	733b      	strb	r3, [r7, #12]
    buffer[1] = VC0706_SERIAL_NUM;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	737b      	strb	r3, [r7, #13]

    // Insert the command ID byte
    buffer[2] = cmd;
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	73bb      	strb	r3, [r7, #14]

    /*
     * Copy params into command buffer
     */
    for (uint8_t i = 0; i < params_len; i++) {
 8002d04:	2300      	movs	r3, #0
 8002d06:	77fb      	strb	r3, [r7, #31]
 8002d08:	e00c      	b.n	8002d24 <VC0706_SendCommand+0x3c>
        buffer[3 + i] = params[i];
 8002d0a:	7ffb      	ldrb	r3, [r7, #31]
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	441a      	add	r2, r3
 8002d10:	7ffb      	ldrb	r3, [r7, #31]
 8002d12:	3303      	adds	r3, #3
 8002d14:	7812      	ldrb	r2, [r2, #0]
 8002d16:	3320      	adds	r3, #32
 8002d18:	443b      	add	r3, r7
 8002d1a:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < params_len; i++) {
 8002d1e:	7ffb      	ldrb	r3, [r7, #31]
 8002d20:	3301      	adds	r3, #1
 8002d22:	77fb      	strb	r3, [r7, #31]
 8002d24:	7ffa      	ldrb	r2, [r7, #31]
 8002d26:	79bb      	ldrb	r3, [r7, #6]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d3ee      	bcc.n	8002d0a <VC0706_SendCommand+0x22>
    }

    HAL_UART_Transmit(&CAM_UART_HANDLE, buffer, 3 + params_len, HAL_MAX_DELAY);
 8002d2c:	79bb      	ldrb	r3, [r7, #6]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3303      	adds	r3, #3
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	f107 010c 	add.w	r1, r7, #12
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3c:	4803      	ldr	r0, [pc, #12]	@ (8002d4c <VC0706_SendCommand+0x64>)
 8002d3e:	f004 fecf 	bl	8007ae0 <HAL_UART_Transmit>
}
 8002d42:	bf00      	nop
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20040650 	.word	0x20040650

08002d50 <VC0706_TakePhoto>:

/* VC0706_TakePhoto
 *
 * Sends take photo command and verifies response ACK
 */
uint8_t VC0706_TakePhoto(void) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
    uint8_t takePhotoCommand[] = {0x01, 0x00}; // Parameters for taking a photo
 8002d56:	2301      	movs	r3, #1
 8002d58:	81bb      	strh	r3, [r7, #12]
    VC0706_SendCommand(VC0706_CMD_TAKE_PHOTO, takePhotoCommand, sizeof(takePhotoCommand));
 8002d5a:	f107 030c 	add.w	r3, r7, #12
 8002d5e:	2202      	movs	r2, #2
 8002d60:	4619      	mov	r1, r3
 8002d62:	2036      	movs	r0, #54	@ 0x36
 8002d64:	f7ff ffc0 	bl	8002ce8 <VC0706_SendCommand>

    // response array
    uint8_t response[5]={0};
 8002d68:	2300      	movs	r3, #0
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	723b      	strb	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT); // 1-second timeout
 8002d70:	1d39      	adds	r1, r7, #4
 8002d72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d76:	2205      	movs	r2, #5
 8002d78:	4810      	ldr	r0, [pc, #64]	@ (8002dbc <VC0706_TakePhoto+0x6c>)
 8002d7a:	f004 ff3f 	bl	8007bfc <HAL_UART_Receive>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <VC0706_TakePhoto+0x3c>
        // Timeout or error occurred, handle accordingly
        return 0; // Indicate failure to receive acknowledgment
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e012      	b.n	8002db2 <VC0706_TakePhoto+0x62>
    }

    // Check if the received response is as expected: 0x76 0x00 0x36 0x00 0x00
    return response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00;
 8002d8c:	793b      	ldrb	r3, [r7, #4]
 8002d8e:	2b76      	cmp	r3, #118	@ 0x76
 8002d90:	d10d      	bne.n	8002dae <VC0706_TakePhoto+0x5e>
 8002d92:	797b      	ldrb	r3, [r7, #5]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <VC0706_TakePhoto+0x5e>
 8002d98:	79bb      	ldrb	r3, [r7, #6]
 8002d9a:	2b36      	cmp	r3, #54	@ 0x36
 8002d9c:	d107      	bne.n	8002dae <VC0706_TakePhoto+0x5e>
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d104      	bne.n	8002dae <VC0706_TakePhoto+0x5e>
 8002da4:	7a3b      	ldrb	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <VC0706_TakePhoto+0x5e>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <VC0706_TakePhoto+0x60>
 8002dae:	2300      	movs	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20040650 	.word	0x20040650

08002dc0 <VC0706_StopCapture>:

/* VC0706_StopCapture
 * Sends the stop capture command, and verifies the ack
 *
 */
uint8_t VC0706_StopCapture(void) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
    uint8_t stopCaptureCommand[] = {0x01, 0x03};
 8002dc6:	f240 3301 	movw	r3, #769	@ 0x301
 8002dca:	81bb      	strh	r3, [r7, #12]
    uint8_t response[5] = {0}; // Expected response: 0x76 0x00 0x36 0x00 0x00
 8002dcc:	2300      	movs	r3, #0
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	723b      	strb	r3, [r7, #8]

    // Send the Stop Capture command
    VC0706_SendCommand(VC0706_CMD_STOP_CAPTURE, stopCaptureCommand, sizeof(stopCaptureCommand));
 8002dd4:	f107 030c 	add.w	r3, r7, #12
 8002dd8:	2202      	movs	r2, #2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	2036      	movs	r0, #54	@ 0x36
 8002dde:	f7ff ff83 	bl	8002ce8 <VC0706_SendCommand>

    // Receive the response
    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT);
 8002de2:	1d39      	adds	r1, r7, #4
 8002de4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002de8:	2205      	movs	r2, #5
 8002dea:	480f      	ldr	r0, [pc, #60]	@ (8002e28 <VC0706_StopCapture+0x68>)
 8002dec:	f004 ff06 	bl	8007bfc <HAL_UART_Receive>
 8002df0:	4603      	mov	r3, r0
 8002df2:	73fb      	strb	r3, [r7, #15]

    // Check if the response is as expected
    return (status == HAL_OK) && (response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00);
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d110      	bne.n	8002e1c <VC0706_StopCapture+0x5c>
 8002dfa:	793b      	ldrb	r3, [r7, #4]
 8002dfc:	2b76      	cmp	r3, #118	@ 0x76
 8002dfe:	d10d      	bne.n	8002e1c <VC0706_StopCapture+0x5c>
 8002e00:	797b      	ldrb	r3, [r7, #5]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10a      	bne.n	8002e1c <VC0706_StopCapture+0x5c>
 8002e06:	79bb      	ldrb	r3, [r7, #6]
 8002e08:	2b36      	cmp	r3, #54	@ 0x36
 8002e0a:	d107      	bne.n	8002e1c <VC0706_StopCapture+0x5c>
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d104      	bne.n	8002e1c <VC0706_StopCapture+0x5c>
 8002e12:	7a3b      	ldrb	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <VC0706_StopCapture+0x5c>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <VC0706_StopCapture+0x5e>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20040650 	.word	0x20040650

08002e2c <VC0706_ReadImageDataLength>:
 *
 * Sends read image data length command returns correctly formated uint16_t containing
 * the length of the most recently taken image in bytes
 *
 */
uint16_t VC0706_ReadImageDataLength(void) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
	uint8_t read_image_len_cmd[] = {0x01, 0x00};
 8002e32:	2301      	movs	r3, #1
 8002e34:	823b      	strh	r3, [r7, #16]
	VC0706_SendCommand(VC0706_CMD_READ_DATA_LEN, read_image_len_cmd, sizeof(read_image_len_cmd));
 8002e36:	f107 0310 	add.w	r3, r7, #16
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	2034      	movs	r0, #52	@ 0x34
 8002e40:	f7ff ff52 	bl	8002ce8 <VC0706_SendCommand>

	uint8_t response[9]; // repsonse buffer
	HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT);
 8002e44:	1d39      	adds	r1, r7, #4
 8002e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e4a:	2209      	movs	r2, #9
 8002e4c:	480b      	ldr	r0, [pc, #44]	@ (8002e7c <VC0706_ReadImageDataLength+0x50>)
 8002e4e:	f004 fed5 	bl	8007bfc <HAL_UART_Receive>
 8002e52:	4603      	mov	r3, r0
 8002e54:	75fb      	strb	r3, [r7, #23]


    if (status != HAL_OK) {
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <VC0706_ReadImageDataLength+0x34>
    	return 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e008      	b.n	8002e72 <VC0706_ReadImageDataLength+0x46>
    }

    uint16_t image_len = (response[7] << 8) | response[8];
 8002e60:	7afb      	ldrb	r3, [r7, #11]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	7b3b      	ldrb	r3, [r7, #12]
 8002e68:	b21b      	sxth	r3, r3
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	b21b      	sxth	r3, r3
 8002e6e:	82bb      	strh	r3, [r7, #20]

    return image_len;
 8002e70:	8abb      	ldrh	r3, [r7, #20]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20040650 	.word	0x20040650

08002e80 <VC0706_ReadImageBlock>:
/* VC0706_ReadImageBlock
 * Sends the read image command, and then receives one block of image data into the provided buffer
 *
 * feeds the entire response into the image_buffer, which is at least 42 bytes
 */
uint8_t VC0706_ReadImageBlock(uint8_t *image_buffer, uint32_t start_address) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
    uint8_t readCommand[13];

    readCommand[0] = 0x0C;
 8002e8a:	230c      	movs	r3, #12
 8002e8c:	723b      	strb	r3, [r7, #8]
    readCommand[1] = 0x00;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	727b      	strb	r3, [r7, #9]
    readCommand[2] = 0x0A; // was 0D
 8002e92:	230a      	movs	r3, #10
 8002e94:	72bb      	strb	r3, [r7, #10]
    readCommand[3] = 0x00;
 8002e96:	2300      	movs	r3, #0
 8002e98:	72fb      	strb	r3, [r7, #11]
    readCommand[4] = 0x00;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	733b      	strb	r3, [r7, #12]

    readCommand[5] = (start_address >> 8) & 0xFF;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	737b      	strb	r3, [r7, #13]
    readCommand[6] = start_address & 0xFF;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	73bb      	strb	r3, [r7, #14]

    readCommand[7] = 0x00;
 8002eac:	2300      	movs	r3, #0
 8002eae:	73fb      	strb	r3, [r7, #15]
    readCommand[8] = 0x00;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	743b      	strb	r3, [r7, #16]

    readCommand[9] = 0x00;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	747b      	strb	r3, [r7, #17]
    readCommand[10] = 0x20;
 8002eb8:	2320      	movs	r3, #32
 8002eba:	74bb      	strb	r3, [r7, #18]

    readCommand[11] = 0x00;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	74fb      	strb	r3, [r7, #19]
    readCommand[12] = 0xFF;
 8002ec0:	23ff      	movs	r3, #255	@ 0xff
 8002ec2:	753b      	strb	r3, [r7, #20]

    VC0706_SendCommand(VC0706_CMD_READ_DATA, readCommand, sizeof(readCommand));
 8002ec4:	f107 0308 	add.w	r3, r7, #8
 8002ec8:	220d      	movs	r2, #13
 8002eca:	4619      	mov	r1, r3
 8002ecc:	2032      	movs	r0, #50	@ 0x32
 8002ece:	f7ff ff0b 	bl	8002ce8 <VC0706_SendCommand>

    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, image_buffer, VC0706_IMAGE_BLOCK_SIZE + 10, VC0706_RESPONSE_TIMEOUT);
 8002ed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ed6:	222a      	movs	r2, #42	@ 0x2a
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4807      	ldr	r0, [pc, #28]	@ (8002ef8 <VC0706_ReadImageBlock+0x78>)
 8002edc:	f004 fe8e 	bl	8007bfc <HAL_UART_Receive>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	75fb      	strb	r3, [r7, #23]

    return status == HAL_OK;
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	bf0c      	ite	eq
 8002eea:	2301      	moveq	r3, #1
 8002eec:	2300      	movne	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20040650 	.word	0x20040650

08002efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002efc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f00:	f7ff fee0 	bl	8002cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f04:	480c      	ldr	r0, [pc, #48]	@ (8002f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f06:	490d      	ldr	r1, [pc, #52]	@ (8002f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f08:	4a0d      	ldr	r2, [pc, #52]	@ (8002f40 <LoopForever+0xe>)
  movs r3, #0
 8002f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f0c:	e002      	b.n	8002f14 <LoopCopyDataInit>

08002f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f12:	3304      	adds	r3, #4

08002f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f18:	d3f9      	bcc.n	8002f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8002f48 <LoopForever+0x16>)
  movs r3, #0
 8002f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f20:	e001      	b.n	8002f26 <LoopFillZerobss>

08002f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f24:	3204      	adds	r2, #4

08002f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f28:	d3fb      	bcc.n	8002f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f2a:	f009 fa77 	bl	800c41c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f2e:	f7fe fd8b 	bl	8001a48 <main>

08002f32 <LoopForever>:

LoopForever:
    b LoopForever
 8002f32:	e7fe      	b.n	8002f32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f34:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002f38:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8002f3c:	20040284 	.word	0x20040284
  ldr r2, =_sidata
 8002f40:	0807761c 	.word	0x0807761c
  ldr r2, =_sbss
 8002f44:	20040284 	.word	0x20040284
  ldr r4, =_ebss
 8002f48:	20040acc 	.word	0x20040acc

08002f4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f4c:	e7fe      	b.n	8002f4c <ADC1_IRQHandler>

08002f4e <ILI9341_Select>:
 */

#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8002f52:	2200      	movs	r2, #0
 8002f54:	2110      	movs	r1, #16
 8002f56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f5a:	f001 fe19 	bl	8004b90 <HAL_GPIO_WritePin>
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8002f62:	b580      	push	{r7, lr}
 8002f64:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8002f66:	2201      	movs	r2, #1
 8002f68:	2110      	movs	r1, #16
 8002f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f6e:	f001 fe0f 	bl	8004b90 <HAL_GPIO_WritePin>
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <ILI9341_WriteCommand>:
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
    HAL_Delay(5);
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
}

static void ILI9341_WriteCommand(uint8_t cmd) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2102      	movs	r1, #2
 8002f86:	4807      	ldr	r0, [pc, #28]	@ (8002fa4 <ILI9341_WriteCommand+0x2c>)
 8002f88:	f001 fe02 	bl	8004b90 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002f8c:	1df9      	adds	r1, r7, #7
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f92:	2201      	movs	r2, #1
 8002f94:	4804      	ldr	r0, [pc, #16]	@ (8002fa8 <ILI9341_WriteCommand+0x30>)
 8002f96:	f003 fb7a 	bl	800668e <HAL_SPI_Transmit>

}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	48000400 	.word	0x48000400
 8002fa8:	200406e4 	.word	0x200406e4

08002fac <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	2102      	movs	r1, #2
 8002fba:	4811      	ldr	r0, [pc, #68]	@ (8003000 <ILI9341_WriteData+0x54>)
 8002fbc:	f001 fde8 	bl	8004b90 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8002fc0:	e015      	b.n	8002fee <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fc8:	bf28      	it	cs
 8002fca:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8002fce:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8002fd0:	89fa      	ldrh	r2, [r7, #14]
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	480a      	ldr	r0, [pc, #40]	@ (8003004 <ILI9341_WriteData+0x58>)
 8002fda:	f003 fb58 	bl	800668e <HAL_SPI_Transmit>

        buff += chunk_size;
 8002fde:	89fb      	ldrh	r3, [r7, #14]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8002fe6:	89fb      	ldrh	r3, [r7, #14]
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e6      	bne.n	8002fc2 <ILI9341_WriteData+0x16>
    }
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	48000400 	.word	0x48000400
 8003004:	200406e4 	.word	0x200406e4

08003008 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	4604      	mov	r4, r0
 8003010:	4608      	mov	r0, r1
 8003012:	4611      	mov	r1, r2
 8003014:	461a      	mov	r2, r3
 8003016:	4623      	mov	r3, r4
 8003018:	80fb      	strh	r3, [r7, #6]
 800301a:	4603      	mov	r3, r0
 800301c:	80bb      	strh	r3, [r7, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	807b      	strh	r3, [r7, #2]
 8003022:	4613      	mov	r3, r2
 8003024:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8003026:	202a      	movs	r0, #42	@ 0x2a
 8003028:	f7ff ffa6 	bl	8002f78 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	b29b      	uxth	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	733b      	strb	r3, [r7, #12]
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	737b      	strb	r3, [r7, #13]
 800303c:	887b      	ldrh	r3, [r7, #2]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	b29b      	uxth	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	73bb      	strb	r3, [r7, #14]
 8003046:	887b      	ldrh	r3, [r7, #2]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 800304c:	f107 030c 	add.w	r3, r7, #12
 8003050:	2104      	movs	r1, #4
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ffaa 	bl	8002fac <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8003058:	202b      	movs	r0, #43	@ 0x2b
 800305a:	f7ff ff8d 	bl	8002f78 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800305e:	88bb      	ldrh	r3, [r7, #4]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	b29b      	uxth	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	723b      	strb	r3, [r7, #8]
 8003068:	88bb      	ldrh	r3, [r7, #4]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	727b      	strb	r3, [r7, #9]
 800306e:	883b      	ldrh	r3, [r7, #0]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	b29b      	uxth	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	72bb      	strb	r3, [r7, #10]
 8003078:	883b      	ldrh	r3, [r7, #0]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800307e:	f107 0308 	add.w	r3, r7, #8
 8003082:	2104      	movs	r1, #4
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff91 	bl	8002fac <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800308a:	202c      	movs	r0, #44	@ 0x2c
 800308c:	f7ff ff74 	bl	8002f78 <ILI9341_WriteCommand>
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	bd90      	pop	{r4, r7, pc}

08003098 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003098:	b082      	sub	sp, #8
 800309a:	b580      	push	{r7, lr}
 800309c:	b088      	sub	sp, #32
 800309e:	af00      	add	r7, sp, #0
 80030a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
 80030a6:	460b      	mov	r3, r1
 80030a8:	80bb      	strh	r3, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80030ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80030b2:	461a      	mov	r2, r3
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	4413      	add	r3, r2
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80030c2:	4619      	mov	r1, r3
 80030c4:	88bb      	ldrh	r3, [r7, #4]
 80030c6:	440b      	add	r3, r1
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	88b9      	ldrh	r1, [r7, #4]
 80030d0:	88f8      	ldrh	r0, [r7, #6]
 80030d2:	f7ff ff99 	bl	8003008 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	e041      	b.n	8003160 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 80030dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	3b20      	subs	r3, #32
 80030e2:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4619      	mov	r1, r3
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	440b      	add	r3, r1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80030f8:	2300      	movs	r3, #0
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	e027      	b.n	800314e <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00e      	beq.n	800312c <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800310e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	b29b      	uxth	r3, r3
 8003114:	b2db      	uxtb	r3, r3
 8003116:	743b      	strb	r3, [r7, #16]
 8003118:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800311a:	b2db      	uxtb	r3, r3
 800311c:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 800311e:	f107 0310 	add.w	r3, r7, #16
 8003122:	2102      	movs	r1, #2
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff41 	bl	8002fac <ILI9341_WriteData>
 800312a:	e00d      	b.n	8003148 <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800312c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	b29b      	uxth	r3, r3
 8003132:	b2db      	uxtb	r3, r3
 8003134:	733b      	strb	r3, [r7, #12]
 8003136:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003138:	b2db      	uxtb	r3, r3
 800313a:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 800313c:	f107 030c 	add.w	r3, r7, #12
 8003140:	2102      	movs	r1, #2
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff ff32 	bl	8002fac <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	3301      	adds	r3, #1
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003152:	461a      	mov	r2, r3
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	4293      	cmp	r3, r2
 8003158:	d3d1      	bcc.n	80030fe <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3301      	adds	r3, #1
 800315e:	61fb      	str	r3, [r7, #28]
 8003160:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003164:	461a      	mov	r2, r3
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	4293      	cmp	r3, r2
 800316a:	d3b7      	bcc.n	80030dc <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003178:	b002      	add	sp, #8
 800317a:	4770      	bx	lr

0800317c <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800317c:	b082      	sub	sp, #8
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af04      	add	r7, sp, #16
 8003184:	603a      	str	r2, [r7, #0]
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	4603      	mov	r3, r0
 800318a:	80fb      	strh	r3, [r7, #6]
 800318c:	460b      	mov	r3, r1
 800318e:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8003190:	f7ff fedd 	bl	8002f4e <ILI9341_Select>

    while(*str) {
 8003194:	e02e      	b.n	80031f4 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	7d3a      	ldrb	r2, [r7, #20]
 800319a:	4413      	add	r3, r2
 800319c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80031a0:	db13      	blt.n	80031ca <ILI9341_WriteString+0x4e>
            x = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80031a6:	7d7b      	ldrb	r3, [r7, #21]
 80031a8:	461a      	mov	r2, r3
 80031aa:	88bb      	ldrh	r3, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 80031b0:	88bb      	ldrh	r3, [r7, #4]
 80031b2:	7d7a      	ldrb	r2, [r7, #21]
 80031b4:	4413      	add	r3, r2
 80031b6:	2bef      	cmp	r3, #239	@ 0xef
 80031b8:	dc21      	bgt.n	80031fe <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d103      	bne.n	80031ca <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	603b      	str	r3, [r7, #0]
                continue;
 80031c8:	e014      	b.n	80031f4 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	781a      	ldrb	r2, [r3, #0]
 80031ce:	88b9      	ldrh	r1, [r7, #4]
 80031d0:	88f8      	ldrh	r0, [r7, #6]
 80031d2:	8c3b      	ldrh	r3, [r7, #32]
 80031d4:	9302      	str	r3, [sp, #8]
 80031d6:	8bbb      	ldrh	r3, [r7, #28]
 80031d8:	9301      	str	r3, [sp, #4]
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f7ff ff5a 	bl	8003098 <ILI9341_WriteChar>
        x += font.width;
 80031e4:	7d3b      	ldrb	r3, [r7, #20]
 80031e6:	461a      	mov	r2, r3
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	4413      	add	r3, r2
 80031ec:	80fb      	strh	r3, [r7, #6]
        str++;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1cc      	bne.n	8003196 <ILI9341_WriteString+0x1a>
 80031fc:	e000      	b.n	8003200 <ILI9341_WriteString+0x84>
                break;
 80031fe:	bf00      	nop
    }

    ILI9341_Unselect();
 8003200:	f7ff feaf 	bl	8002f62 <ILI9341_Unselect>
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800320e:	b002      	add	sp, #8
 8003210:	4770      	bx	lr
	...

08003214 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	4604      	mov	r4, r0
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
 8003222:	4623      	mov	r3, r4
 8003224:	80fb      	strh	r3, [r7, #6]
 8003226:	4603      	mov	r3, r0
 8003228:	80bb      	strh	r3, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	807b      	strh	r3, [r7, #2]
 800322e:	4613      	mov	r3, r2
 8003230:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003238:	d252      	bcs.n	80032e0 <ILI9341_FillRectangle+0xcc>
 800323a:	88bb      	ldrh	r3, [r7, #4]
 800323c:	2bef      	cmp	r3, #239	@ 0xef
 800323e:	d84f      	bhi.n	80032e0 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8003240:	88fa      	ldrh	r2, [r7, #6]
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	4413      	add	r3, r2
 8003246:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800324a:	dd03      	ble.n	8003254 <ILI9341_FillRectangle+0x40>
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8003252:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8003254:	88ba      	ldrh	r2, [r7, #4]
 8003256:	883b      	ldrh	r3, [r7, #0]
 8003258:	4413      	add	r3, r2
 800325a:	2bf0      	cmp	r3, #240	@ 0xf0
 800325c:	dd03      	ble.n	8003266 <ILI9341_FillRectangle+0x52>
 800325e:	88bb      	ldrh	r3, [r7, #4]
 8003260:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8003264:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8003266:	f7ff fe72 	bl	8002f4e <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	4413      	add	r3, r2
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29c      	uxth	r4, r3
 8003276:	88ba      	ldrh	r2, [r7, #4]
 8003278:	883b      	ldrh	r3, [r7, #0]
 800327a:	4413      	add	r3, r2
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29b      	uxth	r3, r3
 8003282:	88b9      	ldrh	r1, [r7, #4]
 8003284:	88f8      	ldrh	r0, [r7, #6]
 8003286:	4622      	mov	r2, r4
 8003288:	f7ff febe 	bl	8003008 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800328c:	8c3b      	ldrh	r3, [r7, #32]
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	b29b      	uxth	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	733b      	strb	r3, [r7, #12]
 8003296:	8c3b      	ldrh	r3, [r7, #32]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800329c:	2201      	movs	r2, #1
 800329e:	2102      	movs	r1, #2
 80032a0:	4811      	ldr	r0, [pc, #68]	@ (80032e8 <ILI9341_FillRectangle+0xd4>)
 80032a2:	f001 fc75 	bl	8004b90 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80032a6:	883b      	ldrh	r3, [r7, #0]
 80032a8:	80bb      	strh	r3, [r7, #4]
 80032aa:	e013      	b.n	80032d4 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 80032ac:	887b      	ldrh	r3, [r7, #2]
 80032ae:	80fb      	strh	r3, [r7, #6]
 80032b0:	e00a      	b.n	80032c8 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80032b2:	f107 010c 	add.w	r1, r7, #12
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ba:	2202      	movs	r2, #2
 80032bc:	480b      	ldr	r0, [pc, #44]	@ (80032ec <ILI9341_FillRectangle+0xd8>)
 80032be:	f003 f9e6 	bl	800668e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	80fb      	strh	r3, [r7, #6]
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f1      	bne.n	80032b2 <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 80032ce:	88bb      	ldrh	r3, [r7, #4]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	80bb      	strh	r3, [r7, #4]
 80032d4:	88bb      	ldrh	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1e8      	bne.n	80032ac <ILI9341_FillRectangle+0x98>

        }
    }

    ILI9341_Unselect();
 80032da:	f7ff fe42 	bl	8002f62 <ILI9341_Unselect>
 80032de:	e000      	b.n	80032e2 <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80032e0:	bf00      	nop
}
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd90      	pop	{r4, r7, pc}
 80032e8:	48000400 	.word	0x48000400
 80032ec:	200406e4 	.word	0x200406e4

080032f0 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	4603      	mov	r3, r0
 80032f8:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	23f0      	movs	r3, #240	@ 0xf0
 8003300:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003304:	2100      	movs	r1, #0
 8003306:	2000      	movs	r0, #0
 8003308:	f7ff ff84 	bl	8003214 <ILI9341_FillRectangle>
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	4604      	mov	r4, r0
 800331c:	4608      	mov	r0, r1
 800331e:	4611      	mov	r1, r2
 8003320:	461a      	mov	r2, r3
 8003322:	4623      	mov	r3, r4
 8003324:	80fb      	strh	r3, [r7, #6]
 8003326:	4603      	mov	r3, r0
 8003328:	80bb      	strh	r3, [r7, #4]
 800332a:	460b      	mov	r3, r1
 800332c:	807b      	strh	r3, [r7, #2]
 800332e:	4613      	mov	r3, r2
 8003330:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003338:	d22c      	bcs.n	8003394 <ILI9341_DrawImage+0x80>
 800333a:	88bb      	ldrh	r3, [r7, #4]
 800333c:	2bef      	cmp	r3, #239	@ 0xef
 800333e:	d829      	bhi.n	8003394 <ILI9341_DrawImage+0x80>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 8003340:	88fa      	ldrh	r2, [r7, #6]
 8003342:	887b      	ldrh	r3, [r7, #2]
 8003344:	4413      	add	r3, r2
 8003346:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800334a:	dc25      	bgt.n	8003398 <ILI9341_DrawImage+0x84>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 800334c:	88ba      	ldrh	r2, [r7, #4]
 800334e:	883b      	ldrh	r3, [r7, #0]
 8003350:	4413      	add	r3, r2
 8003352:	2bf0      	cmp	r3, #240	@ 0xf0
 8003354:	dc22      	bgt.n	800339c <ILI9341_DrawImage+0x88>

    ILI9341_Select();
 8003356:	f7ff fdfa 	bl	8002f4e <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 800335a:	88fa      	ldrh	r2, [r7, #6]
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	4413      	add	r3, r2
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29c      	uxth	r4, r3
 8003366:	88ba      	ldrh	r2, [r7, #4]
 8003368:	883b      	ldrh	r3, [r7, #0]
 800336a:	4413      	add	r3, r2
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29b      	uxth	r3, r3
 8003372:	88b9      	ldrh	r1, [r7, #4]
 8003374:	88f8      	ldrh	r0, [r7, #6]
 8003376:	4622      	mov	r2, r4
 8003378:	f7ff fe46 	bl	8003008 <ILI9341_SetAddressWindow>
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 800337c:	887b      	ldrh	r3, [r7, #2]
 800337e:	883a      	ldrh	r2, [r7, #0]
 8003380:	fb02 f303 	mul.w	r3, r2, r3
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4619      	mov	r1, r3
 8003388:	69b8      	ldr	r0, [r7, #24]
 800338a:	f7ff fe0f 	bl	8002fac <ILI9341_WriteData>
    ILI9341_Unselect();
 800338e:	f7ff fde8 	bl	8002f62 <ILI9341_Unselect>
 8003392:	e004      	b.n	800339e <ILI9341_DrawImage+0x8a>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8003394:	bf00      	nop
 8003396:	e002      	b.n	800339e <ILI9341_DrawImage+0x8a>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 8003398:	bf00      	nop
 800339a:	e000      	b.n	800339e <ILI9341_DrawImage+0x8a>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 800339c:	bf00      	nop
}
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd90      	pop	{r4, r7, pc}

080033a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033ae:	2003      	movs	r0, #3
 80033b0:	f001 fa02 	bl	80047b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033b4:	2000      	movs	r0, #0
 80033b6:	f000 f80d 	bl	80033d4 <HAL_InitTick>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	71fb      	strb	r3, [r7, #7]
 80033c4:	e001      	b.n	80033ca <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033c6:	f7ff f8a3 	bl	8002510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033ca:	79fb      	ldrb	r3, [r7, #7]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033e0:	4b17      	ldr	r3, [pc, #92]	@ (8003440 <HAL_InitTick+0x6c>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d023      	beq.n	8003430 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033e8:	4b16      	ldr	r3, [pc, #88]	@ (8003444 <HAL_InitTick+0x70>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4b14      	ldr	r3, [pc, #80]	@ (8003440 <HAL_InitTick+0x6c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	4619      	mov	r1, r3
 80033f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fa0f 	bl	8004822 <HAL_SYSTICK_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10f      	bne.n	800342a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b0f      	cmp	r3, #15
 800340e:	d809      	bhi.n	8003424 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003410:	2200      	movs	r2, #0
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	f04f 30ff 	mov.w	r0, #4294967295
 8003418:	f001 f9d9 	bl	80047ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800341c:	4a0a      	ldr	r2, [pc, #40]	@ (8003448 <HAL_InitTick+0x74>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e007      	b.n	8003434 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
 8003428:	e004      	b.n	8003434 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
 800342e:	e001      	b.n	8003434 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200400a0 	.word	0x200400a0
 8003444:	20040088 	.word	0x20040088
 8003448:	2004009c 	.word	0x2004009c

0800344c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003450:	4b06      	ldr	r3, [pc, #24]	@ (800346c <HAL_IncTick+0x20>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	4b06      	ldr	r3, [pc, #24]	@ (8003470 <HAL_IncTick+0x24>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4413      	add	r3, r2
 800345c:	4a04      	ldr	r2, [pc, #16]	@ (8003470 <HAL_IncTick+0x24>)
 800345e:	6013      	str	r3, [r2, #0]
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	200400a0 	.word	0x200400a0
 8003470:	20040934 	.word	0x20040934

08003474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return uwTick;
 8003478:	4b03      	ldr	r3, [pc, #12]	@ (8003488 <HAL_GetTick+0x14>)
 800347a:	681b      	ldr	r3, [r3, #0]
}
 800347c:	4618      	mov	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20040934 	.word	0x20040934

0800348c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003494:	f7ff ffee 	bl	8003474 <HAL_GetTick>
 8003498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d005      	beq.n	80034b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80034a6:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <HAL_Delay+0x44>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034b2:	bf00      	nop
 80034b4:	f7ff ffde 	bl	8003474 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d8f7      	bhi.n	80034b4 <HAL_Delay+0x28>
  {
  }
}
 80034c4:	bf00      	nop
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	200400a0 	.word	0x200400a0

080034d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	609a      	str	r2, [r3, #8]
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	609a      	str	r2, [r3, #8]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	3360      	adds	r3, #96	@ 0x60
 800354e:	461a      	mov	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b08      	ldr	r3, [pc, #32]	@ (8003580 <LL_ADC_SetOffset+0x44>)
 800355e:	4013      	ands	r3, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	4313      	orrs	r3, r2
 800356c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003574:	bf00      	nop
 8003576:	371c      	adds	r7, #28
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	03fff000 	.word	0x03fff000

08003584 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3360      	adds	r3, #96	@ 0x60
 8003592:	461a      	mov	r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3360      	adds	r3, #96	@ 0x60
 80035c0:	461a      	mov	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	615a      	str	r2, [r3, #20]
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003632:	b480      	push	{r7}
 8003634:	b087      	sub	sp, #28
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3330      	adds	r3, #48	@ 0x30
 8003642:	461a      	mov	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	4413      	add	r3, r2
 8003650:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	211f      	movs	r1, #31
 800365e:	fa01 f303 	lsl.w	r3, r1, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	401a      	ands	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	0e9b      	lsrs	r3, r3, #26
 800366a:	f003 011f 	and.w	r1, r3, #31
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	431a      	orrs	r2, r3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800368a:	b480      	push	{r7}
 800368c:	b087      	sub	sp, #28
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3314      	adds	r3, #20
 800369a:	461a      	mov	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	0e5b      	lsrs	r3, r3, #25
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	4413      	add	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	0d1b      	lsrs	r3, r3, #20
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	2107      	movs	r1, #7
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	401a      	ands	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	0d1b      	lsrs	r3, r3, #20
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	fa01 f303 	lsl.w	r3, r1, r3
 80036ce:	431a      	orrs	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036d4:	bf00      	nop
 80036d6:	371c      	adds	r7, #28
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f8:	43db      	mvns	r3, r3
 80036fa:	401a      	ands	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f003 0318 	and.w	r3, r3, #24
 8003702:	4908      	ldr	r1, [pc, #32]	@ (8003724 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003704:	40d9      	lsrs	r1, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	400b      	ands	r3, r1
 800370a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370e:	431a      	orrs	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	0007ffff 	.word	0x0007ffff

08003728 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003738:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6093      	str	r3, [r2, #8]
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800375c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003760:	d101      	bne.n	8003766 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003784:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003788:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037b0:	d101      	bne.n	80037b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037d8:	f043 0201 	orr.w	r2, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <LL_ADC_IsEnabled+0x18>
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <LL_ADC_IsEnabled+0x1a>
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003822:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003826:	f043 0204 	orr.w	r2, r3, #4
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b04      	cmp	r3, #4
 800384c:	d101      	bne.n	8003852 <LL_ADC_REG_IsConversionOngoing+0x18>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b08      	cmp	r3, #8
 8003872:	d101      	bne.n	8003878 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e129      	b.n	8003af6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d109      	bne.n	80038c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fe fe51 	bl	8002558 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff3f 	bl	800374c <LL_ADC_IsDeepPowerDownEnabled>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff25 	bl	8003728 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff ff5a 	bl	800379c <LL_ADC_IsInternalRegulatorEnabled>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d115      	bne.n	800391a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff3e 	bl	8003774 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038f8:	4b81      	ldr	r3, [pc, #516]	@ (8003b00 <HAL_ADC_Init+0x278>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	099b      	lsrs	r3, r3, #6
 80038fe:	4a81      	ldr	r2, [pc, #516]	@ (8003b04 <HAL_ADC_Init+0x27c>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	3301      	adds	r3, #1
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800390c:	e002      	b.n	8003914 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3b01      	subs	r3, #1
 8003912:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f9      	bne.n	800390e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff ff3c 	bl	800379c <LL_ADC_IsInternalRegulatorEnabled>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10d      	bne.n	8003946 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392e:	f043 0210 	orr.w	r2, r3, #16
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393a:	f043 0201 	orr.w	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff ff75 	bl	800383a <LL_ADC_REG_IsConversionOngoing>
 8003950:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 80c2 	bne.w	8003ae4 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f040 80be 	bne.w	8003ae4 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003970:	f043 0202 	orr.w	r2, r3, #2
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff ff35 	bl	80037ec <LL_ADC_IsEnabled>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10b      	bne.n	80039a0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003988:	485f      	ldr	r0, [pc, #380]	@ (8003b08 <HAL_ADC_Init+0x280>)
 800398a:	f7ff ff2f 	bl	80037ec <LL_ADC_IsEnabled>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d105      	bne.n	80039a0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4619      	mov	r1, r3
 800399a:	485c      	ldr	r0, [pc, #368]	@ (8003b0c <HAL_ADC_Init+0x284>)
 800399c:	f7ff fd9a 	bl	80034d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7e5b      	ldrb	r3, [r3, #25]
 80039a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80039b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80039b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d106      	bne.n	80039dc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	3b01      	subs	r3, #1
 80039d4:	045b      	lsls	r3, r3, #17
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	4b44      	ldr	r3, [pc, #272]	@ (8003b10 <HAL_ADC_Init+0x288>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	69b9      	ldr	r1, [r7, #24]
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff25 	bl	8003860 <LL_ADC_INJ_IsConversionOngoing>
 8003a16:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d140      	bne.n	8003aa0 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d13d      	bne.n	8003aa0 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7e1b      	ldrb	r3, [r3, #24]
 8003a2c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a2e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a36:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a46:	f023 0306 	bic.w	r3, r3, #6
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6812      	ldr	r2, [r2, #0]
 8003a4e:	69b9      	ldr	r1, [r7, #24]
 8003a50:	430b      	orrs	r3, r1
 8003a52:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d118      	bne.n	8003a90 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003a68:	f023 0304 	bic.w	r3, r3, #4
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a74:	4311      	orrs	r1, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003a7a:	4311      	orrs	r1, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a80:	430a      	orrs	r2, r1
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	611a      	str	r2, [r3, #16]
 8003a8e:	e007      	b.n	8003aa0 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d10c      	bne.n	8003ac2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	f023 010f 	bic.w	r1, r3, #15
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	1e5a      	subs	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ac0:	e007      	b.n	8003ad2 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 020f 	bic.w	r2, r2, #15
 8003ad0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad6:	f023 0303 	bic.w	r3, r3, #3
 8003ada:	f043 0201 	orr.w	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ae2:	e007      	b.n	8003af4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae8:	f043 0210 	orr.w	r2, r3, #16
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003af4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20040088 	.word	0x20040088
 8003b04:	053e2d63 	.word	0x053e2d63
 8003b08:	50040000 	.word	0x50040000
 8003b0c:	50040300 	.word	0x50040300
 8003b10:	fff0c007 	.word	0xfff0c007

08003b14 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fe8a 	bl	800383a <LL_ADC_REG_IsConversionOngoing>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d14f      	bne.n	8003bcc <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_ADC_Start+0x26>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e04b      	b.n	8003bd2 <HAL_ADC_Start+0xbe>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fce2 	bl	800450c <ADC_Enable>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d137      	bne.n	8003bc2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b56:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b72:	d106      	bne.n	8003b82 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b78:	f023 0206 	bic.w	r2, r3, #6
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b80:	e002      	b.n	8003b88 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	221c      	movs	r2, #28
 8003b8e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003baa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff fe29 	bl	8003812 <LL_ADC_REG_StartConversion>
 8003bc0:	e006      	b.n	8003bd0 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003bca:	e001      	b.n	8003bd0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b086      	sub	sp, #24
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d102      	bne.n	8003bf2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003bec:	2308      	movs	r3, #8
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	e010      	b.n	8003c14 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c04:	f043 0220 	orr.w	r2, r3, #32
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e06f      	b.n	8003cf0 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003c10:	2304      	movs	r3, #4
 8003c12:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003c14:	f7ff fc2e 	bl	8003474 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c1a:	e021      	b.n	8003c60 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c22:	d01d      	beq.n	8003c60 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003c24:	f7ff fc26 	bl	8003474 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d302      	bcc.n	8003c3a <HAL_ADC_PollForConversion+0x60>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d112      	bne.n	8003c60 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10b      	bne.n	8003c60 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4c:	f043 0204 	orr.w	r2, r3, #4
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e047      	b.n	8003cf0 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0d6      	beq.n	8003c1c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c72:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fcc4 	bl	800360c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d01c      	beq.n	8003cc4 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	7e5b      	ldrb	r3, [r3, #25]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d118      	bne.n	8003cc4 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d111      	bne.n	8003cc4 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d105      	bne.n	8003cc4 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbc:	f043 0201 	orr.w	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d104      	bne.n	8003cdc <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2208      	movs	r2, #8
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e008      	b.n	8003cee <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	220c      	movs	r2, #12
 8003cec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b0b6      	sub	sp, #216	@ 0xd8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x22>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e3d5      	b.n	80044e2 <HAL_ADC_ConfigChannel+0x7ce>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fd79 	bl	800383a <LL_ADC_REG_IsConversionOngoing>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 83ba 	bne.w	80044c4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b05      	cmp	r3, #5
 8003d5e:	d824      	bhi.n	8003daa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	3b02      	subs	r3, #2
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d81b      	bhi.n	8003da2 <HAL_ADC_ConfigChannel+0x8e>
 8003d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <HAL_ADC_ConfigChannel+0x5c>)
 8003d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d70:	08003d81 	.word	0x08003d81
 8003d74:	08003d89 	.word	0x08003d89
 8003d78:	08003d91 	.word	0x08003d91
 8003d7c:	08003d99 	.word	0x08003d99
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003d80:	230c      	movs	r3, #12
 8003d82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003d86:	e010      	b.n	8003daa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003d88:	2312      	movs	r3, #18
 8003d8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003d8e:	e00c      	b.n	8003daa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003d90:	2318      	movs	r3, #24
 8003d92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003d96:	e008      	b.n	8003daa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003d98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003da0:	e003      	b.n	8003daa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003da2:	2306      	movs	r3, #6
 8003da4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003da8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003db8:	f7ff fc3b 	bl	8003632 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fd3a 	bl	800383a <LL_ADC_REG_IsConversionOngoing>
 8003dc6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fd46 	bl	8003860 <LL_ADC_INJ_IsConversionOngoing>
 8003dd4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f040 81bf 	bne.w	8004160 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003de2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f040 81ba 	bne.w	8004160 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003df4:	d10f      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	4619      	mov	r1, r3
 8003e02:	f7ff fc42 	bl	800368a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fbe9 	bl	80035e6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003e14:	e00e      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6819      	ldr	r1, [r3, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f7ff fc31 	bl	800368a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fbd9 	bl	80035e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	08db      	lsrs	r3, r3, #3
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d00a      	beq.n	8003e6c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6919      	ldr	r1, [r3, #16]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e66:	f7ff fb69 	bl	800353c <LL_ADC_SetOffset>
 8003e6a:	e179      	b.n	8004160 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2100      	movs	r1, #0
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fb86 	bl	8003584 <LL_ADC_GetOffsetChannel>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x184>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fb7b 	bl	8003584 <LL_ADC_GetOffsetChannel>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	0e9b      	lsrs	r3, r3, #26
 8003e92:	f003 021f 	and.w	r2, r3, #31
 8003e96:	e01e      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x1c2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fb70 	bl	8003584 <LL_ADC_GetOffsetChannel>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003eae:	fa93 f3a3 	rbit	r3, r3
 8003eb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003eb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003eba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ebe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003ec6:	2320      	movs	r3, #32
 8003ec8:	e004      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003eca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ece:	fab3 f383 	clz	r3, r3
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x1da>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	0e9b      	lsrs	r3, r3, #26
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	e018      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x20c>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003f02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003f0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003f12:	2320      	movs	r3, #32
 8003f14:	e004      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003f16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d106      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fb3f 	bl	80035b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2101      	movs	r1, #1
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fb23 	bl	8003584 <LL_ADC_GetOffsetChannel>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x24a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff fb18 	bl	8003584 <LL_ADC_GetOffsetChannel>
 8003f54:	4603      	mov	r3, r0
 8003f56:	0e9b      	lsrs	r3, r3, #26
 8003f58:	f003 021f 	and.w	r2, r3, #31
 8003f5c:	e01e      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x288>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2101      	movs	r1, #1
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff fb0d 	bl	8003584 <LL_ADC_GetOffsetChannel>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003f84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003f8c:	2320      	movs	r3, #32
 8003f8e:	e004      	b.n	8003f9a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003f90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f94:	fab3 f383 	clz	r3, r3
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d105      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x2a0>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	0e9b      	lsrs	r3, r3, #26
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	e018      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x2d2>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fc0:	fa93 f3a3 	rbit	r3, r3
 8003fc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003fd8:	2320      	movs	r3, #32
 8003fda:	e004      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fe0:	fab3 f383 	clz	r3, r3
 8003fe4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d106      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fadc 	bl	80035b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2102      	movs	r1, #2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff fac0 	bl	8003584 <LL_ADC_GetOffsetChannel>
 8004004:	4603      	mov	r3, r0
 8004006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x310>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2102      	movs	r1, #2
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff fab5 	bl	8003584 <LL_ADC_GetOffsetChannel>
 800401a:	4603      	mov	r3, r0
 800401c:	0e9b      	lsrs	r3, r3, #26
 800401e:	f003 021f 	and.w	r2, r3, #31
 8004022:	e01e      	b.n	8004062 <HAL_ADC_ConfigChannel+0x34e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2102      	movs	r1, #2
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff faaa 	bl	8003584 <LL_ADC_GetOffsetChannel>
 8004030:	4603      	mov	r3, r0
 8004032:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004036:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004042:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004046:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800404a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004052:	2320      	movs	r3, #32
 8004054:	e004      	b.n	8004060 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004056:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800406a:	2b00      	cmp	r3, #0
 800406c:	d105      	bne.n	800407a <HAL_ADC_ConfigChannel+0x366>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	0e9b      	lsrs	r3, r3, #26
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	e014      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x390>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004088:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800408a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800408e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004096:	2320      	movs	r3, #32
 8004098:	e004      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800409a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d106      	bne.n	80040b6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2200      	movs	r2, #0
 80040ae:	2102      	movs	r1, #2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff fa7d 	bl	80035b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2103      	movs	r1, #3
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fa61 	bl	8003584 <LL_ADC_GetOffsetChannel>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x3ce>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2103      	movs	r1, #3
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff fa56 	bl	8003584 <LL_ADC_GetOffsetChannel>
 80040d8:	4603      	mov	r3, r0
 80040da:	0e9b      	lsrs	r3, r3, #26
 80040dc:	f003 021f 	and.w	r2, r3, #31
 80040e0:	e017      	b.n	8004112 <HAL_ADC_ConfigChannel+0x3fe>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2103      	movs	r1, #3
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fa4b 	bl	8003584 <LL_ADC_GetOffsetChannel>
 80040ee:	4603      	mov	r3, r0
 80040f0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040f4:	fa93 f3a3 	rbit	r3, r3
 80040f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80040fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040fc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80040fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004104:	2320      	movs	r3, #32
 8004106:	e003      	b.n	8004110 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004108:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800410a:	fab3 f383 	clz	r3, r3
 800410e:	b2db      	uxtb	r3, r3
 8004110:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800411a:	2b00      	cmp	r3, #0
 800411c:	d105      	bne.n	800412a <HAL_ADC_ConfigChannel+0x416>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	0e9b      	lsrs	r3, r3, #26
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	e011      	b.n	800414e <HAL_ADC_ConfigChannel+0x43a>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004138:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800413a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800413c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8004142:	2320      	movs	r3, #32
 8004144:	e003      	b.n	800414e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004146:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004148:	fab3 f383 	clz	r3, r3
 800414c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800414e:	429a      	cmp	r2, r3
 8004150:	d106      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	2103      	movs	r1, #3
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff fa28 	bl	80035b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff fb41 	bl	80037ec <LL_ADC_IsEnabled>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	f040 813f 	bne.w	80043f0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	6819      	ldr	r1, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	461a      	mov	r2, r3
 8004180:	f7ff faae 	bl	80036e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4a8e      	ldr	r2, [pc, #568]	@ (80043c4 <HAL_ADC_ConfigChannel+0x6b0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	f040 8130 	bne.w	80043f0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x4a4>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	0e9b      	lsrs	r3, r3, #26
 80041a6:	3301      	adds	r3, #1
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	2b09      	cmp	r3, #9
 80041ae:	bf94      	ite	ls
 80041b0:	2301      	movls	r3, #1
 80041b2:	2300      	movhi	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	e019      	b.n	80041ec <HAL_ADC_ConfigChannel+0x4d8>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041c0:	fa93 f3a3 	rbit	r3, r3
 80041c4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80041c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80041ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80041d0:	2320      	movs	r3, #32
 80041d2:	e003      	b.n	80041dc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80041d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041d6:	fab3 f383 	clz	r3, r3
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	3301      	adds	r3, #1
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2b09      	cmp	r3, #9
 80041e4:	bf94      	ite	ls
 80041e6:	2301      	movls	r3, #1
 80041e8:	2300      	movhi	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d079      	beq.n	80042e4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d107      	bne.n	800420c <HAL_ADC_ConfigChannel+0x4f8>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	0e9b      	lsrs	r3, r3, #26
 8004202:	3301      	adds	r3, #1
 8004204:	069b      	lsls	r3, r3, #26
 8004206:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800420a:	e015      	b.n	8004238 <HAL_ADC_ConfigChannel+0x524>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004214:	fa93 f3a3 	rbit	r3, r3
 8004218:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800421a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800421c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800421e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004224:	2320      	movs	r3, #32
 8004226:	e003      	b.n	8004230 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800422a:	fab3 f383 	clz	r3, r3
 800422e:	b2db      	uxtb	r3, r3
 8004230:	3301      	adds	r3, #1
 8004232:	069b      	lsls	r3, r3, #26
 8004234:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004240:	2b00      	cmp	r3, #0
 8004242:	d109      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x544>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	0e9b      	lsrs	r3, r3, #26
 800424a:	3301      	adds	r3, #1
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	2101      	movs	r1, #1
 8004252:	fa01 f303 	lsl.w	r3, r1, r3
 8004256:	e017      	b.n	8004288 <HAL_ADC_ConfigChannel+0x574>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004260:	fa93 f3a3 	rbit	r3, r3
 8004264:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004268:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800426a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004270:	2320      	movs	r3, #32
 8004272:	e003      	b.n	800427c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004276:	fab3 f383 	clz	r3, r3
 800427a:	b2db      	uxtb	r3, r3
 800427c:	3301      	adds	r3, #1
 800427e:	f003 031f 	and.w	r3, r3, #31
 8004282:	2101      	movs	r1, #1
 8004284:	fa01 f303 	lsl.w	r3, r1, r3
 8004288:	ea42 0103 	orr.w	r1, r2, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x59a>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	3301      	adds	r3, #1
 80042a0:	f003 021f 	and.w	r2, r3, #31
 80042a4:	4613      	mov	r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	4413      	add	r3, r2
 80042aa:	051b      	lsls	r3, r3, #20
 80042ac:	e018      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x5cc>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b6:	fa93 f3a3 	rbit	r3, r3
 80042ba:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80042bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80042c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80042c6:	2320      	movs	r3, #32
 80042c8:	e003      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80042ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042cc:	fab3 f383 	clz	r3, r3
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	3301      	adds	r3, #1
 80042d4:	f003 021f 	and.w	r2, r3, #31
 80042d8:	4613      	mov	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4413      	add	r3, r2
 80042de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042e0:	430b      	orrs	r3, r1
 80042e2:	e080      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d107      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x5ec>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	0e9b      	lsrs	r3, r3, #26
 80042f6:	3301      	adds	r3, #1
 80042f8:	069b      	lsls	r3, r3, #26
 80042fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042fe:	e015      	b.n	800432c <HAL_ADC_ConfigChannel+0x618>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004308:	fa93 f3a3 	rbit	r3, r3
 800430c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004318:	2320      	movs	r3, #32
 800431a:	e003      	b.n	8004324 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800431c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431e:	fab3 f383 	clz	r3, r3
 8004322:	b2db      	uxtb	r3, r3
 8004324:	3301      	adds	r3, #1
 8004326:	069b      	lsls	r3, r3, #26
 8004328:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004334:	2b00      	cmp	r3, #0
 8004336:	d109      	bne.n	800434c <HAL_ADC_ConfigChannel+0x638>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0e9b      	lsrs	r3, r3, #26
 800433e:	3301      	adds	r3, #1
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	2101      	movs	r1, #1
 8004346:	fa01 f303 	lsl.w	r3, r1, r3
 800434a:	e017      	b.n	800437c <HAL_ADC_ConfigChannel+0x668>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	fa93 f3a3 	rbit	r3, r3
 8004358:	61bb      	str	r3, [r7, #24]
  return result;
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004364:	2320      	movs	r3, #32
 8004366:	e003      	b.n	8004370 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	fab3 f383 	clz	r3, r3
 800436e:	b2db      	uxtb	r3, r3
 8004370:	3301      	adds	r3, #1
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	2101      	movs	r1, #1
 8004378:	fa01 f303 	lsl.w	r3, r1, r3
 800437c:	ea42 0103 	orr.w	r1, r2, r3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10d      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x694>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0e9b      	lsrs	r3, r3, #26
 8004392:	3301      	adds	r3, #1
 8004394:	f003 021f 	and.w	r2, r3, #31
 8004398:	4613      	mov	r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	4413      	add	r3, r2
 800439e:	3b1e      	subs	r3, #30
 80043a0:	051b      	lsls	r3, r3, #20
 80043a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80043a6:	e01d      	b.n	80043e4 <HAL_ADC_ConfigChannel+0x6d0>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	fa93 f3a3 	rbit	r3, r3
 80043b4:	60fb      	str	r3, [r7, #12]
  return result;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d103      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80043c0:	2320      	movs	r3, #32
 80043c2:	e005      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x6bc>
 80043c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	fab3 f383 	clz	r3, r3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	3301      	adds	r3, #1
 80043d2:	f003 021f 	and.w	r2, r3, #31
 80043d6:	4613      	mov	r3, r2
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	3b1e      	subs	r3, #30
 80043de:	051b      	lsls	r3, r3, #20
 80043e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043ea:	4619      	mov	r1, r3
 80043ec:	f7ff f94d 	bl	800368a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	4b3d      	ldr	r3, [pc, #244]	@ (80044ec <HAL_ADC_ConfigChannel+0x7d8>)
 80043f6:	4013      	ands	r3, r2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d06c      	beq.n	80044d6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043fc:	483c      	ldr	r0, [pc, #240]	@ (80044f0 <HAL_ADC_ConfigChannel+0x7dc>)
 80043fe:	f7ff f88f 	bl	8003520 <LL_ADC_GetCommonPathInternalCh>
 8004402:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a3a      	ldr	r2, [pc, #232]	@ (80044f4 <HAL_ADC_ConfigChannel+0x7e0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d127      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004410:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004414:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d121      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a35      	ldr	r2, [pc, #212]	@ (80044f8 <HAL_ADC_ConfigChannel+0x7e4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d157      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004426:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800442a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800442e:	4619      	mov	r1, r3
 8004430:	482f      	ldr	r0, [pc, #188]	@ (80044f0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004432:	f7ff f862 	bl	80034fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004436:	4b31      	ldr	r3, [pc, #196]	@ (80044fc <HAL_ADC_ConfigChannel+0x7e8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	099b      	lsrs	r3, r3, #6
 800443c:	4a30      	ldr	r2, [pc, #192]	@ (8004500 <HAL_ADC_ConfigChannel+0x7ec>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	099b      	lsrs	r3, r3, #6
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	4613      	mov	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004450:	e002      	b.n	8004458 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	3b01      	subs	r3, #1
 8004456:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f9      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800445e:	e03a      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a27      	ldr	r2, [pc, #156]	@ (8004504 <HAL_ADC_ConfigChannel+0x7f0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d113      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800446a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800446e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10d      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1f      	ldr	r2, [pc, #124]	@ (80044f8 <HAL_ADC_ConfigChannel+0x7e4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d12a      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004480:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004484:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004488:	4619      	mov	r1, r3
 800448a:	4819      	ldr	r0, [pc, #100]	@ (80044f0 <HAL_ADC_ConfigChannel+0x7dc>)
 800448c:	f7ff f835 	bl	80034fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004490:	e021      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1c      	ldr	r2, [pc, #112]	@ (8004508 <HAL_ADC_ConfigChannel+0x7f4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d11c      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800449c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d116      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a12      	ldr	r2, [pc, #72]	@ (80044f8 <HAL_ADC_ConfigChannel+0x7e4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d111      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044ba:	4619      	mov	r1, r3
 80044bc:	480c      	ldr	r0, [pc, #48]	@ (80044f0 <HAL_ADC_ConfigChannel+0x7dc>)
 80044be:	f7ff f81c 	bl	80034fa <LL_ADC_SetCommonPathInternalCh>
 80044c2:	e008      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c8:	f043 0220 	orr.w	r2, r3, #32
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80044de:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	37d8      	adds	r7, #216	@ 0xd8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	80080000 	.word	0x80080000
 80044f0:	50040300 	.word	0x50040300
 80044f4:	c7520000 	.word	0xc7520000
 80044f8:	50040000 	.word	0x50040000
 80044fc:	20040088 	.word	0x20040088
 8004500:	053e2d63 	.word	0x053e2d63
 8004504:	cb840000 	.word	0xcb840000
 8004508:	80000001 	.word	0x80000001

0800450c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004514:	2300      	movs	r3, #0
 8004516:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff f965 	bl	80037ec <LL_ADC_IsEnabled>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d169      	bne.n	80045fc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	4b36      	ldr	r3, [pc, #216]	@ (8004608 <ADC_Enable+0xfc>)
 8004530:	4013      	ands	r3, r2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00d      	beq.n	8004552 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453a:	f043 0210 	orr.w	r2, r3, #16
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004546:	f043 0201 	orr.w	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e055      	b.n	80045fe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff f934 	bl	80037c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800455c:	482b      	ldr	r0, [pc, #172]	@ (800460c <ADC_Enable+0x100>)
 800455e:	f7fe ffdf 	bl	8003520 <LL_ADC_GetCommonPathInternalCh>
 8004562:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004564:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004568:	2b00      	cmp	r3, #0
 800456a:	d013      	beq.n	8004594 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800456c:	4b28      	ldr	r3, [pc, #160]	@ (8004610 <ADC_Enable+0x104>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	099b      	lsrs	r3, r3, #6
 8004572:	4a28      	ldr	r2, [pc, #160]	@ (8004614 <ADC_Enable+0x108>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	099b      	lsrs	r3, r3, #6
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	4613      	mov	r3, r2
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004586:	e002      	b.n	800458e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	3b01      	subs	r3, #1
 800458c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f9      	bne.n	8004588 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004594:	f7fe ff6e 	bl	8003474 <HAL_GetTick>
 8004598:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800459a:	e028      	b.n	80045ee <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff f923 	bl	80037ec <LL_ADC_IsEnabled>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff f907 	bl	80037c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045b6:	f7fe ff5d 	bl	8003474 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d914      	bls.n	80045ee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d00d      	beq.n	80045ee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d6:	f043 0210 	orr.w	r2, r3, #16
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e2:	f043 0201 	orr.w	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e007      	b.n	80045fe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d1cf      	bne.n	800459c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	8000003f 	.word	0x8000003f
 800460c:	50040300 	.word	0x50040300
 8004610:	20040088 	.word	0x20040088
 8004614:	053e2d63 	.word	0x053e2d63

08004618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004628:	4b0c      	ldr	r3, [pc, #48]	@ (800465c <__NVIC_SetPriorityGrouping+0x44>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004634:	4013      	ands	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004640:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800464a:	4a04      	ldr	r2, [pc, #16]	@ (800465c <__NVIC_SetPriorityGrouping+0x44>)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	60d3      	str	r3, [r2, #12]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	e000ed00 	.word	0xe000ed00

08004660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004664:	4b04      	ldr	r3, [pc, #16]	@ (8004678 <__NVIC_GetPriorityGrouping+0x18>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	0a1b      	lsrs	r3, r3, #8
 800466a:	f003 0307 	and.w	r3, r3, #7
}
 800466e:	4618      	mov	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	e000ed00 	.word	0xe000ed00

0800467c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468a:	2b00      	cmp	r3, #0
 800468c:	db0b      	blt.n	80046a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	f003 021f 	and.w	r2, r3, #31
 8004694:	4907      	ldr	r1, [pc, #28]	@ (80046b4 <__NVIC_EnableIRQ+0x38>)
 8004696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	2001      	movs	r0, #1
 800469e:	fa00 f202 	lsl.w	r2, r0, r2
 80046a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	e000e100 	.word	0xe000e100

080046b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	6039      	str	r1, [r7, #0]
 80046c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	db0a      	blt.n	80046e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	490c      	ldr	r1, [pc, #48]	@ (8004704 <__NVIC_SetPriority+0x4c>)
 80046d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d6:	0112      	lsls	r2, r2, #4
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	440b      	add	r3, r1
 80046dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046e0:	e00a      	b.n	80046f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	4908      	ldr	r1, [pc, #32]	@ (8004708 <__NVIC_SetPriority+0x50>)
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	3b04      	subs	r3, #4
 80046f0:	0112      	lsls	r2, r2, #4
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	440b      	add	r3, r1
 80046f6:	761a      	strb	r2, [r3, #24]
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	e000e100 	.word	0xe000e100
 8004708:	e000ed00 	.word	0xe000ed00

0800470c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800470c:	b480      	push	{r7}
 800470e:	b089      	sub	sp, #36	@ 0x24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f1c3 0307 	rsb	r3, r3, #7
 8004726:	2b04      	cmp	r3, #4
 8004728:	bf28      	it	cs
 800472a:	2304      	movcs	r3, #4
 800472c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3304      	adds	r3, #4
 8004732:	2b06      	cmp	r3, #6
 8004734:	d902      	bls.n	800473c <NVIC_EncodePriority+0x30>
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3b03      	subs	r3, #3
 800473a:	e000      	b.n	800473e <NVIC_EncodePriority+0x32>
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004740:	f04f 32ff 	mov.w	r2, #4294967295
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43da      	mvns	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	401a      	ands	r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004754:	f04f 31ff 	mov.w	r1, #4294967295
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	fa01 f303 	lsl.w	r3, r1, r3
 800475e:	43d9      	mvns	r1, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004764:	4313      	orrs	r3, r2
         );
}
 8004766:	4618      	mov	r0, r3
 8004768:	3724      	adds	r7, #36	@ 0x24
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
	...

08004774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3b01      	subs	r3, #1
 8004780:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004784:	d301      	bcc.n	800478a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004786:	2301      	movs	r3, #1
 8004788:	e00f      	b.n	80047aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800478a:	4a0a      	ldr	r2, [pc, #40]	@ (80047b4 <SysTick_Config+0x40>)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3b01      	subs	r3, #1
 8004790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004792:	210f      	movs	r1, #15
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	f7ff ff8e 	bl	80046b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800479c:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <SysTick_Config+0x40>)
 800479e:	2200      	movs	r2, #0
 80047a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047a2:	4b04      	ldr	r3, [pc, #16]	@ (80047b4 <SysTick_Config+0x40>)
 80047a4:	2207      	movs	r2, #7
 80047a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	e000e010 	.word	0xe000e010

080047b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff ff29 	bl	8004618 <__NVIC_SetPriorityGrouping>
}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b086      	sub	sp, #24
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	4603      	mov	r3, r0
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047e0:	f7ff ff3e 	bl	8004660 <__NVIC_GetPriorityGrouping>
 80047e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	6978      	ldr	r0, [r7, #20]
 80047ec:	f7ff ff8e 	bl	800470c <NVIC_EncodePriority>
 80047f0:	4602      	mov	r2, r0
 80047f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047f6:	4611      	mov	r1, r2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff ff5d 	bl	80046b8 <__NVIC_SetPriority>
}
 80047fe:	bf00      	nop
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	4603      	mov	r3, r0
 800480e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff ff31 	bl	800467c <__NVIC_EnableIRQ>
}
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff ffa2 	bl	8004774 <SysTick_Config>
 8004830:	4603      	mov	r3, r0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800484a:	e166      	b.n	8004b1a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	2101      	movs	r1, #1
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	fa01 f303 	lsl.w	r3, r1, r3
 8004858:	4013      	ands	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 8158 	beq.w	8004b14 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	2b01      	cmp	r3, #1
 800486e:	d005      	beq.n	800487c <HAL_GPIO_Init+0x40>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d130      	bne.n	80048de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	2203      	movs	r2, #3
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4013      	ands	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048b2:	2201      	movs	r2, #1
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43db      	mvns	r3, r3
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4013      	ands	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	091b      	lsrs	r3, r3, #4
 80048c8:	f003 0201 	and.w	r2, r3, #1
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d017      	beq.n	800491a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	2203      	movs	r2, #3
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	43db      	mvns	r3, r3
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4013      	ands	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d123      	bne.n	800496e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	08da      	lsrs	r2, r3, #3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3208      	adds	r2, #8
 800492e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004932:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	220f      	movs	r2, #15
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43db      	mvns	r3, r3
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4013      	ands	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	08da      	lsrs	r2, r3, #3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3208      	adds	r2, #8
 8004968:	6939      	ldr	r1, [r7, #16]
 800496a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	2203      	movs	r2, #3
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4013      	ands	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f003 0203 	and.w	r2, r3, #3
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 80b2 	beq.w	8004b14 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049b0:	4b61      	ldr	r3, [pc, #388]	@ (8004b38 <HAL_GPIO_Init+0x2fc>)
 80049b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b4:	4a60      	ldr	r2, [pc, #384]	@ (8004b38 <HAL_GPIO_Init+0x2fc>)
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80049bc:	4b5e      	ldr	r3, [pc, #376]	@ (8004b38 <HAL_GPIO_Init+0x2fc>)
 80049be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049c8:	4a5c      	ldr	r2, [pc, #368]	@ (8004b3c <HAL_GPIO_Init+0x300>)
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	089b      	lsrs	r3, r3, #2
 80049ce:	3302      	adds	r3, #2
 80049d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	220f      	movs	r2, #15
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	43db      	mvns	r3, r3
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4013      	ands	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049f2:	d02b      	beq.n	8004a4c <HAL_GPIO_Init+0x210>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a52      	ldr	r2, [pc, #328]	@ (8004b40 <HAL_GPIO_Init+0x304>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d025      	beq.n	8004a48 <HAL_GPIO_Init+0x20c>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a51      	ldr	r2, [pc, #324]	@ (8004b44 <HAL_GPIO_Init+0x308>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d01f      	beq.n	8004a44 <HAL_GPIO_Init+0x208>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a50      	ldr	r2, [pc, #320]	@ (8004b48 <HAL_GPIO_Init+0x30c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d019      	beq.n	8004a40 <HAL_GPIO_Init+0x204>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a4f      	ldr	r2, [pc, #316]	@ (8004b4c <HAL_GPIO_Init+0x310>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d013      	beq.n	8004a3c <HAL_GPIO_Init+0x200>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a4e      	ldr	r2, [pc, #312]	@ (8004b50 <HAL_GPIO_Init+0x314>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00d      	beq.n	8004a38 <HAL_GPIO_Init+0x1fc>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a4d      	ldr	r2, [pc, #308]	@ (8004b54 <HAL_GPIO_Init+0x318>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d007      	beq.n	8004a34 <HAL_GPIO_Init+0x1f8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a4c      	ldr	r2, [pc, #304]	@ (8004b58 <HAL_GPIO_Init+0x31c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d101      	bne.n	8004a30 <HAL_GPIO_Init+0x1f4>
 8004a2c:	2307      	movs	r3, #7
 8004a2e:	e00e      	b.n	8004a4e <HAL_GPIO_Init+0x212>
 8004a30:	2308      	movs	r3, #8
 8004a32:	e00c      	b.n	8004a4e <HAL_GPIO_Init+0x212>
 8004a34:	2306      	movs	r3, #6
 8004a36:	e00a      	b.n	8004a4e <HAL_GPIO_Init+0x212>
 8004a38:	2305      	movs	r3, #5
 8004a3a:	e008      	b.n	8004a4e <HAL_GPIO_Init+0x212>
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	e006      	b.n	8004a4e <HAL_GPIO_Init+0x212>
 8004a40:	2303      	movs	r3, #3
 8004a42:	e004      	b.n	8004a4e <HAL_GPIO_Init+0x212>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e002      	b.n	8004a4e <HAL_GPIO_Init+0x212>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <HAL_GPIO_Init+0x212>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	f002 0203 	and.w	r2, r2, #3
 8004a54:	0092      	lsls	r2, r2, #2
 8004a56:	4093      	lsls	r3, r2
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a5e:	4937      	ldr	r1, [pc, #220]	@ (8004b3c <HAL_GPIO_Init+0x300>)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	089b      	lsrs	r3, r3, #2
 8004a64:	3302      	adds	r3, #2
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b5c <HAL_GPIO_Init+0x320>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a90:	4a32      	ldr	r2, [pc, #200]	@ (8004b5c <HAL_GPIO_Init+0x320>)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a96:	4b31      	ldr	r3, [pc, #196]	@ (8004b5c <HAL_GPIO_Init+0x320>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004aba:	4a28      	ldr	r2, [pc, #160]	@ (8004b5c <HAL_GPIO_Init+0x320>)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004ac0:	4b26      	ldr	r3, [pc, #152]	@ (8004b5c <HAL_GPIO_Init+0x320>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4013      	ands	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b5c <HAL_GPIO_Init+0x320>)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004aea:	4b1c      	ldr	r3, [pc, #112]	@ (8004b5c <HAL_GPIO_Init+0x320>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	43db      	mvns	r3, r3
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4013      	ands	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b0e:	4a13      	ldr	r2, [pc, #76]	@ (8004b5c <HAL_GPIO_Init+0x320>)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	3301      	adds	r3, #1
 8004b18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	fa22 f303 	lsr.w	r3, r2, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f47f ae91 	bne.w	800484c <HAL_GPIO_Init+0x10>
  }
}
 8004b2a:	bf00      	nop
 8004b2c:	bf00      	nop
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	40010000 	.word	0x40010000
 8004b40:	48000400 	.word	0x48000400
 8004b44:	48000800 	.word	0x48000800
 8004b48:	48000c00 	.word	0x48000c00
 8004b4c:	48001000 	.word	0x48001000
 8004b50:	48001400 	.word	0x48001400
 8004b54:	48001800 	.word	0x48001800
 8004b58:	48001c00 	.word	0x48001c00
 8004b5c:	40010400 	.word	0x40010400

08004b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	887b      	ldrh	r3, [r7, #2]
 8004b72:	4013      	ands	r3, r2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
 8004b7c:	e001      	b.n	8004b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	807b      	strh	r3, [r7, #2]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ba0:	787b      	ldrb	r3, [r7, #1]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bac:	e002      	b.n	8004bb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bae:	887a      	ldrh	r2, [r7, #2]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8004bfc <HAL_PWREx_GetVoltageRange+0x3c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd0:	d102      	bne.n	8004bd8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004bd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bd6:	e00b      	b.n	8004bf0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004bd8:	4b08      	ldr	r3, [pc, #32]	@ (8004bfc <HAL_PWREx_GetVoltageRange+0x3c>)
 8004bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004be6:	d102      	bne.n	8004bee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004be8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bec:	e000      	b.n	8004bf0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004bee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40007000 	.word	0x40007000

08004c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d141      	bne.n	8004c92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c1a:	d131      	bne.n	8004c80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c1c:	4b47      	ldr	r3, [pc, #284]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c22:	4a46      	ldr	r2, [pc, #280]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c2c:	4b43      	ldr	r3, [pc, #268]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c34:	4a41      	ldr	r2, [pc, #260]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004c3c:	4b40      	ldr	r3, [pc, #256]	@ (8004d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2232      	movs	r2, #50	@ 0x32
 8004c42:	fb02 f303 	mul.w	r3, r2, r3
 8004c46:	4a3f      	ldr	r2, [pc, #252]	@ (8004d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c48:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4c:	0c9b      	lsrs	r3, r3, #18
 8004c4e:	3301      	adds	r3, #1
 8004c50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c52:	e002      	b.n	8004c5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c5a:	4b38      	ldr	r3, [pc, #224]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c66:	d102      	bne.n	8004c6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f2      	bne.n	8004c54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c6e:	4b33      	ldr	r3, [pc, #204]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c7a:	d158      	bne.n	8004d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e057      	b.n	8004d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c80:	4b2e      	ldr	r3, [pc, #184]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c86:	4a2d      	ldr	r2, [pc, #180]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c90:	e04d      	b.n	8004d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c98:	d141      	bne.n	8004d1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c9a:	4b28      	ldr	r3, [pc, #160]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca6:	d131      	bne.n	8004d0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ca8:	4b24      	ldr	r3, [pc, #144]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cae:	4a23      	ldr	r2, [pc, #140]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cb8:	4b20      	ldr	r3, [pc, #128]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004cc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2232      	movs	r2, #50	@ 0x32
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8004d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	0c9b      	lsrs	r3, r3, #18
 8004cda:	3301      	adds	r3, #1
 8004cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cde:	e002      	b.n	8004ce6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ce6:	4b15      	ldr	r3, [pc, #84]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cf2:	d102      	bne.n	8004cfa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f2      	bne.n	8004ce0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cfa:	4b10      	ldr	r3, [pc, #64]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d06:	d112      	bne.n	8004d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e011      	b.n	8004d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d12:	4a0a      	ldr	r2, [pc, #40]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004d1c:	e007      	b.n	8004d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d1e:	4b07      	ldr	r3, [pc, #28]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d26:	4a05      	ldr	r2, [pc, #20]	@ (8004d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d2c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	40007000 	.word	0x40007000
 8004d40:	20040088 	.word	0x20040088
 8004d44:	431bde83 	.word	0x431bde83

08004d48 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004d4c:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4a04      	ldr	r2, [pc, #16]	@ (8004d64 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d56:	6053      	str	r3, [r2, #4]
}
 8004d58:	bf00      	nop
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40007000 	.word	0x40007000

08004d68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f000 bc08 	b.w	800558c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d7c:	4b96      	ldr	r3, [pc, #600]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 030c 	and.w	r3, r3, #12
 8004d84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d86:	4b94      	ldr	r3, [pc, #592]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80e4 	beq.w	8004f66 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d007      	beq.n	8004db4 <HAL_RCC_OscConfig+0x4c>
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b0c      	cmp	r3, #12
 8004da8:	f040 808b 	bne.w	8004ec2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	f040 8087 	bne.w	8004ec2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004db4:	4b88      	ldr	r3, [pc, #544]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_RCC_OscConfig+0x64>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e3df      	b.n	800558c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1a      	ldr	r2, [r3, #32]
 8004dd0:	4b81      	ldr	r3, [pc, #516]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d004      	beq.n	8004de6 <HAL_RCC_OscConfig+0x7e>
 8004ddc:	4b7e      	ldr	r3, [pc, #504]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004de4:	e005      	b.n	8004df2 <HAL_RCC_OscConfig+0x8a>
 8004de6:	4b7c      	ldr	r3, [pc, #496]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dec:	091b      	lsrs	r3, r3, #4
 8004dee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d223      	bcs.n	8004e3e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fdcc 	bl	8005998 <RCC_SetFlashLatencyFromMSIRange>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e3c0      	b.n	800558c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e0a:	4b73      	ldr	r3, [pc, #460]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a72      	ldr	r2, [pc, #456]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e10:	f043 0308 	orr.w	r3, r3, #8
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	4b70      	ldr	r3, [pc, #448]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	496d      	ldr	r1, [pc, #436]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e28:	4b6b      	ldr	r3, [pc, #428]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	4968      	ldr	r1, [pc, #416]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	604b      	str	r3, [r1, #4]
 8004e3c:	e025      	b.n	8004e8a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e3e:	4b66      	ldr	r3, [pc, #408]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a65      	ldr	r2, [pc, #404]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e44:	f043 0308 	orr.w	r3, r3, #8
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	4b63      	ldr	r3, [pc, #396]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	4960      	ldr	r1, [pc, #384]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e5c:	4b5e      	ldr	r3, [pc, #376]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	021b      	lsls	r3, r3, #8
 8004e6a:	495b      	ldr	r1, [pc, #364]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fd8c 	bl	8005998 <RCC_SetFlashLatencyFromMSIRange>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e380      	b.n	800558c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e8a:	f000 fcc1 	bl	8005810 <HAL_RCC_GetSysClockFreq>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	4b51      	ldr	r3, [pc, #324]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	091b      	lsrs	r3, r3, #4
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	4950      	ldr	r1, [pc, #320]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004e9c:	5ccb      	ldrb	r3, [r1, r3]
 8004e9e:	f003 031f 	and.w	r3, r3, #31
 8004ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea6:	4a4e      	ldr	r2, [pc, #312]	@ (8004fe0 <HAL_RCC_OscConfig+0x278>)
 8004ea8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe fa90 	bl	80033d4 <HAL_InitTick>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d052      	beq.n	8004f64 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	e364      	b.n	800558c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d032      	beq.n	8004f30 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004eca:	4b43      	ldr	r3, [pc, #268]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a42      	ldr	r2, [pc, #264]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ed6:	f7fe facd 	bl	8003474 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ede:	f7fe fac9 	bl	8003474 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e34d      	b.n	800558c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ef0:	4b39      	ldr	r3, [pc, #228]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004efc:	4b36      	ldr	r3, [pc, #216]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a35      	ldr	r2, [pc, #212]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f02:	f043 0308 	orr.w	r3, r3, #8
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	4b33      	ldr	r3, [pc, #204]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	4930      	ldr	r1, [pc, #192]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	492b      	ldr	r1, [pc, #172]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	604b      	str	r3, [r1, #4]
 8004f2e:	e01a      	b.n	8004f66 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f30:	4b29      	ldr	r3, [pc, #164]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a28      	ldr	r2, [pc, #160]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f3c:	f7fe fa9a 	bl	8003474 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f44:	f7fe fa96 	bl	8003474 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e31a      	b.n	800558c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f56:	4b20      	ldr	r3, [pc, #128]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x1dc>
 8004f62:	e000      	b.n	8004f66 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d073      	beq.n	800505a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d005      	beq.n	8004f84 <HAL_RCC_OscConfig+0x21c>
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	2b0c      	cmp	r3, #12
 8004f7c:	d10e      	bne.n	8004f9c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d10b      	bne.n	8004f9c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f84:	4b14      	ldr	r3, [pc, #80]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d063      	beq.n	8005058 <HAL_RCC_OscConfig+0x2f0>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d15f      	bne.n	8005058 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e2f7      	b.n	800558c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa4:	d106      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x24c>
 8004fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a0b      	ldr	r2, [pc, #44]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e025      	b.n	8005000 <HAL_RCC_OscConfig+0x298>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fbc:	d114      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x280>
 8004fbe:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a05      	ldr	r2, [pc, #20]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	4b03      	ldr	r3, [pc, #12]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a02      	ldr	r2, [pc, #8]	@ (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	e013      	b.n	8005000 <HAL_RCC_OscConfig+0x298>
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	080750a8 	.word	0x080750a8
 8004fe0:	20040088 	.word	0x20040088
 8004fe4:	2004009c 	.word	0x2004009c
 8004fe8:	4ba0      	ldr	r3, [pc, #640]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a9f      	ldr	r2, [pc, #636]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 8004fee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	4b9d      	ldr	r3, [pc, #628]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a9c      	ldr	r2, [pc, #624]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 8004ffa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d013      	beq.n	8005030 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fe fa34 	bl	8003474 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005010:	f7fe fa30 	bl	8003474 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b64      	cmp	r3, #100	@ 0x64
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e2b4      	b.n	800558c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005022:	4b92      	ldr	r3, [pc, #584]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f0      	beq.n	8005010 <HAL_RCC_OscConfig+0x2a8>
 800502e:	e014      	b.n	800505a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fe fa20 	bl	8003474 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005038:	f7fe fa1c 	bl	8003474 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b64      	cmp	r3, #100	@ 0x64
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e2a0      	b.n	800558c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800504a:	4b88      	ldr	r3, [pc, #544]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0x2d0>
 8005056:	e000      	b.n	800505a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d060      	beq.n	8005128 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b04      	cmp	r3, #4
 800506a:	d005      	beq.n	8005078 <HAL_RCC_OscConfig+0x310>
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	2b0c      	cmp	r3, #12
 8005070:	d119      	bne.n	80050a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d116      	bne.n	80050a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005078:	4b7c      	ldr	r3, [pc, #496]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <HAL_RCC_OscConfig+0x328>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e27d      	b.n	800558c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005090:	4b76      	ldr	r3, [pc, #472]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	061b      	lsls	r3, r3, #24
 800509e:	4973      	ldr	r1, [pc, #460]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050a4:	e040      	b.n	8005128 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d023      	beq.n	80050f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050ae:	4b6f      	ldr	r3, [pc, #444]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a6e      	ldr	r2, [pc, #440]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 80050b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ba:	f7fe f9db 	bl	8003474 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050c2:	f7fe f9d7 	bl	8003474 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e25b      	b.n	800558c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050d4:	4b65      	ldr	r3, [pc, #404]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e0:	4b62      	ldr	r3, [pc, #392]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	061b      	lsls	r3, r3, #24
 80050ee:	495f      	ldr	r1, [pc, #380]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]
 80050f4:	e018      	b.n	8005128 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050f6:	4b5d      	ldr	r3, [pc, #372]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a5c      	ldr	r2, [pc, #368]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 80050fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005102:	f7fe f9b7 	bl	8003474 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800510a:	f7fe f9b3 	bl	8003474 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e237      	b.n	800558c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800511c:	4b53      	ldr	r3, [pc, #332]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1f0      	bne.n	800510a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b00      	cmp	r3, #0
 8005132:	d03c      	beq.n	80051ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01c      	beq.n	8005176 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800513c:	4b4b      	ldr	r3, [pc, #300]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 800513e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005142:	4a4a      	ldr	r2, [pc, #296]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fe f992 	bl	8003474 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005154:	f7fe f98e 	bl	8003474 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e212      	b.n	800558c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005166:	4b41      	ldr	r3, [pc, #260]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 8005168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0ef      	beq.n	8005154 <HAL_RCC_OscConfig+0x3ec>
 8005174:	e01b      	b.n	80051ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005176:	4b3d      	ldr	r3, [pc, #244]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 8005178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800517c:	4a3b      	ldr	r2, [pc, #236]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 800517e:	f023 0301 	bic.w	r3, r3, #1
 8005182:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005186:	f7fe f975 	bl	8003474 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800518e:	f7fe f971 	bl	8003474 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e1f5      	b.n	800558c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051a0:	4b32      	ldr	r3, [pc, #200]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 80051a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1ef      	bne.n	800518e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 80a6 	beq.w	8005308 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051bc:	2300      	movs	r3, #0
 80051be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051c0:	4b2a      	ldr	r3, [pc, #168]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 80051c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10d      	bne.n	80051e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051cc:	4b27      	ldr	r3, [pc, #156]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 80051ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d0:	4a26      	ldr	r2, [pc, #152]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 80051d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80051d8:	4b24      	ldr	r3, [pc, #144]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 80051da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051e4:	2301      	movs	r3, #1
 80051e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e8:	4b21      	ldr	r3, [pc, #132]	@ (8005270 <HAL_RCC_OscConfig+0x508>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d118      	bne.n	8005226 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005270 <HAL_RCC_OscConfig+0x508>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005270 <HAL_RCC_OscConfig+0x508>)
 80051fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005200:	f7fe f938 	bl	8003474 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005208:	f7fe f934 	bl	8003474 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e1b8      	b.n	800558c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800521a:	4b15      	ldr	r3, [pc, #84]	@ (8005270 <HAL_RCC_OscConfig+0x508>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f0      	beq.n	8005208 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d108      	bne.n	8005240 <HAL_RCC_OscConfig+0x4d8>
 800522e:	4b0f      	ldr	r3, [pc, #60]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 8005230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005234:	4a0d      	ldr	r2, [pc, #52]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800523e:	e029      	b.n	8005294 <HAL_RCC_OscConfig+0x52c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b05      	cmp	r3, #5
 8005246:	d115      	bne.n	8005274 <HAL_RCC_OscConfig+0x50c>
 8005248:	4b08      	ldr	r3, [pc, #32]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524e:	4a07      	ldr	r2, [pc, #28]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 8005250:	f043 0304 	orr.w	r3, r3, #4
 8005254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005258:	4b04      	ldr	r3, [pc, #16]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 800525a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800525e:	4a03      	ldr	r2, [pc, #12]	@ (800526c <HAL_RCC_OscConfig+0x504>)
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005268:	e014      	b.n	8005294 <HAL_RCC_OscConfig+0x52c>
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000
 8005270:	40007000 	.word	0x40007000
 8005274:	4b9d      	ldr	r3, [pc, #628]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 8005276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800527a:	4a9c      	ldr	r2, [pc, #624]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005284:	4b99      	ldr	r3, [pc, #612]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800528a:	4a98      	ldr	r2, [pc, #608]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 800528c:	f023 0304 	bic.w	r3, r3, #4
 8005290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d016      	beq.n	80052ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529c:	f7fe f8ea 	bl	8003474 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a2:	e00a      	b.n	80052ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a4:	f7fe f8e6 	bl	8003474 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e168      	b.n	800558c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ba:	4b8c      	ldr	r3, [pc, #560]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0ed      	beq.n	80052a4 <HAL_RCC_OscConfig+0x53c>
 80052c8:	e015      	b.n	80052f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ca:	f7fe f8d3 	bl	8003474 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052d0:	e00a      	b.n	80052e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d2:	f7fe f8cf 	bl	8003474 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e151      	b.n	800558c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052e8:	4b80      	ldr	r3, [pc, #512]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1ed      	bne.n	80052d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052f6:	7ffb      	ldrb	r3, [r7, #31]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d105      	bne.n	8005308 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052fc:	4b7b      	ldr	r3, [pc, #492]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 80052fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005300:	4a7a      	ldr	r2, [pc, #488]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 8005302:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005306:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b00      	cmp	r3, #0
 8005312:	d03c      	beq.n	800538e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01c      	beq.n	8005356 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800531c:	4b73      	ldr	r3, [pc, #460]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 800531e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005322:	4a72      	ldr	r2, [pc, #456]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 8005324:	f043 0301 	orr.w	r3, r3, #1
 8005328:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532c:	f7fe f8a2 	bl	8003474 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005334:	f7fe f89e 	bl	8003474 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e122      	b.n	800558c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005346:	4b69      	ldr	r3, [pc, #420]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 8005348:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0ef      	beq.n	8005334 <HAL_RCC_OscConfig+0x5cc>
 8005354:	e01b      	b.n	800538e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005356:	4b65      	ldr	r3, [pc, #404]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 8005358:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800535c:	4a63      	ldr	r2, [pc, #396]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 800535e:	f023 0301 	bic.w	r3, r3, #1
 8005362:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005366:	f7fe f885 	bl	8003474 <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800536e:	f7fe f881 	bl	8003474 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e105      	b.n	800558c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005380:	4b5a      	ldr	r3, [pc, #360]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 8005382:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1ef      	bne.n	800536e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 80f9 	beq.w	800558a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539c:	2b02      	cmp	r3, #2
 800539e:	f040 80cf 	bne.w	8005540 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80053a2:	4b52      	ldr	r3, [pc, #328]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f003 0203 	and.w	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d12c      	bne.n	8005410 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c0:	3b01      	subs	r3, #1
 80053c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d123      	bne.n	8005410 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d11b      	bne.n	8005410 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d113      	bne.n	8005410 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f2:	085b      	lsrs	r3, r3, #1
 80053f4:	3b01      	subs	r3, #1
 80053f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d109      	bne.n	8005410 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005406:	085b      	lsrs	r3, r3, #1
 8005408:	3b01      	subs	r3, #1
 800540a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800540c:	429a      	cmp	r2, r3
 800540e:	d071      	beq.n	80054f4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	2b0c      	cmp	r3, #12
 8005414:	d068      	beq.n	80054e8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005416:	4b35      	ldr	r3, [pc, #212]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d105      	bne.n	800542e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005422:	4b32      	ldr	r3, [pc, #200]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e0ac      	b.n	800558c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005432:	4b2e      	ldr	r3, [pc, #184]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a2d      	ldr	r2, [pc, #180]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 8005438:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800543c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800543e:	f7fe f819 	bl	8003474 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005446:	f7fe f815 	bl	8003474 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e099      	b.n	800558c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005458:	4b24      	ldr	r3, [pc, #144]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1f0      	bne.n	8005446 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005464:	4b21      	ldr	r3, [pc, #132]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	4b21      	ldr	r3, [pc, #132]	@ (80054f0 <HAL_RCC_OscConfig+0x788>)
 800546a:	4013      	ands	r3, r2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005474:	3a01      	subs	r2, #1
 8005476:	0112      	lsls	r2, r2, #4
 8005478:	4311      	orrs	r1, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800547e:	0212      	lsls	r2, r2, #8
 8005480:	4311      	orrs	r1, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005486:	0852      	lsrs	r2, r2, #1
 8005488:	3a01      	subs	r2, #1
 800548a:	0552      	lsls	r2, r2, #21
 800548c:	4311      	orrs	r1, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005492:	0852      	lsrs	r2, r2, #1
 8005494:	3a01      	subs	r2, #1
 8005496:	0652      	lsls	r2, r2, #25
 8005498:	4311      	orrs	r1, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800549e:	06d2      	lsls	r2, r2, #27
 80054a0:	430a      	orrs	r2, r1
 80054a2:	4912      	ldr	r1, [pc, #72]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80054a8:	4b10      	ldr	r3, [pc, #64]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a0f      	ldr	r2, [pc, #60]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 80054ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054b4:	4b0d      	ldr	r3, [pc, #52]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4a0c      	ldr	r2, [pc, #48]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 80054ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054c0:	f7fd ffd8 	bl	8003474 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c8:	f7fd ffd4 	bl	8003474 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e058      	b.n	800558c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054da:	4b04      	ldr	r3, [pc, #16]	@ (80054ec <HAL_RCC_OscConfig+0x784>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f0      	beq.n	80054c8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054e6:	e050      	b.n	800558a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e04f      	b.n	800558c <HAL_RCC_OscConfig+0x824>
 80054ec:	40021000 	.word	0x40021000
 80054f0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054f4:	4b27      	ldr	r3, [pc, #156]	@ (8005594 <HAL_RCC_OscConfig+0x82c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d144      	bne.n	800558a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005500:	4b24      	ldr	r3, [pc, #144]	@ (8005594 <HAL_RCC_OscConfig+0x82c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a23      	ldr	r2, [pc, #140]	@ (8005594 <HAL_RCC_OscConfig+0x82c>)
 8005506:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800550a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800550c:	4b21      	ldr	r3, [pc, #132]	@ (8005594 <HAL_RCC_OscConfig+0x82c>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	4a20      	ldr	r2, [pc, #128]	@ (8005594 <HAL_RCC_OscConfig+0x82c>)
 8005512:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005516:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005518:	f7fd ffac 	bl	8003474 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005520:	f7fd ffa8 	bl	8003474 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e02c      	b.n	800558c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005532:	4b18      	ldr	r3, [pc, #96]	@ (8005594 <HAL_RCC_OscConfig+0x82c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0x7b8>
 800553e:	e024      	b.n	800558a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b0c      	cmp	r3, #12
 8005544:	d01f      	beq.n	8005586 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005546:	4b13      	ldr	r3, [pc, #76]	@ (8005594 <HAL_RCC_OscConfig+0x82c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a12      	ldr	r2, [pc, #72]	@ (8005594 <HAL_RCC_OscConfig+0x82c>)
 800554c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005552:	f7fd ff8f 	bl	8003474 <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800555a:	f7fd ff8b 	bl	8003474 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e00f      	b.n	800558c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800556c:	4b09      	ldr	r3, [pc, #36]	@ (8005594 <HAL_RCC_OscConfig+0x82c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1f0      	bne.n	800555a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005578:	4b06      	ldr	r3, [pc, #24]	@ (8005594 <HAL_RCC_OscConfig+0x82c>)
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	4905      	ldr	r1, [pc, #20]	@ (8005594 <HAL_RCC_OscConfig+0x82c>)
 800557e:	4b06      	ldr	r3, [pc, #24]	@ (8005598 <HAL_RCC_OscConfig+0x830>)
 8005580:	4013      	ands	r3, r2
 8005582:	60cb      	str	r3, [r1, #12]
 8005584:	e001      	b.n	800558a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3720      	adds	r7, #32
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40021000 	.word	0x40021000
 8005598:	feeefffc 	.word	0xfeeefffc

0800559c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e11d      	b.n	80057f0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055b4:	4b90      	ldr	r3, [pc, #576]	@ (80057f8 <HAL_RCC_ClockConfig+0x25c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d910      	bls.n	80055e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c2:	4b8d      	ldr	r3, [pc, #564]	@ (80057f8 <HAL_RCC_ClockConfig+0x25c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f023 020f 	bic.w	r2, r3, #15
 80055ca:	498b      	ldr	r1, [pc, #556]	@ (80057f8 <HAL_RCC_ClockConfig+0x25c>)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d2:	4b89      	ldr	r3, [pc, #548]	@ (80057f8 <HAL_RCC_ClockConfig+0x25c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e105      	b.n	80057f0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d010      	beq.n	8005612 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	4b81      	ldr	r3, [pc, #516]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d908      	bls.n	8005612 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005600:	4b7e      	ldr	r3, [pc, #504]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	497b      	ldr	r1, [pc, #492]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 800560e:	4313      	orrs	r3, r2
 8005610:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d079      	beq.n	8005712 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b03      	cmp	r3, #3
 8005624:	d11e      	bne.n	8005664 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005626:	4b75      	ldr	r3, [pc, #468]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e0dc      	b.n	80057f0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005636:	f000 fa09 	bl	8005a4c <RCC_GetSysClockFreqFromPLLSource>
 800563a:	4603      	mov	r3, r0
 800563c:	4a70      	ldr	r2, [pc, #448]	@ (8005800 <HAL_RCC_ClockConfig+0x264>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d946      	bls.n	80056d0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005642:	4b6e      	ldr	r3, [pc, #440]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d140      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800564e:	4b6b      	ldr	r3, [pc, #428]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005656:	4a69      	ldr	r2, [pc, #420]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 8005658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800565c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800565e:	2380      	movs	r3, #128	@ 0x80
 8005660:	617b      	str	r3, [r7, #20]
 8005662:	e035      	b.n	80056d0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d107      	bne.n	800567c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800566c:	4b63      	ldr	r3, [pc, #396]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d115      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e0b9      	b.n	80057f0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d107      	bne.n	8005694 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005684:	4b5d      	ldr	r3, [pc, #372]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d109      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0ad      	b.n	80057f0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005694:	4b59      	ldr	r3, [pc, #356]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0a5      	b.n	80057f0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80056a4:	f000 f8b4 	bl	8005810 <HAL_RCC_GetSysClockFreq>
 80056a8:	4603      	mov	r3, r0
 80056aa:	4a55      	ldr	r2, [pc, #340]	@ (8005800 <HAL_RCC_ClockConfig+0x264>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d90f      	bls.n	80056d0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80056b0:	4b52      	ldr	r3, [pc, #328]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d109      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056bc:	4b4f      	ldr	r3, [pc, #316]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056c4:	4a4d      	ldr	r2, [pc, #308]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 80056c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056cc:	2380      	movs	r3, #128	@ 0x80
 80056ce:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056d0:	4b4a      	ldr	r3, [pc, #296]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f023 0203 	bic.w	r2, r3, #3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4947      	ldr	r1, [pc, #284]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e2:	f7fd fec7 	bl	8003474 <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e8:	e00a      	b.n	8005700 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ea:	f7fd fec3 	bl	8003474 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e077      	b.n	80057f0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005700:	4b3e      	ldr	r3, [pc, #248]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 020c 	and.w	r2, r3, #12
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	429a      	cmp	r2, r3
 8005710:	d1eb      	bne.n	80056ea <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b80      	cmp	r3, #128	@ 0x80
 8005716:	d105      	bne.n	8005724 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005718:	4b38      	ldr	r3, [pc, #224]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	4a37      	ldr	r2, [pc, #220]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 800571e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005722:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d010      	beq.n	8005752 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	4b31      	ldr	r3, [pc, #196]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800573c:	429a      	cmp	r2, r3
 800573e:	d208      	bcs.n	8005752 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005740:	4b2e      	ldr	r3, [pc, #184]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	492b      	ldr	r1, [pc, #172]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 800574e:	4313      	orrs	r3, r2
 8005750:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005752:	4b29      	ldr	r3, [pc, #164]	@ (80057f8 <HAL_RCC_ClockConfig+0x25c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d210      	bcs.n	8005782 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005760:	4b25      	ldr	r3, [pc, #148]	@ (80057f8 <HAL_RCC_ClockConfig+0x25c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f023 020f 	bic.w	r2, r3, #15
 8005768:	4923      	ldr	r1, [pc, #140]	@ (80057f8 <HAL_RCC_ClockConfig+0x25c>)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	4313      	orrs	r3, r2
 800576e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005770:	4b21      	ldr	r3, [pc, #132]	@ (80057f8 <HAL_RCC_ClockConfig+0x25c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d001      	beq.n	8005782 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e036      	b.n	80057f0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	d008      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800578e:	4b1b      	ldr	r3, [pc, #108]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	4918      	ldr	r1, [pc, #96]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 800579c:	4313      	orrs	r3, r2
 800579e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d009      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057ac:	4b13      	ldr	r3, [pc, #76]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4910      	ldr	r1, [pc, #64]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057c0:	f000 f826 	bl	8005810 <HAL_RCC_GetSysClockFreq>
 80057c4:	4602      	mov	r2, r0
 80057c6:	4b0d      	ldr	r3, [pc, #52]	@ (80057fc <HAL_RCC_ClockConfig+0x260>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	091b      	lsrs	r3, r3, #4
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	490c      	ldr	r1, [pc, #48]	@ (8005804 <HAL_RCC_ClockConfig+0x268>)
 80057d2:	5ccb      	ldrb	r3, [r1, r3]
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
 80057dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005808 <HAL_RCC_ClockConfig+0x26c>)
 80057de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80057e0:	4b0a      	ldr	r3, [pc, #40]	@ (800580c <HAL_RCC_ClockConfig+0x270>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fd fdf5 	bl	80033d4 <HAL_InitTick>
 80057ea:	4603      	mov	r3, r0
 80057ec:	73fb      	strb	r3, [r7, #15]

  return status;
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40022000 	.word	0x40022000
 80057fc:	40021000 	.word	0x40021000
 8005800:	04c4b400 	.word	0x04c4b400
 8005804:	080750a8 	.word	0x080750a8
 8005808:	20040088 	.word	0x20040088
 800580c:	2004009c 	.word	0x2004009c

08005810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005810:	b480      	push	{r7}
 8005812:	b089      	sub	sp, #36	@ 0x24
 8005814:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	2300      	movs	r3, #0
 800581c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800581e:	4b3e      	ldr	r3, [pc, #248]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x108>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 030c 	and.w	r3, r3, #12
 8005826:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005828:	4b3b      	ldr	r3, [pc, #236]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x108>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x34>
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2b0c      	cmp	r3, #12
 800583c:	d121      	bne.n	8005882 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d11e      	bne.n	8005882 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005844:	4b34      	ldr	r3, [pc, #208]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x108>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b00      	cmp	r3, #0
 800584e:	d107      	bne.n	8005860 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005850:	4b31      	ldr	r3, [pc, #196]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x108>)
 8005852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005856:	0a1b      	lsrs	r3, r3, #8
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	61fb      	str	r3, [r7, #28]
 800585e:	e005      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005860:	4b2d      	ldr	r3, [pc, #180]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x108>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800586c:	4a2b      	ldr	r2, [pc, #172]	@ (800591c <HAL_RCC_GetSysClockFreq+0x10c>)
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005874:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10d      	bne.n	8005898 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005880:	e00a      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b04      	cmp	r3, #4
 8005886:	d102      	bne.n	800588e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005888:	4b25      	ldr	r3, [pc, #148]	@ (8005920 <HAL_RCC_GetSysClockFreq+0x110>)
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	e004      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b08      	cmp	r3, #8
 8005892:	d101      	bne.n	8005898 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005894:	4b23      	ldr	r3, [pc, #140]	@ (8005924 <HAL_RCC_GetSysClockFreq+0x114>)
 8005896:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2b0c      	cmp	r3, #12
 800589c:	d134      	bne.n	8005908 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800589e:	4b1e      	ldr	r3, [pc, #120]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x108>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d003      	beq.n	80058b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d003      	beq.n	80058bc <HAL_RCC_GetSysClockFreq+0xac>
 80058b4:	e005      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80058b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005920 <HAL_RCC_GetSysClockFreq+0x110>)
 80058b8:	617b      	str	r3, [r7, #20]
      break;
 80058ba:	e005      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80058bc:	4b19      	ldr	r3, [pc, #100]	@ (8005924 <HAL_RCC_GetSysClockFreq+0x114>)
 80058be:	617b      	str	r3, [r7, #20]
      break;
 80058c0:	e002      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	617b      	str	r3, [r7, #20]
      break;
 80058c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058c8:	4b13      	ldr	r3, [pc, #76]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x108>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	091b      	lsrs	r3, r3, #4
 80058ce:	f003 030f 	and.w	r3, r3, #15
 80058d2:	3301      	adds	r3, #1
 80058d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80058d6:	4b10      	ldr	r3, [pc, #64]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x108>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	0a1b      	lsrs	r3, r3, #8
 80058dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	fb03 f202 	mul.w	r2, r3, r2
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x108>)
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	0e5b      	lsrs	r3, r3, #25
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	3301      	adds	r3, #1
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	fbb2 f3f3 	udiv	r3, r2, r3
 8005906:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005908:	69bb      	ldr	r3, [r7, #24]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3724      	adds	r7, #36	@ 0x24
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40021000 	.word	0x40021000
 800591c:	080750c0 	.word	0x080750c0
 8005920:	00f42400 	.word	0x00f42400
 8005924:	007a1200 	.word	0x007a1200

08005928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800592c:	4b03      	ldr	r3, [pc, #12]	@ (800593c <HAL_RCC_GetHCLKFreq+0x14>)
 800592e:	681b      	ldr	r3, [r3, #0]
}
 8005930:	4618      	mov	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	20040088 	.word	0x20040088

08005940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005944:	f7ff fff0 	bl	8005928 <HAL_RCC_GetHCLKFreq>
 8005948:	4602      	mov	r2, r0
 800594a:	4b06      	ldr	r3, [pc, #24]	@ (8005964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	0a1b      	lsrs	r3, r3, #8
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	4904      	ldr	r1, [pc, #16]	@ (8005968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005956:	5ccb      	ldrb	r3, [r1, r3]
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005960:	4618      	mov	r0, r3
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40021000 	.word	0x40021000
 8005968:	080750b8 	.word	0x080750b8

0800596c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005970:	f7ff ffda 	bl	8005928 <HAL_RCC_GetHCLKFreq>
 8005974:	4602      	mov	r2, r0
 8005976:	4b06      	ldr	r3, [pc, #24]	@ (8005990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	0adb      	lsrs	r3, r3, #11
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	4904      	ldr	r1, [pc, #16]	@ (8005994 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005982:	5ccb      	ldrb	r3, [r1, r3]
 8005984:	f003 031f 	and.w	r3, r3, #31
 8005988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800598c:	4618      	mov	r0, r3
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40021000 	.word	0x40021000
 8005994:	080750b8 	.word	0x080750b8

08005998 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059a0:	2300      	movs	r3, #0
 80059a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059a4:	4b27      	ldr	r3, [pc, #156]	@ (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059b0:	f7ff f906 	bl	8004bc0 <HAL_PWREx_GetVoltageRange>
 80059b4:	6178      	str	r0, [r7, #20]
 80059b6:	e014      	b.n	80059e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059b8:	4b22      	ldr	r3, [pc, #136]	@ (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059bc:	4a21      	ldr	r2, [pc, #132]	@ (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80059c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80059d0:	f7ff f8f6 	bl	8004bc0 <HAL_PWREx_GetVoltageRange>
 80059d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80059d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059da:	4a1a      	ldr	r2, [pc, #104]	@ (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059e8:	d10b      	bne.n	8005a02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b80      	cmp	r3, #128	@ 0x80
 80059ee:	d913      	bls.n	8005a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80059f4:	d902      	bls.n	80059fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059f6:	2302      	movs	r3, #2
 80059f8:	613b      	str	r3, [r7, #16]
 80059fa:	e00d      	b.n	8005a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059fc:	2301      	movs	r3, #1
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	e00a      	b.n	8005a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a06:	d902      	bls.n	8005a0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005a08:	2302      	movs	r3, #2
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	e004      	b.n	8005a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b70      	cmp	r3, #112	@ 0x70
 8005a12:	d101      	bne.n	8005a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a14:	2301      	movs	r3, #1
 8005a16:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a18:	4b0b      	ldr	r3, [pc, #44]	@ (8005a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f023 020f 	bic.w	r2, r3, #15
 8005a20:	4909      	ldr	r1, [pc, #36]	@ (8005a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a28:	4b07      	ldr	r3, [pc, #28]	@ (8005a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d001      	beq.n	8005a3a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40021000 	.word	0x40021000
 8005a48:	40022000 	.word	0x40022000

08005a4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a52:	4b2d      	ldr	r3, [pc, #180]	@ (8005b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d00b      	beq.n	8005a7a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d825      	bhi.n	8005ab4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d008      	beq.n	8005a80 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d11f      	bne.n	8005ab4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005a74:	4b25      	ldr	r3, [pc, #148]	@ (8005b0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005a76:	613b      	str	r3, [r7, #16]
    break;
 8005a78:	e01f      	b.n	8005aba <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005a7a:	4b25      	ldr	r3, [pc, #148]	@ (8005b10 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005a7c:	613b      	str	r3, [r7, #16]
    break;
 8005a7e:	e01c      	b.n	8005aba <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a80:	4b21      	ldr	r3, [pc, #132]	@ (8005b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d107      	bne.n	8005a9c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8005b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a92:	0a1b      	lsrs	r3, r3, #8
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e005      	b.n	8005aa8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	091b      	lsrs	r3, r3, #4
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8005b14 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab0:	613b      	str	r3, [r7, #16]
    break;
 8005ab2:	e002      	b.n	8005aba <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	613b      	str	r3, [r7, #16]
    break;
 8005ab8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005aba:	4b13      	ldr	r3, [pc, #76]	@ (8005b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	091b      	lsrs	r3, r3, #4
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	0a1b      	lsrs	r3, r3, #8
 8005ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	fb03 f202 	mul.w	r2, r3, r2
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ade:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ae0:	4b09      	ldr	r3, [pc, #36]	@ (8005b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	0e5b      	lsrs	r3, r3, #25
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	3301      	adds	r3, #1
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005afa:	683b      	ldr	r3, [r7, #0]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	00f42400 	.word	0x00f42400
 8005b10:	007a1200 	.word	0x007a1200
 8005b14:	080750c0 	.word	0x080750c0

08005b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b20:	2300      	movs	r3, #0
 8005b22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b24:	2300      	movs	r3, #0
 8005b26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d040      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b38:	2b80      	cmp	r3, #128	@ 0x80
 8005b3a:	d02a      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b3c:	2b80      	cmp	r3, #128	@ 0x80
 8005b3e:	d825      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005b40:	2b60      	cmp	r3, #96	@ 0x60
 8005b42:	d026      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b44:	2b60      	cmp	r3, #96	@ 0x60
 8005b46:	d821      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005b48:	2b40      	cmp	r3, #64	@ 0x40
 8005b4a:	d006      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005b4c:	2b40      	cmp	r3, #64	@ 0x40
 8005b4e:	d81d      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d009      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d010      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005b58:	e018      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b5a:	4b89      	ldr	r3, [pc, #548]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	4a88      	ldr	r2, [pc, #544]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b64:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b66:	e015      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fb02 	bl	8006178 <RCCEx_PLLSAI1_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b78:	e00c      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3320      	adds	r3, #32
 8005b7e:	2100      	movs	r1, #0
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fbed 	bl	8006360 <RCCEx_PLLSAI2_Config>
 8005b86:	4603      	mov	r3, r0
 8005b88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b8a:	e003      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	74fb      	strb	r3, [r7, #19]
      break;
 8005b90:	e000      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b94:	7cfb      	ldrb	r3, [r7, #19]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10b      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b9a:	4b79      	ldr	r3, [pc, #484]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ba0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ba8:	4975      	ldr	r1, [pc, #468]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005bb0:	e001      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb2:	7cfb      	ldrb	r3, [r7, #19]
 8005bb4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d047      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bca:	d030      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bd0:	d82a      	bhi.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005bd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bd6:	d02a      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005bd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bdc:	d824      	bhi.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005be2:	d008      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005be8:	d81e      	bhi.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bf2:	d010      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005bf4:	e018      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005bf6:	4b62      	ldr	r3, [pc, #392]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	4a61      	ldr	r2, [pc, #388]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c00:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c02:	e015      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3304      	adds	r3, #4
 8005c08:	2100      	movs	r1, #0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fab4 	bl	8006178 <RCCEx_PLLSAI1_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c14:	e00c      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	3320      	adds	r3, #32
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 fb9f 	bl	8006360 <RCCEx_PLLSAI2_Config>
 8005c22:	4603      	mov	r3, r0
 8005c24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c26:	e003      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	74fb      	strb	r3, [r7, #19]
      break;
 8005c2c:	e000      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c30:	7cfb      	ldrb	r3, [r7, #19]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10b      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005c36:	4b52      	ldr	r3, [pc, #328]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c44:	494e      	ldr	r1, [pc, #312]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005c4c:	e001      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4e:	7cfb      	ldrb	r3, [r7, #19]
 8005c50:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 809f 	beq.w	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c60:	2300      	movs	r3, #0
 8005c62:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c64:	4b46      	ldr	r3, [pc, #280]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005c74:	2300      	movs	r3, #0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00d      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c7a:	4b41      	ldr	r3, [pc, #260]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c7e:	4a40      	ldr	r2, [pc, #256]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c86:	4b3e      	ldr	r3, [pc, #248]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c8e:	60bb      	str	r3, [r7, #8]
 8005c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c92:	2301      	movs	r3, #1
 8005c94:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c96:	4b3b      	ldr	r3, [pc, #236]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a3a      	ldr	r2, [pc, #232]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ca0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ca2:	f7fd fbe7 	bl	8003474 <HAL_GetTick>
 8005ca6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ca8:	e009      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005caa:	f7fd fbe3 	bl	8003474 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d902      	bls.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	74fb      	strb	r3, [r7, #19]
        break;
 8005cbc:	e005      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005cbe:	4b31      	ldr	r3, [pc, #196]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0ef      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005cca:	7cfb      	ldrb	r3, [r7, #19]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d15b      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cda:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d01f      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d019      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cee:	4b24      	ldr	r3, [pc, #144]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cf8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cfa:	4b21      	ldr	r3, [pc, #132]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d00:	4a1f      	ldr	r2, [pc, #124]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d10:	4a1b      	ldr	r2, [pc, #108]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d1a:	4a19      	ldr	r2, [pc, #100]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d016      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2c:	f7fd fba2 	bl	8003474 <HAL_GetTick>
 8005d30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d32:	e00b      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d34:	f7fd fb9e 	bl	8003474 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d902      	bls.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	74fb      	strb	r3, [r7, #19]
            break;
 8005d4a:	e006      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0ec      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005d5a:	7cfb      	ldrb	r3, [r7, #19]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10c      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d60:	4b07      	ldr	r3, [pc, #28]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d66:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d70:	4903      	ldr	r1, [pc, #12]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005d78:	e008      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d7a:	7cfb      	ldrb	r3, [r7, #19]
 8005d7c:	74bb      	strb	r3, [r7, #18]
 8005d7e:	e005      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005d80:	40021000 	.word	0x40021000
 8005d84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d88:	7cfb      	ldrb	r3, [r7, #19]
 8005d8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d8c:	7c7b      	ldrb	r3, [r7, #17]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d105      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d92:	4ba0      	ldr	r3, [pc, #640]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d96:	4a9f      	ldr	r2, [pc, #636]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005daa:	4b9a      	ldr	r3, [pc, #616]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db0:	f023 0203 	bic.w	r2, r3, #3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db8:	4996      	ldr	r1, [pc, #600]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005dcc:	4b91      	ldr	r3, [pc, #580]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd2:	f023 020c 	bic.w	r2, r3, #12
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dda:	498e      	ldr	r1, [pc, #568]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dee:	4b89      	ldr	r3, [pc, #548]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfc:	4985      	ldr	r1, [pc, #532]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e10:	4b80      	ldr	r3, [pc, #512]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e1e:	497d      	ldr	r1, [pc, #500]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0310 	and.w	r3, r3, #16
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e32:	4b78      	ldr	r3, [pc, #480]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e40:	4974      	ldr	r1, [pc, #464]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e54:	4b6f      	ldr	r3, [pc, #444]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e62:	496c      	ldr	r1, [pc, #432]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e76:	4b67      	ldr	r3, [pc, #412]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e84:	4963      	ldr	r1, [pc, #396]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e98:	4b5e      	ldr	r3, [pc, #376]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ea6:	495b      	ldr	r1, [pc, #364]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eba:	4b56      	ldr	r3, [pc, #344]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec8:	4952      	ldr	r1, [pc, #328]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005edc:	4b4d      	ldr	r3, [pc, #308]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eea:	494a      	ldr	r1, [pc, #296]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005efe:	4b45      	ldr	r3, [pc, #276]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f0c:	4941      	ldr	r1, [pc, #260]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f20:	4b3c      	ldr	r3, [pc, #240]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f26:	f023 0203 	bic.w	r2, r3, #3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f2e:	4939      	ldr	r1, [pc, #228]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d028      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f42:	4b34      	ldr	r3, [pc, #208]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f50:	4930      	ldr	r1, [pc, #192]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f60:	d106      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f62:	4b2c      	ldr	r3, [pc, #176]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	4a2b      	ldr	r2, [pc, #172]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f6c:	60d3      	str	r3, [r2, #12]
 8005f6e:	e011      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f78:	d10c      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 f8f9 	bl	8006178 <RCCEx_PLLSAI1_Config>
 8005f86:	4603      	mov	r3, r0
 8005f88:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005f8a:	7cfb      	ldrb	r3, [r7, #19]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005f90:	7cfb      	ldrb	r3, [r7, #19]
 8005f92:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d04d      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fa4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fa8:	d108      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005faa:	4b1a      	ldr	r3, [pc, #104]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fb0:	4a18      	ldr	r2, [pc, #96]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fb6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005fba:	e012      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005fbc:	4b15      	ldr	r3, [pc, #84]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fc2:	4a14      	ldr	r2, [pc, #80]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fc8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005fcc:	4b11      	ldr	r3, [pc, #68]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fda:	490e      	ldr	r1, [pc, #56]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fe6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fea:	d106      	bne.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fec:	4b09      	ldr	r3, [pc, #36]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	4a08      	ldr	r2, [pc, #32]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ff6:	60d3      	str	r3, [r2, #12]
 8005ff8:	e020      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ffe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006002:	d109      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006004:	4b03      	ldr	r3, [pc, #12]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	4a02      	ldr	r2, [pc, #8]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800600a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800600e:	60d3      	str	r3, [r2, #12]
 8006010:	e014      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006012:	bf00      	nop
 8006014:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800601c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006020:	d10c      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	3304      	adds	r3, #4
 8006026:	2101      	movs	r1, #1
 8006028:	4618      	mov	r0, r3
 800602a:	f000 f8a5 	bl	8006178 <RCCEx_PLLSAI1_Config>
 800602e:	4603      	mov	r3, r0
 8006030:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006032:	7cfb      	ldrb	r3, [r7, #19]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006038:	7cfb      	ldrb	r3, [r7, #19]
 800603a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d028      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006048:	4b4a      	ldr	r3, [pc, #296]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800604a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006056:	4947      	ldr	r1, [pc, #284]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006058:	4313      	orrs	r3, r2
 800605a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006062:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006066:	d106      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006068:	4b42      	ldr	r3, [pc, #264]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	4a41      	ldr	r2, [pc, #260]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800606e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006072:	60d3      	str	r3, [r2, #12]
 8006074:	e011      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800607a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800607e:	d10c      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3304      	adds	r3, #4
 8006084:	2101      	movs	r1, #1
 8006086:	4618      	mov	r0, r3
 8006088:	f000 f876 	bl	8006178 <RCCEx_PLLSAI1_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006090:	7cfb      	ldrb	r3, [r7, #19]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006096:	7cfb      	ldrb	r3, [r7, #19]
 8006098:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01e      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060a6:	4b33      	ldr	r3, [pc, #204]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ac:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060b6:	492f      	ldr	r1, [pc, #188]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060c8:	d10c      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3304      	adds	r3, #4
 80060ce:	2102      	movs	r1, #2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 f851 	bl	8006178 <RCCEx_PLLSAI1_Config>
 80060d6:	4603      	mov	r3, r0
 80060d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060da:	7cfb      	ldrb	r3, [r7, #19]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80060e0:	7cfb      	ldrb	r3, [r7, #19]
 80060e2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060f0:	4b20      	ldr	r3, [pc, #128]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060f6:	f023 0204 	bic.w	r2, r3, #4
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006100:	491c      	ldr	r1, [pc, #112]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006102:	4313      	orrs	r3, r2
 8006104:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006114:	4b17      	ldr	r3, [pc, #92]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006116:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800611a:	f023 0218 	bic.w	r2, r3, #24
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006124:	4913      	ldr	r1, [pc, #76]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d017      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006138:	4b0e      	ldr	r3, [pc, #56]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800613a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800613e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006148:	490a      	ldr	r1, [pc, #40]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006156:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800615a:	d105      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800615c:	4b05      	ldr	r3, [pc, #20]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	4a04      	ldr	r2, [pc, #16]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006166:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006168:	7cbb      	ldrb	r3, [r7, #18]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40021000 	.word	0x40021000

08006178 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006186:	4b72      	ldr	r3, [pc, #456]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00e      	beq.n	80061b0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006192:	4b6f      	ldr	r3, [pc, #444]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f003 0203 	and.w	r2, r3, #3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d103      	bne.n	80061aa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
       ||
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d142      	bne.n	8006230 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	73fb      	strb	r3, [r7, #15]
 80061ae:	e03f      	b.n	8006230 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d018      	beq.n	80061ea <RCCEx_PLLSAI1_Config+0x72>
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d825      	bhi.n	8006208 <RCCEx_PLLSAI1_Config+0x90>
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d002      	beq.n	80061c6 <RCCEx_PLLSAI1_Config+0x4e>
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d009      	beq.n	80061d8 <RCCEx_PLLSAI1_Config+0x60>
 80061c4:	e020      	b.n	8006208 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80061c6:	4b62      	ldr	r3, [pc, #392]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d11d      	bne.n	800620e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061d6:	e01a      	b.n	800620e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80061d8:	4b5d      	ldr	r3, [pc, #372]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d116      	bne.n	8006212 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061e8:	e013      	b.n	8006212 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80061ea:	4b59      	ldr	r3, [pc, #356]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10f      	bne.n	8006216 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80061f6:	4b56      	ldr	r3, [pc, #344]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d109      	bne.n	8006216 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006206:	e006      	b.n	8006216 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	73fb      	strb	r3, [r7, #15]
      break;
 800620c:	e004      	b.n	8006218 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800620e:	bf00      	nop
 8006210:	e002      	b.n	8006218 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006212:	bf00      	nop
 8006214:	e000      	b.n	8006218 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006216:	bf00      	nop
    }

    if(status == HAL_OK)
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d108      	bne.n	8006230 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800621e:	4b4c      	ldr	r3, [pc, #304]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f023 0203 	bic.w	r2, r3, #3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4949      	ldr	r1, [pc, #292]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 800622c:	4313      	orrs	r3, r2
 800622e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	2b00      	cmp	r3, #0
 8006234:	f040 8086 	bne.w	8006344 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006238:	4b45      	ldr	r3, [pc, #276]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a44      	ldr	r2, [pc, #272]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 800623e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006242:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006244:	f7fd f916 	bl	8003474 <HAL_GetTick>
 8006248:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800624a:	e009      	b.n	8006260 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800624c:	f7fd f912 	bl	8003474 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d902      	bls.n	8006260 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	73fb      	strb	r3, [r7, #15]
        break;
 800625e:	e005      	b.n	800626c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006260:	4b3b      	ldr	r3, [pc, #236]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1ef      	bne.n	800624c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d168      	bne.n	8006344 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d113      	bne.n	80062a0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006278:	4b35      	ldr	r3, [pc, #212]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 800627a:	691a      	ldr	r2, [r3, #16]
 800627c:	4b35      	ldr	r3, [pc, #212]	@ (8006354 <RCCEx_PLLSAI1_Config+0x1dc>)
 800627e:	4013      	ands	r3, r2
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	6892      	ldr	r2, [r2, #8]
 8006284:	0211      	lsls	r1, r2, #8
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	68d2      	ldr	r2, [r2, #12]
 800628a:	06d2      	lsls	r2, r2, #27
 800628c:	4311      	orrs	r1, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6852      	ldr	r2, [r2, #4]
 8006292:	3a01      	subs	r2, #1
 8006294:	0112      	lsls	r2, r2, #4
 8006296:	430a      	orrs	r2, r1
 8006298:	492d      	ldr	r1, [pc, #180]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 800629a:	4313      	orrs	r3, r2
 800629c:	610b      	str	r3, [r1, #16]
 800629e:	e02d      	b.n	80062fc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d115      	bne.n	80062d2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062a6:	4b2a      	ldr	r3, [pc, #168]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	4b2b      	ldr	r3, [pc, #172]	@ (8006358 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6892      	ldr	r2, [r2, #8]
 80062b2:	0211      	lsls	r1, r2, #8
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6912      	ldr	r2, [r2, #16]
 80062b8:	0852      	lsrs	r2, r2, #1
 80062ba:	3a01      	subs	r2, #1
 80062bc:	0552      	lsls	r2, r2, #21
 80062be:	4311      	orrs	r1, r2
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6852      	ldr	r2, [r2, #4]
 80062c4:	3a01      	subs	r2, #1
 80062c6:	0112      	lsls	r2, r2, #4
 80062c8:	430a      	orrs	r2, r1
 80062ca:	4921      	ldr	r1, [pc, #132]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	610b      	str	r3, [r1, #16]
 80062d0:	e014      	b.n	80062fc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062d4:	691a      	ldr	r2, [r3, #16]
 80062d6:	4b21      	ldr	r3, [pc, #132]	@ (800635c <RCCEx_PLLSAI1_Config+0x1e4>)
 80062d8:	4013      	ands	r3, r2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6892      	ldr	r2, [r2, #8]
 80062de:	0211      	lsls	r1, r2, #8
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6952      	ldr	r2, [r2, #20]
 80062e4:	0852      	lsrs	r2, r2, #1
 80062e6:	3a01      	subs	r2, #1
 80062e8:	0652      	lsls	r2, r2, #25
 80062ea:	4311      	orrs	r1, r2
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6852      	ldr	r2, [r2, #4]
 80062f0:	3a01      	subs	r2, #1
 80062f2:	0112      	lsls	r2, r2, #4
 80062f4:	430a      	orrs	r2, r1
 80062f6:	4916      	ldr	r1, [pc, #88]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80062fc:	4b14      	ldr	r3, [pc, #80]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a13      	ldr	r2, [pc, #76]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006302:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006306:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006308:	f7fd f8b4 	bl	8003474 <HAL_GetTick>
 800630c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800630e:	e009      	b.n	8006324 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006310:	f7fd f8b0 	bl	8003474 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d902      	bls.n	8006324 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	73fb      	strb	r3, [r7, #15]
          break;
 8006322:	e005      	b.n	8006330 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006324:	4b0a      	ldr	r3, [pc, #40]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0ef      	beq.n	8006310 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006336:	4b06      	ldr	r3, [pc, #24]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006338:	691a      	ldr	r2, [r3, #16]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	4904      	ldr	r1, [pc, #16]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006340:	4313      	orrs	r3, r2
 8006342:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	40021000 	.word	0x40021000
 8006354:	07ff800f 	.word	0x07ff800f
 8006358:	ff9f800f 	.word	0xff9f800f
 800635c:	f9ff800f 	.word	0xf9ff800f

08006360 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800636e:	4b72      	ldr	r3, [pc, #456]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00e      	beq.n	8006398 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800637a:	4b6f      	ldr	r3, [pc, #444]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f003 0203 	and.w	r2, r3, #3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d103      	bne.n	8006392 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
       ||
 800638e:	2b00      	cmp	r3, #0
 8006390:	d142      	bne.n	8006418 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	73fb      	strb	r3, [r7, #15]
 8006396:	e03f      	b.n	8006418 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b03      	cmp	r3, #3
 800639e:	d018      	beq.n	80063d2 <RCCEx_PLLSAI2_Config+0x72>
 80063a0:	2b03      	cmp	r3, #3
 80063a2:	d825      	bhi.n	80063f0 <RCCEx_PLLSAI2_Config+0x90>
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d002      	beq.n	80063ae <RCCEx_PLLSAI2_Config+0x4e>
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d009      	beq.n	80063c0 <RCCEx_PLLSAI2_Config+0x60>
 80063ac:	e020      	b.n	80063f0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063ae:	4b62      	ldr	r3, [pc, #392]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d11d      	bne.n	80063f6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063be:	e01a      	b.n	80063f6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063c0:	4b5d      	ldr	r3, [pc, #372]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d116      	bne.n	80063fa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063d0:	e013      	b.n	80063fa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80063d2:	4b59      	ldr	r3, [pc, #356]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10f      	bne.n	80063fe <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80063de:	4b56      	ldr	r3, [pc, #344]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063ee:	e006      	b.n	80063fe <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	73fb      	strb	r3, [r7, #15]
      break;
 80063f4:	e004      	b.n	8006400 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80063f6:	bf00      	nop
 80063f8:	e002      	b.n	8006400 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80063fa:	bf00      	nop
 80063fc:	e000      	b.n	8006400 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80063fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d108      	bne.n	8006418 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006406:	4b4c      	ldr	r3, [pc, #304]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f023 0203 	bic.w	r2, r3, #3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4949      	ldr	r1, [pc, #292]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006414:	4313      	orrs	r3, r2
 8006416:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	2b00      	cmp	r3, #0
 800641c:	f040 8086 	bne.w	800652c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006420:	4b45      	ldr	r3, [pc, #276]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a44      	ldr	r2, [pc, #272]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800642a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800642c:	f7fd f822 	bl	8003474 <HAL_GetTick>
 8006430:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006432:	e009      	b.n	8006448 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006434:	f7fd f81e 	bl	8003474 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d902      	bls.n	8006448 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	73fb      	strb	r3, [r7, #15]
        break;
 8006446:	e005      	b.n	8006454 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006448:	4b3b      	ldr	r3, [pc, #236]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1ef      	bne.n	8006434 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d168      	bne.n	800652c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d113      	bne.n	8006488 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006460:	4b35      	ldr	r3, [pc, #212]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006462:	695a      	ldr	r2, [r3, #20]
 8006464:	4b35      	ldr	r3, [pc, #212]	@ (800653c <RCCEx_PLLSAI2_Config+0x1dc>)
 8006466:	4013      	ands	r3, r2
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6892      	ldr	r2, [r2, #8]
 800646c:	0211      	lsls	r1, r2, #8
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	68d2      	ldr	r2, [r2, #12]
 8006472:	06d2      	lsls	r2, r2, #27
 8006474:	4311      	orrs	r1, r2
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6852      	ldr	r2, [r2, #4]
 800647a:	3a01      	subs	r2, #1
 800647c:	0112      	lsls	r2, r2, #4
 800647e:	430a      	orrs	r2, r1
 8006480:	492d      	ldr	r1, [pc, #180]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006482:	4313      	orrs	r3, r2
 8006484:	614b      	str	r3, [r1, #20]
 8006486:	e02d      	b.n	80064e4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d115      	bne.n	80064ba <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800648e:	4b2a      	ldr	r3, [pc, #168]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006490:	695a      	ldr	r2, [r3, #20]
 8006492:	4b2b      	ldr	r3, [pc, #172]	@ (8006540 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006494:	4013      	ands	r3, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6892      	ldr	r2, [r2, #8]
 800649a:	0211      	lsls	r1, r2, #8
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6912      	ldr	r2, [r2, #16]
 80064a0:	0852      	lsrs	r2, r2, #1
 80064a2:	3a01      	subs	r2, #1
 80064a4:	0552      	lsls	r2, r2, #21
 80064a6:	4311      	orrs	r1, r2
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6852      	ldr	r2, [r2, #4]
 80064ac:	3a01      	subs	r2, #1
 80064ae:	0112      	lsls	r2, r2, #4
 80064b0:	430a      	orrs	r2, r1
 80064b2:	4921      	ldr	r1, [pc, #132]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	614b      	str	r3, [r1, #20]
 80064b8:	e014      	b.n	80064e4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80064ba:	4b1f      	ldr	r3, [pc, #124]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	4b21      	ldr	r3, [pc, #132]	@ (8006544 <RCCEx_PLLSAI2_Config+0x1e4>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6892      	ldr	r2, [r2, #8]
 80064c6:	0211      	lsls	r1, r2, #8
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6952      	ldr	r2, [r2, #20]
 80064cc:	0852      	lsrs	r2, r2, #1
 80064ce:	3a01      	subs	r2, #1
 80064d0:	0652      	lsls	r2, r2, #25
 80064d2:	4311      	orrs	r1, r2
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6852      	ldr	r2, [r2, #4]
 80064d8:	3a01      	subs	r2, #1
 80064da:	0112      	lsls	r2, r2, #4
 80064dc:	430a      	orrs	r2, r1
 80064de:	4916      	ldr	r1, [pc, #88]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80064e4:	4b14      	ldr	r3, [pc, #80]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a13      	ldr	r2, [pc, #76]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f0:	f7fc ffc0 	bl	8003474 <HAL_GetTick>
 80064f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80064f6:	e009      	b.n	800650c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80064f8:	f7fc ffbc 	bl	8003474 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d902      	bls.n	800650c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	73fb      	strb	r3, [r7, #15]
          break;
 800650a:	e005      	b.n	8006518 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800650c:	4b0a      	ldr	r3, [pc, #40]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0ef      	beq.n	80064f8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800651e:	4b06      	ldr	r3, [pc, #24]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006520:	695a      	ldr	r2, [r3, #20]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	4904      	ldr	r1, [pc, #16]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006528:	4313      	orrs	r3, r2
 800652a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40021000 	.word	0x40021000
 800653c:	07ff800f 	.word	0x07ff800f
 8006540:	ff9f800f 	.word	0xff9f800f
 8006544:	f9ff800f 	.word	0xf9ff800f

08006548 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e095      	b.n	8006686 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655e:	2b00      	cmp	r3, #0
 8006560:	d108      	bne.n	8006574 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800656a:	d009      	beq.n	8006580 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	61da      	str	r2, [r3, #28]
 8006572:	e005      	b.n	8006580 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fc f908 	bl	80027b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065c0:	d902      	bls.n	80065c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	e002      	b.n	80065ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80065c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80065cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80065d6:	d007      	beq.n	80065e8 <HAL_SPI_Init+0xa0>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065e0:	d002      	beq.n	80065e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800662a:	ea42 0103 	orr.w	r1, r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006632:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	0c1b      	lsrs	r3, r3, #16
 8006644:	f003 0204 	and.w	r2, r3, #4
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	431a      	orrs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006656:	f003 0308 	and.w	r3, r3, #8
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006664:	ea42 0103 	orr.w	r1, r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b088      	sub	sp, #32
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	603b      	str	r3, [r7, #0]
 800669a:	4613      	mov	r3, r2
 800669c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800669e:	f7fc fee9 	bl	8003474 <HAL_GetTick>
 80066a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80066a4:	88fb      	ldrh	r3, [r7, #6]
 80066a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d001      	beq.n	80066b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
 80066b6:	e15c      	b.n	8006972 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_SPI_Transmit+0x36>
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e154      	b.n	8006972 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_SPI_Transmit+0x48>
 80066d2:	2302      	movs	r3, #2
 80066d4:	e14d      	b.n	8006972 <HAL_SPI_Transmit+0x2e4>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2203      	movs	r2, #3
 80066e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	88fa      	ldrh	r2, [r7, #6]
 80066f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	88fa      	ldrh	r2, [r7, #6]
 80066fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006728:	d10f      	bne.n	800674a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006738:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006748:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006754:	2b40      	cmp	r3, #64	@ 0x40
 8006756:	d007      	beq.n	8006768 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006766:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006770:	d952      	bls.n	8006818 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <HAL_SPI_Transmit+0xf2>
 800677a:	8b7b      	ldrh	r3, [r7, #26]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d145      	bne.n	800680c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006784:	881a      	ldrh	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006790:	1c9a      	adds	r2, r3, #2
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80067a4:	e032      	b.n	800680c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d112      	bne.n	80067da <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b8:	881a      	ldrh	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c4:	1c9a      	adds	r2, r3, #2
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80067d8:	e018      	b.n	800680c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067da:	f7fc fe4b 	bl	8003474 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d803      	bhi.n	80067f2 <HAL_SPI_Transmit+0x164>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d102      	bne.n	80067f8 <HAL_SPI_Transmit+0x16a>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d109      	bne.n	800680c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e0b2      	b.n	8006972 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1c7      	bne.n	80067a6 <HAL_SPI_Transmit+0x118>
 8006816:	e083      	b.n	8006920 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_SPI_Transmit+0x198>
 8006820:	8b7b      	ldrh	r3, [r7, #26]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d177      	bne.n	8006916 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800682a:	b29b      	uxth	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	d912      	bls.n	8006856 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006834:	881a      	ldrh	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006840:	1c9a      	adds	r2, r3, #2
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800684a:	b29b      	uxth	r3, r3
 800684c:	3b02      	subs	r3, #2
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006854:	e05f      	b.n	8006916 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	330c      	adds	r3, #12
 8006860:	7812      	ldrb	r2, [r2, #0]
 8006862:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800687c:	e04b      	b.n	8006916 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b02      	cmp	r3, #2
 800688a:	d12b      	bne.n	80068e4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b01      	cmp	r3, #1
 8006894:	d912      	bls.n	80068bc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689a:	881a      	ldrh	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a6:	1c9a      	adds	r2, r3, #2
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b02      	subs	r3, #2
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80068ba:	e02c      	b.n	8006916 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	330c      	adds	r3, #12
 80068c6:	7812      	ldrb	r2, [r2, #0]
 80068c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80068e2:	e018      	b.n	8006916 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068e4:	f7fc fdc6 	bl	8003474 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d803      	bhi.n	80068fc <HAL_SPI_Transmit+0x26e>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fa:	d102      	bne.n	8006902 <HAL_SPI_Transmit+0x274>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e02d      	b.n	8006972 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800691a:	b29b      	uxth	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1ae      	bne.n	800687e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 fb65 	bl	8006ff4 <SPI_EndRxTxTransaction>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10a      	bne.n	8006954 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800693e:	2300      	movs	r3, #0
 8006940:	617b      	str	r3, [r7, #20]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006970:	2300      	movs	r3, #0
  }
}
 8006972:	4618      	mov	r0, r3
 8006974:	3720      	adds	r7, #32
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b08a      	sub	sp, #40	@ 0x28
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	607a      	str	r2, [r7, #4]
 8006986:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006988:	2301      	movs	r3, #1
 800698a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800698c:	f7fc fd72 	bl	8003474 <HAL_GetTick>
 8006990:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006998:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80069a0:	887b      	ldrh	r3, [r7, #2]
 80069a2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80069a4:	887b      	ldrh	r3, [r7, #2]
 80069a6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80069a8:	7ffb      	ldrb	r3, [r7, #31]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d00c      	beq.n	80069c8 <HAL_SPI_TransmitReceive+0x4e>
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069b4:	d106      	bne.n	80069c4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <HAL_SPI_TransmitReceive+0x4a>
 80069be:	7ffb      	ldrb	r3, [r7, #31]
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d001      	beq.n	80069c8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80069c4:	2302      	movs	r3, #2
 80069c6:	e1f3      	b.n	8006db0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d005      	beq.n	80069da <HAL_SPI_TransmitReceive+0x60>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <HAL_SPI_TransmitReceive+0x60>
 80069d4:	887b      	ldrh	r3, [r7, #2]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e1e8      	b.n	8006db0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_SPI_TransmitReceive+0x72>
 80069e8:	2302      	movs	r3, #2
 80069ea:	e1e1      	b.n	8006db0 <HAL_SPI_TransmitReceive+0x436>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d003      	beq.n	8006a08 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2205      	movs	r2, #5
 8006a04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	887a      	ldrh	r2, [r7, #2]
 8006a18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	887a      	ldrh	r2, [r7, #2]
 8006a20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	887a      	ldrh	r2, [r7, #2]
 8006a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	887a      	ldrh	r2, [r7, #2]
 8006a34:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a4a:	d802      	bhi.n	8006a52 <HAL_SPI_TransmitReceive+0xd8>
 8006a4c:	8abb      	ldrh	r3, [r7, #20]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d908      	bls.n	8006a64 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006a60:	605a      	str	r2, [r3, #4]
 8006a62:	e007      	b.n	8006a74 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006a72:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a7e:	2b40      	cmp	r3, #64	@ 0x40
 8006a80:	d007      	beq.n	8006a92 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a9a:	f240 8083 	bls.w	8006ba4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d002      	beq.n	8006aac <HAL_SPI_TransmitReceive+0x132>
 8006aa6:	8afb      	ldrh	r3, [r7, #22]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d16f      	bne.n	8006b8c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab0:	881a      	ldrh	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abc:	1c9a      	adds	r2, r3, #2
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ad0:	e05c      	b.n	8006b8c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d11b      	bne.n	8006b18 <HAL_SPI_TransmitReceive+0x19e>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d016      	beq.n	8006b18 <HAL_SPI_TransmitReceive+0x19e>
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d113      	bne.n	8006b18 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af4:	881a      	ldrh	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b00:	1c9a      	adds	r2, r3, #2
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d11c      	bne.n	8006b60 <HAL_SPI_TransmitReceive+0x1e6>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d016      	beq.n	8006b60 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3c:	b292      	uxth	r2, r2
 8006b3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b44:	1c9a      	adds	r2, r3, #2
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b60:	f7fc fc88 	bl	8003474 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d80d      	bhi.n	8006b8c <HAL_SPI_TransmitReceive+0x212>
 8006b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b76:	d009      	beq.n	8006b8c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e111      	b.n	8006db0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d19d      	bne.n	8006ad2 <HAL_SPI_TransmitReceive+0x158>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d197      	bne.n	8006ad2 <HAL_SPI_TransmitReceive+0x158>
 8006ba2:	e0e5      	b.n	8006d70 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_SPI_TransmitReceive+0x23a>
 8006bac:	8afb      	ldrh	r3, [r7, #22]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	f040 80d1 	bne.w	8006d56 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d912      	bls.n	8006be4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc2:	881a      	ldrh	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bce:	1c9a      	adds	r2, r3, #2
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b02      	subs	r3, #2
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006be2:	e0b8      	b.n	8006d56 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	330c      	adds	r3, #12
 8006bee:	7812      	ldrb	r2, [r2, #0]
 8006bf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c0a:	e0a4      	b.n	8006d56 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d134      	bne.n	8006c84 <HAL_SPI_TransmitReceive+0x30a>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d02f      	beq.n	8006c84 <HAL_SPI_TransmitReceive+0x30a>
 8006c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d12c      	bne.n	8006c84 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d912      	bls.n	8006c5a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c38:	881a      	ldrh	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c44:	1c9a      	adds	r2, r3, #2
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	3b02      	subs	r3, #2
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c58:	e012      	b.n	8006c80 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	330c      	adds	r3, #12
 8006c64:	7812      	ldrb	r2, [r2, #0]
 8006c66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d148      	bne.n	8006d24 <HAL_SPI_TransmitReceive+0x3aa>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d042      	beq.n	8006d24 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d923      	bls.n	8006cf2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb4:	b292      	uxth	r2, r2
 8006cb6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cbc:	1c9a      	adds	r2, r3, #2
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	3b02      	subs	r3, #2
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d81f      	bhi.n	8006d20 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006cee:	605a      	str	r2, [r3, #4]
 8006cf0:	e016      	b.n	8006d20 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f103 020c 	add.w	r2, r3, #12
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfe:	7812      	ldrb	r2, [r2, #0]
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	3b01      	subs	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d20:	2301      	movs	r3, #1
 8006d22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d24:	f7fc fba6 	bl	8003474 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d803      	bhi.n	8006d3c <HAL_SPI_TransmitReceive+0x3c2>
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3a:	d102      	bne.n	8006d42 <HAL_SPI_TransmitReceive+0x3c8>
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d109      	bne.n	8006d56 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e02c      	b.n	8006db0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f47f af55 	bne.w	8006c0c <HAL_SPI_TransmitReceive+0x292>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f47f af4e 	bne.w	8006c0c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d70:	6a3a      	ldr	r2, [r7, #32]
 8006d72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 f93d 	bl	8006ff4 <SPI_EndRxTxTransaction>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d008      	beq.n	8006d92 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2220      	movs	r2, #32
 8006d84:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e00e      	b.n	8006db0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006dae:	2300      	movs	r3, #0
  }
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3728      	adds	r7, #40	@ 0x28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006dc8:	f7fc fb54 	bl	8003474 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006dd8:	f7fc fb4c 	bl	8003474 <HAL_GetTick>
 8006ddc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006dde:	4b39      	ldr	r3, [pc, #228]	@ (8006ec4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	015b      	lsls	r3, r3, #5
 8006de4:	0d1b      	lsrs	r3, r3, #20
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	fb02 f303 	mul.w	r3, r2, r3
 8006dec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dee:	e054      	b.n	8006e9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df6:	d050      	beq.n	8006e9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006df8:	f7fc fb3c 	bl	8003474 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	69fa      	ldr	r2, [r7, #28]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d902      	bls.n	8006e0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d13d      	bne.n	8006e8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e26:	d111      	bne.n	8006e4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e30:	d004      	beq.n	8006e3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e3a:	d107      	bne.n	8006e4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e54:	d10f      	bne.n	8006e76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e017      	b.n	8006eba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	bf0c      	ite	eq
 8006eaa:	2301      	moveq	r3, #1
 8006eac:	2300      	movne	r3, #0
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d19b      	bne.n	8006df0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3720      	adds	r7, #32
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20040088 	.word	0x20040088

08006ec8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08a      	sub	sp, #40	@ 0x28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
 8006ed4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006eda:	f7fc facb 	bl	8003474 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee2:	1a9b      	subs	r3, r3, r2
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006eea:	f7fc fac3 	bl	8003474 <HAL_GetTick>
 8006eee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006ef8:	4b3d      	ldr	r3, [pc, #244]	@ (8006ff0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	00da      	lsls	r2, r3, #3
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	0d1b      	lsrs	r3, r3, #20
 8006f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f0a:	fb02 f303 	mul.w	r3, r2, r3
 8006f0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006f10:	e060      	b.n	8006fd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006f18:	d107      	bne.n	8006f2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d104      	bne.n	8006f2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f30:	d050      	beq.n	8006fd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f32:	f7fc fa9f 	bl	8003474 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d902      	bls.n	8006f48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d13d      	bne.n	8006fc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f60:	d111      	bne.n	8006f86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f6a:	d004      	beq.n	8006f76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f74:	d107      	bne.n	8006f86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f8e:	d10f      	bne.n	8006fb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e010      	b.n	8006fe6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689a      	ldr	r2, [r3, #8]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d196      	bne.n	8006f12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3728      	adds	r7, #40	@ 0x28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20040088 	.word	0x20040088

08006ff4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2200      	movs	r2, #0
 8007008:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f7ff ff5b 	bl	8006ec8 <SPI_WaitFifoStateUntilTimeout>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d007      	beq.n	8007028 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800701c:	f043 0220 	orr.w	r2, r3, #32
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e027      	b.n	8007078 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2200      	movs	r2, #0
 8007030:	2180      	movs	r1, #128	@ 0x80
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f7ff fec0 	bl	8006db8 <SPI_WaitFlagStateUntilTimeout>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007042:	f043 0220 	orr.w	r2, r3, #32
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e014      	b.n	8007078 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2200      	movs	r2, #0
 8007056:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f7ff ff34 	bl	8006ec8 <SPI_WaitFifoStateUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d007      	beq.n	8007076 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800706a:	f043 0220 	orr.w	r2, r3, #32
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e000      	b.n	8007078 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e049      	b.n	8007126 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d106      	bne.n	80070ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7fb fbf6 	bl	8002898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3304      	adds	r3, #4
 80070bc:	4619      	mov	r1, r3
 80070be:	4610      	mov	r0, r2
 80070c0:	f000 fad8 	bl	8007674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
	...

08007130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b01      	cmp	r3, #1
 8007142:	d001      	beq.n	8007148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e04f      	b.n	80071e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f042 0201 	orr.w	r2, r2, #1
 800715e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a23      	ldr	r2, [pc, #140]	@ (80071f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d01d      	beq.n	80071a6 <HAL_TIM_Base_Start_IT+0x76>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007172:	d018      	beq.n	80071a6 <HAL_TIM_Base_Start_IT+0x76>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a1f      	ldr	r2, [pc, #124]	@ (80071f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d013      	beq.n	80071a6 <HAL_TIM_Base_Start_IT+0x76>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a1e      	ldr	r2, [pc, #120]	@ (80071fc <HAL_TIM_Base_Start_IT+0xcc>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00e      	beq.n	80071a6 <HAL_TIM_Base_Start_IT+0x76>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a1c      	ldr	r2, [pc, #112]	@ (8007200 <HAL_TIM_Base_Start_IT+0xd0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d009      	beq.n	80071a6 <HAL_TIM_Base_Start_IT+0x76>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a1b      	ldr	r2, [pc, #108]	@ (8007204 <HAL_TIM_Base_Start_IT+0xd4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d004      	beq.n	80071a6 <HAL_TIM_Base_Start_IT+0x76>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a19      	ldr	r2, [pc, #100]	@ (8007208 <HAL_TIM_Base_Start_IT+0xd8>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d115      	bne.n	80071d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	4b17      	ldr	r3, [pc, #92]	@ (800720c <HAL_TIM_Base_Start_IT+0xdc>)
 80071ae:	4013      	ands	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b06      	cmp	r3, #6
 80071b6:	d015      	beq.n	80071e4 <HAL_TIM_Base_Start_IT+0xb4>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071be:	d011      	beq.n	80071e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0201 	orr.w	r2, r2, #1
 80071ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d0:	e008      	b.n	80071e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0201 	orr.w	r2, r2, #1
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	e000      	b.n	80071e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	40012c00 	.word	0x40012c00
 80071f8:	40000400 	.word	0x40000400
 80071fc:	40000800 	.word	0x40000800
 8007200:	40000c00 	.word	0x40000c00
 8007204:	40013400 	.word	0x40013400
 8007208:	40014000 	.word	0x40014000
 800720c:	00010007 	.word	0x00010007

08007210 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0201 	bic.w	r2, r2, #1
 8007226:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6a1a      	ldr	r2, [r3, #32]
 800722e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007232:	4013      	ands	r3, r2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10f      	bne.n	8007258 <HAL_TIM_Base_Stop_IT+0x48>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6a1a      	ldr	r2, [r3, #32]
 800723e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007242:	4013      	ands	r3, r2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d107      	bne.n	8007258 <HAL_TIM_Base_Stop_IT+0x48>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0201 	bic.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d020      	beq.n	80072d2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d01b      	beq.n	80072d2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f06f 0202 	mvn.w	r2, #2
 80072a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f003 0303 	and.w	r3, r3, #3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f9bc 	bl	8007636 <HAL_TIM_IC_CaptureCallback>
 80072be:	e005      	b.n	80072cc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f9ae 	bl	8007622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f9bf 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d020      	beq.n	800731e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f003 0304 	and.w	r3, r3, #4
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d01b      	beq.n	800731e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f06f 0204 	mvn.w	r2, #4
 80072ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f996 	bl	8007636 <HAL_TIM_IC_CaptureCallback>
 800730a:	e005      	b.n	8007318 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f988 	bl	8007622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f999 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f003 0308 	and.w	r3, r3, #8
 8007324:	2b00      	cmp	r3, #0
 8007326:	d020      	beq.n	800736a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f003 0308 	and.w	r3, r3, #8
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01b      	beq.n	800736a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f06f 0208 	mvn.w	r2, #8
 800733a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2204      	movs	r2, #4
 8007340:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	f003 0303 	and.w	r3, r3, #3
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f970 	bl	8007636 <HAL_TIM_IC_CaptureCallback>
 8007356:	e005      	b.n	8007364 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f962 	bl	8007622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f973 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f003 0310 	and.w	r3, r3, #16
 8007370:	2b00      	cmp	r3, #0
 8007372:	d020      	beq.n	80073b6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f003 0310 	and.w	r3, r3, #16
 800737a:	2b00      	cmp	r3, #0
 800737c:	d01b      	beq.n	80073b6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f06f 0210 	mvn.w	r2, #16
 8007386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2208      	movs	r2, #8
 800738c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f94a 	bl	8007636 <HAL_TIM_IC_CaptureCallback>
 80073a2:	e005      	b.n	80073b0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f93c 	bl	8007622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f94d 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00c      	beq.n	80073da <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d007      	beq.n	80073da <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f06f 0201 	mvn.w	r2, #1
 80073d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f91a 	bl	800760e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d104      	bne.n	80073ee <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00c      	beq.n	8007408 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d007      	beq.n	8007408 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fb08 	bl	8007a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00c      	beq.n	800742c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007418:	2b00      	cmp	r3, #0
 800741a:	d007      	beq.n	800742c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fb00 	bl	8007a2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00c      	beq.n	8007450 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800743c:	2b00      	cmp	r3, #0
 800743e:	d007      	beq.n	8007450 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f907 	bl	800765e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00c      	beq.n	8007474 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d007      	beq.n	8007474 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f06f 0220 	mvn.w	r2, #32
 800746c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fac8 	bl	8007a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007474:	bf00      	nop
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007490:	2b01      	cmp	r3, #1
 8007492:	d101      	bne.n	8007498 <HAL_TIM_ConfigClockSource+0x1c>
 8007494:	2302      	movs	r3, #2
 8007496:	e0b6      	b.n	8007606 <HAL_TIM_ConfigClockSource+0x18a>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80074ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074d4:	d03e      	beq.n	8007554 <HAL_TIM_ConfigClockSource+0xd8>
 80074d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074da:	f200 8087 	bhi.w	80075ec <HAL_TIM_ConfigClockSource+0x170>
 80074de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074e2:	f000 8086 	beq.w	80075f2 <HAL_TIM_ConfigClockSource+0x176>
 80074e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074ea:	d87f      	bhi.n	80075ec <HAL_TIM_ConfigClockSource+0x170>
 80074ec:	2b70      	cmp	r3, #112	@ 0x70
 80074ee:	d01a      	beq.n	8007526 <HAL_TIM_ConfigClockSource+0xaa>
 80074f0:	2b70      	cmp	r3, #112	@ 0x70
 80074f2:	d87b      	bhi.n	80075ec <HAL_TIM_ConfigClockSource+0x170>
 80074f4:	2b60      	cmp	r3, #96	@ 0x60
 80074f6:	d050      	beq.n	800759a <HAL_TIM_ConfigClockSource+0x11e>
 80074f8:	2b60      	cmp	r3, #96	@ 0x60
 80074fa:	d877      	bhi.n	80075ec <HAL_TIM_ConfigClockSource+0x170>
 80074fc:	2b50      	cmp	r3, #80	@ 0x50
 80074fe:	d03c      	beq.n	800757a <HAL_TIM_ConfigClockSource+0xfe>
 8007500:	2b50      	cmp	r3, #80	@ 0x50
 8007502:	d873      	bhi.n	80075ec <HAL_TIM_ConfigClockSource+0x170>
 8007504:	2b40      	cmp	r3, #64	@ 0x40
 8007506:	d058      	beq.n	80075ba <HAL_TIM_ConfigClockSource+0x13e>
 8007508:	2b40      	cmp	r3, #64	@ 0x40
 800750a:	d86f      	bhi.n	80075ec <HAL_TIM_ConfigClockSource+0x170>
 800750c:	2b30      	cmp	r3, #48	@ 0x30
 800750e:	d064      	beq.n	80075da <HAL_TIM_ConfigClockSource+0x15e>
 8007510:	2b30      	cmp	r3, #48	@ 0x30
 8007512:	d86b      	bhi.n	80075ec <HAL_TIM_ConfigClockSource+0x170>
 8007514:	2b20      	cmp	r3, #32
 8007516:	d060      	beq.n	80075da <HAL_TIM_ConfigClockSource+0x15e>
 8007518:	2b20      	cmp	r3, #32
 800751a:	d867      	bhi.n	80075ec <HAL_TIM_ConfigClockSource+0x170>
 800751c:	2b00      	cmp	r3, #0
 800751e:	d05c      	beq.n	80075da <HAL_TIM_ConfigClockSource+0x15e>
 8007520:	2b10      	cmp	r3, #16
 8007522:	d05a      	beq.n	80075da <HAL_TIM_ConfigClockSource+0x15e>
 8007524:	e062      	b.n	80075ec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007536:	f000 f9bd 	bl	80078b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007548:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	609a      	str	r2, [r3, #8]
      break;
 8007552:	e04f      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007564:	f000 f9a6 	bl	80078b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007576:	609a      	str	r2, [r3, #8]
      break;
 8007578:	e03c      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007586:	461a      	mov	r2, r3
 8007588:	f000 f91a 	bl	80077c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2150      	movs	r1, #80	@ 0x50
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f973 	bl	800787e <TIM_ITRx_SetConfig>
      break;
 8007598:	e02c      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075a6:	461a      	mov	r2, r3
 80075a8:	f000 f939 	bl	800781e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2160      	movs	r1, #96	@ 0x60
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 f963 	bl	800787e <TIM_ITRx_SetConfig>
      break;
 80075b8:	e01c      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075c6:	461a      	mov	r2, r3
 80075c8:	f000 f8fa 	bl	80077c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2140      	movs	r1, #64	@ 0x40
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 f953 	bl	800787e <TIM_ITRx_SetConfig>
      break;
 80075d8:	e00c      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4619      	mov	r1, r3
 80075e4:	4610      	mov	r0, r2
 80075e6:	f000 f94a 	bl	800787e <TIM_ITRx_SetConfig>
      break;
 80075ea:	e003      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	73fb      	strb	r3, [r7, #15]
      break;
 80075f0:	e000      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80075f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007604:	7bfb      	ldrb	r3, [r7, #15]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800762a:	bf00      	nop
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007636:	b480      	push	{r7}
 8007638:	b083      	sub	sp, #12
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
	...

08007674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a46      	ldr	r2, [pc, #280]	@ (80077a0 <TIM_Base_SetConfig+0x12c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d013      	beq.n	80076b4 <TIM_Base_SetConfig+0x40>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007692:	d00f      	beq.n	80076b4 <TIM_Base_SetConfig+0x40>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a43      	ldr	r2, [pc, #268]	@ (80077a4 <TIM_Base_SetConfig+0x130>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00b      	beq.n	80076b4 <TIM_Base_SetConfig+0x40>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a42      	ldr	r2, [pc, #264]	@ (80077a8 <TIM_Base_SetConfig+0x134>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d007      	beq.n	80076b4 <TIM_Base_SetConfig+0x40>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a41      	ldr	r2, [pc, #260]	@ (80077ac <TIM_Base_SetConfig+0x138>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d003      	beq.n	80076b4 <TIM_Base_SetConfig+0x40>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a40      	ldr	r2, [pc, #256]	@ (80077b0 <TIM_Base_SetConfig+0x13c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d108      	bne.n	80076c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a35      	ldr	r2, [pc, #212]	@ (80077a0 <TIM_Base_SetConfig+0x12c>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d01f      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076d4:	d01b      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a32      	ldr	r2, [pc, #200]	@ (80077a4 <TIM_Base_SetConfig+0x130>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d017      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a31      	ldr	r2, [pc, #196]	@ (80077a8 <TIM_Base_SetConfig+0x134>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d013      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a30      	ldr	r2, [pc, #192]	@ (80077ac <TIM_Base_SetConfig+0x138>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00f      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a2f      	ldr	r2, [pc, #188]	@ (80077b0 <TIM_Base_SetConfig+0x13c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d00b      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a2e      	ldr	r2, [pc, #184]	@ (80077b4 <TIM_Base_SetConfig+0x140>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d007      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a2d      	ldr	r2, [pc, #180]	@ (80077b8 <TIM_Base_SetConfig+0x144>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d003      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a2c      	ldr	r2, [pc, #176]	@ (80077bc <TIM_Base_SetConfig+0x148>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d108      	bne.n	8007720 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	4313      	orrs	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	689a      	ldr	r2, [r3, #8]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a16      	ldr	r2, [pc, #88]	@ (80077a0 <TIM_Base_SetConfig+0x12c>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00f      	beq.n	800776c <TIM_Base_SetConfig+0xf8>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a18      	ldr	r2, [pc, #96]	@ (80077b0 <TIM_Base_SetConfig+0x13c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d00b      	beq.n	800776c <TIM_Base_SetConfig+0xf8>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a17      	ldr	r2, [pc, #92]	@ (80077b4 <TIM_Base_SetConfig+0x140>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d007      	beq.n	800776c <TIM_Base_SetConfig+0xf8>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a16      	ldr	r2, [pc, #88]	@ (80077b8 <TIM_Base_SetConfig+0x144>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d003      	beq.n	800776c <TIM_Base_SetConfig+0xf8>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a15      	ldr	r2, [pc, #84]	@ (80077bc <TIM_Base_SetConfig+0x148>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d103      	bne.n	8007774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	691a      	ldr	r2, [r3, #16]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b01      	cmp	r3, #1
 8007784:	d105      	bne.n	8007792 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f023 0201 	bic.w	r2, r3, #1
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	611a      	str	r2, [r3, #16]
  }
}
 8007792:	bf00      	nop
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40012c00 	.word	0x40012c00
 80077a4:	40000400 	.word	0x40000400
 80077a8:	40000800 	.word	0x40000800
 80077ac:	40000c00 	.word	0x40000c00
 80077b0:	40013400 	.word	0x40013400
 80077b4:	40014000 	.word	0x40014000
 80077b8:	40014400 	.word	0x40014400
 80077bc:	40014800 	.word	0x40014800

080077c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	f023 0201 	bic.w	r2, r3, #1
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	011b      	lsls	r3, r3, #4
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f023 030a 	bic.w	r3, r3, #10
 80077fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	4313      	orrs	r3, r2
 8007804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	621a      	str	r2, [r3, #32]
}
 8007812:	bf00      	nop
 8007814:	371c      	adds	r7, #28
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800781e:	b480      	push	{r7}
 8007820:	b087      	sub	sp, #28
 8007822:	af00      	add	r7, sp, #0
 8007824:	60f8      	str	r0, [r7, #12]
 8007826:	60b9      	str	r1, [r7, #8]
 8007828:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6a1b      	ldr	r3, [r3, #32]
 8007834:	f023 0210 	bic.w	r2, r3, #16
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007848:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	031b      	lsls	r3, r3, #12
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	4313      	orrs	r3, r2
 8007852:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800785a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	4313      	orrs	r3, r2
 8007864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	621a      	str	r2, [r3, #32]
}
 8007872:	bf00      	nop
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4313      	orrs	r3, r2
 800789c:	f043 0307 	orr.w	r3, r3, #7
 80078a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	609a      	str	r2, [r3, #8]
}
 80078a8:	bf00      	nop
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
 80078c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	021a      	lsls	r2, r3, #8
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	431a      	orrs	r2, r3
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	4313      	orrs	r3, r2
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	4313      	orrs	r3, r2
 80078e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	609a      	str	r2, [r3, #8]
}
 80078e8:	bf00      	nop
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007904:	2b01      	cmp	r3, #1
 8007906:	d101      	bne.n	800790c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007908:	2302      	movs	r3, #2
 800790a:	e068      	b.n	80079de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a2e      	ldr	r2, [pc, #184]	@ (80079ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d004      	beq.n	8007940 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a2d      	ldr	r2, [pc, #180]	@ (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d108      	bne.n	8007952 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007946:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	4313      	orrs	r3, r2
 8007950:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007958:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a1e      	ldr	r2, [pc, #120]	@ (80079ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d01d      	beq.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800797e:	d018      	beq.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a1b      	ldr	r2, [pc, #108]	@ (80079f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d013      	beq.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a1a      	ldr	r2, [pc, #104]	@ (80079f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00e      	beq.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a18      	ldr	r2, [pc, #96]	@ (80079fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d009      	beq.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a13      	ldr	r2, [pc, #76]	@ (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d004      	beq.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a14      	ldr	r2, [pc, #80]	@ (8007a00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d10c      	bne.n	80079cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3714      	adds	r7, #20
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	40012c00 	.word	0x40012c00
 80079f0:	40013400 	.word	0x40013400
 80079f4:	40000400 	.word	0x40000400
 80079f8:	40000800 	.word	0x40000800
 80079fc:	40000c00 	.word	0x40000c00
 8007a00:	40014000 	.word	0x40014000

08007a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e042      	b.n	8007ad8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d106      	bne.n	8007a6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7fa fdfd 	bl	8002664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2224      	movs	r2, #36	@ 0x24
 8007a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 0201 	bic.w	r2, r2, #1
 8007a80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fc7c 	bl	8008388 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f97d 	bl	8007d90 <UART_SetConfig>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d101      	bne.n	8007aa0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e01b      	b.n	8007ad8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007aae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689a      	ldr	r2, [r3, #8]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007abe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f042 0201 	orr.w	r2, r2, #1
 8007ace:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fcfb 	bl	80084cc <UART_CheckIdleState>
 8007ad6:	4603      	mov	r3, r0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b08a      	sub	sp, #40	@ 0x28
 8007ae4:	af02      	add	r7, sp, #8
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	4613      	mov	r3, r2
 8007aee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	d17b      	bne.n	8007bf2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <HAL_UART_Transmit+0x26>
 8007b00:	88fb      	ldrh	r3, [r7, #6]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e074      	b.n	8007bf4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2221      	movs	r2, #33	@ 0x21
 8007b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b1a:	f7fb fcab 	bl	8003474 <HAL_GetTick>
 8007b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	88fa      	ldrh	r2, [r7, #6]
 8007b24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	88fa      	ldrh	r2, [r7, #6]
 8007b2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b38:	d108      	bne.n	8007b4c <HAL_UART_Transmit+0x6c>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d104      	bne.n	8007b4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	61bb      	str	r3, [r7, #24]
 8007b4a:	e003      	b.n	8007b54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b50:	2300      	movs	r3, #0
 8007b52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b54:	e030      	b.n	8007bb8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2180      	movs	r1, #128	@ 0x80
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 fd5d 	bl	8008620 <UART_WaitOnFlagUntilTimeout>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e03d      	b.n	8007bf4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10b      	bne.n	8007b96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	881a      	ldrh	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b8a:	b292      	uxth	r2, r2
 8007b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	3302      	adds	r3, #2
 8007b92:	61bb      	str	r3, [r7, #24]
 8007b94:	e007      	b.n	8007ba6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	781a      	ldrb	r2, [r3, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1c8      	bne.n	8007b56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2140      	movs	r1, #64	@ 0x40
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fd26 	bl	8008620 <UART_WaitOnFlagUntilTimeout>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d005      	beq.n	8007be6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e006      	b.n	8007bf4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2220      	movs	r2, #32
 8007bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e000      	b.n	8007bf4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007bf2:	2302      	movs	r3, #2
  }
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3720      	adds	r7, #32
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08a      	sub	sp, #40	@ 0x28
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c12:	2b20      	cmp	r3, #32
 8007c14:	f040 80b6 	bne.w	8007d84 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <HAL_UART_Receive+0x28>
 8007c1e:	88fb      	ldrh	r3, [r7, #6]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e0ae      	b.n	8007d86 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2222      	movs	r2, #34	@ 0x22
 8007c34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c3e:	f7fb fc19 	bl	8003474 <HAL_GetTick>
 8007c42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	88fa      	ldrh	r2, [r7, #6]
 8007c48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	88fa      	ldrh	r2, [r7, #6]
 8007c50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c5c:	d10e      	bne.n	8007c7c <HAL_UART_Receive+0x80>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d105      	bne.n	8007c72 <HAL_UART_Receive+0x76>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007c6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c70:	e02d      	b.n	8007cce <HAL_UART_Receive+0xd2>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	22ff      	movs	r2, #255	@ 0xff
 8007c76:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c7a:	e028      	b.n	8007cce <HAL_UART_Receive+0xd2>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10d      	bne.n	8007ca0 <HAL_UART_Receive+0xa4>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d104      	bne.n	8007c96 <HAL_UART_Receive+0x9a>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	22ff      	movs	r2, #255	@ 0xff
 8007c90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c94:	e01b      	b.n	8007cce <HAL_UART_Receive+0xd2>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	227f      	movs	r2, #127	@ 0x7f
 8007c9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c9e:	e016      	b.n	8007cce <HAL_UART_Receive+0xd2>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ca8:	d10d      	bne.n	8007cc6 <HAL_UART_Receive+0xca>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d104      	bne.n	8007cbc <HAL_UART_Receive+0xc0>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	227f      	movs	r2, #127	@ 0x7f
 8007cb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007cba:	e008      	b.n	8007cce <HAL_UART_Receive+0xd2>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	223f      	movs	r2, #63	@ 0x3f
 8007cc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007cc4:	e003      	b.n	8007cce <HAL_UART_Receive+0xd2>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007cd4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cde:	d108      	bne.n	8007cf2 <HAL_UART_Receive+0xf6>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d104      	bne.n	8007cf2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	61bb      	str	r3, [r7, #24]
 8007cf0:	e003      	b.n	8007cfa <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007cfa:	e037      	b.n	8007d6c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	2200      	movs	r2, #0
 8007d04:	2120      	movs	r1, #32
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 fc8a 	bl	8008620 <UART_WaitOnFlagUntilTimeout>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d005      	beq.n	8007d1e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e033      	b.n	8007d86 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10c      	bne.n	8007d3e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	8a7b      	ldrh	r3, [r7, #18]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	3302      	adds	r3, #2
 8007d3a:	61bb      	str	r3, [r7, #24]
 8007d3c:	e00d      	b.n	8007d5a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	8a7b      	ldrh	r3, [r7, #18]
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	3301      	adds	r3, #1
 8007d58:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1c1      	bne.n	8007cfc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e000      	b.n	8007d86 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007d84:	2302      	movs	r3, #2
  }
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3720      	adds	r7, #32
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d94:	b08c      	sub	sp, #48	@ 0x30
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	431a      	orrs	r2, r3
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	431a      	orrs	r2, r3
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	4baa      	ldr	r3, [pc, #680]	@ (8008068 <UART_SetConfig+0x2d8>)
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	6812      	ldr	r2, [r2, #0]
 8007dc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a9f      	ldr	r2, [pc, #636]	@ (800806c <UART_SetConfig+0x2dc>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d004      	beq.n	8007dfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007e06:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	6812      	ldr	r2, [r2, #0]
 8007e0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e10:	430b      	orrs	r3, r1
 8007e12:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1a:	f023 010f 	bic.w	r1, r3, #15
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a90      	ldr	r2, [pc, #576]	@ (8008070 <UART_SetConfig+0x2e0>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d125      	bne.n	8007e80 <UART_SetConfig+0xf0>
 8007e34:	4b8f      	ldr	r3, [pc, #572]	@ (8008074 <UART_SetConfig+0x2e4>)
 8007e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d81a      	bhi.n	8007e78 <UART_SetConfig+0xe8>
 8007e42:	a201      	add	r2, pc, #4	@ (adr r2, 8007e48 <UART_SetConfig+0xb8>)
 8007e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e48:	08007e59 	.word	0x08007e59
 8007e4c:	08007e69 	.word	0x08007e69
 8007e50:	08007e61 	.word	0x08007e61
 8007e54:	08007e71 	.word	0x08007e71
 8007e58:	2301      	movs	r3, #1
 8007e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e5e:	e116      	b.n	800808e <UART_SetConfig+0x2fe>
 8007e60:	2302      	movs	r3, #2
 8007e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e66:	e112      	b.n	800808e <UART_SetConfig+0x2fe>
 8007e68:	2304      	movs	r3, #4
 8007e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e6e:	e10e      	b.n	800808e <UART_SetConfig+0x2fe>
 8007e70:	2308      	movs	r3, #8
 8007e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e76:	e10a      	b.n	800808e <UART_SetConfig+0x2fe>
 8007e78:	2310      	movs	r3, #16
 8007e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e7e:	e106      	b.n	800808e <UART_SetConfig+0x2fe>
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a7c      	ldr	r2, [pc, #496]	@ (8008078 <UART_SetConfig+0x2e8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d138      	bne.n	8007efc <UART_SetConfig+0x16c>
 8007e8a:	4b7a      	ldr	r3, [pc, #488]	@ (8008074 <UART_SetConfig+0x2e4>)
 8007e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e90:	f003 030c 	and.w	r3, r3, #12
 8007e94:	2b0c      	cmp	r3, #12
 8007e96:	d82d      	bhi.n	8007ef4 <UART_SetConfig+0x164>
 8007e98:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea0 <UART_SetConfig+0x110>)
 8007e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9e:	bf00      	nop
 8007ea0:	08007ed5 	.word	0x08007ed5
 8007ea4:	08007ef5 	.word	0x08007ef5
 8007ea8:	08007ef5 	.word	0x08007ef5
 8007eac:	08007ef5 	.word	0x08007ef5
 8007eb0:	08007ee5 	.word	0x08007ee5
 8007eb4:	08007ef5 	.word	0x08007ef5
 8007eb8:	08007ef5 	.word	0x08007ef5
 8007ebc:	08007ef5 	.word	0x08007ef5
 8007ec0:	08007edd 	.word	0x08007edd
 8007ec4:	08007ef5 	.word	0x08007ef5
 8007ec8:	08007ef5 	.word	0x08007ef5
 8007ecc:	08007ef5 	.word	0x08007ef5
 8007ed0:	08007eed 	.word	0x08007eed
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eda:	e0d8      	b.n	800808e <UART_SetConfig+0x2fe>
 8007edc:	2302      	movs	r3, #2
 8007ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ee2:	e0d4      	b.n	800808e <UART_SetConfig+0x2fe>
 8007ee4:	2304      	movs	r3, #4
 8007ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eea:	e0d0      	b.n	800808e <UART_SetConfig+0x2fe>
 8007eec:	2308      	movs	r3, #8
 8007eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ef2:	e0cc      	b.n	800808e <UART_SetConfig+0x2fe>
 8007ef4:	2310      	movs	r3, #16
 8007ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007efa:	e0c8      	b.n	800808e <UART_SetConfig+0x2fe>
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a5e      	ldr	r2, [pc, #376]	@ (800807c <UART_SetConfig+0x2ec>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d125      	bne.n	8007f52 <UART_SetConfig+0x1c2>
 8007f06:	4b5b      	ldr	r3, [pc, #364]	@ (8008074 <UART_SetConfig+0x2e4>)
 8007f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f0c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f10:	2b30      	cmp	r3, #48	@ 0x30
 8007f12:	d016      	beq.n	8007f42 <UART_SetConfig+0x1b2>
 8007f14:	2b30      	cmp	r3, #48	@ 0x30
 8007f16:	d818      	bhi.n	8007f4a <UART_SetConfig+0x1ba>
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	d00a      	beq.n	8007f32 <UART_SetConfig+0x1a2>
 8007f1c:	2b20      	cmp	r3, #32
 8007f1e:	d814      	bhi.n	8007f4a <UART_SetConfig+0x1ba>
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <UART_SetConfig+0x19a>
 8007f24:	2b10      	cmp	r3, #16
 8007f26:	d008      	beq.n	8007f3a <UART_SetConfig+0x1aa>
 8007f28:	e00f      	b.n	8007f4a <UART_SetConfig+0x1ba>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f30:	e0ad      	b.n	800808e <UART_SetConfig+0x2fe>
 8007f32:	2302      	movs	r3, #2
 8007f34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f38:	e0a9      	b.n	800808e <UART_SetConfig+0x2fe>
 8007f3a:	2304      	movs	r3, #4
 8007f3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f40:	e0a5      	b.n	800808e <UART_SetConfig+0x2fe>
 8007f42:	2308      	movs	r3, #8
 8007f44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f48:	e0a1      	b.n	800808e <UART_SetConfig+0x2fe>
 8007f4a:	2310      	movs	r3, #16
 8007f4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f50:	e09d      	b.n	800808e <UART_SetConfig+0x2fe>
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a4a      	ldr	r2, [pc, #296]	@ (8008080 <UART_SetConfig+0x2f0>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d125      	bne.n	8007fa8 <UART_SetConfig+0x218>
 8007f5c:	4b45      	ldr	r3, [pc, #276]	@ (8008074 <UART_SetConfig+0x2e4>)
 8007f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f66:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f68:	d016      	beq.n	8007f98 <UART_SetConfig+0x208>
 8007f6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f6c:	d818      	bhi.n	8007fa0 <UART_SetConfig+0x210>
 8007f6e:	2b80      	cmp	r3, #128	@ 0x80
 8007f70:	d00a      	beq.n	8007f88 <UART_SetConfig+0x1f8>
 8007f72:	2b80      	cmp	r3, #128	@ 0x80
 8007f74:	d814      	bhi.n	8007fa0 <UART_SetConfig+0x210>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <UART_SetConfig+0x1f0>
 8007f7a:	2b40      	cmp	r3, #64	@ 0x40
 8007f7c:	d008      	beq.n	8007f90 <UART_SetConfig+0x200>
 8007f7e:	e00f      	b.n	8007fa0 <UART_SetConfig+0x210>
 8007f80:	2300      	movs	r3, #0
 8007f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f86:	e082      	b.n	800808e <UART_SetConfig+0x2fe>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8e:	e07e      	b.n	800808e <UART_SetConfig+0x2fe>
 8007f90:	2304      	movs	r3, #4
 8007f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f96:	e07a      	b.n	800808e <UART_SetConfig+0x2fe>
 8007f98:	2308      	movs	r3, #8
 8007f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f9e:	e076      	b.n	800808e <UART_SetConfig+0x2fe>
 8007fa0:	2310      	movs	r3, #16
 8007fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fa6:	e072      	b.n	800808e <UART_SetConfig+0x2fe>
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a35      	ldr	r2, [pc, #212]	@ (8008084 <UART_SetConfig+0x2f4>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d12a      	bne.n	8008008 <UART_SetConfig+0x278>
 8007fb2:	4b30      	ldr	r3, [pc, #192]	@ (8008074 <UART_SetConfig+0x2e4>)
 8007fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fc0:	d01a      	beq.n	8007ff8 <UART_SetConfig+0x268>
 8007fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fc6:	d81b      	bhi.n	8008000 <UART_SetConfig+0x270>
 8007fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fcc:	d00c      	beq.n	8007fe8 <UART_SetConfig+0x258>
 8007fce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fd2:	d815      	bhi.n	8008000 <UART_SetConfig+0x270>
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <UART_SetConfig+0x250>
 8007fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fdc:	d008      	beq.n	8007ff0 <UART_SetConfig+0x260>
 8007fde:	e00f      	b.n	8008000 <UART_SetConfig+0x270>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fe6:	e052      	b.n	800808e <UART_SetConfig+0x2fe>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fee:	e04e      	b.n	800808e <UART_SetConfig+0x2fe>
 8007ff0:	2304      	movs	r3, #4
 8007ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ff6:	e04a      	b.n	800808e <UART_SetConfig+0x2fe>
 8007ff8:	2308      	movs	r3, #8
 8007ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ffe:	e046      	b.n	800808e <UART_SetConfig+0x2fe>
 8008000:	2310      	movs	r3, #16
 8008002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008006:	e042      	b.n	800808e <UART_SetConfig+0x2fe>
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a17      	ldr	r2, [pc, #92]	@ (800806c <UART_SetConfig+0x2dc>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d13a      	bne.n	8008088 <UART_SetConfig+0x2f8>
 8008012:	4b18      	ldr	r3, [pc, #96]	@ (8008074 <UART_SetConfig+0x2e4>)
 8008014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008018:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800801c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008020:	d01a      	beq.n	8008058 <UART_SetConfig+0x2c8>
 8008022:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008026:	d81b      	bhi.n	8008060 <UART_SetConfig+0x2d0>
 8008028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800802c:	d00c      	beq.n	8008048 <UART_SetConfig+0x2b8>
 800802e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008032:	d815      	bhi.n	8008060 <UART_SetConfig+0x2d0>
 8008034:	2b00      	cmp	r3, #0
 8008036:	d003      	beq.n	8008040 <UART_SetConfig+0x2b0>
 8008038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800803c:	d008      	beq.n	8008050 <UART_SetConfig+0x2c0>
 800803e:	e00f      	b.n	8008060 <UART_SetConfig+0x2d0>
 8008040:	2300      	movs	r3, #0
 8008042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008046:	e022      	b.n	800808e <UART_SetConfig+0x2fe>
 8008048:	2302      	movs	r3, #2
 800804a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800804e:	e01e      	b.n	800808e <UART_SetConfig+0x2fe>
 8008050:	2304      	movs	r3, #4
 8008052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008056:	e01a      	b.n	800808e <UART_SetConfig+0x2fe>
 8008058:	2308      	movs	r3, #8
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800805e:	e016      	b.n	800808e <UART_SetConfig+0x2fe>
 8008060:	2310      	movs	r3, #16
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008066:	e012      	b.n	800808e <UART_SetConfig+0x2fe>
 8008068:	cfff69f3 	.word	0xcfff69f3
 800806c:	40008000 	.word	0x40008000
 8008070:	40013800 	.word	0x40013800
 8008074:	40021000 	.word	0x40021000
 8008078:	40004400 	.word	0x40004400
 800807c:	40004800 	.word	0x40004800
 8008080:	40004c00 	.word	0x40004c00
 8008084:	40005000 	.word	0x40005000
 8008088:	2310      	movs	r3, #16
 800808a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4aae      	ldr	r2, [pc, #696]	@ (800834c <UART_SetConfig+0x5bc>)
 8008094:	4293      	cmp	r3, r2
 8008096:	f040 8097 	bne.w	80081c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800809a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800809e:	2b08      	cmp	r3, #8
 80080a0:	d823      	bhi.n	80080ea <UART_SetConfig+0x35a>
 80080a2:	a201      	add	r2, pc, #4	@ (adr r2, 80080a8 <UART_SetConfig+0x318>)
 80080a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a8:	080080cd 	.word	0x080080cd
 80080ac:	080080eb 	.word	0x080080eb
 80080b0:	080080d5 	.word	0x080080d5
 80080b4:	080080eb 	.word	0x080080eb
 80080b8:	080080db 	.word	0x080080db
 80080bc:	080080eb 	.word	0x080080eb
 80080c0:	080080eb 	.word	0x080080eb
 80080c4:	080080eb 	.word	0x080080eb
 80080c8:	080080e3 	.word	0x080080e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080cc:	f7fd fc38 	bl	8005940 <HAL_RCC_GetPCLK1Freq>
 80080d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080d2:	e010      	b.n	80080f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080d4:	4b9e      	ldr	r3, [pc, #632]	@ (8008350 <UART_SetConfig+0x5c0>)
 80080d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080d8:	e00d      	b.n	80080f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080da:	f7fd fb99 	bl	8005810 <HAL_RCC_GetSysClockFreq>
 80080de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080e0:	e009      	b.n	80080f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080e8:	e005      	b.n	80080f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80080f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 8130 	beq.w	800835e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008102:	4a94      	ldr	r2, [pc, #592]	@ (8008354 <UART_SetConfig+0x5c4>)
 8008104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008108:	461a      	mov	r2, r3
 800810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008110:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	685a      	ldr	r2, [r3, #4]
 8008116:	4613      	mov	r3, r2
 8008118:	005b      	lsls	r3, r3, #1
 800811a:	4413      	add	r3, r2
 800811c:	69ba      	ldr	r2, [r7, #24]
 800811e:	429a      	cmp	r2, r3
 8008120:	d305      	bcc.n	800812e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	429a      	cmp	r2, r3
 800812c:	d903      	bls.n	8008136 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008134:	e113      	b.n	800835e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008138:	2200      	movs	r2, #0
 800813a:	60bb      	str	r3, [r7, #8]
 800813c:	60fa      	str	r2, [r7, #12]
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008142:	4a84      	ldr	r2, [pc, #528]	@ (8008354 <UART_SetConfig+0x5c4>)
 8008144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008148:	b29b      	uxth	r3, r3
 800814a:	2200      	movs	r2, #0
 800814c:	603b      	str	r3, [r7, #0]
 800814e:	607a      	str	r2, [r7, #4]
 8008150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008154:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008158:	f7f8 fd8e 	bl	8000c78 <__aeabi_uldivmod>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4610      	mov	r0, r2
 8008162:	4619      	mov	r1, r3
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	020b      	lsls	r3, r1, #8
 800816e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008172:	0202      	lsls	r2, r0, #8
 8008174:	6979      	ldr	r1, [r7, #20]
 8008176:	6849      	ldr	r1, [r1, #4]
 8008178:	0849      	lsrs	r1, r1, #1
 800817a:	2000      	movs	r0, #0
 800817c:	460c      	mov	r4, r1
 800817e:	4605      	mov	r5, r0
 8008180:	eb12 0804 	adds.w	r8, r2, r4
 8008184:	eb43 0905 	adc.w	r9, r3, r5
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	469a      	mov	sl, r3
 8008190:	4693      	mov	fp, r2
 8008192:	4652      	mov	r2, sl
 8008194:	465b      	mov	r3, fp
 8008196:	4640      	mov	r0, r8
 8008198:	4649      	mov	r1, r9
 800819a:	f7f8 fd6d 	bl	8000c78 <__aeabi_uldivmod>
 800819e:	4602      	mov	r2, r0
 80081a0:	460b      	mov	r3, r1
 80081a2:	4613      	mov	r3, r2
 80081a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081ac:	d308      	bcc.n	80081c0 <UART_SetConfig+0x430>
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081b4:	d204      	bcs.n	80081c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6a3a      	ldr	r2, [r7, #32]
 80081bc:	60da      	str	r2, [r3, #12]
 80081be:	e0ce      	b.n	800835e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081c6:	e0ca      	b.n	800835e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	69db      	ldr	r3, [r3, #28]
 80081cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081d0:	d166      	bne.n	80082a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80081d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081d6:	2b08      	cmp	r3, #8
 80081d8:	d827      	bhi.n	800822a <UART_SetConfig+0x49a>
 80081da:	a201      	add	r2, pc, #4	@ (adr r2, 80081e0 <UART_SetConfig+0x450>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	08008205 	.word	0x08008205
 80081e4:	0800820d 	.word	0x0800820d
 80081e8:	08008215 	.word	0x08008215
 80081ec:	0800822b 	.word	0x0800822b
 80081f0:	0800821b 	.word	0x0800821b
 80081f4:	0800822b 	.word	0x0800822b
 80081f8:	0800822b 	.word	0x0800822b
 80081fc:	0800822b 	.word	0x0800822b
 8008200:	08008223 	.word	0x08008223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008204:	f7fd fb9c 	bl	8005940 <HAL_RCC_GetPCLK1Freq>
 8008208:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800820a:	e014      	b.n	8008236 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800820c:	f7fd fbae 	bl	800596c <HAL_RCC_GetPCLK2Freq>
 8008210:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008212:	e010      	b.n	8008236 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008214:	4b4e      	ldr	r3, [pc, #312]	@ (8008350 <UART_SetConfig+0x5c0>)
 8008216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008218:	e00d      	b.n	8008236 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800821a:	f7fd faf9 	bl	8005810 <HAL_RCC_GetSysClockFreq>
 800821e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008220:	e009      	b.n	8008236 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008226:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008228:	e005      	b.n	8008236 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008234:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 8090 	beq.w	800835e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008242:	4a44      	ldr	r2, [pc, #272]	@ (8008354 <UART_SetConfig+0x5c4>)
 8008244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008248:	461a      	mov	r2, r3
 800824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008250:	005a      	lsls	r2, r3, #1
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	085b      	lsrs	r3, r3, #1
 8008258:	441a      	add	r2, r3
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008262:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	2b0f      	cmp	r3, #15
 8008268:	d916      	bls.n	8008298 <UART_SetConfig+0x508>
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008270:	d212      	bcs.n	8008298 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008272:	6a3b      	ldr	r3, [r7, #32]
 8008274:	b29b      	uxth	r3, r3
 8008276:	f023 030f 	bic.w	r3, r3, #15
 800827a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	085b      	lsrs	r3, r3, #1
 8008280:	b29b      	uxth	r3, r3
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	b29a      	uxth	r2, r3
 8008288:	8bfb      	ldrh	r3, [r7, #30]
 800828a:	4313      	orrs	r3, r2
 800828c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	8bfa      	ldrh	r2, [r7, #30]
 8008294:	60da      	str	r2, [r3, #12]
 8008296:	e062      	b.n	800835e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800829e:	e05e      	b.n	800835e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082a4:	2b08      	cmp	r3, #8
 80082a6:	d828      	bhi.n	80082fa <UART_SetConfig+0x56a>
 80082a8:	a201      	add	r2, pc, #4	@ (adr r2, 80082b0 <UART_SetConfig+0x520>)
 80082aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ae:	bf00      	nop
 80082b0:	080082d5 	.word	0x080082d5
 80082b4:	080082dd 	.word	0x080082dd
 80082b8:	080082e5 	.word	0x080082e5
 80082bc:	080082fb 	.word	0x080082fb
 80082c0:	080082eb 	.word	0x080082eb
 80082c4:	080082fb 	.word	0x080082fb
 80082c8:	080082fb 	.word	0x080082fb
 80082cc:	080082fb 	.word	0x080082fb
 80082d0:	080082f3 	.word	0x080082f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082d4:	f7fd fb34 	bl	8005940 <HAL_RCC_GetPCLK1Freq>
 80082d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082da:	e014      	b.n	8008306 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082dc:	f7fd fb46 	bl	800596c <HAL_RCC_GetPCLK2Freq>
 80082e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082e2:	e010      	b.n	8008306 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008350 <UART_SetConfig+0x5c0>)
 80082e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082e8:	e00d      	b.n	8008306 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ea:	f7fd fa91 	bl	8005810 <HAL_RCC_GetSysClockFreq>
 80082ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082f0:	e009      	b.n	8008306 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082f8:	e005      	b.n	8008306 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80082fa:	2300      	movs	r3, #0
 80082fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008304:	bf00      	nop
    }

    if (pclk != 0U)
 8008306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008308:	2b00      	cmp	r3, #0
 800830a:	d028      	beq.n	800835e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008310:	4a10      	ldr	r2, [pc, #64]	@ (8008354 <UART_SetConfig+0x5c4>)
 8008312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008316:	461a      	mov	r2, r3
 8008318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831a:	fbb3 f2f2 	udiv	r2, r3, r2
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	085b      	lsrs	r3, r3, #1
 8008324:	441a      	add	r2, r3
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	fbb2 f3f3 	udiv	r3, r2, r3
 800832e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	2b0f      	cmp	r3, #15
 8008334:	d910      	bls.n	8008358 <UART_SetConfig+0x5c8>
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800833c:	d20c      	bcs.n	8008358 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	b29a      	uxth	r2, r3
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	60da      	str	r2, [r3, #12]
 8008348:	e009      	b.n	800835e <UART_SetConfig+0x5ce>
 800834a:	bf00      	nop
 800834c:	40008000 	.word	0x40008000
 8008350:	00f42400 	.word	0x00f42400
 8008354:	08077198 	.word	0x08077198
      }
      else
      {
        ret = HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2201      	movs	r2, #1
 8008362:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2201      	movs	r2, #1
 800836a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	2200      	movs	r2, #0
 8008372:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2200      	movs	r2, #0
 8008378:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800837a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800837e:	4618      	mov	r0, r3
 8008380:	3730      	adds	r7, #48	@ 0x30
 8008382:	46bd      	mov	sp, r7
 8008384:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008394:	f003 0308 	and.w	r3, r3, #8
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00a      	beq.n	80083b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00a      	beq.n	80083d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d8:	f003 0302 	and.w	r3, r3, #2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00a      	beq.n	80083f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	430a      	orrs	r2, r1
 80083f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fa:	f003 0304 	and.w	r3, r3, #4
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00a      	beq.n	8008418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	430a      	orrs	r2, r1
 8008416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800841c:	f003 0310 	and.w	r3, r3, #16
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00a      	beq.n	800843a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843e:	f003 0320 	and.w	r3, r3, #32
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01a      	beq.n	800849e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008482:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008486:	d10a      	bne.n	800849e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	605a      	str	r2, [r3, #4]
  }
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b098      	sub	sp, #96	@ 0x60
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084dc:	f7fa ffca 	bl	8003474 <HAL_GetTick>
 80084e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0308 	and.w	r3, r3, #8
 80084ec:	2b08      	cmp	r3, #8
 80084ee:	d12f      	bne.n	8008550 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084f8:	2200      	movs	r2, #0
 80084fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f88e 	bl	8008620 <UART_WaitOnFlagUntilTimeout>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d022      	beq.n	8008550 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008512:	e853 3f00 	ldrex	r3, [r3]
 8008516:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800851a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800851e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	461a      	mov	r2, r3
 8008526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008528:	647b      	str	r3, [r7, #68]	@ 0x44
 800852a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800852e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008530:	e841 2300 	strex	r3, r2, [r1]
 8008534:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e6      	bne.n	800850a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2220      	movs	r2, #32
 8008540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e063      	b.n	8008618 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0304 	and.w	r3, r3, #4
 800855a:	2b04      	cmp	r3, #4
 800855c:	d149      	bne.n	80085f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800855e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008566:	2200      	movs	r2, #0
 8008568:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f857 	bl	8008620 <UART_WaitOnFlagUntilTimeout>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d03c      	beq.n	80085f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008580:	e853 3f00 	ldrex	r3, [r3]
 8008584:	623b      	str	r3, [r7, #32]
   return(result);
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800858c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008596:	633b      	str	r3, [r7, #48]	@ 0x30
 8008598:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800859c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800859e:	e841 2300 	strex	r3, r2, [r1]
 80085a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1e6      	bne.n	8008578 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3308      	adds	r3, #8
 80085b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	e853 3f00 	ldrex	r3, [r3]
 80085b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f023 0301 	bic.w	r3, r3, #1
 80085c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3308      	adds	r3, #8
 80085c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085ca:	61fa      	str	r2, [r7, #28]
 80085cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	69b9      	ldr	r1, [r7, #24]
 80085d0:	69fa      	ldr	r2, [r7, #28]
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	617b      	str	r3, [r7, #20]
   return(result);
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1e5      	bne.n	80085aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2220      	movs	r2, #32
 80085e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e012      	b.n	8008618 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2220      	movs	r2, #32
 80085f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3758      	adds	r7, #88	@ 0x58
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	603b      	str	r3, [r7, #0]
 800862c:	4613      	mov	r3, r2
 800862e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008630:	e04f      	b.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008638:	d04b      	beq.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800863a:	f7fa ff1b 	bl	8003474 <HAL_GetTick>
 800863e:	4602      	mov	r2, r0
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	429a      	cmp	r2, r3
 8008648:	d302      	bcc.n	8008650 <UART_WaitOnFlagUntilTimeout+0x30>
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e04e      	b.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0304 	and.w	r3, r3, #4
 800865e:	2b00      	cmp	r3, #0
 8008660:	d037      	beq.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2b80      	cmp	r3, #128	@ 0x80
 8008666:	d034      	beq.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2b40      	cmp	r3, #64	@ 0x40
 800866c:	d031      	beq.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	f003 0308 	and.w	r3, r3, #8
 8008678:	2b08      	cmp	r3, #8
 800867a:	d110      	bne.n	800869e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2208      	movs	r2, #8
 8008682:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f000 f838 	bl	80086fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2208      	movs	r2, #8
 800868e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e029      	b.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	69db      	ldr	r3, [r3, #28]
 80086a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086ac:	d111      	bne.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 f81e 	bl	80086fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2220      	movs	r2, #32
 80086c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e00f      	b.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	69da      	ldr	r2, [r3, #28]
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	4013      	ands	r3, r2
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	429a      	cmp	r2, r3
 80086e0:	bf0c      	ite	eq
 80086e2:	2301      	moveq	r3, #1
 80086e4:	2300      	movne	r3, #0
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	461a      	mov	r2, r3
 80086ea:	79fb      	ldrb	r3, [r7, #7]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d0a0      	beq.n	8008632 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b095      	sub	sp, #84	@ 0x54
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800870a:	e853 3f00 	ldrex	r3, [r3]
 800870e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008712:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	461a      	mov	r2, r3
 800871e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008720:	643b      	str	r3, [r7, #64]	@ 0x40
 8008722:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008724:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008726:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008728:	e841 2300 	strex	r3, r2, [r1]
 800872c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800872e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e6      	bne.n	8008702 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3308      	adds	r3, #8
 800873a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	61fb      	str	r3, [r7, #28]
   return(result);
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800874a:	f023 0301 	bic.w	r3, r3, #1
 800874e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3308      	adds	r3, #8
 8008756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008758:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800875a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800875e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008760:	e841 2300 	strex	r3, r2, [r1]
 8008764:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e3      	bne.n	8008734 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008770:	2b01      	cmp	r3, #1
 8008772:	d118      	bne.n	80087a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	60bb      	str	r3, [r7, #8]
   return(result);
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	f023 0310 	bic.w	r3, r3, #16
 8008788:	647b      	str	r3, [r7, #68]	@ 0x44
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008792:	61bb      	str	r3, [r7, #24]
 8008794:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	6979      	ldr	r1, [r7, #20]
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	e841 2300 	strex	r3, r2, [r1]
 800879e:	613b      	str	r3, [r7, #16]
   return(result);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1e6      	bne.n	8008774 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2220      	movs	r2, #32
 80087aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80087ba:	bf00      	nop
 80087bc:	3754      	adds	r7, #84	@ 0x54
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b085      	sub	sp, #20
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d101      	bne.n	80087dc <HAL_UARTEx_DisableFifoMode+0x16>
 80087d8:	2302      	movs	r3, #2
 80087da:	e027      	b.n	800882c <HAL_UARTEx_DisableFifoMode+0x66>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2224      	movs	r2, #36	@ 0x24
 80087e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f022 0201 	bic.w	r2, r2, #1
 8008802:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800880a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2220      	movs	r2, #32
 800881e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008848:	2b01      	cmp	r3, #1
 800884a:	d101      	bne.n	8008850 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800884c:	2302      	movs	r3, #2
 800884e:	e02d      	b.n	80088ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2224      	movs	r2, #36	@ 0x24
 800885c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f022 0201 	bic.w	r2, r2, #1
 8008876:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f84f 	bl	8008930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2220      	movs	r2, #32
 800889e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d101      	bne.n	80088cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088c8:	2302      	movs	r3, #2
 80088ca:	e02d      	b.n	8008928 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2224      	movs	r2, #36	@ 0x24
 80088d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 0201 	bic.w	r2, r2, #1
 80088f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f811 	bl	8008930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2220      	movs	r2, #32
 800891a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800893c:	2b00      	cmp	r3, #0
 800893e:	d108      	bne.n	8008952 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008950:	e031      	b.n	80089b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008952:	2308      	movs	r3, #8
 8008954:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008956:	2308      	movs	r3, #8
 8008958:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	0e5b      	lsrs	r3, r3, #25
 8008962:	b2db      	uxtb	r3, r3
 8008964:	f003 0307 	and.w	r3, r3, #7
 8008968:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	0f5b      	lsrs	r3, r3, #29
 8008972:	b2db      	uxtb	r3, r3
 8008974:	f003 0307 	and.w	r3, r3, #7
 8008978:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800897a:	7bbb      	ldrb	r3, [r7, #14]
 800897c:	7b3a      	ldrb	r2, [r7, #12]
 800897e:	4911      	ldr	r1, [pc, #68]	@ (80089c4 <UARTEx_SetNbDataToProcess+0x94>)
 8008980:	5c8a      	ldrb	r2, [r1, r2]
 8008982:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008986:	7b3a      	ldrb	r2, [r7, #12]
 8008988:	490f      	ldr	r1, [pc, #60]	@ (80089c8 <UARTEx_SetNbDataToProcess+0x98>)
 800898a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800898c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008990:	b29a      	uxth	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	7b7a      	ldrb	r2, [r7, #13]
 800899c:	4909      	ldr	r1, [pc, #36]	@ (80089c4 <UARTEx_SetNbDataToProcess+0x94>)
 800899e:	5c8a      	ldrb	r2, [r1, r2]
 80089a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089a4:	7b7a      	ldrb	r2, [r7, #13]
 80089a6:	4908      	ldr	r1, [pc, #32]	@ (80089c8 <UARTEx_SetNbDataToProcess+0x98>)
 80089a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80089b6:	bf00      	nop
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	080771b0 	.word	0x080771b0
 80089c8:	080771b8 	.word	0x080771b8

080089cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80089d0:	4904      	ldr	r1, [pc, #16]	@ (80089e4 <MX_FATFS_Init+0x18>)
 80089d2:	4805      	ldr	r0, [pc, #20]	@ (80089e8 <MX_FATFS_Init+0x1c>)
 80089d4:	f002 feec 	bl	800b7b0 <FATFS_LinkDriver>
 80089d8:	4603      	mov	r3, r0
 80089da:	461a      	mov	r2, r3
 80089dc:	4b03      	ldr	r3, [pc, #12]	@ (80089ec <MX_FATFS_Init+0x20>)
 80089de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80089e0:	bf00      	nop
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	2004093c 	.word	0x2004093c
 80089e8:	200400a4 	.word	0x200400a4
 80089ec:	20040938 	.word	0x20040938

080089f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80089f0:	b480      	push	{r7}
 80089f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80089f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8008a0a:	79fb      	ldrb	r3, [r7, #7]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 f9d7 	bl	8008dc0 <USER_SPI_initialize>
 8008a12:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4603      	mov	r3, r0
 8008a24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8008a26:	79fb      	ldrb	r3, [r7, #7]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 fab5 	bl	8008f98 <USER_SPI_status>
 8008a2e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	607a      	str	r2, [r7, #4]
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8008a48:	7bf8      	ldrb	r0, [r7, #15]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	68b9      	ldr	r1, [r7, #8]
 8008a50:	f000 fab8 	bl	8008fc4 <USER_SPI_read>
 8008a54:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
 8008a68:	603b      	str	r3, [r7, #0]
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8008a6e:	7bf8      	ldrb	r0, [r7, #15]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	68b9      	ldr	r1, [r7, #8]
 8008a76:	f000 fb0b 	bl	8009090 <USER_SPI_write>
 8008a7a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	603a      	str	r2, [r7, #0]
 8008a8e:	71fb      	strb	r3, [r7, #7]
 8008a90:	460b      	mov	r3, r1
 8008a92:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8008a94:	79b9      	ldrb	r1, [r7, #6]
 8008a96:	79fb      	ldrb	r3, [r7, #7]
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fb74 	bl	8009188 <USER_SPI_ioctl>
 8008aa0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
	...

08008aac <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008ab4:	f7fa fcde 	bl	8003474 <HAL_GetTick>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	4a04      	ldr	r2, [pc, #16]	@ (8008acc <SPI_Timer_On+0x20>)
 8008abc:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8008abe:	4a04      	ldr	r2, [pc, #16]	@ (8008ad0 <SPI_Timer_On+0x24>)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6013      	str	r3, [r2, #0]
}
 8008ac4:	bf00      	nop
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20040944 	.word	0x20040944
 8008ad0:	20040948 	.word	0x20040948

08008ad4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008ad8:	f7fa fccc 	bl	8003474 <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	4b06      	ldr	r3, [pc, #24]	@ (8008af8 <SPI_Timer_Status+0x24>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	1ad2      	subs	r2, r2, r3
 8008ae4:	4b05      	ldr	r3, [pc, #20]	@ (8008afc <SPI_Timer_Status+0x28>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	bf34      	ite	cc
 8008aec:	2301      	movcc	r3, #1
 8008aee:	2300      	movcs	r3, #0
 8008af0:	b2db      	uxtb	r3, r3
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20040944 	.word	0x20040944
 8008afc:	20040948 	.word	0x20040948

08008b00 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af02      	add	r7, sp, #8
 8008b06:	4603      	mov	r3, r0
 8008b08:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008b0a:	f107 020f 	add.w	r2, r7, #15
 8008b0e:	1df9      	adds	r1, r7, #7
 8008b10:	2332      	movs	r3, #50	@ 0x32
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	2301      	movs	r3, #1
 8008b16:	4804      	ldr	r0, [pc, #16]	@ (8008b28 <xchg_spi+0x28>)
 8008b18:	f7fd ff2f 	bl	800697a <HAL_SPI_TransmitReceive>
    return rxDat;
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	200406e4 	.word	0x200406e4

08008b2c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008b2c:	b590      	push	{r4, r7, lr}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]
 8008b3a:	e00a      	b.n	8008b52 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	18d4      	adds	r4, r2, r3
 8008b42:	20ff      	movs	r0, #255	@ 0xff
 8008b44:	f7ff ffdc 	bl	8008b00 <xchg_spi>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d3f0      	bcc.n	8008b3c <rcvr_spi_multi+0x10>
	}
}
 8008b5a:	bf00      	nop
 8008b5c:	bf00      	nop
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd90      	pop	{r4, r7, pc}

08008b64 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	f04f 33ff 	mov.w	r3, #4294967295
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	4803      	ldr	r0, [pc, #12]	@ (8008b88 <xmit_spi_multi+0x24>)
 8008b7a:	f7fd fd88 	bl	800668e <HAL_SPI_Transmit>
}
 8008b7e:	bf00      	nop
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	200406e4 	.word	0x200406e4

08008b8c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008b94:	f7fa fc6e 	bl	8003474 <HAL_GetTick>
 8008b98:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008b9e:	20ff      	movs	r0, #255	@ 0xff
 8008ba0:	f7ff ffae 	bl	8008b00 <xchg_spi>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	2bff      	cmp	r3, #255	@ 0xff
 8008bac:	d007      	beq.n	8008bbe <wait_ready+0x32>
 8008bae:	f7fa fc61 	bl	8003474 <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d8ef      	bhi.n	8008b9e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
 8008bc0:	2bff      	cmp	r3, #255	@ 0xff
 8008bc2:	bf0c      	ite	eq
 8008bc4:	2301      	moveq	r3, #1
 8008bc6:	2300      	movne	r3, #0
 8008bc8:	b2db      	uxtb	r3, r3
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3718      	adds	r7, #24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
	...

08008bd4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008bde:	4804      	ldr	r0, [pc, #16]	@ (8008bf0 <despiselect+0x1c>)
 8008be0:	f7fb ffd6 	bl	8004b90 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008be4:	20ff      	movs	r0, #255	@ 0xff
 8008be6:	f7ff ff8b 	bl	8008b00 <xchg_spi>

}
 8008bea:	bf00      	nop
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	48000c00 	.word	0x48000c00

08008bf4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008bfe:	480a      	ldr	r0, [pc, #40]	@ (8008c28 <spiselect+0x34>)
 8008c00:	f7fb ffc6 	bl	8004b90 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008c04:	20ff      	movs	r0, #255	@ 0xff
 8008c06:	f7ff ff7b 	bl	8008b00 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008c0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008c0e:	f7ff ffbd 	bl	8008b8c <wait_ready>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <spiselect+0x28>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e002      	b.n	8008c22 <spiselect+0x2e>

	despiselect();
 8008c1c:	f7ff ffda 	bl	8008bd4 <despiselect>
	return 0;	/* Timeout */
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	48000c00 	.word	0x48000c00

08008c2c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008c36:	20c8      	movs	r0, #200	@ 0xc8
 8008c38:	f7ff ff38 	bl	8008aac <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008c3c:	20ff      	movs	r0, #255	@ 0xff
 8008c3e:	f7ff ff5f 	bl	8008b00 <xchg_spi>
 8008c42:	4603      	mov	r3, r0
 8008c44:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	2bff      	cmp	r3, #255	@ 0xff
 8008c4a:	d104      	bne.n	8008c56 <rcvr_datablock+0x2a>
 8008c4c:	f7ff ff42 	bl	8008ad4 <SPI_Timer_Status>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1f2      	bne.n	8008c3c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	2bfe      	cmp	r3, #254	@ 0xfe
 8008c5a:	d001      	beq.n	8008c60 <rcvr_datablock+0x34>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	e00a      	b.n	8008c76 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7ff ff62 	bl	8008b2c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008c68:	20ff      	movs	r0, #255	@ 0xff
 8008c6a:	f7ff ff49 	bl	8008b00 <xchg_spi>
 8008c6e:	20ff      	movs	r0, #255	@ 0xff
 8008c70:	f7ff ff46 	bl	8008b00 <xchg_spi>

	return 1;						/* Function succeeded */
 8008c74:	2301      	movs	r3, #1
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	460b      	mov	r3, r1
 8008c88:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008c8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008c8e:	f7ff ff7d 	bl	8008b8c <wait_ready>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <xmit_datablock+0x1e>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e01e      	b.n	8008cda <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008c9c:	78fb      	ldrb	r3, [r7, #3]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7ff ff2e 	bl	8008b00 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	2bfd      	cmp	r3, #253	@ 0xfd
 8008ca8:	d016      	beq.n	8008cd8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008caa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7ff ff58 	bl	8008b64 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008cb4:	20ff      	movs	r0, #255	@ 0xff
 8008cb6:	f7ff ff23 	bl	8008b00 <xchg_spi>
 8008cba:	20ff      	movs	r0, #255	@ 0xff
 8008cbc:	f7ff ff20 	bl	8008b00 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008cc0:	20ff      	movs	r0, #255	@ 0xff
 8008cc2:	f7ff ff1d 	bl	8008b00 <xchg_spi>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	f003 031f 	and.w	r3, r3, #31
 8008cd0:	2b05      	cmp	r3, #5
 8008cd2:	d001      	beq.n	8008cd8 <xmit_datablock+0x5a>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	e000      	b.n	8008cda <xmit_datablock+0x5c>
	}
	return 1;
 8008cd8:	2301      	movs	r3, #1
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	4603      	mov	r3, r0
 8008cea:	6039      	str	r1, [r7, #0]
 8008cec:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	da0e      	bge.n	8008d14 <send_cmd+0x32>
		cmd &= 0x7F;
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cfc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8008cfe:	2100      	movs	r1, #0
 8008d00:	2037      	movs	r0, #55	@ 0x37
 8008d02:	f7ff ffee 	bl	8008ce2 <send_cmd>
 8008d06:	4603      	mov	r3, r0
 8008d08:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8008d0a:	7bbb      	ldrb	r3, [r7, #14]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d901      	bls.n	8008d14 <send_cmd+0x32>
 8008d10:	7bbb      	ldrb	r3, [r7, #14]
 8008d12:	e051      	b.n	8008db8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008d14:	79fb      	ldrb	r3, [r7, #7]
 8008d16:	2b0c      	cmp	r3, #12
 8008d18:	d008      	beq.n	8008d2c <send_cmd+0x4a>
		despiselect();
 8008d1a:	f7ff ff5b 	bl	8008bd4 <despiselect>
		if (!spiselect()) return 0xFF;
 8008d1e:	f7ff ff69 	bl	8008bf4 <spiselect>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <send_cmd+0x4a>
 8008d28:	23ff      	movs	r3, #255	@ 0xff
 8008d2a:	e045      	b.n	8008db8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7ff fee3 	bl	8008b00 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	0e1b      	lsrs	r3, r3, #24
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7ff fedd 	bl	8008b00 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	0c1b      	lsrs	r3, r3, #16
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff fed7 	bl	8008b00 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	0a1b      	lsrs	r3, r3, #8
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7ff fed1 	bl	8008b00 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff fecc 	bl	8008b00 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008d68:	2301      	movs	r3, #1
 8008d6a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008d6c:	79fb      	ldrb	r3, [r7, #7]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <send_cmd+0x94>
 8008d72:	2395      	movs	r3, #149	@ 0x95
 8008d74:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	2b08      	cmp	r3, #8
 8008d7a:	d101      	bne.n	8008d80 <send_cmd+0x9e>
 8008d7c:	2387      	movs	r3, #135	@ 0x87
 8008d7e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7ff febc 	bl	8008b00 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008d88:	79fb      	ldrb	r3, [r7, #7]
 8008d8a:	2b0c      	cmp	r3, #12
 8008d8c:	d102      	bne.n	8008d94 <send_cmd+0xb2>
 8008d8e:	20ff      	movs	r0, #255	@ 0xff
 8008d90:	f7ff feb6 	bl	8008b00 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8008d94:	230a      	movs	r3, #10
 8008d96:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8008d98:	20ff      	movs	r0, #255	@ 0xff
 8008d9a:	f7ff feb1 	bl	8008b00 <xchg_spi>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8008da2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	da05      	bge.n	8008db6 <send_cmd+0xd4>
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	73fb      	strb	r3, [r7, #15]
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1f0      	bne.n	8008d98 <send_cmd+0xb6>

	return res;							/* Return received response */
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008dc0:	b590      	push	{r4, r7, lr}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8008dca:	79fb      	ldrb	r3, [r7, #7]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <USER_SPI_initialize+0x14>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e0d6      	b.n	8008f82 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008dd4:	4b6d      	ldr	r3, [pc, #436]	@ (8008f8c <USER_SPI_initialize+0x1cc>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <USER_SPI_initialize+0x2a>
 8008de2:	4b6a      	ldr	r3, [pc, #424]	@ (8008f8c <USER_SPI_initialize+0x1cc>)
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	e0cb      	b.n	8008f82 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8008dea:	4b69      	ldr	r3, [pc, #420]	@ (8008f90 <USER_SPI_initialize+0x1d0>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008df4:	4b66      	ldr	r3, [pc, #408]	@ (8008f90 <USER_SPI_initialize+0x1d0>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f042 0218 	orr.w	r2, r2, #24
 8008dfc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8008dfe:	230a      	movs	r3, #10
 8008e00:	73fb      	strb	r3, [r7, #15]
 8008e02:	e005      	b.n	8008e10 <USER_SPI_initialize+0x50>
 8008e04:	20ff      	movs	r0, #255	@ 0xff
 8008e06:	f7ff fe7b 	bl	8008b00 <xchg_spi>
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	73fb      	strb	r3, [r7, #15]
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1f6      	bne.n	8008e04 <USER_SPI_initialize+0x44>

	ty = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	f7ff ff60 	bl	8008ce2 <send_cmd>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	f040 808b 	bne.w	8008f40 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8008e2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008e2e:	f7ff fe3d 	bl	8008aac <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8008e32:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8008e36:	2008      	movs	r0, #8
 8008e38:	f7ff ff53 	bl	8008ce2 <send_cmd>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d151      	bne.n	8008ee6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]
 8008e46:	e00d      	b.n	8008e64 <USER_SPI_initialize+0xa4>
 8008e48:	7bfc      	ldrb	r4, [r7, #15]
 8008e4a:	20ff      	movs	r0, #255	@ 0xff
 8008e4c:	f7ff fe58 	bl	8008b00 <xchg_spi>
 8008e50:	4603      	mov	r3, r0
 8008e52:	461a      	mov	r2, r3
 8008e54:	f104 0310 	add.w	r3, r4, #16
 8008e58:	443b      	add	r3, r7
 8008e5a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
 8008e60:	3301      	adds	r3, #1
 8008e62:	73fb      	strb	r3, [r7, #15]
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d9ee      	bls.n	8008e48 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8008e6a:	7abb      	ldrb	r3, [r7, #10]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d167      	bne.n	8008f40 <USER_SPI_initialize+0x180>
 8008e70:	7afb      	ldrb	r3, [r7, #11]
 8008e72:	2baa      	cmp	r3, #170	@ 0xaa
 8008e74:	d164      	bne.n	8008f40 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8008e76:	bf00      	nop
 8008e78:	f7ff fe2c 	bl	8008ad4 <SPI_Timer_Status>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d007      	beq.n	8008e92 <USER_SPI_initialize+0xd2>
 8008e82:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008e86:	20a9      	movs	r0, #169	@ 0xa9
 8008e88:	f7ff ff2b 	bl	8008ce2 <send_cmd>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1f2      	bne.n	8008e78 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008e92:	f7ff fe1f 	bl	8008ad4 <SPI_Timer_Status>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d051      	beq.n	8008f40 <USER_SPI_initialize+0x180>
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	203a      	movs	r0, #58	@ 0x3a
 8008ea0:	f7ff ff1f 	bl	8008ce2 <send_cmd>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d14a      	bne.n	8008f40 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8008eaa:	2300      	movs	r3, #0
 8008eac:	73fb      	strb	r3, [r7, #15]
 8008eae:	e00d      	b.n	8008ecc <USER_SPI_initialize+0x10c>
 8008eb0:	7bfc      	ldrb	r4, [r7, #15]
 8008eb2:	20ff      	movs	r0, #255	@ 0xff
 8008eb4:	f7ff fe24 	bl	8008b00 <xchg_spi>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f104 0310 	add.w	r3, r4, #16
 8008ec0:	443b      	add	r3, r7
 8008ec2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008ec6:	7bfb      	ldrb	r3, [r7, #15]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	73fb      	strb	r3, [r7, #15]
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d9ee      	bls.n	8008eb0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8008ed2:	7a3b      	ldrb	r3, [r7, #8]
 8008ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <USER_SPI_initialize+0x120>
 8008edc:	230c      	movs	r3, #12
 8008ede:	e000      	b.n	8008ee2 <USER_SPI_initialize+0x122>
 8008ee0:	2304      	movs	r3, #4
 8008ee2:	737b      	strb	r3, [r7, #13]
 8008ee4:	e02c      	b.n	8008f40 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	20a9      	movs	r0, #169	@ 0xa9
 8008eea:	f7ff fefa 	bl	8008ce2 <send_cmd>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d804      	bhi.n	8008efe <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	737b      	strb	r3, [r7, #13]
 8008ef8:	23a9      	movs	r3, #169	@ 0xa9
 8008efa:	73bb      	strb	r3, [r7, #14]
 8008efc:	e003      	b.n	8008f06 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8008efe:	2301      	movs	r3, #1
 8008f00:	737b      	strb	r3, [r7, #13]
 8008f02:	2301      	movs	r3, #1
 8008f04:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008f06:	bf00      	nop
 8008f08:	f7ff fde4 	bl	8008ad4 <SPI_Timer_Status>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d007      	beq.n	8008f22 <USER_SPI_initialize+0x162>
 8008f12:	7bbb      	ldrb	r3, [r7, #14]
 8008f14:	2100      	movs	r1, #0
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7ff fee3 	bl	8008ce2 <send_cmd>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1f2      	bne.n	8008f08 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8008f22:	f7ff fdd7 	bl	8008ad4 <SPI_Timer_Status>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d007      	beq.n	8008f3c <USER_SPI_initialize+0x17c>
 8008f2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f30:	2010      	movs	r0, #16
 8008f32:	f7ff fed6 	bl	8008ce2 <send_cmd>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <USER_SPI_initialize+0x180>
				ty = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8008f40:	4a14      	ldr	r2, [pc, #80]	@ (8008f94 <USER_SPI_initialize+0x1d4>)
 8008f42:	7b7b      	ldrb	r3, [r7, #13]
 8008f44:	7013      	strb	r3, [r2, #0]
	despiselect();
 8008f46:	f7ff fe45 	bl	8008bd4 <despiselect>

	if (ty) {			/* OK */
 8008f4a:	7b7b      	ldrb	r3, [r7, #13]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d012      	beq.n	8008f76 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8008f50:	4b0f      	ldr	r3, [pc, #60]	@ (8008f90 <USER_SPI_initialize+0x1d0>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f90 <USER_SPI_initialize+0x1d0>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f042 0210 	orr.w	r2, r2, #16
 8008f62:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8008f64:	4b09      	ldr	r3, [pc, #36]	@ (8008f8c <USER_SPI_initialize+0x1cc>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	f023 0301 	bic.w	r3, r3, #1
 8008f6e:	b2da      	uxtb	r2, r3
 8008f70:	4b06      	ldr	r3, [pc, #24]	@ (8008f8c <USER_SPI_initialize+0x1cc>)
 8008f72:	701a      	strb	r2, [r3, #0]
 8008f74:	e002      	b.n	8008f7c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8008f76:	4b05      	ldr	r3, [pc, #20]	@ (8008f8c <USER_SPI_initialize+0x1cc>)
 8008f78:	2201      	movs	r2, #1
 8008f7a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8008f7c:	4b03      	ldr	r3, [pc, #12]	@ (8008f8c <USER_SPI_initialize+0x1cc>)
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	b2db      	uxtb	r3, r3
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd90      	pop	{r4, r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	200400b8 	.word	0x200400b8
 8008f90:	200406e4 	.word	0x200406e4
 8008f94:	20040940 	.word	0x20040940

08008f98 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8008fa2:	79fb      	ldrb	r3, [r7, #7]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <USER_SPI_status+0x14>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e002      	b.n	8008fb2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8008fac:	4b04      	ldr	r3, [pc, #16]	@ (8008fc0 <USER_SPI_status+0x28>)
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	b2db      	uxtb	r3, r3
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	200400b8 	.word	0x200400b8

08008fc4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	607a      	str	r2, [r7, #4]
 8008fce:	603b      	str	r3, [r7, #0]
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d102      	bne.n	8008fe0 <USER_SPI_read+0x1c>
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <USER_SPI_read+0x20>
 8008fe0:	2304      	movs	r3, #4
 8008fe2:	e04d      	b.n	8009080 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008fe4:	4b28      	ldr	r3, [pc, #160]	@ (8009088 <USER_SPI_read+0xc4>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <USER_SPI_read+0x32>
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e044      	b.n	8009080 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8008ff6:	4b25      	ldr	r3, [pc, #148]	@ (800908c <USER_SPI_read+0xc8>)
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	f003 0308 	and.w	r3, r3, #8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d102      	bne.n	8009008 <USER_SPI_read+0x44>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	025b      	lsls	r3, r3, #9
 8009006:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d111      	bne.n	8009032 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800900e:	6879      	ldr	r1, [r7, #4]
 8009010:	2011      	movs	r0, #17
 8009012:	f7ff fe66 	bl	8008ce2 <send_cmd>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d129      	bne.n	8009070 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800901c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009020:	68b8      	ldr	r0, [r7, #8]
 8009022:	f7ff fe03 	bl	8008c2c <rcvr_datablock>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d021      	beq.n	8009070 <USER_SPI_read+0xac>
			count = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	603b      	str	r3, [r7, #0]
 8009030:	e01e      	b.n	8009070 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8009032:	6879      	ldr	r1, [r7, #4]
 8009034:	2012      	movs	r0, #18
 8009036:	f7ff fe54 	bl	8008ce2 <send_cmd>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d117      	bne.n	8009070 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009040:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009044:	68b8      	ldr	r0, [r7, #8]
 8009046:	f7ff fdf1 	bl	8008c2c <rcvr_datablock>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00a      	beq.n	8009066 <USER_SPI_read+0xa2>
				buff += 512;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009056:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	3b01      	subs	r3, #1
 800905c:	603b      	str	r3, [r7, #0]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1ed      	bne.n	8009040 <USER_SPI_read+0x7c>
 8009064:	e000      	b.n	8009068 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8009066:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009068:	2100      	movs	r1, #0
 800906a:	200c      	movs	r0, #12
 800906c:	f7ff fe39 	bl	8008ce2 <send_cmd>
		}
	}
	despiselect();
 8009070:	f7ff fdb0 	bl	8008bd4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	bf14      	ite	ne
 800907a:	2301      	movne	r3, #1
 800907c:	2300      	moveq	r3, #0
 800907e:	b2db      	uxtb	r3, r3
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	200400b8 	.word	0x200400b8
 800908c:	20040940 	.word	0x20040940

08009090 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	607a      	str	r2, [r7, #4]
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	4603      	mov	r3, r0
 800909e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d102      	bne.n	80090ac <USER_SPI_write+0x1c>
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <USER_SPI_write+0x20>
 80090ac:	2304      	movs	r3, #4
 80090ae:	e063      	b.n	8009178 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80090b0:	4b33      	ldr	r3, [pc, #204]	@ (8009180 <USER_SPI_write+0xf0>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <USER_SPI_write+0x32>
 80090be:	2303      	movs	r3, #3
 80090c0:	e05a      	b.n	8009178 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80090c2:	4b2f      	ldr	r3, [pc, #188]	@ (8009180 <USER_SPI_write+0xf0>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <USER_SPI_write+0x44>
 80090d0:	2302      	movs	r3, #2
 80090d2:	e051      	b.n	8009178 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80090d4:	4b2b      	ldr	r3, [pc, #172]	@ (8009184 <USER_SPI_write+0xf4>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	f003 0308 	and.w	r3, r3, #8
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d102      	bne.n	80090e6 <USER_SPI_write+0x56>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	025b      	lsls	r3, r3, #9
 80090e4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d110      	bne.n	800910e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	2018      	movs	r0, #24
 80090f0:	f7ff fdf7 	bl	8008ce2 <send_cmd>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d136      	bne.n	8009168 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80090fa:	21fe      	movs	r1, #254	@ 0xfe
 80090fc:	68b8      	ldr	r0, [r7, #8]
 80090fe:	f7ff fdbe 	bl	8008c7e <xmit_datablock>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d02f      	beq.n	8009168 <USER_SPI_write+0xd8>
			count = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	e02c      	b.n	8009168 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800910e:	4b1d      	ldr	r3, [pc, #116]	@ (8009184 <USER_SPI_write+0xf4>)
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	f003 0306 	and.w	r3, r3, #6
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <USER_SPI_write+0x92>
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	2097      	movs	r0, #151	@ 0x97
 800911e:	f7ff fde0 	bl	8008ce2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	2019      	movs	r0, #25
 8009126:	f7ff fddc 	bl	8008ce2 <send_cmd>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d11b      	bne.n	8009168 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009130:	21fc      	movs	r1, #252	@ 0xfc
 8009132:	68b8      	ldr	r0, [r7, #8]
 8009134:	f7ff fda3 	bl	8008c7e <xmit_datablock>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <USER_SPI_write+0xc4>
				buff += 512;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009144:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	3b01      	subs	r3, #1
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1ee      	bne.n	8009130 <USER_SPI_write+0xa0>
 8009152:	e000      	b.n	8009156 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009154:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009156:	21fd      	movs	r1, #253	@ 0xfd
 8009158:	2000      	movs	r0, #0
 800915a:	f7ff fd90 	bl	8008c7e <xmit_datablock>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <USER_SPI_write+0xd8>
 8009164:	2301      	movs	r3, #1
 8009166:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009168:	f7ff fd34 	bl	8008bd4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	bf14      	ite	ne
 8009172:	2301      	movne	r3, #1
 8009174:	2300      	moveq	r3, #0
 8009176:	b2db      	uxtb	r3, r3
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	200400b8 	.word	0x200400b8
 8009184:	20040940 	.word	0x20040940

08009188 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b08c      	sub	sp, #48	@ 0x30
 800918c:	af00      	add	r7, sp, #0
 800918e:	4603      	mov	r3, r0
 8009190:	603a      	str	r2, [r7, #0]
 8009192:	71fb      	strb	r3, [r7, #7]
 8009194:	460b      	mov	r3, r1
 8009196:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009198:	79fb      	ldrb	r3, [r7, #7]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <USER_SPI_ioctl+0x1a>
 800919e:	2304      	movs	r3, #4
 80091a0:	e15a      	b.n	8009458 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80091a2:	4baf      	ldr	r3, [pc, #700]	@ (8009460 <USER_SPI_ioctl+0x2d8>)
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	f003 0301 	and.w	r3, r3, #1
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <USER_SPI_ioctl+0x2c>
 80091b0:	2303      	movs	r3, #3
 80091b2:	e151      	b.n	8009458 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80091ba:	79bb      	ldrb	r3, [r7, #6]
 80091bc:	2b04      	cmp	r3, #4
 80091be:	f200 8136 	bhi.w	800942e <USER_SPI_ioctl+0x2a6>
 80091c2:	a201      	add	r2, pc, #4	@ (adr r2, 80091c8 <USER_SPI_ioctl+0x40>)
 80091c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c8:	080091dd 	.word	0x080091dd
 80091cc:	080091f1 	.word	0x080091f1
 80091d0:	0800942f 	.word	0x0800942f
 80091d4:	0800929d 	.word	0x0800929d
 80091d8:	08009393 	.word	0x08009393
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80091dc:	f7ff fd0a 	bl	8008bf4 <spiselect>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 8127 	beq.w	8009436 <USER_SPI_ioctl+0x2ae>
 80091e8:	2300      	movs	r3, #0
 80091ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80091ee:	e122      	b.n	8009436 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80091f0:	2100      	movs	r1, #0
 80091f2:	2009      	movs	r0, #9
 80091f4:	f7ff fd75 	bl	8008ce2 <send_cmd>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f040 811d 	bne.w	800943a <USER_SPI_ioctl+0x2b2>
 8009200:	f107 030c 	add.w	r3, r7, #12
 8009204:	2110      	movs	r1, #16
 8009206:	4618      	mov	r0, r3
 8009208:	f7ff fd10 	bl	8008c2c <rcvr_datablock>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 8113 	beq.w	800943a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009214:	7b3b      	ldrb	r3, [r7, #12]
 8009216:	099b      	lsrs	r3, r3, #6
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b01      	cmp	r3, #1
 800921c:	d111      	bne.n	8009242 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800921e:	7d7b      	ldrb	r3, [r7, #21]
 8009220:	461a      	mov	r2, r3
 8009222:	7d3b      	ldrb	r3, [r7, #20]
 8009224:	021b      	lsls	r3, r3, #8
 8009226:	4413      	add	r3, r2
 8009228:	461a      	mov	r2, r3
 800922a:	7cfb      	ldrb	r3, [r7, #19]
 800922c:	041b      	lsls	r3, r3, #16
 800922e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8009232:	4413      	add	r3, r2
 8009234:	3301      	adds	r3, #1
 8009236:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	029a      	lsls	r2, r3, #10
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	e028      	b.n	8009294 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009242:	7c7b      	ldrb	r3, [r7, #17]
 8009244:	f003 030f 	and.w	r3, r3, #15
 8009248:	b2da      	uxtb	r2, r3
 800924a:	7dbb      	ldrb	r3, [r7, #22]
 800924c:	09db      	lsrs	r3, r3, #7
 800924e:	b2db      	uxtb	r3, r3
 8009250:	4413      	add	r3, r2
 8009252:	b2da      	uxtb	r2, r3
 8009254:	7d7b      	ldrb	r3, [r7, #21]
 8009256:	005b      	lsls	r3, r3, #1
 8009258:	b2db      	uxtb	r3, r3
 800925a:	f003 0306 	and.w	r3, r3, #6
 800925e:	b2db      	uxtb	r3, r3
 8009260:	4413      	add	r3, r2
 8009262:	b2db      	uxtb	r3, r3
 8009264:	3302      	adds	r3, #2
 8009266:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800926a:	7d3b      	ldrb	r3, [r7, #20]
 800926c:	099b      	lsrs	r3, r3, #6
 800926e:	b2db      	uxtb	r3, r3
 8009270:	461a      	mov	r2, r3
 8009272:	7cfb      	ldrb	r3, [r7, #19]
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	441a      	add	r2, r3
 8009278:	7cbb      	ldrb	r3, [r7, #18]
 800927a:	029b      	lsls	r3, r3, #10
 800927c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009280:	4413      	add	r3, r2
 8009282:	3301      	adds	r3, #1
 8009284:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009286:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800928a:	3b09      	subs	r3, #9
 800928c:	69fa      	ldr	r2, [r7, #28]
 800928e:	409a      	lsls	r2, r3
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800929a:	e0ce      	b.n	800943a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800929c:	4b71      	ldr	r3, [pc, #452]	@ (8009464 <USER_SPI_ioctl+0x2dc>)
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	f003 0304 	and.w	r3, r3, #4
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d031      	beq.n	800930c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80092a8:	2100      	movs	r1, #0
 80092aa:	208d      	movs	r0, #141	@ 0x8d
 80092ac:	f7ff fd19 	bl	8008ce2 <send_cmd>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f040 80c3 	bne.w	800943e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80092b8:	20ff      	movs	r0, #255	@ 0xff
 80092ba:	f7ff fc21 	bl	8008b00 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80092be:	f107 030c 	add.w	r3, r7, #12
 80092c2:	2110      	movs	r1, #16
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7ff fcb1 	bl	8008c2c <rcvr_datablock>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 80b6 	beq.w	800943e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80092d2:	2330      	movs	r3, #48	@ 0x30
 80092d4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80092d8:	e007      	b.n	80092ea <USER_SPI_ioctl+0x162>
 80092da:	20ff      	movs	r0, #255	@ 0xff
 80092dc:	f7ff fc10 	bl	8008b00 <xchg_spi>
 80092e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80092e4:	3b01      	subs	r3, #1
 80092e6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80092ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1f3      	bne.n	80092da <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80092f2:	7dbb      	ldrb	r3, [r7, #22]
 80092f4:	091b      	lsrs	r3, r3, #4
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	461a      	mov	r2, r3
 80092fa:	2310      	movs	r3, #16
 80092fc:	fa03 f202 	lsl.w	r2, r3, r2
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800930a:	e098      	b.n	800943e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800930c:	2100      	movs	r1, #0
 800930e:	2009      	movs	r0, #9
 8009310:	f7ff fce7 	bl	8008ce2 <send_cmd>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	f040 8091 	bne.w	800943e <USER_SPI_ioctl+0x2b6>
 800931c:	f107 030c 	add.w	r3, r7, #12
 8009320:	2110      	movs	r1, #16
 8009322:	4618      	mov	r0, r3
 8009324:	f7ff fc82 	bl	8008c2c <rcvr_datablock>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 8087 	beq.w	800943e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009330:	4b4c      	ldr	r3, [pc, #304]	@ (8009464 <USER_SPI_ioctl+0x2dc>)
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	f003 0302 	and.w	r3, r3, #2
 8009338:	2b00      	cmp	r3, #0
 800933a:	d012      	beq.n	8009362 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800933c:	7dbb      	ldrb	r3, [r7, #22]
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8009344:	7dfa      	ldrb	r2, [r7, #23]
 8009346:	09d2      	lsrs	r2, r2, #7
 8009348:	b2d2      	uxtb	r2, r2
 800934a:	4413      	add	r3, r2
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	7e7b      	ldrb	r3, [r7, #25]
 8009350:	099b      	lsrs	r3, r3, #6
 8009352:	b2db      	uxtb	r3, r3
 8009354:	3b01      	subs	r3, #1
 8009356:	fa02 f303 	lsl.w	r3, r2, r3
 800935a:	461a      	mov	r2, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	e013      	b.n	800938a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009362:	7dbb      	ldrb	r3, [r7, #22]
 8009364:	109b      	asrs	r3, r3, #2
 8009366:	b29b      	uxth	r3, r3
 8009368:	f003 031f 	and.w	r3, r3, #31
 800936c:	3301      	adds	r3, #1
 800936e:	7dfa      	ldrb	r2, [r7, #23]
 8009370:	00d2      	lsls	r2, r2, #3
 8009372:	f002 0218 	and.w	r2, r2, #24
 8009376:	7df9      	ldrb	r1, [r7, #23]
 8009378:	0949      	lsrs	r1, r1, #5
 800937a:	b2c9      	uxtb	r1, r1
 800937c:	440a      	add	r2, r1
 800937e:	3201      	adds	r2, #1
 8009380:	fb02 f303 	mul.w	r3, r2, r3
 8009384:	461a      	mov	r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8009390:	e055      	b.n	800943e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009392:	4b34      	ldr	r3, [pc, #208]	@ (8009464 <USER_SPI_ioctl+0x2dc>)
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	f003 0306 	and.w	r3, r3, #6
 800939a:	2b00      	cmp	r3, #0
 800939c:	d051      	beq.n	8009442 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800939e:	f107 020c 	add.w	r2, r7, #12
 80093a2:	79fb      	ldrb	r3, [r7, #7]
 80093a4:	210b      	movs	r1, #11
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff feee 	bl	8009188 <USER_SPI_ioctl>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d149      	bne.n	8009446 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80093b2:	7b3b      	ldrb	r3, [r7, #12]
 80093b4:	099b      	lsrs	r3, r3, #6
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d104      	bne.n	80093c6 <USER_SPI_ioctl+0x23e>
 80093bc:	7dbb      	ldrb	r3, [r7, #22]
 80093be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d041      	beq.n	800944a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	623b      	str	r3, [r7, #32]
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80093d6:	4b23      	ldr	r3, [pc, #140]	@ (8009464 <USER_SPI_ioctl+0x2dc>)
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	f003 0308 	and.w	r3, r3, #8
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d105      	bne.n	80093ee <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80093e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e4:	025b      	lsls	r3, r3, #9
 80093e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80093e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ea:	025b      	lsls	r3, r3, #9
 80093ec:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80093ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093f0:	2020      	movs	r0, #32
 80093f2:	f7ff fc76 	bl	8008ce2 <send_cmd>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d128      	bne.n	800944e <USER_SPI_ioctl+0x2c6>
 80093fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80093fe:	2021      	movs	r0, #33	@ 0x21
 8009400:	f7ff fc6f 	bl	8008ce2 <send_cmd>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d121      	bne.n	800944e <USER_SPI_ioctl+0x2c6>
 800940a:	2100      	movs	r1, #0
 800940c:	2026      	movs	r0, #38	@ 0x26
 800940e:	f7ff fc68 	bl	8008ce2 <send_cmd>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d11a      	bne.n	800944e <USER_SPI_ioctl+0x2c6>
 8009418:	f247 5030 	movw	r0, #30000	@ 0x7530
 800941c:	f7ff fbb6 	bl	8008b8c <wait_ready>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d013      	beq.n	800944e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009426:	2300      	movs	r3, #0
 8009428:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800942c:	e00f      	b.n	800944e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800942e:	2304      	movs	r3, #4
 8009430:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009434:	e00c      	b.n	8009450 <USER_SPI_ioctl+0x2c8>
		break;
 8009436:	bf00      	nop
 8009438:	e00a      	b.n	8009450 <USER_SPI_ioctl+0x2c8>
		break;
 800943a:	bf00      	nop
 800943c:	e008      	b.n	8009450 <USER_SPI_ioctl+0x2c8>
		break;
 800943e:	bf00      	nop
 8009440:	e006      	b.n	8009450 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009442:	bf00      	nop
 8009444:	e004      	b.n	8009450 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009446:	bf00      	nop
 8009448:	e002      	b.n	8009450 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800944a:	bf00      	nop
 800944c:	e000      	b.n	8009450 <USER_SPI_ioctl+0x2c8>
		break;
 800944e:	bf00      	nop
	}

	despiselect();
 8009450:	f7ff fbc0 	bl	8008bd4 <despiselect>

	return res;
 8009454:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009458:	4618      	mov	r0, r3
 800945a:	3730      	adds	r7, #48	@ 0x30
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	200400b8 	.word	0x200400b8
 8009464:	20040940 	.word	0x20040940

08009468 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	4603      	mov	r3, r0
 8009470:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009472:	79fb      	ldrb	r3, [r7, #7]
 8009474:	4a08      	ldr	r2, [pc, #32]	@ (8009498 <disk_status+0x30>)
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	79fa      	ldrb	r2, [r7, #7]
 8009480:	4905      	ldr	r1, [pc, #20]	@ (8009498 <disk_status+0x30>)
 8009482:	440a      	add	r2, r1
 8009484:	7a12      	ldrb	r2, [r2, #8]
 8009486:	4610      	mov	r0, r2
 8009488:	4798      	blx	r3
 800948a:	4603      	mov	r3, r0
 800948c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800948e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	20040974 	.word	0x20040974

0800949c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	4603      	mov	r3, r0
 80094a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80094aa:	79fb      	ldrb	r3, [r7, #7]
 80094ac:	4a0d      	ldr	r2, [pc, #52]	@ (80094e4 <disk_initialize+0x48>)
 80094ae:	5cd3      	ldrb	r3, [r2, r3]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d111      	bne.n	80094d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80094b4:	79fb      	ldrb	r3, [r7, #7]
 80094b6:	4a0b      	ldr	r2, [pc, #44]	@ (80094e4 <disk_initialize+0x48>)
 80094b8:	2101      	movs	r1, #1
 80094ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80094bc:	79fb      	ldrb	r3, [r7, #7]
 80094be:	4a09      	ldr	r2, [pc, #36]	@ (80094e4 <disk_initialize+0x48>)
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	79fa      	ldrb	r2, [r7, #7]
 80094ca:	4906      	ldr	r1, [pc, #24]	@ (80094e4 <disk_initialize+0x48>)
 80094cc:	440a      	add	r2, r1
 80094ce:	7a12      	ldrb	r2, [r2, #8]
 80094d0:	4610      	mov	r0, r2
 80094d2:	4798      	blx	r3
 80094d4:	4603      	mov	r3, r0
 80094d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	20040974 	.word	0x20040974

080094e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80094e8:	b590      	push	{r4, r7, lr}
 80094ea:	b087      	sub	sp, #28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60b9      	str	r1, [r7, #8]
 80094f0:	607a      	str	r2, [r7, #4]
 80094f2:	603b      	str	r3, [r7, #0]
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	4a0a      	ldr	r2, [pc, #40]	@ (8009524 <disk_read+0x3c>)
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	689c      	ldr	r4, [r3, #8]
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	4a07      	ldr	r2, [pc, #28]	@ (8009524 <disk_read+0x3c>)
 8009508:	4413      	add	r3, r2
 800950a:	7a18      	ldrb	r0, [r3, #8]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	68b9      	ldr	r1, [r7, #8]
 8009512:	47a0      	blx	r4
 8009514:	4603      	mov	r3, r0
 8009516:	75fb      	strb	r3, [r7, #23]
  return res;
 8009518:	7dfb      	ldrb	r3, [r7, #23]
}
 800951a:	4618      	mov	r0, r3
 800951c:	371c      	adds	r7, #28
 800951e:	46bd      	mov	sp, r7
 8009520:	bd90      	pop	{r4, r7, pc}
 8009522:	bf00      	nop
 8009524:	20040974 	.word	0x20040974

08009528 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009528:	b590      	push	{r4, r7, lr}
 800952a:	b087      	sub	sp, #28
 800952c:	af00      	add	r7, sp, #0
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	607a      	str	r2, [r7, #4]
 8009532:	603b      	str	r3, [r7, #0]
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	4a0a      	ldr	r2, [pc, #40]	@ (8009564 <disk_write+0x3c>)
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	68dc      	ldr	r4, [r3, #12]
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	4a07      	ldr	r2, [pc, #28]	@ (8009564 <disk_write+0x3c>)
 8009548:	4413      	add	r3, r2
 800954a:	7a18      	ldrb	r0, [r3, #8]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	68b9      	ldr	r1, [r7, #8]
 8009552:	47a0      	blx	r4
 8009554:	4603      	mov	r3, r0
 8009556:	75fb      	strb	r3, [r7, #23]
  return res;
 8009558:	7dfb      	ldrb	r3, [r7, #23]
}
 800955a:	4618      	mov	r0, r3
 800955c:	371c      	adds	r7, #28
 800955e:	46bd      	mov	sp, r7
 8009560:	bd90      	pop	{r4, r7, pc}
 8009562:	bf00      	nop
 8009564:	20040974 	.word	0x20040974

08009568 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	603a      	str	r2, [r7, #0]
 8009572:	71fb      	strb	r3, [r7, #7]
 8009574:	460b      	mov	r3, r1
 8009576:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009578:	79fb      	ldrb	r3, [r7, #7]
 800957a:	4a09      	ldr	r2, [pc, #36]	@ (80095a0 <disk_ioctl+0x38>)
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	79fa      	ldrb	r2, [r7, #7]
 8009586:	4906      	ldr	r1, [pc, #24]	@ (80095a0 <disk_ioctl+0x38>)
 8009588:	440a      	add	r2, r1
 800958a:	7a10      	ldrb	r0, [r2, #8]
 800958c:	79b9      	ldrb	r1, [r7, #6]
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	4798      	blx	r3
 8009592:	4603      	mov	r3, r0
 8009594:	73fb      	strb	r3, [r7, #15]
  return res;
 8009596:	7bfb      	ldrb	r3, [r7, #15]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	20040974 	.word	0x20040974

080095a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	3301      	adds	r3, #1
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80095b4:	89fb      	ldrh	r3, [r7, #14]
 80095b6:	021b      	lsls	r3, r3, #8
 80095b8:	b21a      	sxth	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	b21b      	sxth	r3, r3
 80095c0:	4313      	orrs	r3, r2
 80095c2:	b21b      	sxth	r3, r3
 80095c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80095c6:	89fb      	ldrh	r3, [r7, #14]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	3303      	adds	r3, #3
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	021b      	lsls	r3, r3, #8
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	3202      	adds	r2, #2
 80095ec:	7812      	ldrb	r2, [r2, #0]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	021b      	lsls	r3, r3, #8
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	3201      	adds	r2, #1
 80095fa:	7812      	ldrb	r2, [r2, #0]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	021b      	lsls	r3, r3, #8
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	7812      	ldrb	r2, [r2, #0]
 8009608:	4313      	orrs	r3, r2
 800960a:	60fb      	str	r3, [r7, #12]
	return rv;
 800960c:	68fb      	ldr	r3, [r7, #12]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800961a:	b480      	push	{r7}
 800961c:	b083      	sub	sp, #12
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	460b      	mov	r3, r1
 8009624:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	887a      	ldrh	r2, [r7, #2]
 800962e:	b2d2      	uxtb	r2, r2
 8009630:	701a      	strb	r2, [r3, #0]
 8009632:	887b      	ldrh	r3, [r7, #2]
 8009634:	0a1b      	lsrs	r3, r3, #8
 8009636:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	1c5a      	adds	r2, r3, #1
 800963c:	607a      	str	r2, [r7, #4]
 800963e:	887a      	ldrh	r2, [r7, #2]
 8009640:	b2d2      	uxtb	r2, r2
 8009642:	701a      	strb	r2, [r3, #0]
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	b2d2      	uxtb	r2, r2
 8009664:	701a      	strb	r2, [r3, #0]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	0a1b      	lsrs	r3, r3, #8
 800966a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	607a      	str	r2, [r7, #4]
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	b2d2      	uxtb	r2, r2
 8009676:	701a      	strb	r2, [r3, #0]
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	0a1b      	lsrs	r3, r3, #8
 800967c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	1c5a      	adds	r2, r3, #1
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	b2d2      	uxtb	r2, r2
 8009688:	701a      	strb	r2, [r3, #0]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	0a1b      	lsrs	r3, r3, #8
 800968e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	1c5a      	adds	r2, r3, #1
 8009694:	607a      	str	r2, [r7, #4]
 8009696:	683a      	ldr	r2, [r7, #0]
 8009698:	b2d2      	uxtb	r2, r2
 800969a:	701a      	strb	r2, [r3, #0]
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00d      	beq.n	80096de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	1c53      	adds	r3, r2, #1
 80096c6:	613b      	str	r3, [r7, #16]
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	1c59      	adds	r1, r3, #1
 80096cc:	6179      	str	r1, [r7, #20]
 80096ce:	7812      	ldrb	r2, [r2, #0]
 80096d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	607b      	str	r3, [r7, #4]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1f1      	bne.n	80096c2 <mem_cpy+0x1a>
	}
}
 80096de:	bf00      	nop
 80096e0:	371c      	adds	r7, #28
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80096ea:	b480      	push	{r7}
 80096ec:	b087      	sub	sp, #28
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	60f8      	str	r0, [r7, #12]
 80096f2:	60b9      	str	r1, [r7, #8]
 80096f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	1c5a      	adds	r2, r3, #1
 80096fe:	617a      	str	r2, [r7, #20]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	b2d2      	uxtb	r2, r2
 8009704:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3b01      	subs	r3, #1
 800970a:	607b      	str	r3, [r7, #4]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1f3      	bne.n	80096fa <mem_set+0x10>
}
 8009712:	bf00      	nop
 8009714:	bf00      	nop
 8009716:	371c      	adds	r7, #28
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009720:	b480      	push	{r7}
 8009722:	b089      	sub	sp, #36	@ 0x24
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	61fb      	str	r3, [r7, #28]
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	61fa      	str	r2, [r7, #28]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	4619      	mov	r1, r3
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	1c5a      	adds	r2, r3, #1
 8009746:	61ba      	str	r2, [r7, #24]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	1acb      	subs	r3, r1, r3
 800974c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	3b01      	subs	r3, #1
 8009752:	607b      	str	r3, [r7, #4]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d002      	beq.n	8009760 <mem_cmp+0x40>
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d0eb      	beq.n	8009738 <mem_cmp+0x18>

	return r;
 8009760:	697b      	ldr	r3, [r7, #20]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3724      	adds	r7, #36	@ 0x24
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800976e:	b480      	push	{r7}
 8009770:	b083      	sub	sp, #12
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009778:	e002      	b.n	8009780 <chk_chr+0x12>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3301      	adds	r3, #1
 800977e:	607b      	str	r3, [r7, #4]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d005      	beq.n	8009794 <chk_chr+0x26>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	461a      	mov	r2, r3
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	4293      	cmp	r3, r2
 8009792:	d1f2      	bne.n	800977a <chk_chr+0xc>
	return *str;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	781b      	ldrb	r3, [r3, #0]
}
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80097ae:	2300      	movs	r3, #0
 80097b0:	60bb      	str	r3, [r7, #8]
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	60fb      	str	r3, [r7, #12]
 80097b6:	e029      	b.n	800980c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80097b8:	4a27      	ldr	r2, [pc, #156]	@ (8009858 <chk_lock+0xb4>)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	011b      	lsls	r3, r3, #4
 80097be:	4413      	add	r3, r2
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d01d      	beq.n	8009802 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80097c6:	4a24      	ldr	r2, [pc, #144]	@ (8009858 <chk_lock+0xb4>)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	011b      	lsls	r3, r3, #4
 80097cc:	4413      	add	r3, r2
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d116      	bne.n	8009806 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80097d8:	4a1f      	ldr	r2, [pc, #124]	@ (8009858 <chk_lock+0xb4>)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	011b      	lsls	r3, r3, #4
 80097de:	4413      	add	r3, r2
 80097e0:	3304      	adds	r3, #4
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d10c      	bne.n	8009806 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80097ec:	4a1a      	ldr	r2, [pc, #104]	@ (8009858 <chk_lock+0xb4>)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	011b      	lsls	r3, r3, #4
 80097f2:	4413      	add	r3, r2
 80097f4:	3308      	adds	r3, #8
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d102      	bne.n	8009806 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009800:	e007      	b.n	8009812 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009802:	2301      	movs	r3, #1
 8009804:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	3301      	adds	r3, #1
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d9d2      	bls.n	80097b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2b02      	cmp	r3, #2
 8009816:	d109      	bne.n	800982c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d102      	bne.n	8009824 <chk_lock+0x80>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b02      	cmp	r3, #2
 8009822:	d101      	bne.n	8009828 <chk_lock+0x84>
 8009824:	2300      	movs	r3, #0
 8009826:	e010      	b.n	800984a <chk_lock+0xa6>
 8009828:	2312      	movs	r3, #18
 800982a:	e00e      	b.n	800984a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d108      	bne.n	8009844 <chk_lock+0xa0>
 8009832:	4a09      	ldr	r2, [pc, #36]	@ (8009858 <chk_lock+0xb4>)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	011b      	lsls	r3, r3, #4
 8009838:	4413      	add	r3, r2
 800983a:	330c      	adds	r3, #12
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009842:	d101      	bne.n	8009848 <chk_lock+0xa4>
 8009844:	2310      	movs	r3, #16
 8009846:	e000      	b.n	800984a <chk_lock+0xa6>
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3714      	adds	r7, #20
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	20040954 	.word	0x20040954

0800985c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009862:	2300      	movs	r3, #0
 8009864:	607b      	str	r3, [r7, #4]
 8009866:	e002      	b.n	800986e <enq_lock+0x12>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3301      	adds	r3, #1
 800986c:	607b      	str	r3, [r7, #4]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d806      	bhi.n	8009882 <enq_lock+0x26>
 8009874:	4a09      	ldr	r2, [pc, #36]	@ (800989c <enq_lock+0x40>)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	011b      	lsls	r3, r3, #4
 800987a:	4413      	add	r3, r2
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1f2      	bne.n	8009868 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b02      	cmp	r3, #2
 8009886:	bf14      	ite	ne
 8009888:	2301      	movne	r3, #1
 800988a:	2300      	moveq	r3, #0
 800988c:	b2db      	uxtb	r3, r3
}
 800988e:	4618      	mov	r0, r3
 8009890:	370c      	adds	r7, #12
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	20040954 	.word	0x20040954

080098a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80098aa:	2300      	movs	r3, #0
 80098ac:	60fb      	str	r3, [r7, #12]
 80098ae:	e01f      	b.n	80098f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80098b0:	4a41      	ldr	r2, [pc, #260]	@ (80099b8 <inc_lock+0x118>)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	011b      	lsls	r3, r3, #4
 80098b6:	4413      	add	r3, r2
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d113      	bne.n	80098ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80098c2:	4a3d      	ldr	r2, [pc, #244]	@ (80099b8 <inc_lock+0x118>)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	011b      	lsls	r3, r3, #4
 80098c8:	4413      	add	r3, r2
 80098ca:	3304      	adds	r3, #4
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d109      	bne.n	80098ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80098d6:	4a38      	ldr	r2, [pc, #224]	@ (80099b8 <inc_lock+0x118>)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	011b      	lsls	r3, r3, #4
 80098dc:	4413      	add	r3, r2
 80098de:	3308      	adds	r3, #8
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d006      	beq.n	80098f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3301      	adds	r3, #1
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d9dc      	bls.n	80098b0 <inc_lock+0x10>
 80098f6:	e000      	b.n	80098fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80098f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d132      	bne.n	8009966 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009900:	2300      	movs	r3, #0
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	e002      	b.n	800990c <inc_lock+0x6c>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	3301      	adds	r3, #1
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d806      	bhi.n	8009920 <inc_lock+0x80>
 8009912:	4a29      	ldr	r2, [pc, #164]	@ (80099b8 <inc_lock+0x118>)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	011b      	lsls	r3, r3, #4
 8009918:	4413      	add	r3, r2
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1f2      	bne.n	8009906 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b02      	cmp	r3, #2
 8009924:	d101      	bne.n	800992a <inc_lock+0x8a>
 8009926:	2300      	movs	r3, #0
 8009928:	e040      	b.n	80099ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	4922      	ldr	r1, [pc, #136]	@ (80099b8 <inc_lock+0x118>)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	011b      	lsls	r3, r3, #4
 8009934:	440b      	add	r3, r1
 8009936:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	689a      	ldr	r2, [r3, #8]
 800993c:	491e      	ldr	r1, [pc, #120]	@ (80099b8 <inc_lock+0x118>)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	011b      	lsls	r3, r3, #4
 8009942:	440b      	add	r3, r1
 8009944:	3304      	adds	r3, #4
 8009946:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	695a      	ldr	r2, [r3, #20]
 800994c:	491a      	ldr	r1, [pc, #104]	@ (80099b8 <inc_lock+0x118>)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	011b      	lsls	r3, r3, #4
 8009952:	440b      	add	r3, r1
 8009954:	3308      	adds	r3, #8
 8009956:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009958:	4a17      	ldr	r2, [pc, #92]	@ (80099b8 <inc_lock+0x118>)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	011b      	lsls	r3, r3, #4
 800995e:	4413      	add	r3, r2
 8009960:	330c      	adds	r3, #12
 8009962:	2200      	movs	r2, #0
 8009964:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d009      	beq.n	8009980 <inc_lock+0xe0>
 800996c:	4a12      	ldr	r2, [pc, #72]	@ (80099b8 <inc_lock+0x118>)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	011b      	lsls	r3, r3, #4
 8009972:	4413      	add	r3, r2
 8009974:	330c      	adds	r3, #12
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <inc_lock+0xe0>
 800997c:	2300      	movs	r3, #0
 800997e:	e015      	b.n	80099ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d108      	bne.n	8009998 <inc_lock+0xf8>
 8009986:	4a0c      	ldr	r2, [pc, #48]	@ (80099b8 <inc_lock+0x118>)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	011b      	lsls	r3, r3, #4
 800998c:	4413      	add	r3, r2
 800998e:	330c      	adds	r3, #12
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	3301      	adds	r3, #1
 8009994:	b29a      	uxth	r2, r3
 8009996:	e001      	b.n	800999c <inc_lock+0xfc>
 8009998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800999c:	4906      	ldr	r1, [pc, #24]	@ (80099b8 <inc_lock+0x118>)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	011b      	lsls	r3, r3, #4
 80099a2:	440b      	add	r3, r1
 80099a4:	330c      	adds	r3, #12
 80099a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	3301      	adds	r3, #1
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	20040954 	.word	0x20040954

080099bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	3b01      	subs	r3, #1
 80099c8:	607b      	str	r3, [r7, #4]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d825      	bhi.n	8009a1c <dec_lock+0x60>
		n = Files[i].ctr;
 80099d0:	4a17      	ldr	r2, [pc, #92]	@ (8009a30 <dec_lock+0x74>)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	011b      	lsls	r3, r3, #4
 80099d6:	4413      	add	r3, r2
 80099d8:	330c      	adds	r3, #12
 80099da:	881b      	ldrh	r3, [r3, #0]
 80099dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80099de:	89fb      	ldrh	r3, [r7, #14]
 80099e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099e4:	d101      	bne.n	80099ea <dec_lock+0x2e>
 80099e6:	2300      	movs	r3, #0
 80099e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80099ea:	89fb      	ldrh	r3, [r7, #14]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <dec_lock+0x3a>
 80099f0:	89fb      	ldrh	r3, [r7, #14]
 80099f2:	3b01      	subs	r3, #1
 80099f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80099f6:	4a0e      	ldr	r2, [pc, #56]	@ (8009a30 <dec_lock+0x74>)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	011b      	lsls	r3, r3, #4
 80099fc:	4413      	add	r3, r2
 80099fe:	330c      	adds	r3, #12
 8009a00:	89fa      	ldrh	r2, [r7, #14]
 8009a02:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009a04:	89fb      	ldrh	r3, [r7, #14]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d105      	bne.n	8009a16 <dec_lock+0x5a>
 8009a0a:	4a09      	ldr	r2, [pc, #36]	@ (8009a30 <dec_lock+0x74>)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	011b      	lsls	r3, r3, #4
 8009a10:	4413      	add	r3, r2
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	737b      	strb	r3, [r7, #13]
 8009a1a:	e001      	b.n	8009a20 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009a20:	7b7b      	ldrb	r3, [r7, #13]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	20040954 	.word	0x20040954

08009a34 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	e010      	b.n	8009a64 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009a42:	4a0d      	ldr	r2, [pc, #52]	@ (8009a78 <clear_lock+0x44>)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	011b      	lsls	r3, r3, #4
 8009a48:	4413      	add	r3, r2
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d105      	bne.n	8009a5e <clear_lock+0x2a>
 8009a52:	4a09      	ldr	r2, [pc, #36]	@ (8009a78 <clear_lock+0x44>)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	011b      	lsls	r3, r3, #4
 8009a58:	4413      	add	r3, r2
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3301      	adds	r3, #1
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d9eb      	bls.n	8009a42 <clear_lock+0xe>
	}
}
 8009a6a:	bf00      	nop
 8009a6c:	bf00      	nop
 8009a6e:	3714      	adds	r7, #20
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr
 8009a78:	20040954 	.word	0x20040954

08009a7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b086      	sub	sp, #24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	78db      	ldrb	r3, [r3, #3]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d034      	beq.n	8009afa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	7858      	ldrb	r0, [r3, #1]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	f7ff fd40 	bl	8009528 <disk_write>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d002      	beq.n	8009ab4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	73fb      	strb	r3, [r7, #15]
 8009ab2:	e022      	b.n	8009afa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	1ad2      	subs	r2, r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d217      	bcs.n	8009afa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	789b      	ldrb	r3, [r3, #2]
 8009ace:	613b      	str	r3, [r7, #16]
 8009ad0:	e010      	b.n	8009af4 <sync_window+0x78>
					wsect += fs->fsize;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	4413      	add	r3, r2
 8009ada:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	7858      	ldrb	r0, [r3, #1]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	f7ff fd1d 	bl	8009528 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	613b      	str	r3, [r7, #16]
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d8eb      	bhi.n	8009ad2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d01b      	beq.n	8009b54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7ff ffad 	bl	8009a7c <sync_window>
 8009b22:	4603      	mov	r3, r0
 8009b24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d113      	bne.n	8009b54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	7858      	ldrb	r0, [r3, #1]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009b36:	2301      	movs	r3, #1
 8009b38:	683a      	ldr	r2, [r7, #0]
 8009b3a:	f7ff fcd5 	bl	80094e8 <disk_read>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d004      	beq.n	8009b4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009b44:	f04f 33ff 	mov.w	r3, #4294967295
 8009b48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	683a      	ldr	r2, [r7, #0]
 8009b52:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7ff ff87 	bl	8009a7c <sync_window>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009b72:	7bfb      	ldrb	r3, [r7, #15]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d158      	bne.n	8009c2a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	2b03      	cmp	r3, #3
 8009b7e:	d148      	bne.n	8009c12 <sync_fs+0xb2>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	791b      	ldrb	r3, [r3, #4]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d144      	bne.n	8009c12 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	3330      	adds	r3, #48	@ 0x30
 8009b8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b90:	2100      	movs	r1, #0
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7ff fda9 	bl	80096ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3330      	adds	r3, #48	@ 0x30
 8009b9c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009ba0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7ff fd38 	bl	800961a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	3330      	adds	r3, #48	@ 0x30
 8009bae:	4921      	ldr	r1, [pc, #132]	@ (8009c34 <sync_fs+0xd4>)
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7ff fd4d 	bl	8009650 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	3330      	adds	r3, #48	@ 0x30
 8009bba:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009bbe:	491e      	ldr	r1, [pc, #120]	@ (8009c38 <sync_fs+0xd8>)
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7ff fd45 	bl	8009650 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3330      	adds	r3, #48	@ 0x30
 8009bca:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	f7ff fd3b 	bl	8009650 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	3330      	adds	r3, #48	@ 0x30
 8009bde:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	4619      	mov	r1, r3
 8009be8:	4610      	mov	r0, r2
 8009bea:	f7ff fd31 	bl	8009650 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	7858      	ldrb	r0, [r3, #1]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c06:	2301      	movs	r3, #1
 8009c08:	f7ff fc8e 	bl	8009528 <disk_write>
			fs->fsi_flag = 0;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	785b      	ldrb	r3, [r3, #1]
 8009c16:	2200      	movs	r2, #0
 8009c18:	2100      	movs	r1, #0
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff fca4 	bl	8009568 <disk_ioctl>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <sync_fs+0xca>
 8009c26:	2301      	movs	r3, #1
 8009c28:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	41615252 	.word	0x41615252
 8009c38:	61417272 	.word	0x61417272

08009c3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	3b02      	subs	r3, #2
 8009c4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	3b02      	subs	r3, #2
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d301      	bcc.n	8009c5c <clust2sect+0x20>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	e008      	b.n	8009c6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	895b      	ldrh	r3, [r3, #10]
 8009c60:	461a      	mov	r2, r3
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	fb03 f202 	mul.w	r2, r3, r2
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c6c:	4413      	add	r3, r2
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	370c      	adds	r7, #12
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr

08009c7a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b086      	sub	sp, #24
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d904      	bls.n	8009c9a <get_fat+0x20>
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	695b      	ldr	r3, [r3, #20]
 8009c94:	683a      	ldr	r2, [r7, #0]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d302      	bcc.n	8009ca0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	617b      	str	r3, [r7, #20]
 8009c9e:	e08e      	b.n	8009dbe <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d061      	beq.n	8009d72 <get_fat+0xf8>
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	dc7b      	bgt.n	8009daa <get_fat+0x130>
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d002      	beq.n	8009cbc <get_fat+0x42>
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d041      	beq.n	8009d3e <get_fat+0xc4>
 8009cba:	e076      	b.n	8009daa <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	085b      	lsrs	r3, r3, #1
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	6a1a      	ldr	r2, [r3, #32]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	0a5b      	lsrs	r3, r3, #9
 8009cd2:	4413      	add	r3, r2
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6938      	ldr	r0, [r7, #16]
 8009cd8:	f7ff ff14 	bl	8009b04 <move_window>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d166      	bne.n	8009db0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	1c5a      	adds	r2, r3, #1
 8009ce6:	60fa      	str	r2, [r7, #12]
 8009ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009cf4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	6a1a      	ldr	r2, [r3, #32]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	0a5b      	lsrs	r3, r3, #9
 8009cfe:	4413      	add	r3, r2
 8009d00:	4619      	mov	r1, r3
 8009d02:	6938      	ldr	r0, [r7, #16]
 8009d04:	f7ff fefe 	bl	8009b04 <move_window>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d152      	bne.n	8009db4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	4413      	add	r3, r2
 8009d18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009d1c:	021b      	lsls	r3, r3, #8
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d002      	beq.n	8009d34 <get_fat+0xba>
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	091b      	lsrs	r3, r3, #4
 8009d32:	e002      	b.n	8009d3a <get_fat+0xc0>
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d3a:	617b      	str	r3, [r7, #20]
			break;
 8009d3c:	e03f      	b.n	8009dbe <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	6a1a      	ldr	r2, [r3, #32]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	0a1b      	lsrs	r3, r3, #8
 8009d46:	4413      	add	r3, r2
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6938      	ldr	r0, [r7, #16]
 8009d4c:	f7ff feda 	bl	8009b04 <move_window>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d130      	bne.n	8009db8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	005b      	lsls	r3, r3, #1
 8009d60:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009d64:	4413      	add	r3, r2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7ff fc1c 	bl	80095a4 <ld_word>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	617b      	str	r3, [r7, #20]
			break;
 8009d70:	e025      	b.n	8009dbe <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	6a1a      	ldr	r2, [r3, #32]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	09db      	lsrs	r3, r3, #7
 8009d7a:	4413      	add	r3, r2
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6938      	ldr	r0, [r7, #16]
 8009d80:	f7ff fec0 	bl	8009b04 <move_window>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d118      	bne.n	8009dbc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009d98:	4413      	add	r3, r2
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7ff fc1a 	bl	80095d4 <ld_dword>
 8009da0:	4603      	mov	r3, r0
 8009da2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009da6:	617b      	str	r3, [r7, #20]
			break;
 8009da8:	e009      	b.n	8009dbe <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009daa:	2301      	movs	r3, #1
 8009dac:	617b      	str	r3, [r7, #20]
 8009dae:	e006      	b.n	8009dbe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009db0:	bf00      	nop
 8009db2:	e004      	b.n	8009dbe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009db4:	bf00      	nop
 8009db6:	e002      	b.n	8009dbe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009db8:	bf00      	nop
 8009dba:	e000      	b.n	8009dbe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009dbc:	bf00      	nop
		}
	}

	return val;
 8009dbe:	697b      	ldr	r3, [r7, #20]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3718      	adds	r7, #24
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009dc8:	b590      	push	{r4, r7, lr}
 8009dca:	b089      	sub	sp, #36	@ 0x24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	f240 80d9 	bls.w	8009f92 <put_fat+0x1ca>
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	695b      	ldr	r3, [r3, #20]
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	f080 80d3 	bcs.w	8009f92 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	2b03      	cmp	r3, #3
 8009df2:	f000 8096 	beq.w	8009f22 <put_fat+0x15a>
 8009df6:	2b03      	cmp	r3, #3
 8009df8:	f300 80cb 	bgt.w	8009f92 <put_fat+0x1ca>
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d002      	beq.n	8009e06 <put_fat+0x3e>
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d06e      	beq.n	8009ee2 <put_fat+0x11a>
 8009e04:	e0c5      	b.n	8009f92 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	61bb      	str	r3, [r7, #24]
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	085b      	lsrs	r3, r3, #1
 8009e0e:	69ba      	ldr	r2, [r7, #24]
 8009e10:	4413      	add	r3, r2
 8009e12:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6a1a      	ldr	r2, [r3, #32]
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	0a5b      	lsrs	r3, r3, #9
 8009e1c:	4413      	add	r3, r2
 8009e1e:	4619      	mov	r1, r3
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f7ff fe6f 	bl	8009b04 <move_window>
 8009e26:	4603      	mov	r3, r0
 8009e28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e2a:	7ffb      	ldrb	r3, [r7, #31]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f040 80a9 	bne.w	8009f84 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	1c59      	adds	r1, r3, #1
 8009e3c:	61b9      	str	r1, [r7, #24]
 8009e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e42:	4413      	add	r3, r2
 8009e44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	f003 0301 	and.w	r3, r3, #1
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00d      	beq.n	8009e6c <put_fat+0xa4>
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	b25b      	sxtb	r3, r3
 8009e56:	f003 030f 	and.w	r3, r3, #15
 8009e5a:	b25a      	sxtb	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	011b      	lsls	r3, r3, #4
 8009e62:	b25b      	sxtb	r3, r3
 8009e64:	4313      	orrs	r3, r2
 8009e66:	b25b      	sxtb	r3, r3
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	e001      	b.n	8009e70 <put_fat+0xa8>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	697a      	ldr	r2, [r7, #20]
 8009e72:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2201      	movs	r2, #1
 8009e78:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6a1a      	ldr	r2, [r3, #32]
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	0a5b      	lsrs	r3, r3, #9
 8009e82:	4413      	add	r3, r2
 8009e84:	4619      	mov	r1, r3
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f7ff fe3c 	bl	8009b04 <move_window>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e90:	7ffb      	ldrb	r3, [r7, #31]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d178      	bne.n	8009f88 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea2:	4413      	add	r3, r2
 8009ea4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d003      	beq.n	8009eb8 <put_fat+0xf0>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	091b      	lsrs	r3, r3, #4
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	e00e      	b.n	8009ed6 <put_fat+0x10e>
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	b25b      	sxtb	r3, r3
 8009ebe:	f023 030f 	bic.w	r3, r3, #15
 8009ec2:	b25a      	sxtb	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	0a1b      	lsrs	r3, r3, #8
 8009ec8:	b25b      	sxtb	r3, r3
 8009eca:	f003 030f 	and.w	r3, r3, #15
 8009ece:	b25b      	sxtb	r3, r3
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	b25b      	sxtb	r3, r3
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2201      	movs	r2, #1
 8009ede:	70da      	strb	r2, [r3, #3]
			break;
 8009ee0:	e057      	b.n	8009f92 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6a1a      	ldr	r2, [r3, #32]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	0a1b      	lsrs	r3, r3, #8
 8009eea:	4413      	add	r3, r2
 8009eec:	4619      	mov	r1, r3
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f7ff fe08 	bl	8009b04 <move_window>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ef8:	7ffb      	ldrb	r3, [r7, #31]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d146      	bne.n	8009f8c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	005b      	lsls	r3, r3, #1
 8009f08:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009f0c:	4413      	add	r3, r2
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	b292      	uxth	r2, r2
 8009f12:	4611      	mov	r1, r2
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff fb80 	bl	800961a <st_word>
			fs->wflag = 1;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	70da      	strb	r2, [r3, #3]
			break;
 8009f20:	e037      	b.n	8009f92 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6a1a      	ldr	r2, [r3, #32]
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	09db      	lsrs	r3, r3, #7
 8009f2a:	4413      	add	r3, r2
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f7ff fde8 	bl	8009b04 <move_window>
 8009f34:	4603      	mov	r3, r0
 8009f36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f38:	7ffb      	ldrb	r3, [r7, #31]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d128      	bne.n	8009f90 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009f52:	4413      	add	r3, r2
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7ff fb3d 	bl	80095d4 <ld_dword>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009f60:	4323      	orrs	r3, r4
 8009f62:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009f72:	4413      	add	r3, r2
 8009f74:	6879      	ldr	r1, [r7, #4]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7ff fb6a 	bl	8009650 <st_dword>
			fs->wflag = 1;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	70da      	strb	r2, [r3, #3]
			break;
 8009f82:	e006      	b.n	8009f92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009f84:	bf00      	nop
 8009f86:	e004      	b.n	8009f92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009f88:	bf00      	nop
 8009f8a:	e002      	b.n	8009f92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009f8c:	bf00      	nop
 8009f8e:	e000      	b.n	8009f92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009f90:	bf00      	nop
		}
	}
	return res;
 8009f92:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3724      	adds	r7, #36	@ 0x24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd90      	pop	{r4, r7, pc}

08009f9c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b088      	sub	sp, #32
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d904      	bls.n	8009fc2 <remove_chain+0x26>
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	695b      	ldr	r3, [r3, #20]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d301      	bcc.n	8009fc6 <remove_chain+0x2a>
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	e04b      	b.n	800a05e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00c      	beq.n	8009fe6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd0:	6879      	ldr	r1, [r7, #4]
 8009fd2:	69b8      	ldr	r0, [r7, #24]
 8009fd4:	f7ff fef8 	bl	8009dc8 <put_fat>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009fdc:	7ffb      	ldrb	r3, [r7, #31]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <remove_chain+0x4a>
 8009fe2:	7ffb      	ldrb	r3, [r7, #31]
 8009fe4:	e03b      	b.n	800a05e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009fe6:	68b9      	ldr	r1, [r7, #8]
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f7ff fe46 	bl	8009c7a <get_fat>
 8009fee:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d031      	beq.n	800a05a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d101      	bne.n	800a000 <remove_chain+0x64>
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	e02e      	b.n	800a05e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a006:	d101      	bne.n	800a00c <remove_chain+0x70>
 800a008:	2301      	movs	r3, #1
 800a00a:	e028      	b.n	800a05e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a00c:	2200      	movs	r2, #0
 800a00e:	68b9      	ldr	r1, [r7, #8]
 800a010:	69b8      	ldr	r0, [r7, #24]
 800a012:	f7ff fed9 	bl	8009dc8 <put_fat>
 800a016:	4603      	mov	r3, r0
 800a018:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a01a:	7ffb      	ldrb	r3, [r7, #31]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <remove_chain+0x88>
 800a020:	7ffb      	ldrb	r3, [r7, #31]
 800a022:	e01c      	b.n	800a05e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	691a      	ldr	r2, [r3, #16]
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	3b02      	subs	r3, #2
 800a02e:	429a      	cmp	r2, r3
 800a030:	d20b      	bcs.n	800a04a <remove_chain+0xae>
			fs->free_clst++;
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	1c5a      	adds	r2, r3, #1
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	791b      	ldrb	r3, [r3, #4]
 800a040:	f043 0301 	orr.w	r3, r3, #1
 800a044:	b2da      	uxtb	r2, r3
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	429a      	cmp	r2, r3
 800a056:	d3c6      	bcc.n	8009fe6 <remove_chain+0x4a>
 800a058:	e000      	b.n	800a05c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a05a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3720      	adds	r7, #32
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b088      	sub	sp, #32
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10d      	bne.n	800a098 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d004      	beq.n	800a092 <create_chain+0x2c>
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	69ba      	ldr	r2, [r7, #24]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d31b      	bcc.n	800a0ca <create_chain+0x64>
 800a092:	2301      	movs	r3, #1
 800a094:	61bb      	str	r3, [r7, #24]
 800a096:	e018      	b.n	800a0ca <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7ff fded 	bl	8009c7a <get_fat>
 800a0a0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d801      	bhi.n	800a0ac <create_chain+0x46>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e070      	b.n	800a18e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b2:	d101      	bne.n	800a0b8 <create_chain+0x52>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	e06a      	b.n	800a18e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d201      	bcs.n	800a0c6 <create_chain+0x60>
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	e063      	b.n	800a18e <create_chain+0x128>
		scl = clst;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	69fa      	ldr	r2, [r7, #28]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d307      	bcc.n	800a0ee <create_chain+0x88>
				ncl = 2;
 800a0de:	2302      	movs	r3, #2
 800a0e0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a0e2:	69fa      	ldr	r2, [r7, #28]
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d901      	bls.n	800a0ee <create_chain+0x88>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	e04f      	b.n	800a18e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a0ee:	69f9      	ldr	r1, [r7, #28]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f7ff fdc2 	bl	8009c7a <get_fat>
 800a0f6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00e      	beq.n	800a11c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d003      	beq.n	800a10c <create_chain+0xa6>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a10a:	d101      	bne.n	800a110 <create_chain+0xaa>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	e03e      	b.n	800a18e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a110:	69fa      	ldr	r2, [r7, #28]
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	429a      	cmp	r2, r3
 800a116:	d1da      	bne.n	800a0ce <create_chain+0x68>
 800a118:	2300      	movs	r3, #0
 800a11a:	e038      	b.n	800a18e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a11c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a11e:	f04f 32ff 	mov.w	r2, #4294967295
 800a122:	69f9      	ldr	r1, [r7, #28]
 800a124:	6938      	ldr	r0, [r7, #16]
 800a126:	f7ff fe4f 	bl	8009dc8 <put_fat>
 800a12a:	4603      	mov	r3, r0
 800a12c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d109      	bne.n	800a148 <create_chain+0xe2>
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d006      	beq.n	800a148 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a13a:	69fa      	ldr	r2, [r7, #28]
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	6938      	ldr	r0, [r7, #16]
 800a140:	f7ff fe42 	bl	8009dc8 <put_fat>
 800a144:	4603      	mov	r3, r0
 800a146:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a148:	7dfb      	ldrb	r3, [r7, #23]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d116      	bne.n	800a17c <create_chain+0x116>
		fs->last_clst = ncl;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	69fa      	ldr	r2, [r7, #28]
 800a152:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	691a      	ldr	r2, [r3, #16]
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	695b      	ldr	r3, [r3, #20]
 800a15c:	3b02      	subs	r3, #2
 800a15e:	429a      	cmp	r2, r3
 800a160:	d804      	bhi.n	800a16c <create_chain+0x106>
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	1e5a      	subs	r2, r3, #1
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	791b      	ldrb	r3, [r3, #4]
 800a170:	f043 0301 	orr.w	r3, r3, #1
 800a174:	b2da      	uxtb	r2, r3
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	711a      	strb	r2, [r3, #4]
 800a17a:	e007      	b.n	800a18c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d102      	bne.n	800a188 <create_chain+0x122>
 800a182:	f04f 33ff 	mov.w	r3, #4294967295
 800a186:	e000      	b.n	800a18a <create_chain+0x124>
 800a188:	2301      	movs	r3, #1
 800a18a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a18c:	69fb      	ldr	r3, [r7, #28]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3720      	adds	r7, #32
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a196:	b480      	push	{r7}
 800a198:	b087      	sub	sp, #28
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	0a5b      	lsrs	r3, r3, #9
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	8952      	ldrh	r2, [r2, #10]
 800a1b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1ba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	1d1a      	adds	r2, r3, #4
 800a1c0:	613a      	str	r2, [r7, #16]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d101      	bne.n	800a1d0 <clmt_clust+0x3a>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	e010      	b.n	800a1f2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a1d0:	697a      	ldr	r2, [r7, #20]
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d307      	bcc.n	800a1e8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	1ad3      	subs	r3, r2, r3
 800a1de:	617b      	str	r3, [r7, #20]
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	3304      	adds	r3, #4
 800a1e4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a1e6:	e7e9      	b.n	800a1bc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a1e8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	4413      	add	r3, r2
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	371c      	adds	r7, #28
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b086      	sub	sp, #24
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a214:	d204      	bcs.n	800a220 <dir_sdi+0x22>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	f003 031f 	and.w	r3, r3, #31
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d001      	beq.n	800a224 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a220:	2302      	movs	r3, #2
 800a222:	e063      	b.n	800a2ec <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	683a      	ldr	r2, [r7, #0]
 800a228:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d106      	bne.n	800a244 <dir_sdi+0x46>
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d902      	bls.n	800a244 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a242:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10c      	bne.n	800a264 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	095b      	lsrs	r3, r3, #5
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	8912      	ldrh	r2, [r2, #8]
 800a252:	4293      	cmp	r3, r2
 800a254:	d301      	bcc.n	800a25a <dir_sdi+0x5c>
 800a256:	2302      	movs	r3, #2
 800a258:	e048      	b.n	800a2ec <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	61da      	str	r2, [r3, #28]
 800a262:	e029      	b.n	800a2b8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	895b      	ldrh	r3, [r3, #10]
 800a268:	025b      	lsls	r3, r3, #9
 800a26a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a26c:	e019      	b.n	800a2a2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6979      	ldr	r1, [r7, #20]
 800a272:	4618      	mov	r0, r3
 800a274:	f7ff fd01 	bl	8009c7a <get_fat>
 800a278:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a280:	d101      	bne.n	800a286 <dir_sdi+0x88>
 800a282:	2301      	movs	r3, #1
 800a284:	e032      	b.n	800a2ec <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d904      	bls.n	800a296 <dir_sdi+0x98>
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	695b      	ldr	r3, [r3, #20]
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	429a      	cmp	r2, r3
 800a294:	d301      	bcc.n	800a29a <dir_sdi+0x9c>
 800a296:	2302      	movs	r3, #2
 800a298:	e028      	b.n	800a2ec <dir_sdi+0xee>
			ofs -= csz;
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d2e1      	bcs.n	800a26e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a2aa:	6979      	ldr	r1, [r7, #20]
 800a2ac:	6938      	ldr	r0, [r7, #16]
 800a2ae:	f7ff fcc5 	bl	8009c3c <clust2sect>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	69db      	ldr	r3, [r3, #28]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <dir_sdi+0xcc>
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	e010      	b.n	800a2ec <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	69da      	ldr	r2, [r3, #28]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	0a5b      	lsrs	r3, r3, #9
 800a2d2:	441a      	add	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e4:	441a      	add	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3718      	adds	r7, #24
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	695b      	ldr	r3, [r3, #20]
 800a308:	3320      	adds	r3, #32
 800a30a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	69db      	ldr	r3, [r3, #28]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d003      	beq.n	800a31c <dir_next+0x28>
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a31a:	d301      	bcc.n	800a320 <dir_next+0x2c>
 800a31c:	2304      	movs	r3, #4
 800a31e:	e0aa      	b.n	800a476 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a326:	2b00      	cmp	r3, #0
 800a328:	f040 8098 	bne.w	800a45c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	69db      	ldr	r3, [r3, #28]
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10b      	bne.n	800a356 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	095b      	lsrs	r3, r3, #5
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	8912      	ldrh	r2, [r2, #8]
 800a346:	4293      	cmp	r3, r2
 800a348:	f0c0 8088 	bcc.w	800a45c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	61da      	str	r2, [r3, #28]
 800a352:	2304      	movs	r3, #4
 800a354:	e08f      	b.n	800a476 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	0a5b      	lsrs	r3, r3, #9
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	8952      	ldrh	r2, [r2, #10]
 800a35e:	3a01      	subs	r2, #1
 800a360:	4013      	ands	r3, r2
 800a362:	2b00      	cmp	r3, #0
 800a364:	d17a      	bne.n	800a45c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	4619      	mov	r1, r3
 800a36e:	4610      	mov	r0, r2
 800a370:	f7ff fc83 	bl	8009c7a <get_fat>
 800a374:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d801      	bhi.n	800a380 <dir_next+0x8c>
 800a37c:	2302      	movs	r3, #2
 800a37e:	e07a      	b.n	800a476 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a386:	d101      	bne.n	800a38c <dir_next+0x98>
 800a388:	2301      	movs	r3, #1
 800a38a:	e074      	b.n	800a476 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	697a      	ldr	r2, [r7, #20]
 800a392:	429a      	cmp	r2, r3
 800a394:	d358      	bcc.n	800a448 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d104      	bne.n	800a3a6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	61da      	str	r2, [r3, #28]
 800a3a2:	2304      	movs	r3, #4
 800a3a4:	e067      	b.n	800a476 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	f7ff fe59 	bl	800a066 <create_chain>
 800a3b4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d101      	bne.n	800a3c0 <dir_next+0xcc>
 800a3bc:	2307      	movs	r3, #7
 800a3be:	e05a      	b.n	800a476 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d101      	bne.n	800a3ca <dir_next+0xd6>
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	e055      	b.n	800a476 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d0:	d101      	bne.n	800a3d6 <dir_next+0xe2>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e04f      	b.n	800a476 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f7ff fb50 	bl	8009a7c <sync_window>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <dir_next+0xf2>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e047      	b.n	800a476 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	3330      	adds	r3, #48	@ 0x30
 800a3ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7ff f97a 	bl	80096ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	613b      	str	r3, [r7, #16]
 800a3fa:	6979      	ldr	r1, [r7, #20]
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f7ff fc1d 	bl	8009c3c <clust2sect>
 800a402:	4602      	mov	r2, r0
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a408:	e012      	b.n	800a430 <dir_next+0x13c>
						fs->wflag = 1;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2201      	movs	r2, #1
 800a40e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f7ff fb33 	bl	8009a7c <sync_window>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d001      	beq.n	800a420 <dir_next+0x12c>
 800a41c:	2301      	movs	r3, #1
 800a41e:	e02a      	b.n	800a476 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	3301      	adds	r3, #1
 800a424:	613b      	str	r3, [r7, #16]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a42a:	1c5a      	adds	r2, r3, #1
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	895b      	ldrh	r3, [r3, #10]
 800a434:	461a      	mov	r2, r3
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	4293      	cmp	r3, r2
 800a43a:	d3e6      	bcc.n	800a40a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	1ad2      	subs	r2, r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a44e:	6979      	ldr	r1, [r7, #20]
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f7ff fbf3 	bl	8009c3c <clust2sect>
 800a456:	4602      	mov	r2, r0
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a46e:	441a      	add	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3718      	adds	r7, #24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b086      	sub	sp, #24
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a48e:	2100      	movs	r1, #0
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7ff feb4 	bl	800a1fe <dir_sdi>
 800a496:	4603      	mov	r3, r0
 800a498:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a49a:	7dfb      	ldrb	r3, [r7, #23]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d12b      	bne.n	800a4f8 <dir_alloc+0x7a>
		n = 0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	69db      	ldr	r3, [r3, #28]
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f7ff fb2a 	bl	8009b04 <move_window>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d11d      	bne.n	800a4f6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	2be5      	cmp	r3, #229	@ 0xe5
 800a4c2:	d004      	beq.n	800a4ce <dir_alloc+0x50>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a1b      	ldr	r3, [r3, #32]
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d107      	bne.n	800a4de <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	613b      	str	r3, [r7, #16]
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d102      	bne.n	800a4e2 <dir_alloc+0x64>
 800a4dc:	e00c      	b.n	800a4f8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a4de:	2300      	movs	r3, #0
 800a4e0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a4e2:	2101      	movs	r1, #1
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff ff05 	bl	800a2f4 <dir_next>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a4ee:	7dfb      	ldrb	r3, [r7, #23]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d0d7      	beq.n	800a4a4 <dir_alloc+0x26>
 800a4f4:	e000      	b.n	800a4f8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a4f6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a4f8:	7dfb      	ldrb	r3, [r7, #23]
 800a4fa:	2b04      	cmp	r3, #4
 800a4fc:	d101      	bne.n	800a502 <dir_alloc+0x84>
 800a4fe:	2307      	movs	r3, #7
 800a500:	75fb      	strb	r3, [r7, #23]
	return res;
 800a502:	7dfb      	ldrb	r3, [r7, #23]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3718      	adds	r7, #24
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	331a      	adds	r3, #26
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7ff f842 	bl	80095a4 <ld_word>
 800a520:	4603      	mov	r3, r0
 800a522:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	2b03      	cmp	r3, #3
 800a52a:	d109      	bne.n	800a540 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	3314      	adds	r3, #20
 800a530:	4618      	mov	r0, r3
 800a532:	f7ff f837 	bl	80095a4 <ld_word>
 800a536:	4603      	mov	r3, r0
 800a538:	041b      	lsls	r3, r3, #16
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a540:	68fb      	ldr	r3, [r7, #12]
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	af00      	add	r7, sp, #0
 800a550:	60f8      	str	r0, [r7, #12]
 800a552:	60b9      	str	r1, [r7, #8]
 800a554:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	331a      	adds	r3, #26
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	b292      	uxth	r2, r2
 800a55e:	4611      	mov	r1, r2
 800a560:	4618      	mov	r0, r3
 800a562:	f7ff f85a 	bl	800961a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d109      	bne.n	800a582 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	f103 0214 	add.w	r2, r3, #20
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	0c1b      	lsrs	r3, r3, #16
 800a578:	b29b      	uxth	r3, r3
 800a57a:	4619      	mov	r1, r3
 800a57c:	4610      	mov	r0, r2
 800a57e:	f7ff f84c 	bl	800961a <st_word>
	}
}
 800a582:	bf00      	nop
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b086      	sub	sp, #24
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a598:	2100      	movs	r1, #0
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7ff fe2f 	bl	800a1fe <dir_sdi>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a5a4:	7dfb      	ldrb	r3, [r7, #23]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d001      	beq.n	800a5ae <dir_find+0x24>
 800a5aa:	7dfb      	ldrb	r3, [r7, #23]
 800a5ac:	e03e      	b.n	800a62c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	69db      	ldr	r3, [r3, #28]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	6938      	ldr	r0, [r7, #16]
 800a5b6:	f7ff faa5 	bl	8009b04 <move_window>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a5be:	7dfb      	ldrb	r3, [r7, #23]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d12f      	bne.n	800a624 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a1b      	ldr	r3, [r3, #32]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a5cc:	7bfb      	ldrb	r3, [r7, #15]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d102      	bne.n	800a5d8 <dir_find+0x4e>
 800a5d2:	2304      	movs	r3, #4
 800a5d4:	75fb      	strb	r3, [r7, #23]
 800a5d6:	e028      	b.n	800a62a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a1b      	ldr	r3, [r3, #32]
 800a5dc:	330b      	adds	r3, #11
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a5e4:	b2da      	uxtb	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	330b      	adds	r3, #11
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	f003 0308 	and.w	r3, r3, #8
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10a      	bne.n	800a610 <dir_find+0x86>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a18      	ldr	r0, [r3, #32]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	3324      	adds	r3, #36	@ 0x24
 800a602:	220b      	movs	r2, #11
 800a604:	4619      	mov	r1, r3
 800a606:	f7ff f88b 	bl	8009720 <mem_cmp>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00b      	beq.n	800a628 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a610:	2100      	movs	r1, #0
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7ff fe6e 	bl	800a2f4 <dir_next>
 800a618:	4603      	mov	r3, r0
 800a61a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a61c:	7dfb      	ldrb	r3, [r7, #23]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d0c5      	beq.n	800a5ae <dir_find+0x24>
 800a622:	e002      	b.n	800a62a <dir_find+0xa0>
		if (res != FR_OK) break;
 800a624:	bf00      	nop
 800a626:	e000      	b.n	800a62a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a628:	bf00      	nop

	return res;
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a642:	2101      	movs	r1, #1
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff ff1a 	bl	800a47e <dir_alloc>
 800a64a:	4603      	mov	r3, r0
 800a64c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d11c      	bne.n	800a68e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	69db      	ldr	r3, [r3, #28]
 800a658:	4619      	mov	r1, r3
 800a65a:	68b8      	ldr	r0, [r7, #8]
 800a65c:	f7ff fa52 	bl	8009b04 <move_window>
 800a660:	4603      	mov	r3, r0
 800a662:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a664:	7bfb      	ldrb	r3, [r7, #15]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d111      	bne.n	800a68e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a1b      	ldr	r3, [r3, #32]
 800a66e:	2220      	movs	r2, #32
 800a670:	2100      	movs	r1, #0
 800a672:	4618      	mov	r0, r3
 800a674:	f7ff f839 	bl	80096ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6a18      	ldr	r0, [r3, #32]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	3324      	adds	r3, #36	@ 0x24
 800a680:	220b      	movs	r2, #11
 800a682:	4619      	mov	r1, r3
 800a684:	f7ff f810 	bl	80096a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2201      	movs	r2, #1
 800a68c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b088      	sub	sp, #32
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	60fb      	str	r3, [r7, #12]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	3324      	adds	r3, #36	@ 0x24
 800a6ac:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a6ae:	220b      	movs	r2, #11
 800a6b0:	2120      	movs	r1, #32
 800a6b2:	68b8      	ldr	r0, [r7, #8]
 800a6b4:	f7ff f819 	bl	80096ea <mem_set>
	si = i = 0; ni = 8;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	613b      	str	r3, [r7, #16]
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	61fb      	str	r3, [r7, #28]
 800a6c0:	2308      	movs	r3, #8
 800a6c2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	1c5a      	adds	r2, r3, #1
 800a6c8:	61fa      	str	r2, [r7, #28]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a6d2:	7efb      	ldrb	r3, [r7, #27]
 800a6d4:	2b20      	cmp	r3, #32
 800a6d6:	d94e      	bls.n	800a776 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a6d8:	7efb      	ldrb	r3, [r7, #27]
 800a6da:	2b2f      	cmp	r3, #47	@ 0x2f
 800a6dc:	d006      	beq.n	800a6ec <create_name+0x54>
 800a6de:	7efb      	ldrb	r3, [r7, #27]
 800a6e0:	2b5c      	cmp	r3, #92	@ 0x5c
 800a6e2:	d110      	bne.n	800a706 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a6e4:	e002      	b.n	800a6ec <create_name+0x54>
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	61fb      	str	r3, [r7, #28]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	2b2f      	cmp	r3, #47	@ 0x2f
 800a6f6:	d0f6      	beq.n	800a6e6 <create_name+0x4e>
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	2b5c      	cmp	r3, #92	@ 0x5c
 800a702:	d0f0      	beq.n	800a6e6 <create_name+0x4e>
			break;
 800a704:	e038      	b.n	800a778 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a706:	7efb      	ldrb	r3, [r7, #27]
 800a708:	2b2e      	cmp	r3, #46	@ 0x2e
 800a70a:	d003      	beq.n	800a714 <create_name+0x7c>
 800a70c:	693a      	ldr	r2, [r7, #16]
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	429a      	cmp	r2, r3
 800a712:	d30c      	bcc.n	800a72e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	2b0b      	cmp	r3, #11
 800a718:	d002      	beq.n	800a720 <create_name+0x88>
 800a71a:	7efb      	ldrb	r3, [r7, #27]
 800a71c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a71e:	d001      	beq.n	800a724 <create_name+0x8c>
 800a720:	2306      	movs	r3, #6
 800a722:	e044      	b.n	800a7ae <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a724:	2308      	movs	r3, #8
 800a726:	613b      	str	r3, [r7, #16]
 800a728:	230b      	movs	r3, #11
 800a72a:	617b      	str	r3, [r7, #20]
			continue;
 800a72c:	e022      	b.n	800a774 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a72e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a732:	2b00      	cmp	r3, #0
 800a734:	da04      	bge.n	800a740 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a736:	7efb      	ldrb	r3, [r7, #27]
 800a738:	3b80      	subs	r3, #128	@ 0x80
 800a73a:	4a1f      	ldr	r2, [pc, #124]	@ (800a7b8 <create_name+0x120>)
 800a73c:	5cd3      	ldrb	r3, [r2, r3]
 800a73e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a740:	7efb      	ldrb	r3, [r7, #27]
 800a742:	4619      	mov	r1, r3
 800a744:	481d      	ldr	r0, [pc, #116]	@ (800a7bc <create_name+0x124>)
 800a746:	f7ff f812 	bl	800976e <chk_chr>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <create_name+0xbc>
 800a750:	2306      	movs	r3, #6
 800a752:	e02c      	b.n	800a7ae <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a754:	7efb      	ldrb	r3, [r7, #27]
 800a756:	2b60      	cmp	r3, #96	@ 0x60
 800a758:	d905      	bls.n	800a766 <create_name+0xce>
 800a75a:	7efb      	ldrb	r3, [r7, #27]
 800a75c:	2b7a      	cmp	r3, #122	@ 0x7a
 800a75e:	d802      	bhi.n	800a766 <create_name+0xce>
 800a760:	7efb      	ldrb	r3, [r7, #27]
 800a762:	3b20      	subs	r3, #32
 800a764:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	1c5a      	adds	r2, r3, #1
 800a76a:	613a      	str	r2, [r7, #16]
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	4413      	add	r3, r2
 800a770:	7efa      	ldrb	r2, [r7, #27]
 800a772:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a774:	e7a6      	b.n	800a6c4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a776:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	441a      	add	r2, r3
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d101      	bne.n	800a78c <create_name+0xf4>
 800a788:	2306      	movs	r3, #6
 800a78a:	e010      	b.n	800a7ae <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	2be5      	cmp	r3, #229	@ 0xe5
 800a792:	d102      	bne.n	800a79a <create_name+0x102>
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	2205      	movs	r2, #5
 800a798:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a79a:	7efb      	ldrb	r3, [r7, #27]
 800a79c:	2b20      	cmp	r3, #32
 800a79e:	d801      	bhi.n	800a7a4 <create_name+0x10c>
 800a7a0:	2204      	movs	r2, #4
 800a7a2:	e000      	b.n	800a7a6 <create_name+0x10e>
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	330b      	adds	r3, #11
 800a7aa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a7ac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3720      	adds	r7, #32
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	080771c0 	.word	0x080771c0
 800a7bc:	0800e864 	.word	0x0800e864

0800a7c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a7d4:	e002      	b.n	800a7dc <follow_path+0x1c>
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	603b      	str	r3, [r7, #0]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	2b2f      	cmp	r3, #47	@ 0x2f
 800a7e2:	d0f8      	beq.n	800a7d6 <follow_path+0x16>
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	2b5c      	cmp	r3, #92	@ 0x5c
 800a7ea:	d0f4      	beq.n	800a7d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	2b1f      	cmp	r3, #31
 800a7f8:	d80a      	bhi.n	800a810 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2280      	movs	r2, #128	@ 0x80
 800a7fe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800a802:	2100      	movs	r1, #0
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f7ff fcfa 	bl	800a1fe <dir_sdi>
 800a80a:	4603      	mov	r3, r0
 800a80c:	75fb      	strb	r3, [r7, #23]
 800a80e:	e043      	b.n	800a898 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a810:	463b      	mov	r3, r7
 800a812:	4619      	mov	r1, r3
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7ff ff3f 	bl	800a698 <create_name>
 800a81a:	4603      	mov	r3, r0
 800a81c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a81e:	7dfb      	ldrb	r3, [r7, #23]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d134      	bne.n	800a88e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7ff feb0 	bl	800a58a <dir_find>
 800a82a:	4603      	mov	r3, r0
 800a82c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a834:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a836:	7dfb      	ldrb	r3, [r7, #23]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00a      	beq.n	800a852 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a83c:	7dfb      	ldrb	r3, [r7, #23]
 800a83e:	2b04      	cmp	r3, #4
 800a840:	d127      	bne.n	800a892 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a842:	7afb      	ldrb	r3, [r7, #11]
 800a844:	f003 0304 	and.w	r3, r3, #4
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d122      	bne.n	800a892 <follow_path+0xd2>
 800a84c:	2305      	movs	r3, #5
 800a84e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a850:	e01f      	b.n	800a892 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a852:	7afb      	ldrb	r3, [r7, #11]
 800a854:	f003 0304 	and.w	r3, r3, #4
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d11c      	bne.n	800a896 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	799b      	ldrb	r3, [r3, #6]
 800a860:	f003 0310 	and.w	r3, r3, #16
 800a864:	2b00      	cmp	r3, #0
 800a866:	d102      	bne.n	800a86e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a868:	2305      	movs	r3, #5
 800a86a:	75fb      	strb	r3, [r7, #23]
 800a86c:	e014      	b.n	800a898 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a87c:	4413      	add	r3, r2
 800a87e:	4619      	mov	r1, r3
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f7ff fe43 	bl	800a50c <ld_clust>
 800a886:	4602      	mov	r2, r0
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a88c:	e7c0      	b.n	800a810 <follow_path+0x50>
			if (res != FR_OK) break;
 800a88e:	bf00      	nop
 800a890:	e002      	b.n	800a898 <follow_path+0xd8>
				break;
 800a892:	bf00      	nop
 800a894:	e000      	b.n	800a898 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a896:	bf00      	nop
			}
		}
	}

	return res;
 800a898:	7dfb      	ldrb	r3, [r7, #23]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3718      	adds	r7, #24
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b087      	sub	sp, #28
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a8aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d031      	beq.n	800a91c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	617b      	str	r3, [r7, #20]
 800a8be:	e002      	b.n	800a8c6 <get_ldnumber+0x24>
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	617b      	str	r3, [r7, #20]
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	2b20      	cmp	r3, #32
 800a8cc:	d903      	bls.n	800a8d6 <get_ldnumber+0x34>
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	2b3a      	cmp	r3, #58	@ 0x3a
 800a8d4:	d1f4      	bne.n	800a8c0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	2b3a      	cmp	r3, #58	@ 0x3a
 800a8dc:	d11c      	bne.n	800a918 <get_ldnumber+0x76>
			tp = *path;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	1c5a      	adds	r2, r3, #1
 800a8e8:	60fa      	str	r2, [r7, #12]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	3b30      	subs	r3, #48	@ 0x30
 800a8ee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	2b09      	cmp	r3, #9
 800a8f4:	d80e      	bhi.n	800a914 <get_ldnumber+0x72>
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d10a      	bne.n	800a914 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d107      	bne.n	800a914 <get_ldnumber+0x72>
					vol = (int)i;
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	3301      	adds	r3, #1
 800a90c:	617b      	str	r3, [r7, #20]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	697a      	ldr	r2, [r7, #20]
 800a912:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	e002      	b.n	800a91e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a918:	2300      	movs	r3, #0
 800a91a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a91c:	693b      	ldr	r3, [r7, #16]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	371c      	adds	r7, #28
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
	...

0800a92c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	70da      	strb	r2, [r3, #3]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f04f 32ff 	mov.w	r2, #4294967295
 800a942:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a944:	6839      	ldr	r1, [r7, #0]
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f7ff f8dc 	bl	8009b04 <move_window>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <check_fs+0x2a>
 800a952:	2304      	movs	r3, #4
 800a954:	e038      	b.n	800a9c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	3330      	adds	r3, #48	@ 0x30
 800a95a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fe fe20 	bl	80095a4 <ld_word>
 800a964:	4603      	mov	r3, r0
 800a966:	461a      	mov	r2, r3
 800a968:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d001      	beq.n	800a974 <check_fs+0x48>
 800a970:	2303      	movs	r3, #3
 800a972:	e029      	b.n	800a9c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a97a:	2be9      	cmp	r3, #233	@ 0xe9
 800a97c:	d009      	beq.n	800a992 <check_fs+0x66>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a984:	2beb      	cmp	r3, #235	@ 0xeb
 800a986:	d11e      	bne.n	800a9c6 <check_fs+0x9a>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a98e:	2b90      	cmp	r3, #144	@ 0x90
 800a990:	d119      	bne.n	800a9c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	3330      	adds	r3, #48	@ 0x30
 800a996:	3336      	adds	r3, #54	@ 0x36
 800a998:	4618      	mov	r0, r3
 800a99a:	f7fe fe1b 	bl	80095d4 <ld_dword>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a9a4:	4a0a      	ldr	r2, [pc, #40]	@ (800a9d0 <check_fs+0xa4>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d101      	bne.n	800a9ae <check_fs+0x82>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	e00c      	b.n	800a9c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	3330      	adds	r3, #48	@ 0x30
 800a9b2:	3352      	adds	r3, #82	@ 0x52
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fe fe0d 	bl	80095d4 <ld_dword>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	4a05      	ldr	r2, [pc, #20]	@ (800a9d4 <check_fs+0xa8>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d101      	bne.n	800a9c6 <check_fs+0x9a>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	e000      	b.n	800a9c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a9c6:	2302      	movs	r3, #2
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	00544146 	.word	0x00544146
 800a9d4:	33544146 	.word	0x33544146

0800a9d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b096      	sub	sp, #88	@ 0x58
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f7ff ff58 	bl	800a8a2 <get_ldnumber>
 800a9f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a9f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	da01      	bge.n	800a9fe <find_volume+0x26>
 800a9fa:	230b      	movs	r3, #11
 800a9fc:	e22d      	b.n	800ae5a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a9fe:	4aa1      	ldr	r2, [pc, #644]	@ (800ac84 <find_volume+0x2ac>)
 800aa00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa06:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aa08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <find_volume+0x3a>
 800aa0e:	230c      	movs	r3, #12
 800aa10:	e223      	b.n	800ae5a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa16:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aa18:	79fb      	ldrb	r3, [r7, #7]
 800aa1a:	f023 0301 	bic.w	r3, r3, #1
 800aa1e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aa20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d01a      	beq.n	800aa5e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800aa28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2a:	785b      	ldrb	r3, [r3, #1]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fe fd1b 	bl	8009468 <disk_status>
 800aa32:	4603      	mov	r3, r0
 800aa34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800aa38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aa3c:	f003 0301 	and.w	r3, r3, #1
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10c      	bne.n	800aa5e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800aa44:	79fb      	ldrb	r3, [r7, #7]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d007      	beq.n	800aa5a <find_volume+0x82>
 800aa4a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aa4e:	f003 0304 	and.w	r3, r3, #4
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800aa56:	230a      	movs	r3, #10
 800aa58:	e1ff      	b.n	800ae5a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	e1fd      	b.n	800ae5a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800aa5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa60:	2200      	movs	r2, #0
 800aa62:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aa64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa66:	b2da      	uxtb	r2, r3
 800aa68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aa6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6e:	785b      	ldrb	r3, [r3, #1]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fe fd13 	bl	800949c <disk_initialize>
 800aa76:	4603      	mov	r3, r0
 800aa78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800aa7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d001      	beq.n	800aa8c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e1e6      	b.n	800ae5a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800aa8c:	79fb      	ldrb	r3, [r7, #7]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d007      	beq.n	800aaa2 <find_volume+0xca>
 800aa92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aa96:	f003 0304 	and.w	r3, r3, #4
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d001      	beq.n	800aaa2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800aa9e:	230a      	movs	r3, #10
 800aaa0:	e1db      	b.n	800ae5a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800aaa6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aaa8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aaaa:	f7ff ff3f 	bl	800a92c <check_fs>
 800aaae:	4603      	mov	r3, r0
 800aab0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800aab4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d149      	bne.n	800ab50 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aabc:	2300      	movs	r3, #0
 800aabe:	643b      	str	r3, [r7, #64]	@ 0x40
 800aac0:	e01e      	b.n	800ab00 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800aac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaca:	011b      	lsls	r3, r3, #4
 800aacc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800aad0:	4413      	add	r3, r2
 800aad2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800aad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad6:	3304      	adds	r3, #4
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d006      	beq.n	800aaec <find_volume+0x114>
 800aade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae0:	3308      	adds	r3, #8
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe fd76 	bl	80095d4 <ld_dword>
 800aae8:	4602      	mov	r2, r0
 800aaea:	e000      	b.n	800aaee <find_volume+0x116>
 800aaec:	2200      	movs	r2, #0
 800aaee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	3358      	adds	r3, #88	@ 0x58
 800aaf4:	443b      	add	r3, r7
 800aaf6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aafa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aafc:	3301      	adds	r3, #1
 800aafe:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab02:	2b03      	cmp	r3, #3
 800ab04:	d9dd      	bls.n	800aac2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ab06:	2300      	movs	r3, #0
 800ab08:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ab0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <find_volume+0x13e>
 800ab10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab12:	3b01      	subs	r3, #1
 800ab14:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ab16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	3358      	adds	r3, #88	@ 0x58
 800ab1c:	443b      	add	r3, r7
 800ab1e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ab22:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ab24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d005      	beq.n	800ab36 <find_volume+0x15e>
 800ab2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ab2c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ab2e:	f7ff fefd 	bl	800a92c <check_fs>
 800ab32:	4603      	mov	r3, r0
 800ab34:	e000      	b.n	800ab38 <find_volume+0x160>
 800ab36:	2303      	movs	r3, #3
 800ab38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ab3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d905      	bls.n	800ab50 <find_volume+0x178>
 800ab44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab46:	3301      	adds	r3, #1
 800ab48:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab4c:	2b03      	cmp	r3, #3
 800ab4e:	d9e2      	bls.n	800ab16 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ab50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ab54:	2b04      	cmp	r3, #4
 800ab56:	d101      	bne.n	800ab5c <find_volume+0x184>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e17e      	b.n	800ae5a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ab5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d901      	bls.n	800ab68 <find_volume+0x190>
 800ab64:	230d      	movs	r3, #13
 800ab66:	e178      	b.n	800ae5a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ab68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6a:	3330      	adds	r3, #48	@ 0x30
 800ab6c:	330b      	adds	r3, #11
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fe fd18 	bl	80095a4 <ld_word>
 800ab74:	4603      	mov	r3, r0
 800ab76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab7a:	d001      	beq.n	800ab80 <find_volume+0x1a8>
 800ab7c:	230d      	movs	r3, #13
 800ab7e:	e16c      	b.n	800ae5a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ab80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab82:	3330      	adds	r3, #48	@ 0x30
 800ab84:	3316      	adds	r3, #22
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe fd0c 	bl	80095a4 <ld_word>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ab90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d106      	bne.n	800aba4 <find_volume+0x1cc>
 800ab96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab98:	3330      	adds	r3, #48	@ 0x30
 800ab9a:	3324      	adds	r3, #36	@ 0x24
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fe fd19 	bl	80095d4 <ld_dword>
 800aba2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800aba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aba8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800abaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abac:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800abb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800abb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb6:	789b      	ldrb	r3, [r3, #2]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d005      	beq.n	800abc8 <find_volume+0x1f0>
 800abbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abbe:	789b      	ldrb	r3, [r3, #2]
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d001      	beq.n	800abc8 <find_volume+0x1f0>
 800abc4:	230d      	movs	r3, #13
 800abc6:	e148      	b.n	800ae5a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800abc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abca:	789b      	ldrb	r3, [r3, #2]
 800abcc:	461a      	mov	r2, r3
 800abce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abd0:	fb02 f303 	mul.w	r3, r2, r3
 800abd4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800abd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abdc:	461a      	mov	r2, r3
 800abde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800abe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe4:	895b      	ldrh	r3, [r3, #10]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d008      	beq.n	800abfc <find_volume+0x224>
 800abea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abec:	895b      	ldrh	r3, [r3, #10]
 800abee:	461a      	mov	r2, r3
 800abf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf2:	895b      	ldrh	r3, [r3, #10]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	4013      	ands	r3, r2
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <find_volume+0x228>
 800abfc:	230d      	movs	r3, #13
 800abfe:	e12c      	b.n	800ae5a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ac00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac02:	3330      	adds	r3, #48	@ 0x30
 800ac04:	3311      	adds	r3, #17
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fe fccc 	bl	80095a4 <ld_word>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	461a      	mov	r2, r3
 800ac10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac12:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ac14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac16:	891b      	ldrh	r3, [r3, #8]
 800ac18:	f003 030f 	and.w	r3, r3, #15
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <find_volume+0x24e>
 800ac22:	230d      	movs	r3, #13
 800ac24:	e119      	b.n	800ae5a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ac26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac28:	3330      	adds	r3, #48	@ 0x30
 800ac2a:	3313      	adds	r3, #19
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7fe fcb9 	bl	80095a4 <ld_word>
 800ac32:	4603      	mov	r3, r0
 800ac34:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ac36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d106      	bne.n	800ac4a <find_volume+0x272>
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3e:	3330      	adds	r3, #48	@ 0x30
 800ac40:	3320      	adds	r3, #32
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fe fcc6 	bl	80095d4 <ld_dword>
 800ac48:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ac4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac4c:	3330      	adds	r3, #48	@ 0x30
 800ac4e:	330e      	adds	r3, #14
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fe fca7 	bl	80095a4 <ld_word>
 800ac56:	4603      	mov	r3, r0
 800ac58:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ac5a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d101      	bne.n	800ac64 <find_volume+0x28c>
 800ac60:	230d      	movs	r3, #13
 800ac62:	e0fa      	b.n	800ae5a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ac64:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ac66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac68:	4413      	add	r3, r2
 800ac6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac6c:	8912      	ldrh	r2, [r2, #8]
 800ac6e:	0912      	lsrs	r2, r2, #4
 800ac70:	b292      	uxth	r2, r2
 800ac72:	4413      	add	r3, r2
 800ac74:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ac76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d204      	bcs.n	800ac88 <find_volume+0x2b0>
 800ac7e:	230d      	movs	r3, #13
 800ac80:	e0eb      	b.n	800ae5a <find_volume+0x482>
 800ac82:	bf00      	nop
 800ac84:	2004094c 	.word	0x2004094c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ac88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac90:	8952      	ldrh	r2, [r2, #10]
 800ac92:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac96:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ac98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d101      	bne.n	800aca2 <find_volume+0x2ca>
 800ac9e:	230d      	movs	r3, #13
 800aca0:	e0db      	b.n	800ae5a <find_volume+0x482>
		fmt = FS_FAT32;
 800aca2:	2303      	movs	r3, #3
 800aca4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800aca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acaa:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800acae:	4293      	cmp	r3, r2
 800acb0:	d802      	bhi.n	800acb8 <find_volume+0x2e0>
 800acb2:	2302      	movs	r3, #2
 800acb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800acb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acba:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d802      	bhi.n	800acc8 <find_volume+0x2f0>
 800acc2:	2301      	movs	r3, #1
 800acc4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800acc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acca:	1c9a      	adds	r2, r3, #2
 800accc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acce:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800acd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800acd4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800acd6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800acd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acda:	441a      	add	r2, r3
 800acdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acde:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800ace0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ace2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace4:	441a      	add	r2, r3
 800ace6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800acea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800acee:	2b03      	cmp	r3, #3
 800acf0:	d11e      	bne.n	800ad30 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800acf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf4:	3330      	adds	r3, #48	@ 0x30
 800acf6:	332a      	adds	r3, #42	@ 0x2a
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7fe fc53 	bl	80095a4 <ld_word>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d001      	beq.n	800ad08 <find_volume+0x330>
 800ad04:	230d      	movs	r3, #13
 800ad06:	e0a8      	b.n	800ae5a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ad08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad0a:	891b      	ldrh	r3, [r3, #8]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d001      	beq.n	800ad14 <find_volume+0x33c>
 800ad10:	230d      	movs	r3, #13
 800ad12:	e0a2      	b.n	800ae5a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ad14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad16:	3330      	adds	r3, #48	@ 0x30
 800ad18:	332c      	adds	r3, #44	@ 0x2c
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fe fc5a 	bl	80095d4 <ld_dword>
 800ad20:	4602      	mov	r2, r0
 800ad22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad24:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ad26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad28:	695b      	ldr	r3, [r3, #20]
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad2e:	e01f      	b.n	800ad70 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ad30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad32:	891b      	ldrh	r3, [r3, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d101      	bne.n	800ad3c <find_volume+0x364>
 800ad38:	230d      	movs	r3, #13
 800ad3a:	e08e      	b.n	800ae5a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ad3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad3e:	6a1a      	ldr	r2, [r3, #32]
 800ad40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad42:	441a      	add	r2, r3
 800ad44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad46:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ad48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d103      	bne.n	800ad58 <find_volume+0x380>
 800ad50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad52:	695b      	ldr	r3, [r3, #20]
 800ad54:	005b      	lsls	r3, r3, #1
 800ad56:	e00a      	b.n	800ad6e <find_volume+0x396>
 800ad58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5a:	695a      	ldr	r2, [r3, #20]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	005b      	lsls	r3, r3, #1
 800ad60:	4413      	add	r3, r2
 800ad62:	085a      	lsrs	r2, r3, #1
 800ad64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad66:	695b      	ldr	r3, [r3, #20]
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ad6e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ad70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad72:	699a      	ldr	r2, [r3, #24]
 800ad74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad76:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800ad7a:	0a5b      	lsrs	r3, r3, #9
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d201      	bcs.n	800ad84 <find_volume+0x3ac>
 800ad80:	230d      	movs	r3, #13
 800ad82:	e06a      	b.n	800ae5a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ad84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad86:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8a:	611a      	str	r2, [r3, #16]
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8e:	691a      	ldr	r2, [r3, #16]
 800ad90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad92:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800ad94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad96:	2280      	movs	r2, #128	@ 0x80
 800ad98:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ad9a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	d149      	bne.n	800ae36 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ada2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada4:	3330      	adds	r3, #48	@ 0x30
 800ada6:	3330      	adds	r3, #48	@ 0x30
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7fe fbfb 	bl	80095a4 <ld_word>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d140      	bne.n	800ae36 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800adb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adb6:	3301      	adds	r3, #1
 800adb8:	4619      	mov	r1, r3
 800adba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800adbc:	f7fe fea2 	bl	8009b04 <move_window>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d137      	bne.n	800ae36 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800adc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc8:	2200      	movs	r2, #0
 800adca:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800adcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adce:	3330      	adds	r3, #48	@ 0x30
 800add0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800add4:	4618      	mov	r0, r3
 800add6:	f7fe fbe5 	bl	80095a4 <ld_word>
 800adda:	4603      	mov	r3, r0
 800addc:	461a      	mov	r2, r3
 800adde:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d127      	bne.n	800ae36 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ade6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade8:	3330      	adds	r3, #48	@ 0x30
 800adea:	4618      	mov	r0, r3
 800adec:	f7fe fbf2 	bl	80095d4 <ld_dword>
 800adf0:	4603      	mov	r3, r0
 800adf2:	4a1c      	ldr	r2, [pc, #112]	@ (800ae64 <find_volume+0x48c>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d11e      	bne.n	800ae36 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800adf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfa:	3330      	adds	r3, #48	@ 0x30
 800adfc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7fe fbe7 	bl	80095d4 <ld_dword>
 800ae06:	4603      	mov	r3, r0
 800ae08:	4a17      	ldr	r2, [pc, #92]	@ (800ae68 <find_volume+0x490>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d113      	bne.n	800ae36 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ae0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae10:	3330      	adds	r3, #48	@ 0x30
 800ae12:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fe fbdc 	bl	80095d4 <ld_dword>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae20:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ae22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae24:	3330      	adds	r3, #48	@ 0x30
 800ae26:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7fe fbd2 	bl	80095d4 <ld_dword>
 800ae30:	4602      	mov	r2, r0
 800ae32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae34:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ae36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae38:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ae3c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ae3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ae6c <find_volume+0x494>)
 800ae40:	881b      	ldrh	r3, [r3, #0]
 800ae42:	3301      	adds	r3, #1
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	4b09      	ldr	r3, [pc, #36]	@ (800ae6c <find_volume+0x494>)
 800ae48:	801a      	strh	r2, [r3, #0]
 800ae4a:	4b08      	ldr	r3, [pc, #32]	@ (800ae6c <find_volume+0x494>)
 800ae4c:	881a      	ldrh	r2, [r3, #0]
 800ae4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae50:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ae52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ae54:	f7fe fdee 	bl	8009a34 <clear_lock>
#endif
	return FR_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3758      	adds	r7, #88	@ 0x58
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	41615252 	.word	0x41615252
 800ae68:	61417272 	.word	0x61417272
 800ae6c:	20040950 	.word	0x20040950

0800ae70 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ae7a:	2309      	movs	r3, #9
 800ae7c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d01c      	beq.n	800aebe <validate+0x4e>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d018      	beq.n	800aebe <validate+0x4e>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d013      	beq.n	800aebe <validate+0x4e>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	889a      	ldrh	r2, [r3, #4]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	88db      	ldrh	r3, [r3, #6]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d10c      	bne.n	800aebe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	785b      	ldrb	r3, [r3, #1]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fe fadc 	bl	8009468 <disk_status>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	f003 0301 	and.w	r3, r3, #1
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d101      	bne.n	800aebe <validate+0x4e>
			res = FR_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d102      	bne.n	800aeca <validate+0x5a>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	e000      	b.n	800aecc <validate+0x5c>
 800aeca:	2300      	movs	r3, #0
 800aecc:	683a      	ldr	r2, [r7, #0]
 800aece:	6013      	str	r3, [r2, #0]
	return res;
 800aed0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
	...

0800aedc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b088      	sub	sp, #32
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	4613      	mov	r3, r2
 800aee8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800aeee:	f107 0310 	add.w	r3, r7, #16
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7ff fcd5 	bl	800a8a2 <get_ldnumber>
 800aef8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	da01      	bge.n	800af04 <f_mount+0x28>
 800af00:	230b      	movs	r3, #11
 800af02:	e02b      	b.n	800af5c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800af04:	4a17      	ldr	r2, [pc, #92]	@ (800af64 <f_mount+0x88>)
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af0c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d005      	beq.n	800af20 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800af14:	69b8      	ldr	r0, [r7, #24]
 800af16:	f7fe fd8d 	bl	8009a34 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	2200      	movs	r2, #0
 800af1e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d002      	beq.n	800af2c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2200      	movs	r2, #0
 800af2a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	490d      	ldr	r1, [pc, #52]	@ (800af64 <f_mount+0x88>)
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d002      	beq.n	800af42 <f_mount+0x66>
 800af3c:	79fb      	ldrb	r3, [r7, #7]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d001      	beq.n	800af46 <f_mount+0x6a>
 800af42:	2300      	movs	r3, #0
 800af44:	e00a      	b.n	800af5c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800af46:	f107 010c 	add.w	r1, r7, #12
 800af4a:	f107 0308 	add.w	r3, r7, #8
 800af4e:	2200      	movs	r2, #0
 800af50:	4618      	mov	r0, r3
 800af52:	f7ff fd41 	bl	800a9d8 <find_volume>
 800af56:	4603      	mov	r3, r0
 800af58:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800af5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3720      	adds	r7, #32
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	2004094c 	.word	0x2004094c

0800af68 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b098      	sub	sp, #96	@ 0x60
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	4613      	mov	r3, r2
 800af74:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d101      	bne.n	800af80 <f_open+0x18>
 800af7c:	2309      	movs	r3, #9
 800af7e:	e1a9      	b.n	800b2d4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800af80:	79fb      	ldrb	r3, [r7, #7]
 800af82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af86:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800af88:	79fa      	ldrb	r2, [r7, #7]
 800af8a:	f107 0110 	add.w	r1, r7, #16
 800af8e:	f107 0308 	add.w	r3, r7, #8
 800af92:	4618      	mov	r0, r3
 800af94:	f7ff fd20 	bl	800a9d8 <find_volume>
 800af98:	4603      	mov	r3, r0
 800af9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800af9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f040 818d 	bne.w	800b2c2 <f_open+0x35a>
		dj.obj.fs = fs;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	f107 0314 	add.w	r3, r7, #20
 800afb2:	4611      	mov	r1, r2
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff fc03 	bl	800a7c0 <follow_path>
 800afba:	4603      	mov	r3, r0
 800afbc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800afc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d118      	bne.n	800affa <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800afc8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800afcc:	b25b      	sxtb	r3, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	da03      	bge.n	800afda <f_open+0x72>
				res = FR_INVALID_NAME;
 800afd2:	2306      	movs	r3, #6
 800afd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800afd8:	e00f      	b.n	800affa <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800afda:	79fb      	ldrb	r3, [r7, #7]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	bf8c      	ite	hi
 800afe0:	2301      	movhi	r3, #1
 800afe2:	2300      	movls	r3, #0
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	461a      	mov	r2, r3
 800afe8:	f107 0314 	add.w	r3, r7, #20
 800afec:	4611      	mov	r1, r2
 800afee:	4618      	mov	r0, r3
 800aff0:	f7fe fbd8 	bl	80097a4 <chk_lock>
 800aff4:	4603      	mov	r3, r0
 800aff6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800affa:	79fb      	ldrb	r3, [r7, #7]
 800affc:	f003 031c 	and.w	r3, r3, #28
 800b000:	2b00      	cmp	r3, #0
 800b002:	d07f      	beq.n	800b104 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b004:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d017      	beq.n	800b03c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b00c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b010:	2b04      	cmp	r3, #4
 800b012:	d10e      	bne.n	800b032 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b014:	f7fe fc22 	bl	800985c <enq_lock>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d006      	beq.n	800b02c <f_open+0xc4>
 800b01e:	f107 0314 	add.w	r3, r7, #20
 800b022:	4618      	mov	r0, r3
 800b024:	f7ff fb06 	bl	800a634 <dir_register>
 800b028:	4603      	mov	r3, r0
 800b02a:	e000      	b.n	800b02e <f_open+0xc6>
 800b02c:	2312      	movs	r3, #18
 800b02e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b032:	79fb      	ldrb	r3, [r7, #7]
 800b034:	f043 0308 	orr.w	r3, r3, #8
 800b038:	71fb      	strb	r3, [r7, #7]
 800b03a:	e010      	b.n	800b05e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b03c:	7ebb      	ldrb	r3, [r7, #26]
 800b03e:	f003 0311 	and.w	r3, r3, #17
 800b042:	2b00      	cmp	r3, #0
 800b044:	d003      	beq.n	800b04e <f_open+0xe6>
					res = FR_DENIED;
 800b046:	2307      	movs	r3, #7
 800b048:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b04c:	e007      	b.n	800b05e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b04e:	79fb      	ldrb	r3, [r7, #7]
 800b050:	f003 0304 	and.w	r3, r3, #4
 800b054:	2b00      	cmp	r3, #0
 800b056:	d002      	beq.n	800b05e <f_open+0xf6>
 800b058:	2308      	movs	r3, #8
 800b05a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b05e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b062:	2b00      	cmp	r3, #0
 800b064:	d168      	bne.n	800b138 <f_open+0x1d0>
 800b066:	79fb      	ldrb	r3, [r7, #7]
 800b068:	f003 0308 	and.w	r3, r3, #8
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d063      	beq.n	800b138 <f_open+0x1d0>
				dw = GET_FATTIME();
 800b070:	f7fd fcbe 	bl	80089f0 <get_fattime>
 800b074:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b078:	330e      	adds	r3, #14
 800b07a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7fe fae7 	bl	8009650 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b084:	3316      	adds	r3, #22
 800b086:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b088:	4618      	mov	r0, r3
 800b08a:	f7fe fae1 	bl	8009650 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b08e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b090:	330b      	adds	r3, #11
 800b092:	2220      	movs	r2, #32
 800b094:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b09a:	4611      	mov	r1, r2
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7ff fa35 	bl	800a50c <ld_clust>
 800b0a2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7ff fa4d 	bl	800a54a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b0b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0b2:	331c      	adds	r3, #28
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fe faca 	bl	8009650 <st_dword>
					fs->wflag = 1;
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b0c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d037      	beq.n	800b138 <f_open+0x1d0>
						dw = fs->winsect;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0cc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b0ce:	f107 0314 	add.w	r3, r7, #20
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fe ff60 	bl	8009f9c <remove_chain>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b0e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d126      	bne.n	800b138 <f_open+0x1d0>
							res = move_window(fs, dw);
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fe fd08 	bl	8009b04 <move_window>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b0fe:	3a01      	subs	r2, #1
 800b100:	60da      	str	r2, [r3, #12]
 800b102:	e019      	b.n	800b138 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b104:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d115      	bne.n	800b138 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b10c:	7ebb      	ldrb	r3, [r7, #26]
 800b10e:	f003 0310 	and.w	r3, r3, #16
 800b112:	2b00      	cmp	r3, #0
 800b114:	d003      	beq.n	800b11e <f_open+0x1b6>
					res = FR_NO_FILE;
 800b116:	2304      	movs	r3, #4
 800b118:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b11c:	e00c      	b.n	800b138 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b11e:	79fb      	ldrb	r3, [r7, #7]
 800b120:	f003 0302 	and.w	r3, r3, #2
 800b124:	2b00      	cmp	r3, #0
 800b126:	d007      	beq.n	800b138 <f_open+0x1d0>
 800b128:	7ebb      	ldrb	r3, [r7, #26]
 800b12a:	f003 0301 	and.w	r3, r3, #1
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d002      	beq.n	800b138 <f_open+0x1d0>
						res = FR_DENIED;
 800b132:	2307      	movs	r3, #7
 800b134:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b138:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d126      	bne.n	800b18e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b140:	79fb      	ldrb	r3, [r7, #7]
 800b142:	f003 0308 	and.w	r3, r3, #8
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b14a:	79fb      	ldrb	r3, [r7, #7]
 800b14c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b150:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b15a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b160:	79fb      	ldrb	r3, [r7, #7]
 800b162:	2b01      	cmp	r3, #1
 800b164:	bf8c      	ite	hi
 800b166:	2301      	movhi	r3, #1
 800b168:	2300      	movls	r3, #0
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	461a      	mov	r2, r3
 800b16e:	f107 0314 	add.w	r3, r7, #20
 800b172:	4611      	mov	r1, r2
 800b174:	4618      	mov	r0, r3
 800b176:	f7fe fb93 	bl	80098a0 <inc_lock>
 800b17a:	4602      	mov	r2, r0
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d102      	bne.n	800b18e <f_open+0x226>
 800b188:	2302      	movs	r3, #2
 800b18a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b18e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b192:	2b00      	cmp	r3, #0
 800b194:	f040 8095 	bne.w	800b2c2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b19c:	4611      	mov	r1, r2
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7ff f9b4 	bl	800a50c <ld_clust>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b1aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ac:	331c      	adds	r3, #28
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fe fa10 	bl	80095d4 <ld_dword>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	88da      	ldrh	r2, [r3, #6]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	79fa      	ldrb	r2, [r7, #7]
 800b1d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	3330      	adds	r3, #48	@ 0x30
 800b1ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7fe fa7a 	bl	80096ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b1f6:	79fb      	ldrb	r3, [r7, #7]
 800b1f8:	f003 0320 	and.w	r3, r3, #32
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d060      	beq.n	800b2c2 <f_open+0x35a>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d05c      	beq.n	800b2c2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	68da      	ldr	r2, [r3, #12]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	895b      	ldrh	r3, [r3, #10]
 800b214:	025b      	lsls	r3, r3, #9
 800b216:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	657b      	str	r3, [r7, #84]	@ 0x54
 800b224:	e016      	b.n	800b254 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fe fd25 	bl	8009c7a <get_fat>
 800b230:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b232:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b234:	2b01      	cmp	r3, #1
 800b236:	d802      	bhi.n	800b23e <f_open+0x2d6>
 800b238:	2302      	movs	r3, #2
 800b23a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b23e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b244:	d102      	bne.n	800b24c <f_open+0x2e4>
 800b246:	2301      	movs	r3, #1
 800b248:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b24c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b24e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	657b      	str	r3, [r7, #84]	@ 0x54
 800b254:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d103      	bne.n	800b264 <f_open+0x2fc>
 800b25c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b25e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b260:	429a      	cmp	r2, r3
 800b262:	d8e0      	bhi.n	800b226 <f_open+0x2be>
				}
				fp->clust = clst;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b268:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b26a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d127      	bne.n	800b2c2 <f_open+0x35a>
 800b272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d022      	beq.n	800b2c2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b280:	4618      	mov	r0, r3
 800b282:	f7fe fcdb 	bl	8009c3c <clust2sect>
 800b286:	6478      	str	r0, [r7, #68]	@ 0x44
 800b288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d103      	bne.n	800b296 <f_open+0x32e>
						res = FR_INT_ERR;
 800b28e:	2302      	movs	r3, #2
 800b290:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b294:	e015      	b.n	800b2c2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b298:	0a5a      	lsrs	r2, r3, #9
 800b29a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b29c:	441a      	add	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	7858      	ldrb	r0, [r3, #1]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6a1a      	ldr	r2, [r3, #32]
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	f7fe f919 	bl	80094e8 <disk_read>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <f_open+0x35a>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b2c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d002      	beq.n	800b2d0 <f_open+0x368>
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b2d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3760      	adds	r7, #96	@ 0x60
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b08c      	sub	sp, #48	@ 0x30
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
 800b2e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f107 0210 	add.w	r2, r7, #16
 800b2fa:	4611      	mov	r1, r2
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7ff fdb7 	bl	800ae70 <validate>
 800b302:	4603      	mov	r3, r0
 800b304:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b308:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d107      	bne.n	800b320 <f_write+0x44>
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	7d5b      	ldrb	r3, [r3, #21]
 800b314:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b318:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <f_write+0x4a>
 800b320:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b324:	e14b      	b.n	800b5be <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	7d1b      	ldrb	r3, [r3, #20]
 800b32a:	f003 0302 	and.w	r3, r3, #2
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d101      	bne.n	800b336 <f_write+0x5a>
 800b332:	2307      	movs	r3, #7
 800b334:	e143      	b.n	800b5be <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	699a      	ldr	r2, [r3, #24]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	441a      	add	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	699b      	ldr	r3, [r3, #24]
 800b342:	429a      	cmp	r2, r3
 800b344:	f080 812d 	bcs.w	800b5a2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	43db      	mvns	r3, r3
 800b34e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b350:	e127      	b.n	800b5a2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f040 80e3 	bne.w	800b526 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	0a5b      	lsrs	r3, r3, #9
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	8952      	ldrh	r2, [r2, #10]
 800b36a:	3a01      	subs	r2, #1
 800b36c:	4013      	ands	r3, r2
 800b36e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d143      	bne.n	800b3fe <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10c      	bne.n	800b398 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b386:	2b00      	cmp	r3, #0
 800b388:	d11a      	bne.n	800b3c0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2100      	movs	r1, #0
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fe fe69 	bl	800a066 <create_chain>
 800b394:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b396:	e013      	b.n	800b3c0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d007      	beq.n	800b3b0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	699b      	ldr	r3, [r3, #24]
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f7fe fef5 	bl	800a196 <clmt_clust>
 800b3ac:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b3ae:	e007      	b.n	800b3c0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	69db      	ldr	r3, [r3, #28]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	4610      	mov	r0, r2
 800b3ba:	f7fe fe54 	bl	800a066 <create_chain>
 800b3be:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f000 80f2 	beq.w	800b5ac <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d104      	bne.n	800b3d8 <f_write+0xfc>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2202      	movs	r2, #2
 800b3d2:	755a      	strb	r2, [r3, #21]
 800b3d4:	2302      	movs	r3, #2
 800b3d6:	e0f2      	b.n	800b5be <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3de:	d104      	bne.n	800b3ea <f_write+0x10e>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	755a      	strb	r2, [r3, #21]
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e0e9      	b.n	800b5be <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3ee:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d102      	bne.n	800b3fe <f_write+0x122>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3fc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	7d1b      	ldrb	r3, [r3, #20]
 800b402:	b25b      	sxtb	r3, r3
 800b404:	2b00      	cmp	r3, #0
 800b406:	da18      	bge.n	800b43a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	7858      	ldrb	r0, [r3, #1]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6a1a      	ldr	r2, [r3, #32]
 800b416:	2301      	movs	r3, #1
 800b418:	f7fe f886 	bl	8009528 <disk_write>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d004      	beq.n	800b42c <f_write+0x150>
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2201      	movs	r2, #1
 800b426:	755a      	strb	r2, [r3, #21]
 800b428:	2301      	movs	r3, #1
 800b42a:	e0c8      	b.n	800b5be <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	7d1b      	ldrb	r3, [r3, #20]
 800b430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b434:	b2da      	uxtb	r2, r3
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	69db      	ldr	r3, [r3, #28]
 800b440:	4619      	mov	r1, r3
 800b442:	4610      	mov	r0, r2
 800b444:	f7fe fbfa 	bl	8009c3c <clust2sect>
 800b448:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d104      	bne.n	800b45a <f_write+0x17e>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2202      	movs	r2, #2
 800b454:	755a      	strb	r2, [r3, #21]
 800b456:	2302      	movs	r3, #2
 800b458:	e0b1      	b.n	800b5be <f_write+0x2e2>
			sect += csect;
 800b45a:	697a      	ldr	r2, [r7, #20]
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	4413      	add	r3, r2
 800b460:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	0a5b      	lsrs	r3, r3, #9
 800b466:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b468:	6a3b      	ldr	r3, [r7, #32]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d03c      	beq.n	800b4e8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b46e:	69ba      	ldr	r2, [r7, #24]
 800b470:	6a3b      	ldr	r3, [r7, #32]
 800b472:	4413      	add	r3, r2
 800b474:	693a      	ldr	r2, [r7, #16]
 800b476:	8952      	ldrh	r2, [r2, #10]
 800b478:	4293      	cmp	r3, r2
 800b47a:	d905      	bls.n	800b488 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	895b      	ldrh	r3, [r3, #10]
 800b480:	461a      	mov	r2, r3
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	7858      	ldrb	r0, [r3, #1]
 800b48c:	6a3b      	ldr	r3, [r7, #32]
 800b48e:	697a      	ldr	r2, [r7, #20]
 800b490:	69f9      	ldr	r1, [r7, #28]
 800b492:	f7fe f849 	bl	8009528 <disk_write>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d004      	beq.n	800b4a6 <f_write+0x1ca>
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	755a      	strb	r2, [r3, #21]
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e08b      	b.n	800b5be <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	6a1a      	ldr	r2, [r3, #32]
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	6a3a      	ldr	r2, [r7, #32]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d915      	bls.n	800b4e0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6a1a      	ldr	r2, [r3, #32]
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	025b      	lsls	r3, r3, #9
 800b4c4:	69fa      	ldr	r2, [r7, #28]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	f7fe f8eb 	bl	80096a8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	7d1b      	ldrb	r3, [r3, #20]
 800b4d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4da:	b2da      	uxtb	r2, r3
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b4e0:	6a3b      	ldr	r3, [r7, #32]
 800b4e2:	025b      	lsls	r3, r3, #9
 800b4e4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800b4e6:	e03f      	b.n	800b568 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6a1b      	ldr	r3, [r3, #32]
 800b4ec:	697a      	ldr	r2, [r7, #20]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d016      	beq.n	800b520 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	699a      	ldr	r2, [r3, #24]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d210      	bcs.n	800b520 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	7858      	ldrb	r0, [r3, #1]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b508:	2301      	movs	r3, #1
 800b50a:	697a      	ldr	r2, [r7, #20]
 800b50c:	f7fd ffec 	bl	80094e8 <disk_read>
 800b510:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b512:	2b00      	cmp	r3, #0
 800b514:	d004      	beq.n	800b520 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2201      	movs	r2, #1
 800b51a:	755a      	strb	r2, [r3, #21]
 800b51c:	2301      	movs	r3, #1
 800b51e:	e04e      	b.n	800b5be <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b52e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b532:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d901      	bls.n	800b540 <f_write+0x264>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	699b      	ldr	r3, [r3, #24]
 800b54a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b54e:	4413      	add	r3, r2
 800b550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b552:	69f9      	ldr	r1, [r7, #28]
 800b554:	4618      	mov	r0, r3
 800b556:	f7fe f8a7 	bl	80096a8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	7d1b      	ldrb	r3, [r3, #20]
 800b55e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b562:	b2da      	uxtb	r2, r3
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b568:	69fa      	ldr	r2, [r7, #28]
 800b56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56c:	4413      	add	r3, r2
 800b56e:	61fb      	str	r3, [r7, #28]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	699a      	ldr	r2, [r3, #24]
 800b574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b576:	441a      	add	r2, r3
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	619a      	str	r2, [r3, #24]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	68da      	ldr	r2, [r3, #12]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	429a      	cmp	r2, r3
 800b586:	bf38      	it	cc
 800b588:	461a      	movcc	r2, r3
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	60da      	str	r2, [r3, #12]
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b594:	441a      	add	r2, r3
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	601a      	str	r2, [r3, #0]
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f47f aed4 	bne.w	800b352 <f_write+0x76>
 800b5aa:	e000      	b.n	800b5ae <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b5ac:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	7d1b      	ldrb	r3, [r3, #20]
 800b5b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5b6:	b2da      	uxtb	r2, r3
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3730      	adds	r7, #48	@ 0x30
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b086      	sub	sp, #24
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f107 0208 	add.w	r2, r7, #8
 800b5d4:	4611      	mov	r1, r2
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7ff fc4a 	bl	800ae70 <validate>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b5e0:	7dfb      	ldrb	r3, [r7, #23]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d168      	bne.n	800b6b8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	7d1b      	ldrb	r3, [r3, #20]
 800b5ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d062      	beq.n	800b6b8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	7d1b      	ldrb	r3, [r3, #20]
 800b5f6:	b25b      	sxtb	r3, r3
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	da15      	bge.n	800b628 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	7858      	ldrb	r0, [r3, #1]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a1a      	ldr	r2, [r3, #32]
 800b60a:	2301      	movs	r3, #1
 800b60c:	f7fd ff8c 	bl	8009528 <disk_write>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <f_sync+0x54>
 800b616:	2301      	movs	r3, #1
 800b618:	e04f      	b.n	800b6ba <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	7d1b      	ldrb	r3, [r3, #20]
 800b61e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b622:	b2da      	uxtb	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b628:	f7fd f9e2 	bl	80089f0 <get_fattime>
 800b62c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b634:	4619      	mov	r1, r3
 800b636:	4610      	mov	r0, r2
 800b638:	f7fe fa64 	bl	8009b04 <move_window>
 800b63c:	4603      	mov	r3, r0
 800b63e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b640:	7dfb      	ldrb	r3, [r7, #23]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d138      	bne.n	800b6b8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b64a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	330b      	adds	r3, #11
 800b650:	781a      	ldrb	r2, [r3, #0]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	330b      	adds	r3, #11
 800b656:	f042 0220 	orr.w	r2, r2, #32
 800b65a:	b2d2      	uxtb	r2, r2
 800b65c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6818      	ldr	r0, [r3, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	461a      	mov	r2, r3
 800b668:	68f9      	ldr	r1, [r7, #12]
 800b66a:	f7fe ff6e 	bl	800a54a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f103 021c 	add.w	r2, r3, #28
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	4619      	mov	r1, r3
 800b67a:	4610      	mov	r0, r2
 800b67c:	f7fd ffe8 	bl	8009650 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	3316      	adds	r3, #22
 800b684:	6939      	ldr	r1, [r7, #16]
 800b686:	4618      	mov	r0, r3
 800b688:	f7fd ffe2 	bl	8009650 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	3312      	adds	r3, #18
 800b690:	2100      	movs	r1, #0
 800b692:	4618      	mov	r0, r3
 800b694:	f7fd ffc1 	bl	800961a <st_word>
					fs->wflag = 1;
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	2201      	movs	r2, #1
 800b69c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fe fa5d 	bl	8009b60 <sync_fs>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	7d1b      	ldrb	r3, [r3, #20]
 800b6ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6b2:	b2da      	uxtb	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b6b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3718      	adds	r7, #24
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b084      	sub	sp, #16
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f7ff ff7b 	bl	800b5c6 <f_sync>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b6d4:	7bfb      	ldrb	r3, [r7, #15]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d118      	bne.n	800b70c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f107 0208 	add.w	r2, r7, #8
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff fbc4 	bl	800ae70 <validate>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b6ec:	7bfb      	ldrb	r3, [r7, #15]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d10c      	bne.n	800b70c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7fe f960 	bl	80099bc <dec_lock>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b700:	7bfb      	ldrb	r3, [r7, #15]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d102      	bne.n	800b70c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
	...

0800b718 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b718:	b480      	push	{r7}
 800b71a:	b087      	sub	sp, #28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	4613      	mov	r3, r2
 800b724:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b726:	2301      	movs	r3, #1
 800b728:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b72a:	2300      	movs	r3, #0
 800b72c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b72e:	4b1f      	ldr	r3, [pc, #124]	@ (800b7ac <FATFS_LinkDriverEx+0x94>)
 800b730:	7a5b      	ldrb	r3, [r3, #9]
 800b732:	b2db      	uxtb	r3, r3
 800b734:	2b00      	cmp	r3, #0
 800b736:	d131      	bne.n	800b79c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b738:	4b1c      	ldr	r3, [pc, #112]	@ (800b7ac <FATFS_LinkDriverEx+0x94>)
 800b73a:	7a5b      	ldrb	r3, [r3, #9]
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	461a      	mov	r2, r3
 800b740:	4b1a      	ldr	r3, [pc, #104]	@ (800b7ac <FATFS_LinkDriverEx+0x94>)
 800b742:	2100      	movs	r1, #0
 800b744:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b746:	4b19      	ldr	r3, [pc, #100]	@ (800b7ac <FATFS_LinkDriverEx+0x94>)
 800b748:	7a5b      	ldrb	r3, [r3, #9]
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	4a17      	ldr	r2, [pc, #92]	@ (800b7ac <FATFS_LinkDriverEx+0x94>)
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	4413      	add	r3, r2
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b756:	4b15      	ldr	r3, [pc, #84]	@ (800b7ac <FATFS_LinkDriverEx+0x94>)
 800b758:	7a5b      	ldrb	r3, [r3, #9]
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	461a      	mov	r2, r3
 800b75e:	4b13      	ldr	r3, [pc, #76]	@ (800b7ac <FATFS_LinkDriverEx+0x94>)
 800b760:	4413      	add	r3, r2
 800b762:	79fa      	ldrb	r2, [r7, #7]
 800b764:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b766:	4b11      	ldr	r3, [pc, #68]	@ (800b7ac <FATFS_LinkDriverEx+0x94>)
 800b768:	7a5b      	ldrb	r3, [r3, #9]
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	1c5a      	adds	r2, r3, #1
 800b76e:	b2d1      	uxtb	r1, r2
 800b770:	4a0e      	ldr	r2, [pc, #56]	@ (800b7ac <FATFS_LinkDriverEx+0x94>)
 800b772:	7251      	strb	r1, [r2, #9]
 800b774:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b776:	7dbb      	ldrb	r3, [r7, #22]
 800b778:	3330      	adds	r3, #48	@ 0x30
 800b77a:	b2da      	uxtb	r2, r3
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	3301      	adds	r3, #1
 800b784:	223a      	movs	r2, #58	@ 0x3a
 800b786:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	3302      	adds	r3, #2
 800b78c:	222f      	movs	r2, #47	@ 0x2f
 800b78e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	3303      	adds	r3, #3
 800b794:	2200      	movs	r2, #0
 800b796:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b798:	2300      	movs	r3, #0
 800b79a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b79c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	371c      	adds	r7, #28
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	20040974 	.word	0x20040974

0800b7b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f7ff ffaa 	bl	800b718 <FATFS_LinkDriverEx>
 800b7c4:	4603      	mov	r3, r0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
	...

0800b7d0 <rand>:
 800b7d0:	4b16      	ldr	r3, [pc, #88]	@ (800b82c <rand+0x5c>)
 800b7d2:	b510      	push	{r4, lr}
 800b7d4:	681c      	ldr	r4, [r3, #0]
 800b7d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b7d8:	b9b3      	cbnz	r3, 800b808 <rand+0x38>
 800b7da:	2018      	movs	r0, #24
 800b7dc:	f001 fcfa 	bl	800d1d4 <malloc>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	6320      	str	r0, [r4, #48]	@ 0x30
 800b7e4:	b920      	cbnz	r0, 800b7f0 <rand+0x20>
 800b7e6:	4b12      	ldr	r3, [pc, #72]	@ (800b830 <rand+0x60>)
 800b7e8:	4812      	ldr	r0, [pc, #72]	@ (800b834 <rand+0x64>)
 800b7ea:	2152      	movs	r1, #82	@ 0x52
 800b7ec:	f000 fe3e 	bl	800c46c <__assert_func>
 800b7f0:	4911      	ldr	r1, [pc, #68]	@ (800b838 <rand+0x68>)
 800b7f2:	4b12      	ldr	r3, [pc, #72]	@ (800b83c <rand+0x6c>)
 800b7f4:	e9c0 1300 	strd	r1, r3, [r0]
 800b7f8:	4b11      	ldr	r3, [pc, #68]	@ (800b840 <rand+0x70>)
 800b7fa:	6083      	str	r3, [r0, #8]
 800b7fc:	230b      	movs	r3, #11
 800b7fe:	8183      	strh	r3, [r0, #12]
 800b800:	2100      	movs	r1, #0
 800b802:	2001      	movs	r0, #1
 800b804:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b808:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b80a:	480e      	ldr	r0, [pc, #56]	@ (800b844 <rand+0x74>)
 800b80c:	690b      	ldr	r3, [r1, #16]
 800b80e:	694c      	ldr	r4, [r1, #20]
 800b810:	4a0d      	ldr	r2, [pc, #52]	@ (800b848 <rand+0x78>)
 800b812:	4358      	muls	r0, r3
 800b814:	fb02 0004 	mla	r0, r2, r4, r0
 800b818:	fba3 3202 	umull	r3, r2, r3, r2
 800b81c:	3301      	adds	r3, #1
 800b81e:	eb40 0002 	adc.w	r0, r0, r2
 800b822:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b826:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b82a:	bd10      	pop	{r4, pc}
 800b82c:	200400c8 	.word	0x200400c8
 800b830:	08077240 	.word	0x08077240
 800b834:	08077257 	.word	0x08077257
 800b838:	abcd330e 	.word	0xabcd330e
 800b83c:	e66d1234 	.word	0xe66d1234
 800b840:	0005deec 	.word	0x0005deec
 800b844:	5851f42d 	.word	0x5851f42d
 800b848:	4c957f2d 	.word	0x4c957f2d

0800b84c <__cvt>:
 800b84c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b850:	ec57 6b10 	vmov	r6, r7, d0
 800b854:	2f00      	cmp	r7, #0
 800b856:	460c      	mov	r4, r1
 800b858:	4619      	mov	r1, r3
 800b85a:	463b      	mov	r3, r7
 800b85c:	bfbb      	ittet	lt
 800b85e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b862:	461f      	movlt	r7, r3
 800b864:	2300      	movge	r3, #0
 800b866:	232d      	movlt	r3, #45	@ 0x2d
 800b868:	700b      	strb	r3, [r1, #0]
 800b86a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b86c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b870:	4691      	mov	r9, r2
 800b872:	f023 0820 	bic.w	r8, r3, #32
 800b876:	bfbc      	itt	lt
 800b878:	4632      	movlt	r2, r6
 800b87a:	4616      	movlt	r6, r2
 800b87c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b880:	d005      	beq.n	800b88e <__cvt+0x42>
 800b882:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b886:	d100      	bne.n	800b88a <__cvt+0x3e>
 800b888:	3401      	adds	r4, #1
 800b88a:	2102      	movs	r1, #2
 800b88c:	e000      	b.n	800b890 <__cvt+0x44>
 800b88e:	2103      	movs	r1, #3
 800b890:	ab03      	add	r3, sp, #12
 800b892:	9301      	str	r3, [sp, #4]
 800b894:	ab02      	add	r3, sp, #8
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	ec47 6b10 	vmov	d0, r6, r7
 800b89c:	4653      	mov	r3, sl
 800b89e:	4622      	mov	r2, r4
 800b8a0:	f000 fe8a 	bl	800c5b8 <_dtoa_r>
 800b8a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b8a8:	4605      	mov	r5, r0
 800b8aa:	d119      	bne.n	800b8e0 <__cvt+0x94>
 800b8ac:	f019 0f01 	tst.w	r9, #1
 800b8b0:	d00e      	beq.n	800b8d0 <__cvt+0x84>
 800b8b2:	eb00 0904 	add.w	r9, r0, r4
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	4639      	mov	r1, r7
 800b8be:	f7f5 f91b 	bl	8000af8 <__aeabi_dcmpeq>
 800b8c2:	b108      	cbz	r0, 800b8c8 <__cvt+0x7c>
 800b8c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b8c8:	2230      	movs	r2, #48	@ 0x30
 800b8ca:	9b03      	ldr	r3, [sp, #12]
 800b8cc:	454b      	cmp	r3, r9
 800b8ce:	d31e      	bcc.n	800b90e <__cvt+0xc2>
 800b8d0:	9b03      	ldr	r3, [sp, #12]
 800b8d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8d4:	1b5b      	subs	r3, r3, r5
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	6013      	str	r3, [r2, #0]
 800b8da:	b004      	add	sp, #16
 800b8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b8e4:	eb00 0904 	add.w	r9, r0, r4
 800b8e8:	d1e5      	bne.n	800b8b6 <__cvt+0x6a>
 800b8ea:	7803      	ldrb	r3, [r0, #0]
 800b8ec:	2b30      	cmp	r3, #48	@ 0x30
 800b8ee:	d10a      	bne.n	800b906 <__cvt+0xba>
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	4639      	mov	r1, r7
 800b8f8:	f7f5 f8fe 	bl	8000af8 <__aeabi_dcmpeq>
 800b8fc:	b918      	cbnz	r0, 800b906 <__cvt+0xba>
 800b8fe:	f1c4 0401 	rsb	r4, r4, #1
 800b902:	f8ca 4000 	str.w	r4, [sl]
 800b906:	f8da 3000 	ldr.w	r3, [sl]
 800b90a:	4499      	add	r9, r3
 800b90c:	e7d3      	b.n	800b8b6 <__cvt+0x6a>
 800b90e:	1c59      	adds	r1, r3, #1
 800b910:	9103      	str	r1, [sp, #12]
 800b912:	701a      	strb	r2, [r3, #0]
 800b914:	e7d9      	b.n	800b8ca <__cvt+0x7e>

0800b916 <__exponent>:
 800b916:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b918:	2900      	cmp	r1, #0
 800b91a:	bfba      	itte	lt
 800b91c:	4249      	neglt	r1, r1
 800b91e:	232d      	movlt	r3, #45	@ 0x2d
 800b920:	232b      	movge	r3, #43	@ 0x2b
 800b922:	2909      	cmp	r1, #9
 800b924:	7002      	strb	r2, [r0, #0]
 800b926:	7043      	strb	r3, [r0, #1]
 800b928:	dd29      	ble.n	800b97e <__exponent+0x68>
 800b92a:	f10d 0307 	add.w	r3, sp, #7
 800b92e:	461d      	mov	r5, r3
 800b930:	270a      	movs	r7, #10
 800b932:	461a      	mov	r2, r3
 800b934:	fbb1 f6f7 	udiv	r6, r1, r7
 800b938:	fb07 1416 	mls	r4, r7, r6, r1
 800b93c:	3430      	adds	r4, #48	@ 0x30
 800b93e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b942:	460c      	mov	r4, r1
 800b944:	2c63      	cmp	r4, #99	@ 0x63
 800b946:	f103 33ff 	add.w	r3, r3, #4294967295
 800b94a:	4631      	mov	r1, r6
 800b94c:	dcf1      	bgt.n	800b932 <__exponent+0x1c>
 800b94e:	3130      	adds	r1, #48	@ 0x30
 800b950:	1e94      	subs	r4, r2, #2
 800b952:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b956:	1c41      	adds	r1, r0, #1
 800b958:	4623      	mov	r3, r4
 800b95a:	42ab      	cmp	r3, r5
 800b95c:	d30a      	bcc.n	800b974 <__exponent+0x5e>
 800b95e:	f10d 0309 	add.w	r3, sp, #9
 800b962:	1a9b      	subs	r3, r3, r2
 800b964:	42ac      	cmp	r4, r5
 800b966:	bf88      	it	hi
 800b968:	2300      	movhi	r3, #0
 800b96a:	3302      	adds	r3, #2
 800b96c:	4403      	add	r3, r0
 800b96e:	1a18      	subs	r0, r3, r0
 800b970:	b003      	add	sp, #12
 800b972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b974:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b978:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b97c:	e7ed      	b.n	800b95a <__exponent+0x44>
 800b97e:	2330      	movs	r3, #48	@ 0x30
 800b980:	3130      	adds	r1, #48	@ 0x30
 800b982:	7083      	strb	r3, [r0, #2]
 800b984:	70c1      	strb	r1, [r0, #3]
 800b986:	1d03      	adds	r3, r0, #4
 800b988:	e7f1      	b.n	800b96e <__exponent+0x58>
	...

0800b98c <_printf_float>:
 800b98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b990:	b08d      	sub	sp, #52	@ 0x34
 800b992:	460c      	mov	r4, r1
 800b994:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b998:	4616      	mov	r6, r2
 800b99a:	461f      	mov	r7, r3
 800b99c:	4605      	mov	r5, r0
 800b99e:	f000 fced 	bl	800c37c <_localeconv_r>
 800b9a2:	6803      	ldr	r3, [r0, #0]
 800b9a4:	9304      	str	r3, [sp, #16]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7f4 fc7a 	bl	80002a0 <strlen>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9b0:	f8d8 3000 	ldr.w	r3, [r8]
 800b9b4:	9005      	str	r0, [sp, #20]
 800b9b6:	3307      	adds	r3, #7
 800b9b8:	f023 0307 	bic.w	r3, r3, #7
 800b9bc:	f103 0208 	add.w	r2, r3, #8
 800b9c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b9c4:	f8d4 b000 	ldr.w	fp, [r4]
 800b9c8:	f8c8 2000 	str.w	r2, [r8]
 800b9cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b9d4:	9307      	str	r3, [sp, #28]
 800b9d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800b9da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b9de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9e2:	4b9c      	ldr	r3, [pc, #624]	@ (800bc54 <_printf_float+0x2c8>)
 800b9e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9e8:	f7f5 f8b8 	bl	8000b5c <__aeabi_dcmpun>
 800b9ec:	bb70      	cbnz	r0, 800ba4c <_printf_float+0xc0>
 800b9ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9f2:	4b98      	ldr	r3, [pc, #608]	@ (800bc54 <_printf_float+0x2c8>)
 800b9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f8:	f7f5 f892 	bl	8000b20 <__aeabi_dcmple>
 800b9fc:	bb30      	cbnz	r0, 800ba4c <_printf_float+0xc0>
 800b9fe:	2200      	movs	r2, #0
 800ba00:	2300      	movs	r3, #0
 800ba02:	4640      	mov	r0, r8
 800ba04:	4649      	mov	r1, r9
 800ba06:	f7f5 f881 	bl	8000b0c <__aeabi_dcmplt>
 800ba0a:	b110      	cbz	r0, 800ba12 <_printf_float+0x86>
 800ba0c:	232d      	movs	r3, #45	@ 0x2d
 800ba0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba12:	4a91      	ldr	r2, [pc, #580]	@ (800bc58 <_printf_float+0x2cc>)
 800ba14:	4b91      	ldr	r3, [pc, #580]	@ (800bc5c <_printf_float+0x2d0>)
 800ba16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ba1a:	bf94      	ite	ls
 800ba1c:	4690      	movls	r8, r2
 800ba1e:	4698      	movhi	r8, r3
 800ba20:	2303      	movs	r3, #3
 800ba22:	6123      	str	r3, [r4, #16]
 800ba24:	f02b 0304 	bic.w	r3, fp, #4
 800ba28:	6023      	str	r3, [r4, #0]
 800ba2a:	f04f 0900 	mov.w	r9, #0
 800ba2e:	9700      	str	r7, [sp, #0]
 800ba30:	4633      	mov	r3, r6
 800ba32:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ba34:	4621      	mov	r1, r4
 800ba36:	4628      	mov	r0, r5
 800ba38:	f000 f9d2 	bl	800bde0 <_printf_common>
 800ba3c:	3001      	adds	r0, #1
 800ba3e:	f040 808d 	bne.w	800bb5c <_printf_float+0x1d0>
 800ba42:	f04f 30ff 	mov.w	r0, #4294967295
 800ba46:	b00d      	add	sp, #52	@ 0x34
 800ba48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba4c:	4642      	mov	r2, r8
 800ba4e:	464b      	mov	r3, r9
 800ba50:	4640      	mov	r0, r8
 800ba52:	4649      	mov	r1, r9
 800ba54:	f7f5 f882 	bl	8000b5c <__aeabi_dcmpun>
 800ba58:	b140      	cbz	r0, 800ba6c <_printf_float+0xe0>
 800ba5a:	464b      	mov	r3, r9
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	bfbc      	itt	lt
 800ba60:	232d      	movlt	r3, #45	@ 0x2d
 800ba62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ba66:	4a7e      	ldr	r2, [pc, #504]	@ (800bc60 <_printf_float+0x2d4>)
 800ba68:	4b7e      	ldr	r3, [pc, #504]	@ (800bc64 <_printf_float+0x2d8>)
 800ba6a:	e7d4      	b.n	800ba16 <_printf_float+0x8a>
 800ba6c:	6863      	ldr	r3, [r4, #4]
 800ba6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ba72:	9206      	str	r2, [sp, #24]
 800ba74:	1c5a      	adds	r2, r3, #1
 800ba76:	d13b      	bne.n	800baf0 <_printf_float+0x164>
 800ba78:	2306      	movs	r3, #6
 800ba7a:	6063      	str	r3, [r4, #4]
 800ba7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ba80:	2300      	movs	r3, #0
 800ba82:	6022      	str	r2, [r4, #0]
 800ba84:	9303      	str	r3, [sp, #12]
 800ba86:	ab0a      	add	r3, sp, #40	@ 0x28
 800ba88:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ba8c:	ab09      	add	r3, sp, #36	@ 0x24
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	6861      	ldr	r1, [r4, #4]
 800ba92:	ec49 8b10 	vmov	d0, r8, r9
 800ba96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	f7ff fed6 	bl	800b84c <__cvt>
 800baa0:	9b06      	ldr	r3, [sp, #24]
 800baa2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800baa4:	2b47      	cmp	r3, #71	@ 0x47
 800baa6:	4680      	mov	r8, r0
 800baa8:	d129      	bne.n	800bafe <_printf_float+0x172>
 800baaa:	1cc8      	adds	r0, r1, #3
 800baac:	db02      	blt.n	800bab4 <_printf_float+0x128>
 800baae:	6863      	ldr	r3, [r4, #4]
 800bab0:	4299      	cmp	r1, r3
 800bab2:	dd41      	ble.n	800bb38 <_printf_float+0x1ac>
 800bab4:	f1aa 0a02 	sub.w	sl, sl, #2
 800bab8:	fa5f fa8a 	uxtb.w	sl, sl
 800babc:	3901      	subs	r1, #1
 800babe:	4652      	mov	r2, sl
 800bac0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bac4:	9109      	str	r1, [sp, #36]	@ 0x24
 800bac6:	f7ff ff26 	bl	800b916 <__exponent>
 800baca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bacc:	1813      	adds	r3, r2, r0
 800bace:	2a01      	cmp	r2, #1
 800bad0:	4681      	mov	r9, r0
 800bad2:	6123      	str	r3, [r4, #16]
 800bad4:	dc02      	bgt.n	800badc <_printf_float+0x150>
 800bad6:	6822      	ldr	r2, [r4, #0]
 800bad8:	07d2      	lsls	r2, r2, #31
 800bada:	d501      	bpl.n	800bae0 <_printf_float+0x154>
 800badc:	3301      	adds	r3, #1
 800bade:	6123      	str	r3, [r4, #16]
 800bae0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d0a2      	beq.n	800ba2e <_printf_float+0xa2>
 800bae8:	232d      	movs	r3, #45	@ 0x2d
 800baea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800baee:	e79e      	b.n	800ba2e <_printf_float+0xa2>
 800baf0:	9a06      	ldr	r2, [sp, #24]
 800baf2:	2a47      	cmp	r2, #71	@ 0x47
 800baf4:	d1c2      	bne.n	800ba7c <_printf_float+0xf0>
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1c0      	bne.n	800ba7c <_printf_float+0xf0>
 800bafa:	2301      	movs	r3, #1
 800bafc:	e7bd      	b.n	800ba7a <_printf_float+0xee>
 800bafe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb02:	d9db      	bls.n	800babc <_printf_float+0x130>
 800bb04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bb08:	d118      	bne.n	800bb3c <_printf_float+0x1b0>
 800bb0a:	2900      	cmp	r1, #0
 800bb0c:	6863      	ldr	r3, [r4, #4]
 800bb0e:	dd0b      	ble.n	800bb28 <_printf_float+0x19c>
 800bb10:	6121      	str	r1, [r4, #16]
 800bb12:	b913      	cbnz	r3, 800bb1a <_printf_float+0x18e>
 800bb14:	6822      	ldr	r2, [r4, #0]
 800bb16:	07d0      	lsls	r0, r2, #31
 800bb18:	d502      	bpl.n	800bb20 <_printf_float+0x194>
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	440b      	add	r3, r1
 800bb1e:	6123      	str	r3, [r4, #16]
 800bb20:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bb22:	f04f 0900 	mov.w	r9, #0
 800bb26:	e7db      	b.n	800bae0 <_printf_float+0x154>
 800bb28:	b913      	cbnz	r3, 800bb30 <_printf_float+0x1a4>
 800bb2a:	6822      	ldr	r2, [r4, #0]
 800bb2c:	07d2      	lsls	r2, r2, #31
 800bb2e:	d501      	bpl.n	800bb34 <_printf_float+0x1a8>
 800bb30:	3302      	adds	r3, #2
 800bb32:	e7f4      	b.n	800bb1e <_printf_float+0x192>
 800bb34:	2301      	movs	r3, #1
 800bb36:	e7f2      	b.n	800bb1e <_printf_float+0x192>
 800bb38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bb3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb3e:	4299      	cmp	r1, r3
 800bb40:	db05      	blt.n	800bb4e <_printf_float+0x1c2>
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	6121      	str	r1, [r4, #16]
 800bb46:	07d8      	lsls	r0, r3, #31
 800bb48:	d5ea      	bpl.n	800bb20 <_printf_float+0x194>
 800bb4a:	1c4b      	adds	r3, r1, #1
 800bb4c:	e7e7      	b.n	800bb1e <_printf_float+0x192>
 800bb4e:	2900      	cmp	r1, #0
 800bb50:	bfd4      	ite	le
 800bb52:	f1c1 0202 	rsble	r2, r1, #2
 800bb56:	2201      	movgt	r2, #1
 800bb58:	4413      	add	r3, r2
 800bb5a:	e7e0      	b.n	800bb1e <_printf_float+0x192>
 800bb5c:	6823      	ldr	r3, [r4, #0]
 800bb5e:	055a      	lsls	r2, r3, #21
 800bb60:	d407      	bmi.n	800bb72 <_printf_float+0x1e6>
 800bb62:	6923      	ldr	r3, [r4, #16]
 800bb64:	4642      	mov	r2, r8
 800bb66:	4631      	mov	r1, r6
 800bb68:	4628      	mov	r0, r5
 800bb6a:	47b8      	blx	r7
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	d12b      	bne.n	800bbc8 <_printf_float+0x23c>
 800bb70:	e767      	b.n	800ba42 <_printf_float+0xb6>
 800bb72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb76:	f240 80dd 	bls.w	800bd34 <_printf_float+0x3a8>
 800bb7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bb7e:	2200      	movs	r2, #0
 800bb80:	2300      	movs	r3, #0
 800bb82:	f7f4 ffb9 	bl	8000af8 <__aeabi_dcmpeq>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	d033      	beq.n	800bbf2 <_printf_float+0x266>
 800bb8a:	4a37      	ldr	r2, [pc, #220]	@ (800bc68 <_printf_float+0x2dc>)
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	4631      	mov	r1, r6
 800bb90:	4628      	mov	r0, r5
 800bb92:	47b8      	blx	r7
 800bb94:	3001      	adds	r0, #1
 800bb96:	f43f af54 	beq.w	800ba42 <_printf_float+0xb6>
 800bb9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bb9e:	4543      	cmp	r3, r8
 800bba0:	db02      	blt.n	800bba8 <_printf_float+0x21c>
 800bba2:	6823      	ldr	r3, [r4, #0]
 800bba4:	07d8      	lsls	r0, r3, #31
 800bba6:	d50f      	bpl.n	800bbc8 <_printf_float+0x23c>
 800bba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbac:	4631      	mov	r1, r6
 800bbae:	4628      	mov	r0, r5
 800bbb0:	47b8      	blx	r7
 800bbb2:	3001      	adds	r0, #1
 800bbb4:	f43f af45 	beq.w	800ba42 <_printf_float+0xb6>
 800bbb8:	f04f 0900 	mov.w	r9, #0
 800bbbc:	f108 38ff 	add.w	r8, r8, #4294967295
 800bbc0:	f104 0a1a 	add.w	sl, r4, #26
 800bbc4:	45c8      	cmp	r8, r9
 800bbc6:	dc09      	bgt.n	800bbdc <_printf_float+0x250>
 800bbc8:	6823      	ldr	r3, [r4, #0]
 800bbca:	079b      	lsls	r3, r3, #30
 800bbcc:	f100 8103 	bmi.w	800bdd6 <_printf_float+0x44a>
 800bbd0:	68e0      	ldr	r0, [r4, #12]
 800bbd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbd4:	4298      	cmp	r0, r3
 800bbd6:	bfb8      	it	lt
 800bbd8:	4618      	movlt	r0, r3
 800bbda:	e734      	b.n	800ba46 <_printf_float+0xba>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	4652      	mov	r2, sl
 800bbe0:	4631      	mov	r1, r6
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	47b8      	blx	r7
 800bbe6:	3001      	adds	r0, #1
 800bbe8:	f43f af2b 	beq.w	800ba42 <_printf_float+0xb6>
 800bbec:	f109 0901 	add.w	r9, r9, #1
 800bbf0:	e7e8      	b.n	800bbc4 <_printf_float+0x238>
 800bbf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	dc39      	bgt.n	800bc6c <_printf_float+0x2e0>
 800bbf8:	4a1b      	ldr	r2, [pc, #108]	@ (800bc68 <_printf_float+0x2dc>)
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	4631      	mov	r1, r6
 800bbfe:	4628      	mov	r0, r5
 800bc00:	47b8      	blx	r7
 800bc02:	3001      	adds	r0, #1
 800bc04:	f43f af1d 	beq.w	800ba42 <_printf_float+0xb6>
 800bc08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bc0c:	ea59 0303 	orrs.w	r3, r9, r3
 800bc10:	d102      	bne.n	800bc18 <_printf_float+0x28c>
 800bc12:	6823      	ldr	r3, [r4, #0]
 800bc14:	07d9      	lsls	r1, r3, #31
 800bc16:	d5d7      	bpl.n	800bbc8 <_printf_float+0x23c>
 800bc18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc1c:	4631      	mov	r1, r6
 800bc1e:	4628      	mov	r0, r5
 800bc20:	47b8      	blx	r7
 800bc22:	3001      	adds	r0, #1
 800bc24:	f43f af0d 	beq.w	800ba42 <_printf_float+0xb6>
 800bc28:	f04f 0a00 	mov.w	sl, #0
 800bc2c:	f104 0b1a 	add.w	fp, r4, #26
 800bc30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc32:	425b      	negs	r3, r3
 800bc34:	4553      	cmp	r3, sl
 800bc36:	dc01      	bgt.n	800bc3c <_printf_float+0x2b0>
 800bc38:	464b      	mov	r3, r9
 800bc3a:	e793      	b.n	800bb64 <_printf_float+0x1d8>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	465a      	mov	r2, fp
 800bc40:	4631      	mov	r1, r6
 800bc42:	4628      	mov	r0, r5
 800bc44:	47b8      	blx	r7
 800bc46:	3001      	adds	r0, #1
 800bc48:	f43f aefb 	beq.w	800ba42 <_printf_float+0xb6>
 800bc4c:	f10a 0a01 	add.w	sl, sl, #1
 800bc50:	e7ee      	b.n	800bc30 <_printf_float+0x2a4>
 800bc52:	bf00      	nop
 800bc54:	7fefffff 	.word	0x7fefffff
 800bc58:	080772af 	.word	0x080772af
 800bc5c:	080772b3 	.word	0x080772b3
 800bc60:	080772b7 	.word	0x080772b7
 800bc64:	080772bb 	.word	0x080772bb
 800bc68:	080772bf 	.word	0x080772bf
 800bc6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bc72:	4553      	cmp	r3, sl
 800bc74:	bfa8      	it	ge
 800bc76:	4653      	movge	r3, sl
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	4699      	mov	r9, r3
 800bc7c:	dc36      	bgt.n	800bcec <_printf_float+0x360>
 800bc7e:	f04f 0b00 	mov.w	fp, #0
 800bc82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc86:	f104 021a 	add.w	r2, r4, #26
 800bc8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc8c:	9306      	str	r3, [sp, #24]
 800bc8e:	eba3 0309 	sub.w	r3, r3, r9
 800bc92:	455b      	cmp	r3, fp
 800bc94:	dc31      	bgt.n	800bcfa <_printf_float+0x36e>
 800bc96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc98:	459a      	cmp	sl, r3
 800bc9a:	dc3a      	bgt.n	800bd12 <_printf_float+0x386>
 800bc9c:	6823      	ldr	r3, [r4, #0]
 800bc9e:	07da      	lsls	r2, r3, #31
 800bca0:	d437      	bmi.n	800bd12 <_printf_float+0x386>
 800bca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca4:	ebaa 0903 	sub.w	r9, sl, r3
 800bca8:	9b06      	ldr	r3, [sp, #24]
 800bcaa:	ebaa 0303 	sub.w	r3, sl, r3
 800bcae:	4599      	cmp	r9, r3
 800bcb0:	bfa8      	it	ge
 800bcb2:	4699      	movge	r9, r3
 800bcb4:	f1b9 0f00 	cmp.w	r9, #0
 800bcb8:	dc33      	bgt.n	800bd22 <_printf_float+0x396>
 800bcba:	f04f 0800 	mov.w	r8, #0
 800bcbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcc2:	f104 0b1a 	add.w	fp, r4, #26
 800bcc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc8:	ebaa 0303 	sub.w	r3, sl, r3
 800bccc:	eba3 0309 	sub.w	r3, r3, r9
 800bcd0:	4543      	cmp	r3, r8
 800bcd2:	f77f af79 	ble.w	800bbc8 <_printf_float+0x23c>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	465a      	mov	r2, fp
 800bcda:	4631      	mov	r1, r6
 800bcdc:	4628      	mov	r0, r5
 800bcde:	47b8      	blx	r7
 800bce0:	3001      	adds	r0, #1
 800bce2:	f43f aeae 	beq.w	800ba42 <_printf_float+0xb6>
 800bce6:	f108 0801 	add.w	r8, r8, #1
 800bcea:	e7ec      	b.n	800bcc6 <_printf_float+0x33a>
 800bcec:	4642      	mov	r2, r8
 800bcee:	4631      	mov	r1, r6
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	47b8      	blx	r7
 800bcf4:	3001      	adds	r0, #1
 800bcf6:	d1c2      	bne.n	800bc7e <_printf_float+0x2f2>
 800bcf8:	e6a3      	b.n	800ba42 <_printf_float+0xb6>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	4631      	mov	r1, r6
 800bcfe:	4628      	mov	r0, r5
 800bd00:	9206      	str	r2, [sp, #24]
 800bd02:	47b8      	blx	r7
 800bd04:	3001      	adds	r0, #1
 800bd06:	f43f ae9c 	beq.w	800ba42 <_printf_float+0xb6>
 800bd0a:	9a06      	ldr	r2, [sp, #24]
 800bd0c:	f10b 0b01 	add.w	fp, fp, #1
 800bd10:	e7bb      	b.n	800bc8a <_printf_float+0x2fe>
 800bd12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd16:	4631      	mov	r1, r6
 800bd18:	4628      	mov	r0, r5
 800bd1a:	47b8      	blx	r7
 800bd1c:	3001      	adds	r0, #1
 800bd1e:	d1c0      	bne.n	800bca2 <_printf_float+0x316>
 800bd20:	e68f      	b.n	800ba42 <_printf_float+0xb6>
 800bd22:	9a06      	ldr	r2, [sp, #24]
 800bd24:	464b      	mov	r3, r9
 800bd26:	4442      	add	r2, r8
 800bd28:	4631      	mov	r1, r6
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	47b8      	blx	r7
 800bd2e:	3001      	adds	r0, #1
 800bd30:	d1c3      	bne.n	800bcba <_printf_float+0x32e>
 800bd32:	e686      	b.n	800ba42 <_printf_float+0xb6>
 800bd34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd38:	f1ba 0f01 	cmp.w	sl, #1
 800bd3c:	dc01      	bgt.n	800bd42 <_printf_float+0x3b6>
 800bd3e:	07db      	lsls	r3, r3, #31
 800bd40:	d536      	bpl.n	800bdb0 <_printf_float+0x424>
 800bd42:	2301      	movs	r3, #1
 800bd44:	4642      	mov	r2, r8
 800bd46:	4631      	mov	r1, r6
 800bd48:	4628      	mov	r0, r5
 800bd4a:	47b8      	blx	r7
 800bd4c:	3001      	adds	r0, #1
 800bd4e:	f43f ae78 	beq.w	800ba42 <_printf_float+0xb6>
 800bd52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd56:	4631      	mov	r1, r6
 800bd58:	4628      	mov	r0, r5
 800bd5a:	47b8      	blx	r7
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	f43f ae70 	beq.w	800ba42 <_printf_float+0xb6>
 800bd62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bd66:	2200      	movs	r2, #0
 800bd68:	2300      	movs	r3, #0
 800bd6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd6e:	f7f4 fec3 	bl	8000af8 <__aeabi_dcmpeq>
 800bd72:	b9c0      	cbnz	r0, 800bda6 <_printf_float+0x41a>
 800bd74:	4653      	mov	r3, sl
 800bd76:	f108 0201 	add.w	r2, r8, #1
 800bd7a:	4631      	mov	r1, r6
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	47b8      	blx	r7
 800bd80:	3001      	adds	r0, #1
 800bd82:	d10c      	bne.n	800bd9e <_printf_float+0x412>
 800bd84:	e65d      	b.n	800ba42 <_printf_float+0xb6>
 800bd86:	2301      	movs	r3, #1
 800bd88:	465a      	mov	r2, fp
 800bd8a:	4631      	mov	r1, r6
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	47b8      	blx	r7
 800bd90:	3001      	adds	r0, #1
 800bd92:	f43f ae56 	beq.w	800ba42 <_printf_float+0xb6>
 800bd96:	f108 0801 	add.w	r8, r8, #1
 800bd9a:	45d0      	cmp	r8, sl
 800bd9c:	dbf3      	blt.n	800bd86 <_printf_float+0x3fa>
 800bd9e:	464b      	mov	r3, r9
 800bda0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bda4:	e6df      	b.n	800bb66 <_printf_float+0x1da>
 800bda6:	f04f 0800 	mov.w	r8, #0
 800bdaa:	f104 0b1a 	add.w	fp, r4, #26
 800bdae:	e7f4      	b.n	800bd9a <_printf_float+0x40e>
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	4642      	mov	r2, r8
 800bdb4:	e7e1      	b.n	800bd7a <_printf_float+0x3ee>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	464a      	mov	r2, r9
 800bdba:	4631      	mov	r1, r6
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	47b8      	blx	r7
 800bdc0:	3001      	adds	r0, #1
 800bdc2:	f43f ae3e 	beq.w	800ba42 <_printf_float+0xb6>
 800bdc6:	f108 0801 	add.w	r8, r8, #1
 800bdca:	68e3      	ldr	r3, [r4, #12]
 800bdcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bdce:	1a5b      	subs	r3, r3, r1
 800bdd0:	4543      	cmp	r3, r8
 800bdd2:	dcf0      	bgt.n	800bdb6 <_printf_float+0x42a>
 800bdd4:	e6fc      	b.n	800bbd0 <_printf_float+0x244>
 800bdd6:	f04f 0800 	mov.w	r8, #0
 800bdda:	f104 0919 	add.w	r9, r4, #25
 800bdde:	e7f4      	b.n	800bdca <_printf_float+0x43e>

0800bde0 <_printf_common>:
 800bde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bde4:	4616      	mov	r6, r2
 800bde6:	4698      	mov	r8, r3
 800bde8:	688a      	ldr	r2, [r1, #8]
 800bdea:	690b      	ldr	r3, [r1, #16]
 800bdec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	bfb8      	it	lt
 800bdf4:	4613      	movlt	r3, r2
 800bdf6:	6033      	str	r3, [r6, #0]
 800bdf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bdfc:	4607      	mov	r7, r0
 800bdfe:	460c      	mov	r4, r1
 800be00:	b10a      	cbz	r2, 800be06 <_printf_common+0x26>
 800be02:	3301      	adds	r3, #1
 800be04:	6033      	str	r3, [r6, #0]
 800be06:	6823      	ldr	r3, [r4, #0]
 800be08:	0699      	lsls	r1, r3, #26
 800be0a:	bf42      	ittt	mi
 800be0c:	6833      	ldrmi	r3, [r6, #0]
 800be0e:	3302      	addmi	r3, #2
 800be10:	6033      	strmi	r3, [r6, #0]
 800be12:	6825      	ldr	r5, [r4, #0]
 800be14:	f015 0506 	ands.w	r5, r5, #6
 800be18:	d106      	bne.n	800be28 <_printf_common+0x48>
 800be1a:	f104 0a19 	add.w	sl, r4, #25
 800be1e:	68e3      	ldr	r3, [r4, #12]
 800be20:	6832      	ldr	r2, [r6, #0]
 800be22:	1a9b      	subs	r3, r3, r2
 800be24:	42ab      	cmp	r3, r5
 800be26:	dc26      	bgt.n	800be76 <_printf_common+0x96>
 800be28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be2c:	6822      	ldr	r2, [r4, #0]
 800be2e:	3b00      	subs	r3, #0
 800be30:	bf18      	it	ne
 800be32:	2301      	movne	r3, #1
 800be34:	0692      	lsls	r2, r2, #26
 800be36:	d42b      	bmi.n	800be90 <_printf_common+0xb0>
 800be38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be3c:	4641      	mov	r1, r8
 800be3e:	4638      	mov	r0, r7
 800be40:	47c8      	blx	r9
 800be42:	3001      	adds	r0, #1
 800be44:	d01e      	beq.n	800be84 <_printf_common+0xa4>
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	6922      	ldr	r2, [r4, #16]
 800be4a:	f003 0306 	and.w	r3, r3, #6
 800be4e:	2b04      	cmp	r3, #4
 800be50:	bf02      	ittt	eq
 800be52:	68e5      	ldreq	r5, [r4, #12]
 800be54:	6833      	ldreq	r3, [r6, #0]
 800be56:	1aed      	subeq	r5, r5, r3
 800be58:	68a3      	ldr	r3, [r4, #8]
 800be5a:	bf0c      	ite	eq
 800be5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be60:	2500      	movne	r5, #0
 800be62:	4293      	cmp	r3, r2
 800be64:	bfc4      	itt	gt
 800be66:	1a9b      	subgt	r3, r3, r2
 800be68:	18ed      	addgt	r5, r5, r3
 800be6a:	2600      	movs	r6, #0
 800be6c:	341a      	adds	r4, #26
 800be6e:	42b5      	cmp	r5, r6
 800be70:	d11a      	bne.n	800bea8 <_printf_common+0xc8>
 800be72:	2000      	movs	r0, #0
 800be74:	e008      	b.n	800be88 <_printf_common+0xa8>
 800be76:	2301      	movs	r3, #1
 800be78:	4652      	mov	r2, sl
 800be7a:	4641      	mov	r1, r8
 800be7c:	4638      	mov	r0, r7
 800be7e:	47c8      	blx	r9
 800be80:	3001      	adds	r0, #1
 800be82:	d103      	bne.n	800be8c <_printf_common+0xac>
 800be84:	f04f 30ff 	mov.w	r0, #4294967295
 800be88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be8c:	3501      	adds	r5, #1
 800be8e:	e7c6      	b.n	800be1e <_printf_common+0x3e>
 800be90:	18e1      	adds	r1, r4, r3
 800be92:	1c5a      	adds	r2, r3, #1
 800be94:	2030      	movs	r0, #48	@ 0x30
 800be96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800be9a:	4422      	add	r2, r4
 800be9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bea0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bea4:	3302      	adds	r3, #2
 800bea6:	e7c7      	b.n	800be38 <_printf_common+0x58>
 800bea8:	2301      	movs	r3, #1
 800beaa:	4622      	mov	r2, r4
 800beac:	4641      	mov	r1, r8
 800beae:	4638      	mov	r0, r7
 800beb0:	47c8      	blx	r9
 800beb2:	3001      	adds	r0, #1
 800beb4:	d0e6      	beq.n	800be84 <_printf_common+0xa4>
 800beb6:	3601      	adds	r6, #1
 800beb8:	e7d9      	b.n	800be6e <_printf_common+0x8e>
	...

0800bebc <_printf_i>:
 800bebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bec0:	7e0f      	ldrb	r7, [r1, #24]
 800bec2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bec4:	2f78      	cmp	r7, #120	@ 0x78
 800bec6:	4691      	mov	r9, r2
 800bec8:	4680      	mov	r8, r0
 800beca:	460c      	mov	r4, r1
 800becc:	469a      	mov	sl, r3
 800bece:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bed2:	d807      	bhi.n	800bee4 <_printf_i+0x28>
 800bed4:	2f62      	cmp	r7, #98	@ 0x62
 800bed6:	d80a      	bhi.n	800beee <_printf_i+0x32>
 800bed8:	2f00      	cmp	r7, #0
 800beda:	f000 80d2 	beq.w	800c082 <_printf_i+0x1c6>
 800bede:	2f58      	cmp	r7, #88	@ 0x58
 800bee0:	f000 80b9 	beq.w	800c056 <_printf_i+0x19a>
 800bee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bee8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800beec:	e03a      	b.n	800bf64 <_printf_i+0xa8>
 800beee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bef2:	2b15      	cmp	r3, #21
 800bef4:	d8f6      	bhi.n	800bee4 <_printf_i+0x28>
 800bef6:	a101      	add	r1, pc, #4	@ (adr r1, 800befc <_printf_i+0x40>)
 800bef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800befc:	0800bf55 	.word	0x0800bf55
 800bf00:	0800bf69 	.word	0x0800bf69
 800bf04:	0800bee5 	.word	0x0800bee5
 800bf08:	0800bee5 	.word	0x0800bee5
 800bf0c:	0800bee5 	.word	0x0800bee5
 800bf10:	0800bee5 	.word	0x0800bee5
 800bf14:	0800bf69 	.word	0x0800bf69
 800bf18:	0800bee5 	.word	0x0800bee5
 800bf1c:	0800bee5 	.word	0x0800bee5
 800bf20:	0800bee5 	.word	0x0800bee5
 800bf24:	0800bee5 	.word	0x0800bee5
 800bf28:	0800c069 	.word	0x0800c069
 800bf2c:	0800bf93 	.word	0x0800bf93
 800bf30:	0800c023 	.word	0x0800c023
 800bf34:	0800bee5 	.word	0x0800bee5
 800bf38:	0800bee5 	.word	0x0800bee5
 800bf3c:	0800c08b 	.word	0x0800c08b
 800bf40:	0800bee5 	.word	0x0800bee5
 800bf44:	0800bf93 	.word	0x0800bf93
 800bf48:	0800bee5 	.word	0x0800bee5
 800bf4c:	0800bee5 	.word	0x0800bee5
 800bf50:	0800c02b 	.word	0x0800c02b
 800bf54:	6833      	ldr	r3, [r6, #0]
 800bf56:	1d1a      	adds	r2, r3, #4
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	6032      	str	r2, [r6, #0]
 800bf5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf64:	2301      	movs	r3, #1
 800bf66:	e09d      	b.n	800c0a4 <_printf_i+0x1e8>
 800bf68:	6833      	ldr	r3, [r6, #0]
 800bf6a:	6820      	ldr	r0, [r4, #0]
 800bf6c:	1d19      	adds	r1, r3, #4
 800bf6e:	6031      	str	r1, [r6, #0]
 800bf70:	0606      	lsls	r6, r0, #24
 800bf72:	d501      	bpl.n	800bf78 <_printf_i+0xbc>
 800bf74:	681d      	ldr	r5, [r3, #0]
 800bf76:	e003      	b.n	800bf80 <_printf_i+0xc4>
 800bf78:	0645      	lsls	r5, r0, #25
 800bf7a:	d5fb      	bpl.n	800bf74 <_printf_i+0xb8>
 800bf7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf80:	2d00      	cmp	r5, #0
 800bf82:	da03      	bge.n	800bf8c <_printf_i+0xd0>
 800bf84:	232d      	movs	r3, #45	@ 0x2d
 800bf86:	426d      	negs	r5, r5
 800bf88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf8c:	4859      	ldr	r0, [pc, #356]	@ (800c0f4 <_printf_i+0x238>)
 800bf8e:	230a      	movs	r3, #10
 800bf90:	e011      	b.n	800bfb6 <_printf_i+0xfa>
 800bf92:	6821      	ldr	r1, [r4, #0]
 800bf94:	6833      	ldr	r3, [r6, #0]
 800bf96:	0608      	lsls	r0, r1, #24
 800bf98:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf9c:	d402      	bmi.n	800bfa4 <_printf_i+0xe8>
 800bf9e:	0649      	lsls	r1, r1, #25
 800bfa0:	bf48      	it	mi
 800bfa2:	b2ad      	uxthmi	r5, r5
 800bfa4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bfa6:	4853      	ldr	r0, [pc, #332]	@ (800c0f4 <_printf_i+0x238>)
 800bfa8:	6033      	str	r3, [r6, #0]
 800bfaa:	bf14      	ite	ne
 800bfac:	230a      	movne	r3, #10
 800bfae:	2308      	moveq	r3, #8
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bfb6:	6866      	ldr	r6, [r4, #4]
 800bfb8:	60a6      	str	r6, [r4, #8]
 800bfba:	2e00      	cmp	r6, #0
 800bfbc:	bfa2      	ittt	ge
 800bfbe:	6821      	ldrge	r1, [r4, #0]
 800bfc0:	f021 0104 	bicge.w	r1, r1, #4
 800bfc4:	6021      	strge	r1, [r4, #0]
 800bfc6:	b90d      	cbnz	r5, 800bfcc <_printf_i+0x110>
 800bfc8:	2e00      	cmp	r6, #0
 800bfca:	d04b      	beq.n	800c064 <_printf_i+0x1a8>
 800bfcc:	4616      	mov	r6, r2
 800bfce:	fbb5 f1f3 	udiv	r1, r5, r3
 800bfd2:	fb03 5711 	mls	r7, r3, r1, r5
 800bfd6:	5dc7      	ldrb	r7, [r0, r7]
 800bfd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfdc:	462f      	mov	r7, r5
 800bfde:	42bb      	cmp	r3, r7
 800bfe0:	460d      	mov	r5, r1
 800bfe2:	d9f4      	bls.n	800bfce <_printf_i+0x112>
 800bfe4:	2b08      	cmp	r3, #8
 800bfe6:	d10b      	bne.n	800c000 <_printf_i+0x144>
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	07df      	lsls	r7, r3, #31
 800bfec:	d508      	bpl.n	800c000 <_printf_i+0x144>
 800bfee:	6923      	ldr	r3, [r4, #16]
 800bff0:	6861      	ldr	r1, [r4, #4]
 800bff2:	4299      	cmp	r1, r3
 800bff4:	bfde      	ittt	le
 800bff6:	2330      	movle	r3, #48	@ 0x30
 800bff8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bffc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c000:	1b92      	subs	r2, r2, r6
 800c002:	6122      	str	r2, [r4, #16]
 800c004:	f8cd a000 	str.w	sl, [sp]
 800c008:	464b      	mov	r3, r9
 800c00a:	aa03      	add	r2, sp, #12
 800c00c:	4621      	mov	r1, r4
 800c00e:	4640      	mov	r0, r8
 800c010:	f7ff fee6 	bl	800bde0 <_printf_common>
 800c014:	3001      	adds	r0, #1
 800c016:	d14a      	bne.n	800c0ae <_printf_i+0x1f2>
 800c018:	f04f 30ff 	mov.w	r0, #4294967295
 800c01c:	b004      	add	sp, #16
 800c01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c022:	6823      	ldr	r3, [r4, #0]
 800c024:	f043 0320 	orr.w	r3, r3, #32
 800c028:	6023      	str	r3, [r4, #0]
 800c02a:	4833      	ldr	r0, [pc, #204]	@ (800c0f8 <_printf_i+0x23c>)
 800c02c:	2778      	movs	r7, #120	@ 0x78
 800c02e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	6831      	ldr	r1, [r6, #0]
 800c036:	061f      	lsls	r7, r3, #24
 800c038:	f851 5b04 	ldr.w	r5, [r1], #4
 800c03c:	d402      	bmi.n	800c044 <_printf_i+0x188>
 800c03e:	065f      	lsls	r7, r3, #25
 800c040:	bf48      	it	mi
 800c042:	b2ad      	uxthmi	r5, r5
 800c044:	6031      	str	r1, [r6, #0]
 800c046:	07d9      	lsls	r1, r3, #31
 800c048:	bf44      	itt	mi
 800c04a:	f043 0320 	orrmi.w	r3, r3, #32
 800c04e:	6023      	strmi	r3, [r4, #0]
 800c050:	b11d      	cbz	r5, 800c05a <_printf_i+0x19e>
 800c052:	2310      	movs	r3, #16
 800c054:	e7ac      	b.n	800bfb0 <_printf_i+0xf4>
 800c056:	4827      	ldr	r0, [pc, #156]	@ (800c0f4 <_printf_i+0x238>)
 800c058:	e7e9      	b.n	800c02e <_printf_i+0x172>
 800c05a:	6823      	ldr	r3, [r4, #0]
 800c05c:	f023 0320 	bic.w	r3, r3, #32
 800c060:	6023      	str	r3, [r4, #0]
 800c062:	e7f6      	b.n	800c052 <_printf_i+0x196>
 800c064:	4616      	mov	r6, r2
 800c066:	e7bd      	b.n	800bfe4 <_printf_i+0x128>
 800c068:	6833      	ldr	r3, [r6, #0]
 800c06a:	6825      	ldr	r5, [r4, #0]
 800c06c:	6961      	ldr	r1, [r4, #20]
 800c06e:	1d18      	adds	r0, r3, #4
 800c070:	6030      	str	r0, [r6, #0]
 800c072:	062e      	lsls	r6, r5, #24
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	d501      	bpl.n	800c07c <_printf_i+0x1c0>
 800c078:	6019      	str	r1, [r3, #0]
 800c07a:	e002      	b.n	800c082 <_printf_i+0x1c6>
 800c07c:	0668      	lsls	r0, r5, #25
 800c07e:	d5fb      	bpl.n	800c078 <_printf_i+0x1bc>
 800c080:	8019      	strh	r1, [r3, #0]
 800c082:	2300      	movs	r3, #0
 800c084:	6123      	str	r3, [r4, #16]
 800c086:	4616      	mov	r6, r2
 800c088:	e7bc      	b.n	800c004 <_printf_i+0x148>
 800c08a:	6833      	ldr	r3, [r6, #0]
 800c08c:	1d1a      	adds	r2, r3, #4
 800c08e:	6032      	str	r2, [r6, #0]
 800c090:	681e      	ldr	r6, [r3, #0]
 800c092:	6862      	ldr	r2, [r4, #4]
 800c094:	2100      	movs	r1, #0
 800c096:	4630      	mov	r0, r6
 800c098:	f7f4 f8b2 	bl	8000200 <memchr>
 800c09c:	b108      	cbz	r0, 800c0a2 <_printf_i+0x1e6>
 800c09e:	1b80      	subs	r0, r0, r6
 800c0a0:	6060      	str	r0, [r4, #4]
 800c0a2:	6863      	ldr	r3, [r4, #4]
 800c0a4:	6123      	str	r3, [r4, #16]
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0ac:	e7aa      	b.n	800c004 <_printf_i+0x148>
 800c0ae:	6923      	ldr	r3, [r4, #16]
 800c0b0:	4632      	mov	r2, r6
 800c0b2:	4649      	mov	r1, r9
 800c0b4:	4640      	mov	r0, r8
 800c0b6:	47d0      	blx	sl
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	d0ad      	beq.n	800c018 <_printf_i+0x15c>
 800c0bc:	6823      	ldr	r3, [r4, #0]
 800c0be:	079b      	lsls	r3, r3, #30
 800c0c0:	d413      	bmi.n	800c0ea <_printf_i+0x22e>
 800c0c2:	68e0      	ldr	r0, [r4, #12]
 800c0c4:	9b03      	ldr	r3, [sp, #12]
 800c0c6:	4298      	cmp	r0, r3
 800c0c8:	bfb8      	it	lt
 800c0ca:	4618      	movlt	r0, r3
 800c0cc:	e7a6      	b.n	800c01c <_printf_i+0x160>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	4632      	mov	r2, r6
 800c0d2:	4649      	mov	r1, r9
 800c0d4:	4640      	mov	r0, r8
 800c0d6:	47d0      	blx	sl
 800c0d8:	3001      	adds	r0, #1
 800c0da:	d09d      	beq.n	800c018 <_printf_i+0x15c>
 800c0dc:	3501      	adds	r5, #1
 800c0de:	68e3      	ldr	r3, [r4, #12]
 800c0e0:	9903      	ldr	r1, [sp, #12]
 800c0e2:	1a5b      	subs	r3, r3, r1
 800c0e4:	42ab      	cmp	r3, r5
 800c0e6:	dcf2      	bgt.n	800c0ce <_printf_i+0x212>
 800c0e8:	e7eb      	b.n	800c0c2 <_printf_i+0x206>
 800c0ea:	2500      	movs	r5, #0
 800c0ec:	f104 0619 	add.w	r6, r4, #25
 800c0f0:	e7f5      	b.n	800c0de <_printf_i+0x222>
 800c0f2:	bf00      	nop
 800c0f4:	080772c1 	.word	0x080772c1
 800c0f8:	080772d2 	.word	0x080772d2

0800c0fc <std>:
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	b510      	push	{r4, lr}
 800c100:	4604      	mov	r4, r0
 800c102:	e9c0 3300 	strd	r3, r3, [r0]
 800c106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c10a:	6083      	str	r3, [r0, #8]
 800c10c:	8181      	strh	r1, [r0, #12]
 800c10e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c110:	81c2      	strh	r2, [r0, #14]
 800c112:	6183      	str	r3, [r0, #24]
 800c114:	4619      	mov	r1, r3
 800c116:	2208      	movs	r2, #8
 800c118:	305c      	adds	r0, #92	@ 0x5c
 800c11a:	f000 f926 	bl	800c36a <memset>
 800c11e:	4b0d      	ldr	r3, [pc, #52]	@ (800c154 <std+0x58>)
 800c120:	6263      	str	r3, [r4, #36]	@ 0x24
 800c122:	4b0d      	ldr	r3, [pc, #52]	@ (800c158 <std+0x5c>)
 800c124:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c126:	4b0d      	ldr	r3, [pc, #52]	@ (800c15c <std+0x60>)
 800c128:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c12a:	4b0d      	ldr	r3, [pc, #52]	@ (800c160 <std+0x64>)
 800c12c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c12e:	4b0d      	ldr	r3, [pc, #52]	@ (800c164 <std+0x68>)
 800c130:	6224      	str	r4, [r4, #32]
 800c132:	429c      	cmp	r4, r3
 800c134:	d006      	beq.n	800c144 <std+0x48>
 800c136:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c13a:	4294      	cmp	r4, r2
 800c13c:	d002      	beq.n	800c144 <std+0x48>
 800c13e:	33d0      	adds	r3, #208	@ 0xd0
 800c140:	429c      	cmp	r4, r3
 800c142:	d105      	bne.n	800c150 <std+0x54>
 800c144:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c14c:	f000 b98a 	b.w	800c464 <__retarget_lock_init_recursive>
 800c150:	bd10      	pop	{r4, pc}
 800c152:	bf00      	nop
 800c154:	0800c2e5 	.word	0x0800c2e5
 800c158:	0800c307 	.word	0x0800c307
 800c15c:	0800c33f 	.word	0x0800c33f
 800c160:	0800c363 	.word	0x0800c363
 800c164:	20040980 	.word	0x20040980

0800c168 <stdio_exit_handler>:
 800c168:	4a02      	ldr	r2, [pc, #8]	@ (800c174 <stdio_exit_handler+0xc>)
 800c16a:	4903      	ldr	r1, [pc, #12]	@ (800c178 <stdio_exit_handler+0x10>)
 800c16c:	4803      	ldr	r0, [pc, #12]	@ (800c17c <stdio_exit_handler+0x14>)
 800c16e:	f000 b869 	b.w	800c244 <_fwalk_sglue>
 800c172:	bf00      	nop
 800c174:	200400bc 	.word	0x200400bc
 800c178:	0800e081 	.word	0x0800e081
 800c17c:	200400cc 	.word	0x200400cc

0800c180 <cleanup_stdio>:
 800c180:	6841      	ldr	r1, [r0, #4]
 800c182:	4b0c      	ldr	r3, [pc, #48]	@ (800c1b4 <cleanup_stdio+0x34>)
 800c184:	4299      	cmp	r1, r3
 800c186:	b510      	push	{r4, lr}
 800c188:	4604      	mov	r4, r0
 800c18a:	d001      	beq.n	800c190 <cleanup_stdio+0x10>
 800c18c:	f001 ff78 	bl	800e080 <_fflush_r>
 800c190:	68a1      	ldr	r1, [r4, #8]
 800c192:	4b09      	ldr	r3, [pc, #36]	@ (800c1b8 <cleanup_stdio+0x38>)
 800c194:	4299      	cmp	r1, r3
 800c196:	d002      	beq.n	800c19e <cleanup_stdio+0x1e>
 800c198:	4620      	mov	r0, r4
 800c19a:	f001 ff71 	bl	800e080 <_fflush_r>
 800c19e:	68e1      	ldr	r1, [r4, #12]
 800c1a0:	4b06      	ldr	r3, [pc, #24]	@ (800c1bc <cleanup_stdio+0x3c>)
 800c1a2:	4299      	cmp	r1, r3
 800c1a4:	d004      	beq.n	800c1b0 <cleanup_stdio+0x30>
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1ac:	f001 bf68 	b.w	800e080 <_fflush_r>
 800c1b0:	bd10      	pop	{r4, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20040980 	.word	0x20040980
 800c1b8:	200409e8 	.word	0x200409e8
 800c1bc:	20040a50 	.word	0x20040a50

0800c1c0 <global_stdio_init.part.0>:
 800c1c0:	b510      	push	{r4, lr}
 800c1c2:	4b0b      	ldr	r3, [pc, #44]	@ (800c1f0 <global_stdio_init.part.0+0x30>)
 800c1c4:	4c0b      	ldr	r4, [pc, #44]	@ (800c1f4 <global_stdio_init.part.0+0x34>)
 800c1c6:	4a0c      	ldr	r2, [pc, #48]	@ (800c1f8 <global_stdio_init.part.0+0x38>)
 800c1c8:	601a      	str	r2, [r3, #0]
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	2104      	movs	r1, #4
 800c1d0:	f7ff ff94 	bl	800c0fc <std>
 800c1d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c1d8:	2201      	movs	r2, #1
 800c1da:	2109      	movs	r1, #9
 800c1dc:	f7ff ff8e 	bl	800c0fc <std>
 800c1e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c1e4:	2202      	movs	r2, #2
 800c1e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1ea:	2112      	movs	r1, #18
 800c1ec:	f7ff bf86 	b.w	800c0fc <std>
 800c1f0:	20040ab8 	.word	0x20040ab8
 800c1f4:	20040980 	.word	0x20040980
 800c1f8:	0800c169 	.word	0x0800c169

0800c1fc <__sfp_lock_acquire>:
 800c1fc:	4801      	ldr	r0, [pc, #4]	@ (800c204 <__sfp_lock_acquire+0x8>)
 800c1fe:	f000 b932 	b.w	800c466 <__retarget_lock_acquire_recursive>
 800c202:	bf00      	nop
 800c204:	20040ac1 	.word	0x20040ac1

0800c208 <__sfp_lock_release>:
 800c208:	4801      	ldr	r0, [pc, #4]	@ (800c210 <__sfp_lock_release+0x8>)
 800c20a:	f000 b92d 	b.w	800c468 <__retarget_lock_release_recursive>
 800c20e:	bf00      	nop
 800c210:	20040ac1 	.word	0x20040ac1

0800c214 <__sinit>:
 800c214:	b510      	push	{r4, lr}
 800c216:	4604      	mov	r4, r0
 800c218:	f7ff fff0 	bl	800c1fc <__sfp_lock_acquire>
 800c21c:	6a23      	ldr	r3, [r4, #32]
 800c21e:	b11b      	cbz	r3, 800c228 <__sinit+0x14>
 800c220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c224:	f7ff bff0 	b.w	800c208 <__sfp_lock_release>
 800c228:	4b04      	ldr	r3, [pc, #16]	@ (800c23c <__sinit+0x28>)
 800c22a:	6223      	str	r3, [r4, #32]
 800c22c:	4b04      	ldr	r3, [pc, #16]	@ (800c240 <__sinit+0x2c>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1f5      	bne.n	800c220 <__sinit+0xc>
 800c234:	f7ff ffc4 	bl	800c1c0 <global_stdio_init.part.0>
 800c238:	e7f2      	b.n	800c220 <__sinit+0xc>
 800c23a:	bf00      	nop
 800c23c:	0800c181 	.word	0x0800c181
 800c240:	20040ab8 	.word	0x20040ab8

0800c244 <_fwalk_sglue>:
 800c244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c248:	4607      	mov	r7, r0
 800c24a:	4688      	mov	r8, r1
 800c24c:	4614      	mov	r4, r2
 800c24e:	2600      	movs	r6, #0
 800c250:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c254:	f1b9 0901 	subs.w	r9, r9, #1
 800c258:	d505      	bpl.n	800c266 <_fwalk_sglue+0x22>
 800c25a:	6824      	ldr	r4, [r4, #0]
 800c25c:	2c00      	cmp	r4, #0
 800c25e:	d1f7      	bne.n	800c250 <_fwalk_sglue+0xc>
 800c260:	4630      	mov	r0, r6
 800c262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c266:	89ab      	ldrh	r3, [r5, #12]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d907      	bls.n	800c27c <_fwalk_sglue+0x38>
 800c26c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c270:	3301      	adds	r3, #1
 800c272:	d003      	beq.n	800c27c <_fwalk_sglue+0x38>
 800c274:	4629      	mov	r1, r5
 800c276:	4638      	mov	r0, r7
 800c278:	47c0      	blx	r8
 800c27a:	4306      	orrs	r6, r0
 800c27c:	3568      	adds	r5, #104	@ 0x68
 800c27e:	e7e9      	b.n	800c254 <_fwalk_sglue+0x10>

0800c280 <iprintf>:
 800c280:	b40f      	push	{r0, r1, r2, r3}
 800c282:	b507      	push	{r0, r1, r2, lr}
 800c284:	4906      	ldr	r1, [pc, #24]	@ (800c2a0 <iprintf+0x20>)
 800c286:	ab04      	add	r3, sp, #16
 800c288:	6808      	ldr	r0, [r1, #0]
 800c28a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c28e:	6881      	ldr	r1, [r0, #8]
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	f001 fd59 	bl	800dd48 <_vfiprintf_r>
 800c296:	b003      	add	sp, #12
 800c298:	f85d eb04 	ldr.w	lr, [sp], #4
 800c29c:	b004      	add	sp, #16
 800c29e:	4770      	bx	lr
 800c2a0:	200400c8 	.word	0x200400c8

0800c2a4 <siprintf>:
 800c2a4:	b40e      	push	{r1, r2, r3}
 800c2a6:	b500      	push	{lr}
 800c2a8:	b09c      	sub	sp, #112	@ 0x70
 800c2aa:	ab1d      	add	r3, sp, #116	@ 0x74
 800c2ac:	9002      	str	r0, [sp, #8]
 800c2ae:	9006      	str	r0, [sp, #24]
 800c2b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c2b4:	4809      	ldr	r0, [pc, #36]	@ (800c2dc <siprintf+0x38>)
 800c2b6:	9107      	str	r1, [sp, #28]
 800c2b8:	9104      	str	r1, [sp, #16]
 800c2ba:	4909      	ldr	r1, [pc, #36]	@ (800c2e0 <siprintf+0x3c>)
 800c2bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2c0:	9105      	str	r1, [sp, #20]
 800c2c2:	6800      	ldr	r0, [r0, #0]
 800c2c4:	9301      	str	r3, [sp, #4]
 800c2c6:	a902      	add	r1, sp, #8
 800c2c8:	f001 fc18 	bl	800dafc <_svfiprintf_r>
 800c2cc:	9b02      	ldr	r3, [sp, #8]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	701a      	strb	r2, [r3, #0]
 800c2d2:	b01c      	add	sp, #112	@ 0x70
 800c2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2d8:	b003      	add	sp, #12
 800c2da:	4770      	bx	lr
 800c2dc:	200400c8 	.word	0x200400c8
 800c2e0:	ffff0208 	.word	0xffff0208

0800c2e4 <__sread>:
 800c2e4:	b510      	push	{r4, lr}
 800c2e6:	460c      	mov	r4, r1
 800c2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ec:	f000 f86c 	bl	800c3c8 <_read_r>
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	bfab      	itete	ge
 800c2f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c2f6:	89a3      	ldrhlt	r3, [r4, #12]
 800c2f8:	181b      	addge	r3, r3, r0
 800c2fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c2fe:	bfac      	ite	ge
 800c300:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c302:	81a3      	strhlt	r3, [r4, #12]
 800c304:	bd10      	pop	{r4, pc}

0800c306 <__swrite>:
 800c306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c30a:	461f      	mov	r7, r3
 800c30c:	898b      	ldrh	r3, [r1, #12]
 800c30e:	05db      	lsls	r3, r3, #23
 800c310:	4605      	mov	r5, r0
 800c312:	460c      	mov	r4, r1
 800c314:	4616      	mov	r6, r2
 800c316:	d505      	bpl.n	800c324 <__swrite+0x1e>
 800c318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c31c:	2302      	movs	r3, #2
 800c31e:	2200      	movs	r2, #0
 800c320:	f000 f840 	bl	800c3a4 <_lseek_r>
 800c324:	89a3      	ldrh	r3, [r4, #12]
 800c326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c32a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c32e:	81a3      	strh	r3, [r4, #12]
 800c330:	4632      	mov	r2, r6
 800c332:	463b      	mov	r3, r7
 800c334:	4628      	mov	r0, r5
 800c336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c33a:	f000 b857 	b.w	800c3ec <_write_r>

0800c33e <__sseek>:
 800c33e:	b510      	push	{r4, lr}
 800c340:	460c      	mov	r4, r1
 800c342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c346:	f000 f82d 	bl	800c3a4 <_lseek_r>
 800c34a:	1c43      	adds	r3, r0, #1
 800c34c:	89a3      	ldrh	r3, [r4, #12]
 800c34e:	bf15      	itete	ne
 800c350:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c352:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c356:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c35a:	81a3      	strheq	r3, [r4, #12]
 800c35c:	bf18      	it	ne
 800c35e:	81a3      	strhne	r3, [r4, #12]
 800c360:	bd10      	pop	{r4, pc}

0800c362 <__sclose>:
 800c362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c366:	f000 b80d 	b.w	800c384 <_close_r>

0800c36a <memset>:
 800c36a:	4402      	add	r2, r0
 800c36c:	4603      	mov	r3, r0
 800c36e:	4293      	cmp	r3, r2
 800c370:	d100      	bne.n	800c374 <memset+0xa>
 800c372:	4770      	bx	lr
 800c374:	f803 1b01 	strb.w	r1, [r3], #1
 800c378:	e7f9      	b.n	800c36e <memset+0x4>
	...

0800c37c <_localeconv_r>:
 800c37c:	4800      	ldr	r0, [pc, #0]	@ (800c380 <_localeconv_r+0x4>)
 800c37e:	4770      	bx	lr
 800c380:	20040208 	.word	0x20040208

0800c384 <_close_r>:
 800c384:	b538      	push	{r3, r4, r5, lr}
 800c386:	4d06      	ldr	r5, [pc, #24]	@ (800c3a0 <_close_r+0x1c>)
 800c388:	2300      	movs	r3, #0
 800c38a:	4604      	mov	r4, r0
 800c38c:	4608      	mov	r0, r1
 800c38e:	602b      	str	r3, [r5, #0]
 800c390:	f7f6 fc2e 	bl	8002bf0 <_close>
 800c394:	1c43      	adds	r3, r0, #1
 800c396:	d102      	bne.n	800c39e <_close_r+0x1a>
 800c398:	682b      	ldr	r3, [r5, #0]
 800c39a:	b103      	cbz	r3, 800c39e <_close_r+0x1a>
 800c39c:	6023      	str	r3, [r4, #0]
 800c39e:	bd38      	pop	{r3, r4, r5, pc}
 800c3a0:	20040abc 	.word	0x20040abc

0800c3a4 <_lseek_r>:
 800c3a4:	b538      	push	{r3, r4, r5, lr}
 800c3a6:	4d07      	ldr	r5, [pc, #28]	@ (800c3c4 <_lseek_r+0x20>)
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	4608      	mov	r0, r1
 800c3ac:	4611      	mov	r1, r2
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	602a      	str	r2, [r5, #0]
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	f7f6 fc43 	bl	8002c3e <_lseek>
 800c3b8:	1c43      	adds	r3, r0, #1
 800c3ba:	d102      	bne.n	800c3c2 <_lseek_r+0x1e>
 800c3bc:	682b      	ldr	r3, [r5, #0]
 800c3be:	b103      	cbz	r3, 800c3c2 <_lseek_r+0x1e>
 800c3c0:	6023      	str	r3, [r4, #0]
 800c3c2:	bd38      	pop	{r3, r4, r5, pc}
 800c3c4:	20040abc 	.word	0x20040abc

0800c3c8 <_read_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	4d07      	ldr	r5, [pc, #28]	@ (800c3e8 <_read_r+0x20>)
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	4608      	mov	r0, r1
 800c3d0:	4611      	mov	r1, r2
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	602a      	str	r2, [r5, #0]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	f7f6 fbd1 	bl	8002b7e <_read>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	d102      	bne.n	800c3e6 <_read_r+0x1e>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	b103      	cbz	r3, 800c3e6 <_read_r+0x1e>
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	bd38      	pop	{r3, r4, r5, pc}
 800c3e8:	20040abc 	.word	0x20040abc

0800c3ec <_write_r>:
 800c3ec:	b538      	push	{r3, r4, r5, lr}
 800c3ee:	4d07      	ldr	r5, [pc, #28]	@ (800c40c <_write_r+0x20>)
 800c3f0:	4604      	mov	r4, r0
 800c3f2:	4608      	mov	r0, r1
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	602a      	str	r2, [r5, #0]
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	f7f6 fbdc 	bl	8002bb8 <_write>
 800c400:	1c43      	adds	r3, r0, #1
 800c402:	d102      	bne.n	800c40a <_write_r+0x1e>
 800c404:	682b      	ldr	r3, [r5, #0]
 800c406:	b103      	cbz	r3, 800c40a <_write_r+0x1e>
 800c408:	6023      	str	r3, [r4, #0]
 800c40a:	bd38      	pop	{r3, r4, r5, pc}
 800c40c:	20040abc 	.word	0x20040abc

0800c410 <__errno>:
 800c410:	4b01      	ldr	r3, [pc, #4]	@ (800c418 <__errno+0x8>)
 800c412:	6818      	ldr	r0, [r3, #0]
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop
 800c418:	200400c8 	.word	0x200400c8

0800c41c <__libc_init_array>:
 800c41c:	b570      	push	{r4, r5, r6, lr}
 800c41e:	4d0d      	ldr	r5, [pc, #52]	@ (800c454 <__libc_init_array+0x38>)
 800c420:	4c0d      	ldr	r4, [pc, #52]	@ (800c458 <__libc_init_array+0x3c>)
 800c422:	1b64      	subs	r4, r4, r5
 800c424:	10a4      	asrs	r4, r4, #2
 800c426:	2600      	movs	r6, #0
 800c428:	42a6      	cmp	r6, r4
 800c42a:	d109      	bne.n	800c440 <__libc_init_array+0x24>
 800c42c:	4d0b      	ldr	r5, [pc, #44]	@ (800c45c <__libc_init_array+0x40>)
 800c42e:	4c0c      	ldr	r4, [pc, #48]	@ (800c460 <__libc_init_array+0x44>)
 800c430:	f002 f864 	bl	800e4fc <_init>
 800c434:	1b64      	subs	r4, r4, r5
 800c436:	10a4      	asrs	r4, r4, #2
 800c438:	2600      	movs	r6, #0
 800c43a:	42a6      	cmp	r6, r4
 800c43c:	d105      	bne.n	800c44a <__libc_init_array+0x2e>
 800c43e:	bd70      	pop	{r4, r5, r6, pc}
 800c440:	f855 3b04 	ldr.w	r3, [r5], #4
 800c444:	4798      	blx	r3
 800c446:	3601      	adds	r6, #1
 800c448:	e7ee      	b.n	800c428 <__libc_init_array+0xc>
 800c44a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c44e:	4798      	blx	r3
 800c450:	3601      	adds	r6, #1
 800c452:	e7f2      	b.n	800c43a <__libc_init_array+0x1e>
 800c454:	08077614 	.word	0x08077614
 800c458:	08077614 	.word	0x08077614
 800c45c:	08077614 	.word	0x08077614
 800c460:	08077618 	.word	0x08077618

0800c464 <__retarget_lock_init_recursive>:
 800c464:	4770      	bx	lr

0800c466 <__retarget_lock_acquire_recursive>:
 800c466:	4770      	bx	lr

0800c468 <__retarget_lock_release_recursive>:
 800c468:	4770      	bx	lr
	...

0800c46c <__assert_func>:
 800c46c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c46e:	4614      	mov	r4, r2
 800c470:	461a      	mov	r2, r3
 800c472:	4b09      	ldr	r3, [pc, #36]	@ (800c498 <__assert_func+0x2c>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4605      	mov	r5, r0
 800c478:	68d8      	ldr	r0, [r3, #12]
 800c47a:	b954      	cbnz	r4, 800c492 <__assert_func+0x26>
 800c47c:	4b07      	ldr	r3, [pc, #28]	@ (800c49c <__assert_func+0x30>)
 800c47e:	461c      	mov	r4, r3
 800c480:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c484:	9100      	str	r1, [sp, #0]
 800c486:	462b      	mov	r3, r5
 800c488:	4905      	ldr	r1, [pc, #20]	@ (800c4a0 <__assert_func+0x34>)
 800c48a:	f001 fe21 	bl	800e0d0 <fiprintf>
 800c48e:	f001 fefd 	bl	800e28c <abort>
 800c492:	4b04      	ldr	r3, [pc, #16]	@ (800c4a4 <__assert_func+0x38>)
 800c494:	e7f4      	b.n	800c480 <__assert_func+0x14>
 800c496:	bf00      	nop
 800c498:	200400c8 	.word	0x200400c8
 800c49c:	0807731e 	.word	0x0807731e
 800c4a0:	080772f0 	.word	0x080772f0
 800c4a4:	080772e3 	.word	0x080772e3

0800c4a8 <quorem>:
 800c4a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	6903      	ldr	r3, [r0, #16]
 800c4ae:	690c      	ldr	r4, [r1, #16]
 800c4b0:	42a3      	cmp	r3, r4
 800c4b2:	4607      	mov	r7, r0
 800c4b4:	db7e      	blt.n	800c5b4 <quorem+0x10c>
 800c4b6:	3c01      	subs	r4, #1
 800c4b8:	f101 0814 	add.w	r8, r1, #20
 800c4bc:	00a3      	lsls	r3, r4, #2
 800c4be:	f100 0514 	add.w	r5, r0, #20
 800c4c2:	9300      	str	r3, [sp, #0]
 800c4c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4c8:	9301      	str	r3, [sp, #4]
 800c4ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c4ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c4da:	fbb2 f6f3 	udiv	r6, r2, r3
 800c4de:	d32e      	bcc.n	800c53e <quorem+0x96>
 800c4e0:	f04f 0a00 	mov.w	sl, #0
 800c4e4:	46c4      	mov	ip, r8
 800c4e6:	46ae      	mov	lr, r5
 800c4e8:	46d3      	mov	fp, sl
 800c4ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c4ee:	b298      	uxth	r0, r3
 800c4f0:	fb06 a000 	mla	r0, r6, r0, sl
 800c4f4:	0c02      	lsrs	r2, r0, #16
 800c4f6:	0c1b      	lsrs	r3, r3, #16
 800c4f8:	fb06 2303 	mla	r3, r6, r3, r2
 800c4fc:	f8de 2000 	ldr.w	r2, [lr]
 800c500:	b280      	uxth	r0, r0
 800c502:	b292      	uxth	r2, r2
 800c504:	1a12      	subs	r2, r2, r0
 800c506:	445a      	add	r2, fp
 800c508:	f8de 0000 	ldr.w	r0, [lr]
 800c50c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c510:	b29b      	uxth	r3, r3
 800c512:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c516:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c51a:	b292      	uxth	r2, r2
 800c51c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c520:	45e1      	cmp	r9, ip
 800c522:	f84e 2b04 	str.w	r2, [lr], #4
 800c526:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c52a:	d2de      	bcs.n	800c4ea <quorem+0x42>
 800c52c:	9b00      	ldr	r3, [sp, #0]
 800c52e:	58eb      	ldr	r3, [r5, r3]
 800c530:	b92b      	cbnz	r3, 800c53e <quorem+0x96>
 800c532:	9b01      	ldr	r3, [sp, #4]
 800c534:	3b04      	subs	r3, #4
 800c536:	429d      	cmp	r5, r3
 800c538:	461a      	mov	r2, r3
 800c53a:	d32f      	bcc.n	800c59c <quorem+0xf4>
 800c53c:	613c      	str	r4, [r7, #16]
 800c53e:	4638      	mov	r0, r7
 800c540:	f001 f978 	bl	800d834 <__mcmp>
 800c544:	2800      	cmp	r0, #0
 800c546:	db25      	blt.n	800c594 <quorem+0xec>
 800c548:	4629      	mov	r1, r5
 800c54a:	2000      	movs	r0, #0
 800c54c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c550:	f8d1 c000 	ldr.w	ip, [r1]
 800c554:	fa1f fe82 	uxth.w	lr, r2
 800c558:	fa1f f38c 	uxth.w	r3, ip
 800c55c:	eba3 030e 	sub.w	r3, r3, lr
 800c560:	4403      	add	r3, r0
 800c562:	0c12      	lsrs	r2, r2, #16
 800c564:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c568:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c572:	45c1      	cmp	r9, r8
 800c574:	f841 3b04 	str.w	r3, [r1], #4
 800c578:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c57c:	d2e6      	bcs.n	800c54c <quorem+0xa4>
 800c57e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c586:	b922      	cbnz	r2, 800c592 <quorem+0xea>
 800c588:	3b04      	subs	r3, #4
 800c58a:	429d      	cmp	r5, r3
 800c58c:	461a      	mov	r2, r3
 800c58e:	d30b      	bcc.n	800c5a8 <quorem+0x100>
 800c590:	613c      	str	r4, [r7, #16]
 800c592:	3601      	adds	r6, #1
 800c594:	4630      	mov	r0, r6
 800c596:	b003      	add	sp, #12
 800c598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c59c:	6812      	ldr	r2, [r2, #0]
 800c59e:	3b04      	subs	r3, #4
 800c5a0:	2a00      	cmp	r2, #0
 800c5a2:	d1cb      	bne.n	800c53c <quorem+0x94>
 800c5a4:	3c01      	subs	r4, #1
 800c5a6:	e7c6      	b.n	800c536 <quorem+0x8e>
 800c5a8:	6812      	ldr	r2, [r2, #0]
 800c5aa:	3b04      	subs	r3, #4
 800c5ac:	2a00      	cmp	r2, #0
 800c5ae:	d1ef      	bne.n	800c590 <quorem+0xe8>
 800c5b0:	3c01      	subs	r4, #1
 800c5b2:	e7ea      	b.n	800c58a <quorem+0xe2>
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	e7ee      	b.n	800c596 <quorem+0xee>

0800c5b8 <_dtoa_r>:
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	69c7      	ldr	r7, [r0, #28]
 800c5be:	b099      	sub	sp, #100	@ 0x64
 800c5c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c5c4:	ec55 4b10 	vmov	r4, r5, d0
 800c5c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c5ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800c5cc:	4683      	mov	fp, r0
 800c5ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800c5d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c5d2:	b97f      	cbnz	r7, 800c5f4 <_dtoa_r+0x3c>
 800c5d4:	2010      	movs	r0, #16
 800c5d6:	f000 fdfd 	bl	800d1d4 <malloc>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800c5e0:	b920      	cbnz	r0, 800c5ec <_dtoa_r+0x34>
 800c5e2:	4ba7      	ldr	r3, [pc, #668]	@ (800c880 <_dtoa_r+0x2c8>)
 800c5e4:	21ef      	movs	r1, #239	@ 0xef
 800c5e6:	48a7      	ldr	r0, [pc, #668]	@ (800c884 <_dtoa_r+0x2cc>)
 800c5e8:	f7ff ff40 	bl	800c46c <__assert_func>
 800c5ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c5f0:	6007      	str	r7, [r0, #0]
 800c5f2:	60c7      	str	r7, [r0, #12]
 800c5f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c5f8:	6819      	ldr	r1, [r3, #0]
 800c5fa:	b159      	cbz	r1, 800c614 <_dtoa_r+0x5c>
 800c5fc:	685a      	ldr	r2, [r3, #4]
 800c5fe:	604a      	str	r2, [r1, #4]
 800c600:	2301      	movs	r3, #1
 800c602:	4093      	lsls	r3, r2
 800c604:	608b      	str	r3, [r1, #8]
 800c606:	4658      	mov	r0, fp
 800c608:	f000 feda 	bl	800d3c0 <_Bfree>
 800c60c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c610:	2200      	movs	r2, #0
 800c612:	601a      	str	r2, [r3, #0]
 800c614:	1e2b      	subs	r3, r5, #0
 800c616:	bfb9      	ittee	lt
 800c618:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c61c:	9303      	strlt	r3, [sp, #12]
 800c61e:	2300      	movge	r3, #0
 800c620:	6033      	strge	r3, [r6, #0]
 800c622:	9f03      	ldr	r7, [sp, #12]
 800c624:	4b98      	ldr	r3, [pc, #608]	@ (800c888 <_dtoa_r+0x2d0>)
 800c626:	bfbc      	itt	lt
 800c628:	2201      	movlt	r2, #1
 800c62a:	6032      	strlt	r2, [r6, #0]
 800c62c:	43bb      	bics	r3, r7
 800c62e:	d112      	bne.n	800c656 <_dtoa_r+0x9e>
 800c630:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c632:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c636:	6013      	str	r3, [r2, #0]
 800c638:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c63c:	4323      	orrs	r3, r4
 800c63e:	f000 854d 	beq.w	800d0dc <_dtoa_r+0xb24>
 800c642:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c644:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c89c <_dtoa_r+0x2e4>
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f000 854f 	beq.w	800d0ec <_dtoa_r+0xb34>
 800c64e:	f10a 0303 	add.w	r3, sl, #3
 800c652:	f000 bd49 	b.w	800d0e8 <_dtoa_r+0xb30>
 800c656:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c65a:	2200      	movs	r2, #0
 800c65c:	ec51 0b17 	vmov	r0, r1, d7
 800c660:	2300      	movs	r3, #0
 800c662:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c666:	f7f4 fa47 	bl	8000af8 <__aeabi_dcmpeq>
 800c66a:	4680      	mov	r8, r0
 800c66c:	b158      	cbz	r0, 800c686 <_dtoa_r+0xce>
 800c66e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c670:	2301      	movs	r3, #1
 800c672:	6013      	str	r3, [r2, #0]
 800c674:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c676:	b113      	cbz	r3, 800c67e <_dtoa_r+0xc6>
 800c678:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c67a:	4b84      	ldr	r3, [pc, #528]	@ (800c88c <_dtoa_r+0x2d4>)
 800c67c:	6013      	str	r3, [r2, #0]
 800c67e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c8a0 <_dtoa_r+0x2e8>
 800c682:	f000 bd33 	b.w	800d0ec <_dtoa_r+0xb34>
 800c686:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c68a:	aa16      	add	r2, sp, #88	@ 0x58
 800c68c:	a917      	add	r1, sp, #92	@ 0x5c
 800c68e:	4658      	mov	r0, fp
 800c690:	f001 f980 	bl	800d994 <__d2b>
 800c694:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c698:	4681      	mov	r9, r0
 800c69a:	2e00      	cmp	r6, #0
 800c69c:	d077      	beq.n	800c78e <_dtoa_r+0x1d6>
 800c69e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c6a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c6a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c6ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c6b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c6b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	4b74      	ldr	r3, [pc, #464]	@ (800c890 <_dtoa_r+0x2d8>)
 800c6be:	f7f3 fdfb 	bl	80002b8 <__aeabi_dsub>
 800c6c2:	a369      	add	r3, pc, #420	@ (adr r3, 800c868 <_dtoa_r+0x2b0>)
 800c6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c8:	f7f3 ffae 	bl	8000628 <__aeabi_dmul>
 800c6cc:	a368      	add	r3, pc, #416	@ (adr r3, 800c870 <_dtoa_r+0x2b8>)
 800c6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d2:	f7f3 fdf3 	bl	80002bc <__adddf3>
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	4630      	mov	r0, r6
 800c6da:	460d      	mov	r5, r1
 800c6dc:	f7f3 ff3a 	bl	8000554 <__aeabi_i2d>
 800c6e0:	a365      	add	r3, pc, #404	@ (adr r3, 800c878 <_dtoa_r+0x2c0>)
 800c6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e6:	f7f3 ff9f 	bl	8000628 <__aeabi_dmul>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	f7f3 fde3 	bl	80002bc <__adddf3>
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	460d      	mov	r5, r1
 800c6fa:	f7f4 fa45 	bl	8000b88 <__aeabi_d2iz>
 800c6fe:	2200      	movs	r2, #0
 800c700:	4607      	mov	r7, r0
 800c702:	2300      	movs	r3, #0
 800c704:	4620      	mov	r0, r4
 800c706:	4629      	mov	r1, r5
 800c708:	f7f4 fa00 	bl	8000b0c <__aeabi_dcmplt>
 800c70c:	b140      	cbz	r0, 800c720 <_dtoa_r+0x168>
 800c70e:	4638      	mov	r0, r7
 800c710:	f7f3 ff20 	bl	8000554 <__aeabi_i2d>
 800c714:	4622      	mov	r2, r4
 800c716:	462b      	mov	r3, r5
 800c718:	f7f4 f9ee 	bl	8000af8 <__aeabi_dcmpeq>
 800c71c:	b900      	cbnz	r0, 800c720 <_dtoa_r+0x168>
 800c71e:	3f01      	subs	r7, #1
 800c720:	2f16      	cmp	r7, #22
 800c722:	d851      	bhi.n	800c7c8 <_dtoa_r+0x210>
 800c724:	4b5b      	ldr	r3, [pc, #364]	@ (800c894 <_dtoa_r+0x2dc>)
 800c726:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c732:	f7f4 f9eb 	bl	8000b0c <__aeabi_dcmplt>
 800c736:	2800      	cmp	r0, #0
 800c738:	d048      	beq.n	800c7cc <_dtoa_r+0x214>
 800c73a:	3f01      	subs	r7, #1
 800c73c:	2300      	movs	r3, #0
 800c73e:	9312      	str	r3, [sp, #72]	@ 0x48
 800c740:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c742:	1b9b      	subs	r3, r3, r6
 800c744:	1e5a      	subs	r2, r3, #1
 800c746:	bf44      	itt	mi
 800c748:	f1c3 0801 	rsbmi	r8, r3, #1
 800c74c:	2300      	movmi	r3, #0
 800c74e:	9208      	str	r2, [sp, #32]
 800c750:	bf54      	ite	pl
 800c752:	f04f 0800 	movpl.w	r8, #0
 800c756:	9308      	strmi	r3, [sp, #32]
 800c758:	2f00      	cmp	r7, #0
 800c75a:	db39      	blt.n	800c7d0 <_dtoa_r+0x218>
 800c75c:	9b08      	ldr	r3, [sp, #32]
 800c75e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c760:	443b      	add	r3, r7
 800c762:	9308      	str	r3, [sp, #32]
 800c764:	2300      	movs	r3, #0
 800c766:	930a      	str	r3, [sp, #40]	@ 0x28
 800c768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c76a:	2b09      	cmp	r3, #9
 800c76c:	d864      	bhi.n	800c838 <_dtoa_r+0x280>
 800c76e:	2b05      	cmp	r3, #5
 800c770:	bfc4      	itt	gt
 800c772:	3b04      	subgt	r3, #4
 800c774:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c778:	f1a3 0302 	sub.w	r3, r3, #2
 800c77c:	bfcc      	ite	gt
 800c77e:	2400      	movgt	r4, #0
 800c780:	2401      	movle	r4, #1
 800c782:	2b03      	cmp	r3, #3
 800c784:	d863      	bhi.n	800c84e <_dtoa_r+0x296>
 800c786:	e8df f003 	tbb	[pc, r3]
 800c78a:	372a      	.short	0x372a
 800c78c:	5535      	.short	0x5535
 800c78e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c792:	441e      	add	r6, r3
 800c794:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c798:	2b20      	cmp	r3, #32
 800c79a:	bfc1      	itttt	gt
 800c79c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c7a0:	409f      	lslgt	r7, r3
 800c7a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c7a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c7aa:	bfd6      	itet	le
 800c7ac:	f1c3 0320 	rsble	r3, r3, #32
 800c7b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800c7b4:	fa04 f003 	lslle.w	r0, r4, r3
 800c7b8:	f7f3 febc 	bl	8000534 <__aeabi_ui2d>
 800c7bc:	2201      	movs	r2, #1
 800c7be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c7c2:	3e01      	subs	r6, #1
 800c7c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800c7c6:	e777      	b.n	800c6b8 <_dtoa_r+0x100>
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	e7b8      	b.n	800c73e <_dtoa_r+0x186>
 800c7cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800c7ce:	e7b7      	b.n	800c740 <_dtoa_r+0x188>
 800c7d0:	427b      	negs	r3, r7
 800c7d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	eba8 0807 	sub.w	r8, r8, r7
 800c7da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c7dc:	e7c4      	b.n	800c768 <_dtoa_r+0x1b0>
 800c7de:	2300      	movs	r3, #0
 800c7e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	dc35      	bgt.n	800c854 <_dtoa_r+0x29c>
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	9307      	str	r3, [sp, #28]
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c7f2:	e00b      	b.n	800c80c <_dtoa_r+0x254>
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	e7f3      	b.n	800c7e0 <_dtoa_r+0x228>
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7fe:	18fb      	adds	r3, r7, r3
 800c800:	9300      	str	r3, [sp, #0]
 800c802:	3301      	adds	r3, #1
 800c804:	2b01      	cmp	r3, #1
 800c806:	9307      	str	r3, [sp, #28]
 800c808:	bfb8      	it	lt
 800c80a:	2301      	movlt	r3, #1
 800c80c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c810:	2100      	movs	r1, #0
 800c812:	2204      	movs	r2, #4
 800c814:	f102 0514 	add.w	r5, r2, #20
 800c818:	429d      	cmp	r5, r3
 800c81a:	d91f      	bls.n	800c85c <_dtoa_r+0x2a4>
 800c81c:	6041      	str	r1, [r0, #4]
 800c81e:	4658      	mov	r0, fp
 800c820:	f000 fd8e 	bl	800d340 <_Balloc>
 800c824:	4682      	mov	sl, r0
 800c826:	2800      	cmp	r0, #0
 800c828:	d13c      	bne.n	800c8a4 <_dtoa_r+0x2ec>
 800c82a:	4b1b      	ldr	r3, [pc, #108]	@ (800c898 <_dtoa_r+0x2e0>)
 800c82c:	4602      	mov	r2, r0
 800c82e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c832:	e6d8      	b.n	800c5e6 <_dtoa_r+0x2e>
 800c834:	2301      	movs	r3, #1
 800c836:	e7e0      	b.n	800c7fa <_dtoa_r+0x242>
 800c838:	2401      	movs	r4, #1
 800c83a:	2300      	movs	r3, #0
 800c83c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c83e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c840:	f04f 33ff 	mov.w	r3, #4294967295
 800c844:	9300      	str	r3, [sp, #0]
 800c846:	9307      	str	r3, [sp, #28]
 800c848:	2200      	movs	r2, #0
 800c84a:	2312      	movs	r3, #18
 800c84c:	e7d0      	b.n	800c7f0 <_dtoa_r+0x238>
 800c84e:	2301      	movs	r3, #1
 800c850:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c852:	e7f5      	b.n	800c840 <_dtoa_r+0x288>
 800c854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c856:	9300      	str	r3, [sp, #0]
 800c858:	9307      	str	r3, [sp, #28]
 800c85a:	e7d7      	b.n	800c80c <_dtoa_r+0x254>
 800c85c:	3101      	adds	r1, #1
 800c85e:	0052      	lsls	r2, r2, #1
 800c860:	e7d8      	b.n	800c814 <_dtoa_r+0x25c>
 800c862:	bf00      	nop
 800c864:	f3af 8000 	nop.w
 800c868:	636f4361 	.word	0x636f4361
 800c86c:	3fd287a7 	.word	0x3fd287a7
 800c870:	8b60c8b3 	.word	0x8b60c8b3
 800c874:	3fc68a28 	.word	0x3fc68a28
 800c878:	509f79fb 	.word	0x509f79fb
 800c87c:	3fd34413 	.word	0x3fd34413
 800c880:	08077240 	.word	0x08077240
 800c884:	0807732c 	.word	0x0807732c
 800c888:	7ff00000 	.word	0x7ff00000
 800c88c:	080772c0 	.word	0x080772c0
 800c890:	3ff80000 	.word	0x3ff80000
 800c894:	08077428 	.word	0x08077428
 800c898:	08077384 	.word	0x08077384
 800c89c:	08077328 	.word	0x08077328
 800c8a0:	080772bf 	.word	0x080772bf
 800c8a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c8a8:	6018      	str	r0, [r3, #0]
 800c8aa:	9b07      	ldr	r3, [sp, #28]
 800c8ac:	2b0e      	cmp	r3, #14
 800c8ae:	f200 80a4 	bhi.w	800c9fa <_dtoa_r+0x442>
 800c8b2:	2c00      	cmp	r4, #0
 800c8b4:	f000 80a1 	beq.w	800c9fa <_dtoa_r+0x442>
 800c8b8:	2f00      	cmp	r7, #0
 800c8ba:	dd33      	ble.n	800c924 <_dtoa_r+0x36c>
 800c8bc:	4bad      	ldr	r3, [pc, #692]	@ (800cb74 <_dtoa_r+0x5bc>)
 800c8be:	f007 020f 	and.w	r2, r7, #15
 800c8c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8c6:	ed93 7b00 	vldr	d7, [r3]
 800c8ca:	05f8      	lsls	r0, r7, #23
 800c8cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c8d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c8d4:	d516      	bpl.n	800c904 <_dtoa_r+0x34c>
 800c8d6:	4ba8      	ldr	r3, [pc, #672]	@ (800cb78 <_dtoa_r+0x5c0>)
 800c8d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c8e0:	f7f3 ffcc 	bl	800087c <__aeabi_ddiv>
 800c8e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8e8:	f004 040f 	and.w	r4, r4, #15
 800c8ec:	2603      	movs	r6, #3
 800c8ee:	4da2      	ldr	r5, [pc, #648]	@ (800cb78 <_dtoa_r+0x5c0>)
 800c8f0:	b954      	cbnz	r4, 800c908 <_dtoa_r+0x350>
 800c8f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8fa:	f7f3 ffbf 	bl	800087c <__aeabi_ddiv>
 800c8fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c902:	e028      	b.n	800c956 <_dtoa_r+0x39e>
 800c904:	2602      	movs	r6, #2
 800c906:	e7f2      	b.n	800c8ee <_dtoa_r+0x336>
 800c908:	07e1      	lsls	r1, r4, #31
 800c90a:	d508      	bpl.n	800c91e <_dtoa_r+0x366>
 800c90c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c910:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c914:	f7f3 fe88 	bl	8000628 <__aeabi_dmul>
 800c918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c91c:	3601      	adds	r6, #1
 800c91e:	1064      	asrs	r4, r4, #1
 800c920:	3508      	adds	r5, #8
 800c922:	e7e5      	b.n	800c8f0 <_dtoa_r+0x338>
 800c924:	f000 80d2 	beq.w	800cacc <_dtoa_r+0x514>
 800c928:	427c      	negs	r4, r7
 800c92a:	4b92      	ldr	r3, [pc, #584]	@ (800cb74 <_dtoa_r+0x5bc>)
 800c92c:	4d92      	ldr	r5, [pc, #584]	@ (800cb78 <_dtoa_r+0x5c0>)
 800c92e:	f004 020f 	and.w	r2, r4, #15
 800c932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c93e:	f7f3 fe73 	bl	8000628 <__aeabi_dmul>
 800c942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c946:	1124      	asrs	r4, r4, #4
 800c948:	2300      	movs	r3, #0
 800c94a:	2602      	movs	r6, #2
 800c94c:	2c00      	cmp	r4, #0
 800c94e:	f040 80b2 	bne.w	800cab6 <_dtoa_r+0x4fe>
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1d3      	bne.n	800c8fe <_dtoa_r+0x346>
 800c956:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c958:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	f000 80b7 	beq.w	800cad0 <_dtoa_r+0x518>
 800c962:	4b86      	ldr	r3, [pc, #536]	@ (800cb7c <_dtoa_r+0x5c4>)
 800c964:	2200      	movs	r2, #0
 800c966:	4620      	mov	r0, r4
 800c968:	4629      	mov	r1, r5
 800c96a:	f7f4 f8cf 	bl	8000b0c <__aeabi_dcmplt>
 800c96e:	2800      	cmp	r0, #0
 800c970:	f000 80ae 	beq.w	800cad0 <_dtoa_r+0x518>
 800c974:	9b07      	ldr	r3, [sp, #28]
 800c976:	2b00      	cmp	r3, #0
 800c978:	f000 80aa 	beq.w	800cad0 <_dtoa_r+0x518>
 800c97c:	9b00      	ldr	r3, [sp, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	dd37      	ble.n	800c9f2 <_dtoa_r+0x43a>
 800c982:	1e7b      	subs	r3, r7, #1
 800c984:	9304      	str	r3, [sp, #16]
 800c986:	4620      	mov	r0, r4
 800c988:	4b7d      	ldr	r3, [pc, #500]	@ (800cb80 <_dtoa_r+0x5c8>)
 800c98a:	2200      	movs	r2, #0
 800c98c:	4629      	mov	r1, r5
 800c98e:	f7f3 fe4b 	bl	8000628 <__aeabi_dmul>
 800c992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c996:	9c00      	ldr	r4, [sp, #0]
 800c998:	3601      	adds	r6, #1
 800c99a:	4630      	mov	r0, r6
 800c99c:	f7f3 fdda 	bl	8000554 <__aeabi_i2d>
 800c9a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9a4:	f7f3 fe40 	bl	8000628 <__aeabi_dmul>
 800c9a8:	4b76      	ldr	r3, [pc, #472]	@ (800cb84 <_dtoa_r+0x5cc>)
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f7f3 fc86 	bl	80002bc <__adddf3>
 800c9b0:	4605      	mov	r5, r0
 800c9b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c9b6:	2c00      	cmp	r4, #0
 800c9b8:	f040 808d 	bne.w	800cad6 <_dtoa_r+0x51e>
 800c9bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9c0:	4b71      	ldr	r3, [pc, #452]	@ (800cb88 <_dtoa_r+0x5d0>)
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f7f3 fc78 	bl	80002b8 <__aeabi_dsub>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9d0:	462a      	mov	r2, r5
 800c9d2:	4633      	mov	r3, r6
 800c9d4:	f7f4 f8b8 	bl	8000b48 <__aeabi_dcmpgt>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	f040 828b 	bne.w	800cef4 <_dtoa_r+0x93c>
 800c9de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9e2:	462a      	mov	r2, r5
 800c9e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c9e8:	f7f4 f890 	bl	8000b0c <__aeabi_dcmplt>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	f040 8128 	bne.w	800cc42 <_dtoa_r+0x68a>
 800c9f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c9f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c9fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f2c0 815a 	blt.w	800ccb6 <_dtoa_r+0x6fe>
 800ca02:	2f0e      	cmp	r7, #14
 800ca04:	f300 8157 	bgt.w	800ccb6 <_dtoa_r+0x6fe>
 800ca08:	4b5a      	ldr	r3, [pc, #360]	@ (800cb74 <_dtoa_r+0x5bc>)
 800ca0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca0e:	ed93 7b00 	vldr	d7, [r3]
 800ca12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	ed8d 7b00 	vstr	d7, [sp]
 800ca1a:	da03      	bge.n	800ca24 <_dtoa_r+0x46c>
 800ca1c:	9b07      	ldr	r3, [sp, #28]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f340 8101 	ble.w	800cc26 <_dtoa_r+0x66e>
 800ca24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ca28:	4656      	mov	r6, sl
 800ca2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca2e:	4620      	mov	r0, r4
 800ca30:	4629      	mov	r1, r5
 800ca32:	f7f3 ff23 	bl	800087c <__aeabi_ddiv>
 800ca36:	f7f4 f8a7 	bl	8000b88 <__aeabi_d2iz>
 800ca3a:	4680      	mov	r8, r0
 800ca3c:	f7f3 fd8a 	bl	8000554 <__aeabi_i2d>
 800ca40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca44:	f7f3 fdf0 	bl	8000628 <__aeabi_dmul>
 800ca48:	4602      	mov	r2, r0
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	4629      	mov	r1, r5
 800ca50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ca54:	f7f3 fc30 	bl	80002b8 <__aeabi_dsub>
 800ca58:	f806 4b01 	strb.w	r4, [r6], #1
 800ca5c:	9d07      	ldr	r5, [sp, #28]
 800ca5e:	eba6 040a 	sub.w	r4, r6, sl
 800ca62:	42a5      	cmp	r5, r4
 800ca64:	4602      	mov	r2, r0
 800ca66:	460b      	mov	r3, r1
 800ca68:	f040 8117 	bne.w	800cc9a <_dtoa_r+0x6e2>
 800ca6c:	f7f3 fc26 	bl	80002bc <__adddf3>
 800ca70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca74:	4604      	mov	r4, r0
 800ca76:	460d      	mov	r5, r1
 800ca78:	f7f4 f866 	bl	8000b48 <__aeabi_dcmpgt>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	f040 80f9 	bne.w	800cc74 <_dtoa_r+0x6bc>
 800ca82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca86:	4620      	mov	r0, r4
 800ca88:	4629      	mov	r1, r5
 800ca8a:	f7f4 f835 	bl	8000af8 <__aeabi_dcmpeq>
 800ca8e:	b118      	cbz	r0, 800ca98 <_dtoa_r+0x4e0>
 800ca90:	f018 0f01 	tst.w	r8, #1
 800ca94:	f040 80ee 	bne.w	800cc74 <_dtoa_r+0x6bc>
 800ca98:	4649      	mov	r1, r9
 800ca9a:	4658      	mov	r0, fp
 800ca9c:	f000 fc90 	bl	800d3c0 <_Bfree>
 800caa0:	2300      	movs	r3, #0
 800caa2:	7033      	strb	r3, [r6, #0]
 800caa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800caa6:	3701      	adds	r7, #1
 800caa8:	601f      	str	r7, [r3, #0]
 800caaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800caac:	2b00      	cmp	r3, #0
 800caae:	f000 831d 	beq.w	800d0ec <_dtoa_r+0xb34>
 800cab2:	601e      	str	r6, [r3, #0]
 800cab4:	e31a      	b.n	800d0ec <_dtoa_r+0xb34>
 800cab6:	07e2      	lsls	r2, r4, #31
 800cab8:	d505      	bpl.n	800cac6 <_dtoa_r+0x50e>
 800caba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cabe:	f7f3 fdb3 	bl	8000628 <__aeabi_dmul>
 800cac2:	3601      	adds	r6, #1
 800cac4:	2301      	movs	r3, #1
 800cac6:	1064      	asrs	r4, r4, #1
 800cac8:	3508      	adds	r5, #8
 800caca:	e73f      	b.n	800c94c <_dtoa_r+0x394>
 800cacc:	2602      	movs	r6, #2
 800cace:	e742      	b.n	800c956 <_dtoa_r+0x39e>
 800cad0:	9c07      	ldr	r4, [sp, #28]
 800cad2:	9704      	str	r7, [sp, #16]
 800cad4:	e761      	b.n	800c99a <_dtoa_r+0x3e2>
 800cad6:	4b27      	ldr	r3, [pc, #156]	@ (800cb74 <_dtoa_r+0x5bc>)
 800cad8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cada:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cade:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cae2:	4454      	add	r4, sl
 800cae4:	2900      	cmp	r1, #0
 800cae6:	d053      	beq.n	800cb90 <_dtoa_r+0x5d8>
 800cae8:	4928      	ldr	r1, [pc, #160]	@ (800cb8c <_dtoa_r+0x5d4>)
 800caea:	2000      	movs	r0, #0
 800caec:	f7f3 fec6 	bl	800087c <__aeabi_ddiv>
 800caf0:	4633      	mov	r3, r6
 800caf2:	462a      	mov	r2, r5
 800caf4:	f7f3 fbe0 	bl	80002b8 <__aeabi_dsub>
 800caf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cafc:	4656      	mov	r6, sl
 800cafe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb02:	f7f4 f841 	bl	8000b88 <__aeabi_d2iz>
 800cb06:	4605      	mov	r5, r0
 800cb08:	f7f3 fd24 	bl	8000554 <__aeabi_i2d>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	460b      	mov	r3, r1
 800cb10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb14:	f7f3 fbd0 	bl	80002b8 <__aeabi_dsub>
 800cb18:	3530      	adds	r5, #48	@ 0x30
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb22:	f806 5b01 	strb.w	r5, [r6], #1
 800cb26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb2a:	f7f3 ffef 	bl	8000b0c <__aeabi_dcmplt>
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	d171      	bne.n	800cc16 <_dtoa_r+0x65e>
 800cb32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb36:	4911      	ldr	r1, [pc, #68]	@ (800cb7c <_dtoa_r+0x5c4>)
 800cb38:	2000      	movs	r0, #0
 800cb3a:	f7f3 fbbd 	bl	80002b8 <__aeabi_dsub>
 800cb3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb42:	f7f3 ffe3 	bl	8000b0c <__aeabi_dcmplt>
 800cb46:	2800      	cmp	r0, #0
 800cb48:	f040 8095 	bne.w	800cc76 <_dtoa_r+0x6be>
 800cb4c:	42a6      	cmp	r6, r4
 800cb4e:	f43f af50 	beq.w	800c9f2 <_dtoa_r+0x43a>
 800cb52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cb56:	4b0a      	ldr	r3, [pc, #40]	@ (800cb80 <_dtoa_r+0x5c8>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f7f3 fd65 	bl	8000628 <__aeabi_dmul>
 800cb5e:	4b08      	ldr	r3, [pc, #32]	@ (800cb80 <_dtoa_r+0x5c8>)
 800cb60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb64:	2200      	movs	r2, #0
 800cb66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb6a:	f7f3 fd5d 	bl	8000628 <__aeabi_dmul>
 800cb6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb72:	e7c4      	b.n	800cafe <_dtoa_r+0x546>
 800cb74:	08077428 	.word	0x08077428
 800cb78:	08077400 	.word	0x08077400
 800cb7c:	3ff00000 	.word	0x3ff00000
 800cb80:	40240000 	.word	0x40240000
 800cb84:	401c0000 	.word	0x401c0000
 800cb88:	40140000 	.word	0x40140000
 800cb8c:	3fe00000 	.word	0x3fe00000
 800cb90:	4631      	mov	r1, r6
 800cb92:	4628      	mov	r0, r5
 800cb94:	f7f3 fd48 	bl	8000628 <__aeabi_dmul>
 800cb98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb9c:	9415      	str	r4, [sp, #84]	@ 0x54
 800cb9e:	4656      	mov	r6, sl
 800cba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cba4:	f7f3 fff0 	bl	8000b88 <__aeabi_d2iz>
 800cba8:	4605      	mov	r5, r0
 800cbaa:	f7f3 fcd3 	bl	8000554 <__aeabi_i2d>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbb6:	f7f3 fb7f 	bl	80002b8 <__aeabi_dsub>
 800cbba:	3530      	adds	r5, #48	@ 0x30
 800cbbc:	f806 5b01 	strb.w	r5, [r6], #1
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	42a6      	cmp	r6, r4
 800cbc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cbca:	f04f 0200 	mov.w	r2, #0
 800cbce:	d124      	bne.n	800cc1a <_dtoa_r+0x662>
 800cbd0:	4bac      	ldr	r3, [pc, #688]	@ (800ce84 <_dtoa_r+0x8cc>)
 800cbd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cbd6:	f7f3 fb71 	bl	80002bc <__adddf3>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	460b      	mov	r3, r1
 800cbde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbe2:	f7f3 ffb1 	bl	8000b48 <__aeabi_dcmpgt>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d145      	bne.n	800cc76 <_dtoa_r+0x6be>
 800cbea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cbee:	49a5      	ldr	r1, [pc, #660]	@ (800ce84 <_dtoa_r+0x8cc>)
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	f7f3 fb61 	bl	80002b8 <__aeabi_dsub>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbfe:	f7f3 ff85 	bl	8000b0c <__aeabi_dcmplt>
 800cc02:	2800      	cmp	r0, #0
 800cc04:	f43f aef5 	beq.w	800c9f2 <_dtoa_r+0x43a>
 800cc08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cc0a:	1e73      	subs	r3, r6, #1
 800cc0c:	9315      	str	r3, [sp, #84]	@ 0x54
 800cc0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cc12:	2b30      	cmp	r3, #48	@ 0x30
 800cc14:	d0f8      	beq.n	800cc08 <_dtoa_r+0x650>
 800cc16:	9f04      	ldr	r7, [sp, #16]
 800cc18:	e73e      	b.n	800ca98 <_dtoa_r+0x4e0>
 800cc1a:	4b9b      	ldr	r3, [pc, #620]	@ (800ce88 <_dtoa_r+0x8d0>)
 800cc1c:	f7f3 fd04 	bl	8000628 <__aeabi_dmul>
 800cc20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc24:	e7bc      	b.n	800cba0 <_dtoa_r+0x5e8>
 800cc26:	d10c      	bne.n	800cc42 <_dtoa_r+0x68a>
 800cc28:	4b98      	ldr	r3, [pc, #608]	@ (800ce8c <_dtoa_r+0x8d4>)
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc30:	f7f3 fcfa 	bl	8000628 <__aeabi_dmul>
 800cc34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc38:	f7f3 ff7c 	bl	8000b34 <__aeabi_dcmpge>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	f000 8157 	beq.w	800cef0 <_dtoa_r+0x938>
 800cc42:	2400      	movs	r4, #0
 800cc44:	4625      	mov	r5, r4
 800cc46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc48:	43db      	mvns	r3, r3
 800cc4a:	9304      	str	r3, [sp, #16]
 800cc4c:	4656      	mov	r6, sl
 800cc4e:	2700      	movs	r7, #0
 800cc50:	4621      	mov	r1, r4
 800cc52:	4658      	mov	r0, fp
 800cc54:	f000 fbb4 	bl	800d3c0 <_Bfree>
 800cc58:	2d00      	cmp	r5, #0
 800cc5a:	d0dc      	beq.n	800cc16 <_dtoa_r+0x65e>
 800cc5c:	b12f      	cbz	r7, 800cc6a <_dtoa_r+0x6b2>
 800cc5e:	42af      	cmp	r7, r5
 800cc60:	d003      	beq.n	800cc6a <_dtoa_r+0x6b2>
 800cc62:	4639      	mov	r1, r7
 800cc64:	4658      	mov	r0, fp
 800cc66:	f000 fbab 	bl	800d3c0 <_Bfree>
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	4658      	mov	r0, fp
 800cc6e:	f000 fba7 	bl	800d3c0 <_Bfree>
 800cc72:	e7d0      	b.n	800cc16 <_dtoa_r+0x65e>
 800cc74:	9704      	str	r7, [sp, #16]
 800cc76:	4633      	mov	r3, r6
 800cc78:	461e      	mov	r6, r3
 800cc7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc7e:	2a39      	cmp	r2, #57	@ 0x39
 800cc80:	d107      	bne.n	800cc92 <_dtoa_r+0x6da>
 800cc82:	459a      	cmp	sl, r3
 800cc84:	d1f8      	bne.n	800cc78 <_dtoa_r+0x6c0>
 800cc86:	9a04      	ldr	r2, [sp, #16]
 800cc88:	3201      	adds	r2, #1
 800cc8a:	9204      	str	r2, [sp, #16]
 800cc8c:	2230      	movs	r2, #48	@ 0x30
 800cc8e:	f88a 2000 	strb.w	r2, [sl]
 800cc92:	781a      	ldrb	r2, [r3, #0]
 800cc94:	3201      	adds	r2, #1
 800cc96:	701a      	strb	r2, [r3, #0]
 800cc98:	e7bd      	b.n	800cc16 <_dtoa_r+0x65e>
 800cc9a:	4b7b      	ldr	r3, [pc, #492]	@ (800ce88 <_dtoa_r+0x8d0>)
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f7f3 fcc3 	bl	8000628 <__aeabi_dmul>
 800cca2:	2200      	movs	r2, #0
 800cca4:	2300      	movs	r3, #0
 800cca6:	4604      	mov	r4, r0
 800cca8:	460d      	mov	r5, r1
 800ccaa:	f7f3 ff25 	bl	8000af8 <__aeabi_dcmpeq>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	f43f aebb 	beq.w	800ca2a <_dtoa_r+0x472>
 800ccb4:	e6f0      	b.n	800ca98 <_dtoa_r+0x4e0>
 800ccb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ccb8:	2a00      	cmp	r2, #0
 800ccba:	f000 80db 	beq.w	800ce74 <_dtoa_r+0x8bc>
 800ccbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccc0:	2a01      	cmp	r2, #1
 800ccc2:	f300 80bf 	bgt.w	800ce44 <_dtoa_r+0x88c>
 800ccc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ccc8:	2a00      	cmp	r2, #0
 800ccca:	f000 80b7 	beq.w	800ce3c <_dtoa_r+0x884>
 800ccce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ccd2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ccd4:	4646      	mov	r6, r8
 800ccd6:	9a08      	ldr	r2, [sp, #32]
 800ccd8:	2101      	movs	r1, #1
 800ccda:	441a      	add	r2, r3
 800ccdc:	4658      	mov	r0, fp
 800ccde:	4498      	add	r8, r3
 800cce0:	9208      	str	r2, [sp, #32]
 800cce2:	f000 fc21 	bl	800d528 <__i2b>
 800cce6:	4605      	mov	r5, r0
 800cce8:	b15e      	cbz	r6, 800cd02 <_dtoa_r+0x74a>
 800ccea:	9b08      	ldr	r3, [sp, #32]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	dd08      	ble.n	800cd02 <_dtoa_r+0x74a>
 800ccf0:	42b3      	cmp	r3, r6
 800ccf2:	9a08      	ldr	r2, [sp, #32]
 800ccf4:	bfa8      	it	ge
 800ccf6:	4633      	movge	r3, r6
 800ccf8:	eba8 0803 	sub.w	r8, r8, r3
 800ccfc:	1af6      	subs	r6, r6, r3
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	9308      	str	r3, [sp, #32]
 800cd02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd04:	b1f3      	cbz	r3, 800cd44 <_dtoa_r+0x78c>
 800cd06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f000 80b7 	beq.w	800ce7c <_dtoa_r+0x8c4>
 800cd0e:	b18c      	cbz	r4, 800cd34 <_dtoa_r+0x77c>
 800cd10:	4629      	mov	r1, r5
 800cd12:	4622      	mov	r2, r4
 800cd14:	4658      	mov	r0, fp
 800cd16:	f000 fcc7 	bl	800d6a8 <__pow5mult>
 800cd1a:	464a      	mov	r2, r9
 800cd1c:	4601      	mov	r1, r0
 800cd1e:	4605      	mov	r5, r0
 800cd20:	4658      	mov	r0, fp
 800cd22:	f000 fc17 	bl	800d554 <__multiply>
 800cd26:	4649      	mov	r1, r9
 800cd28:	9004      	str	r0, [sp, #16]
 800cd2a:	4658      	mov	r0, fp
 800cd2c:	f000 fb48 	bl	800d3c0 <_Bfree>
 800cd30:	9b04      	ldr	r3, [sp, #16]
 800cd32:	4699      	mov	r9, r3
 800cd34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd36:	1b1a      	subs	r2, r3, r4
 800cd38:	d004      	beq.n	800cd44 <_dtoa_r+0x78c>
 800cd3a:	4649      	mov	r1, r9
 800cd3c:	4658      	mov	r0, fp
 800cd3e:	f000 fcb3 	bl	800d6a8 <__pow5mult>
 800cd42:	4681      	mov	r9, r0
 800cd44:	2101      	movs	r1, #1
 800cd46:	4658      	mov	r0, fp
 800cd48:	f000 fbee 	bl	800d528 <__i2b>
 800cd4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd4e:	4604      	mov	r4, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f000 81cf 	beq.w	800d0f4 <_dtoa_r+0xb3c>
 800cd56:	461a      	mov	r2, r3
 800cd58:	4601      	mov	r1, r0
 800cd5a:	4658      	mov	r0, fp
 800cd5c:	f000 fca4 	bl	800d6a8 <__pow5mult>
 800cd60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	4604      	mov	r4, r0
 800cd66:	f300 8095 	bgt.w	800ce94 <_dtoa_r+0x8dc>
 800cd6a:	9b02      	ldr	r3, [sp, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f040 8087 	bne.w	800ce80 <_dtoa_r+0x8c8>
 800cd72:	9b03      	ldr	r3, [sp, #12]
 800cd74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f040 8089 	bne.w	800ce90 <_dtoa_r+0x8d8>
 800cd7e:	9b03      	ldr	r3, [sp, #12]
 800cd80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cd84:	0d1b      	lsrs	r3, r3, #20
 800cd86:	051b      	lsls	r3, r3, #20
 800cd88:	b12b      	cbz	r3, 800cd96 <_dtoa_r+0x7de>
 800cd8a:	9b08      	ldr	r3, [sp, #32]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	9308      	str	r3, [sp, #32]
 800cd90:	f108 0801 	add.w	r8, r8, #1
 800cd94:	2301      	movs	r3, #1
 800cd96:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f000 81b0 	beq.w	800d100 <_dtoa_r+0xb48>
 800cda0:	6923      	ldr	r3, [r4, #16]
 800cda2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cda6:	6918      	ldr	r0, [r3, #16]
 800cda8:	f000 fb72 	bl	800d490 <__hi0bits>
 800cdac:	f1c0 0020 	rsb	r0, r0, #32
 800cdb0:	9b08      	ldr	r3, [sp, #32]
 800cdb2:	4418      	add	r0, r3
 800cdb4:	f010 001f 	ands.w	r0, r0, #31
 800cdb8:	d077      	beq.n	800ceaa <_dtoa_r+0x8f2>
 800cdba:	f1c0 0320 	rsb	r3, r0, #32
 800cdbe:	2b04      	cmp	r3, #4
 800cdc0:	dd6b      	ble.n	800ce9a <_dtoa_r+0x8e2>
 800cdc2:	9b08      	ldr	r3, [sp, #32]
 800cdc4:	f1c0 001c 	rsb	r0, r0, #28
 800cdc8:	4403      	add	r3, r0
 800cdca:	4480      	add	r8, r0
 800cdcc:	4406      	add	r6, r0
 800cdce:	9308      	str	r3, [sp, #32]
 800cdd0:	f1b8 0f00 	cmp.w	r8, #0
 800cdd4:	dd05      	ble.n	800cde2 <_dtoa_r+0x82a>
 800cdd6:	4649      	mov	r1, r9
 800cdd8:	4642      	mov	r2, r8
 800cdda:	4658      	mov	r0, fp
 800cddc:	f000 fcbe 	bl	800d75c <__lshift>
 800cde0:	4681      	mov	r9, r0
 800cde2:	9b08      	ldr	r3, [sp, #32]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	dd05      	ble.n	800cdf4 <_dtoa_r+0x83c>
 800cde8:	4621      	mov	r1, r4
 800cdea:	461a      	mov	r2, r3
 800cdec:	4658      	mov	r0, fp
 800cdee:	f000 fcb5 	bl	800d75c <__lshift>
 800cdf2:	4604      	mov	r4, r0
 800cdf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d059      	beq.n	800ceae <_dtoa_r+0x8f6>
 800cdfa:	4621      	mov	r1, r4
 800cdfc:	4648      	mov	r0, r9
 800cdfe:	f000 fd19 	bl	800d834 <__mcmp>
 800ce02:	2800      	cmp	r0, #0
 800ce04:	da53      	bge.n	800ceae <_dtoa_r+0x8f6>
 800ce06:	1e7b      	subs	r3, r7, #1
 800ce08:	9304      	str	r3, [sp, #16]
 800ce0a:	4649      	mov	r1, r9
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	220a      	movs	r2, #10
 800ce10:	4658      	mov	r0, fp
 800ce12:	f000 faf7 	bl	800d404 <__multadd>
 800ce16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce18:	4681      	mov	r9, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f000 8172 	beq.w	800d104 <_dtoa_r+0xb4c>
 800ce20:	2300      	movs	r3, #0
 800ce22:	4629      	mov	r1, r5
 800ce24:	220a      	movs	r2, #10
 800ce26:	4658      	mov	r0, fp
 800ce28:	f000 faec 	bl	800d404 <__multadd>
 800ce2c:	9b00      	ldr	r3, [sp, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	4605      	mov	r5, r0
 800ce32:	dc67      	bgt.n	800cf04 <_dtoa_r+0x94c>
 800ce34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	dc41      	bgt.n	800cebe <_dtoa_r+0x906>
 800ce3a:	e063      	b.n	800cf04 <_dtoa_r+0x94c>
 800ce3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ce3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ce42:	e746      	b.n	800ccd2 <_dtoa_r+0x71a>
 800ce44:	9b07      	ldr	r3, [sp, #28]
 800ce46:	1e5c      	subs	r4, r3, #1
 800ce48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce4a:	42a3      	cmp	r3, r4
 800ce4c:	bfbf      	itttt	lt
 800ce4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ce50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ce52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ce54:	1ae3      	sublt	r3, r4, r3
 800ce56:	bfb4      	ite	lt
 800ce58:	18d2      	addlt	r2, r2, r3
 800ce5a:	1b1c      	subge	r4, r3, r4
 800ce5c:	9b07      	ldr	r3, [sp, #28]
 800ce5e:	bfbc      	itt	lt
 800ce60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ce62:	2400      	movlt	r4, #0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	bfb5      	itete	lt
 800ce68:	eba8 0603 	sublt.w	r6, r8, r3
 800ce6c:	9b07      	ldrge	r3, [sp, #28]
 800ce6e:	2300      	movlt	r3, #0
 800ce70:	4646      	movge	r6, r8
 800ce72:	e730      	b.n	800ccd6 <_dtoa_r+0x71e>
 800ce74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ce76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ce78:	4646      	mov	r6, r8
 800ce7a:	e735      	b.n	800cce8 <_dtoa_r+0x730>
 800ce7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce7e:	e75c      	b.n	800cd3a <_dtoa_r+0x782>
 800ce80:	2300      	movs	r3, #0
 800ce82:	e788      	b.n	800cd96 <_dtoa_r+0x7de>
 800ce84:	3fe00000 	.word	0x3fe00000
 800ce88:	40240000 	.word	0x40240000
 800ce8c:	40140000 	.word	0x40140000
 800ce90:	9b02      	ldr	r3, [sp, #8]
 800ce92:	e780      	b.n	800cd96 <_dtoa_r+0x7de>
 800ce94:	2300      	movs	r3, #0
 800ce96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce98:	e782      	b.n	800cda0 <_dtoa_r+0x7e8>
 800ce9a:	d099      	beq.n	800cdd0 <_dtoa_r+0x818>
 800ce9c:	9a08      	ldr	r2, [sp, #32]
 800ce9e:	331c      	adds	r3, #28
 800cea0:	441a      	add	r2, r3
 800cea2:	4498      	add	r8, r3
 800cea4:	441e      	add	r6, r3
 800cea6:	9208      	str	r2, [sp, #32]
 800cea8:	e792      	b.n	800cdd0 <_dtoa_r+0x818>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	e7f6      	b.n	800ce9c <_dtoa_r+0x8e4>
 800ceae:	9b07      	ldr	r3, [sp, #28]
 800ceb0:	9704      	str	r7, [sp, #16]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	dc20      	bgt.n	800cef8 <_dtoa_r+0x940>
 800ceb6:	9300      	str	r3, [sp, #0]
 800ceb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	dd1e      	ble.n	800cefc <_dtoa_r+0x944>
 800cebe:	9b00      	ldr	r3, [sp, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	f47f aec0 	bne.w	800cc46 <_dtoa_r+0x68e>
 800cec6:	4621      	mov	r1, r4
 800cec8:	2205      	movs	r2, #5
 800ceca:	4658      	mov	r0, fp
 800cecc:	f000 fa9a 	bl	800d404 <__multadd>
 800ced0:	4601      	mov	r1, r0
 800ced2:	4604      	mov	r4, r0
 800ced4:	4648      	mov	r0, r9
 800ced6:	f000 fcad 	bl	800d834 <__mcmp>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	f77f aeb3 	ble.w	800cc46 <_dtoa_r+0x68e>
 800cee0:	4656      	mov	r6, sl
 800cee2:	2331      	movs	r3, #49	@ 0x31
 800cee4:	f806 3b01 	strb.w	r3, [r6], #1
 800cee8:	9b04      	ldr	r3, [sp, #16]
 800ceea:	3301      	adds	r3, #1
 800ceec:	9304      	str	r3, [sp, #16]
 800ceee:	e6ae      	b.n	800cc4e <_dtoa_r+0x696>
 800cef0:	9c07      	ldr	r4, [sp, #28]
 800cef2:	9704      	str	r7, [sp, #16]
 800cef4:	4625      	mov	r5, r4
 800cef6:	e7f3      	b.n	800cee0 <_dtoa_r+0x928>
 800cef8:	9b07      	ldr	r3, [sp, #28]
 800cefa:	9300      	str	r3, [sp, #0]
 800cefc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f000 8104 	beq.w	800d10c <_dtoa_r+0xb54>
 800cf04:	2e00      	cmp	r6, #0
 800cf06:	dd05      	ble.n	800cf14 <_dtoa_r+0x95c>
 800cf08:	4629      	mov	r1, r5
 800cf0a:	4632      	mov	r2, r6
 800cf0c:	4658      	mov	r0, fp
 800cf0e:	f000 fc25 	bl	800d75c <__lshift>
 800cf12:	4605      	mov	r5, r0
 800cf14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d05a      	beq.n	800cfd0 <_dtoa_r+0xa18>
 800cf1a:	6869      	ldr	r1, [r5, #4]
 800cf1c:	4658      	mov	r0, fp
 800cf1e:	f000 fa0f 	bl	800d340 <_Balloc>
 800cf22:	4606      	mov	r6, r0
 800cf24:	b928      	cbnz	r0, 800cf32 <_dtoa_r+0x97a>
 800cf26:	4b84      	ldr	r3, [pc, #528]	@ (800d138 <_dtoa_r+0xb80>)
 800cf28:	4602      	mov	r2, r0
 800cf2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cf2e:	f7ff bb5a 	b.w	800c5e6 <_dtoa_r+0x2e>
 800cf32:	692a      	ldr	r2, [r5, #16]
 800cf34:	3202      	adds	r2, #2
 800cf36:	0092      	lsls	r2, r2, #2
 800cf38:	f105 010c 	add.w	r1, r5, #12
 800cf3c:	300c      	adds	r0, #12
 800cf3e:	f001 f997 	bl	800e270 <memcpy>
 800cf42:	2201      	movs	r2, #1
 800cf44:	4631      	mov	r1, r6
 800cf46:	4658      	mov	r0, fp
 800cf48:	f000 fc08 	bl	800d75c <__lshift>
 800cf4c:	f10a 0301 	add.w	r3, sl, #1
 800cf50:	9307      	str	r3, [sp, #28]
 800cf52:	9b00      	ldr	r3, [sp, #0]
 800cf54:	4453      	add	r3, sl
 800cf56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf58:	9b02      	ldr	r3, [sp, #8]
 800cf5a:	f003 0301 	and.w	r3, r3, #1
 800cf5e:	462f      	mov	r7, r5
 800cf60:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf62:	4605      	mov	r5, r0
 800cf64:	9b07      	ldr	r3, [sp, #28]
 800cf66:	4621      	mov	r1, r4
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	4648      	mov	r0, r9
 800cf6c:	9300      	str	r3, [sp, #0]
 800cf6e:	f7ff fa9b 	bl	800c4a8 <quorem>
 800cf72:	4639      	mov	r1, r7
 800cf74:	9002      	str	r0, [sp, #8]
 800cf76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cf7a:	4648      	mov	r0, r9
 800cf7c:	f000 fc5a 	bl	800d834 <__mcmp>
 800cf80:	462a      	mov	r2, r5
 800cf82:	9008      	str	r0, [sp, #32]
 800cf84:	4621      	mov	r1, r4
 800cf86:	4658      	mov	r0, fp
 800cf88:	f000 fc70 	bl	800d86c <__mdiff>
 800cf8c:	68c2      	ldr	r2, [r0, #12]
 800cf8e:	4606      	mov	r6, r0
 800cf90:	bb02      	cbnz	r2, 800cfd4 <_dtoa_r+0xa1c>
 800cf92:	4601      	mov	r1, r0
 800cf94:	4648      	mov	r0, r9
 800cf96:	f000 fc4d 	bl	800d834 <__mcmp>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	4631      	mov	r1, r6
 800cf9e:	4658      	mov	r0, fp
 800cfa0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cfa2:	f000 fa0d 	bl	800d3c0 <_Bfree>
 800cfa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfaa:	9e07      	ldr	r6, [sp, #28]
 800cfac:	ea43 0102 	orr.w	r1, r3, r2
 800cfb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfb2:	4319      	orrs	r1, r3
 800cfb4:	d110      	bne.n	800cfd8 <_dtoa_r+0xa20>
 800cfb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cfba:	d029      	beq.n	800d010 <_dtoa_r+0xa58>
 800cfbc:	9b08      	ldr	r3, [sp, #32]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	dd02      	ble.n	800cfc8 <_dtoa_r+0xa10>
 800cfc2:	9b02      	ldr	r3, [sp, #8]
 800cfc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cfc8:	9b00      	ldr	r3, [sp, #0]
 800cfca:	f883 8000 	strb.w	r8, [r3]
 800cfce:	e63f      	b.n	800cc50 <_dtoa_r+0x698>
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	e7bb      	b.n	800cf4c <_dtoa_r+0x994>
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	e7e1      	b.n	800cf9c <_dtoa_r+0x9e4>
 800cfd8:	9b08      	ldr	r3, [sp, #32]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	db04      	blt.n	800cfe8 <_dtoa_r+0xa30>
 800cfde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cfe0:	430b      	orrs	r3, r1
 800cfe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cfe4:	430b      	orrs	r3, r1
 800cfe6:	d120      	bne.n	800d02a <_dtoa_r+0xa72>
 800cfe8:	2a00      	cmp	r2, #0
 800cfea:	dded      	ble.n	800cfc8 <_dtoa_r+0xa10>
 800cfec:	4649      	mov	r1, r9
 800cfee:	2201      	movs	r2, #1
 800cff0:	4658      	mov	r0, fp
 800cff2:	f000 fbb3 	bl	800d75c <__lshift>
 800cff6:	4621      	mov	r1, r4
 800cff8:	4681      	mov	r9, r0
 800cffa:	f000 fc1b 	bl	800d834 <__mcmp>
 800cffe:	2800      	cmp	r0, #0
 800d000:	dc03      	bgt.n	800d00a <_dtoa_r+0xa52>
 800d002:	d1e1      	bne.n	800cfc8 <_dtoa_r+0xa10>
 800d004:	f018 0f01 	tst.w	r8, #1
 800d008:	d0de      	beq.n	800cfc8 <_dtoa_r+0xa10>
 800d00a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d00e:	d1d8      	bne.n	800cfc2 <_dtoa_r+0xa0a>
 800d010:	9a00      	ldr	r2, [sp, #0]
 800d012:	2339      	movs	r3, #57	@ 0x39
 800d014:	7013      	strb	r3, [r2, #0]
 800d016:	4633      	mov	r3, r6
 800d018:	461e      	mov	r6, r3
 800d01a:	3b01      	subs	r3, #1
 800d01c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d020:	2a39      	cmp	r2, #57	@ 0x39
 800d022:	d052      	beq.n	800d0ca <_dtoa_r+0xb12>
 800d024:	3201      	adds	r2, #1
 800d026:	701a      	strb	r2, [r3, #0]
 800d028:	e612      	b.n	800cc50 <_dtoa_r+0x698>
 800d02a:	2a00      	cmp	r2, #0
 800d02c:	dd07      	ble.n	800d03e <_dtoa_r+0xa86>
 800d02e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d032:	d0ed      	beq.n	800d010 <_dtoa_r+0xa58>
 800d034:	9a00      	ldr	r2, [sp, #0]
 800d036:	f108 0301 	add.w	r3, r8, #1
 800d03a:	7013      	strb	r3, [r2, #0]
 800d03c:	e608      	b.n	800cc50 <_dtoa_r+0x698>
 800d03e:	9b07      	ldr	r3, [sp, #28]
 800d040:	9a07      	ldr	r2, [sp, #28]
 800d042:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d048:	4293      	cmp	r3, r2
 800d04a:	d028      	beq.n	800d09e <_dtoa_r+0xae6>
 800d04c:	4649      	mov	r1, r9
 800d04e:	2300      	movs	r3, #0
 800d050:	220a      	movs	r2, #10
 800d052:	4658      	mov	r0, fp
 800d054:	f000 f9d6 	bl	800d404 <__multadd>
 800d058:	42af      	cmp	r7, r5
 800d05a:	4681      	mov	r9, r0
 800d05c:	f04f 0300 	mov.w	r3, #0
 800d060:	f04f 020a 	mov.w	r2, #10
 800d064:	4639      	mov	r1, r7
 800d066:	4658      	mov	r0, fp
 800d068:	d107      	bne.n	800d07a <_dtoa_r+0xac2>
 800d06a:	f000 f9cb 	bl	800d404 <__multadd>
 800d06e:	4607      	mov	r7, r0
 800d070:	4605      	mov	r5, r0
 800d072:	9b07      	ldr	r3, [sp, #28]
 800d074:	3301      	adds	r3, #1
 800d076:	9307      	str	r3, [sp, #28]
 800d078:	e774      	b.n	800cf64 <_dtoa_r+0x9ac>
 800d07a:	f000 f9c3 	bl	800d404 <__multadd>
 800d07e:	4629      	mov	r1, r5
 800d080:	4607      	mov	r7, r0
 800d082:	2300      	movs	r3, #0
 800d084:	220a      	movs	r2, #10
 800d086:	4658      	mov	r0, fp
 800d088:	f000 f9bc 	bl	800d404 <__multadd>
 800d08c:	4605      	mov	r5, r0
 800d08e:	e7f0      	b.n	800d072 <_dtoa_r+0xaba>
 800d090:	9b00      	ldr	r3, [sp, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	bfcc      	ite	gt
 800d096:	461e      	movgt	r6, r3
 800d098:	2601      	movle	r6, #1
 800d09a:	4456      	add	r6, sl
 800d09c:	2700      	movs	r7, #0
 800d09e:	4649      	mov	r1, r9
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	4658      	mov	r0, fp
 800d0a4:	f000 fb5a 	bl	800d75c <__lshift>
 800d0a8:	4621      	mov	r1, r4
 800d0aa:	4681      	mov	r9, r0
 800d0ac:	f000 fbc2 	bl	800d834 <__mcmp>
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	dcb0      	bgt.n	800d016 <_dtoa_r+0xa5e>
 800d0b4:	d102      	bne.n	800d0bc <_dtoa_r+0xb04>
 800d0b6:	f018 0f01 	tst.w	r8, #1
 800d0ba:	d1ac      	bne.n	800d016 <_dtoa_r+0xa5e>
 800d0bc:	4633      	mov	r3, r6
 800d0be:	461e      	mov	r6, r3
 800d0c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0c4:	2a30      	cmp	r2, #48	@ 0x30
 800d0c6:	d0fa      	beq.n	800d0be <_dtoa_r+0xb06>
 800d0c8:	e5c2      	b.n	800cc50 <_dtoa_r+0x698>
 800d0ca:	459a      	cmp	sl, r3
 800d0cc:	d1a4      	bne.n	800d018 <_dtoa_r+0xa60>
 800d0ce:	9b04      	ldr	r3, [sp, #16]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	9304      	str	r3, [sp, #16]
 800d0d4:	2331      	movs	r3, #49	@ 0x31
 800d0d6:	f88a 3000 	strb.w	r3, [sl]
 800d0da:	e5b9      	b.n	800cc50 <_dtoa_r+0x698>
 800d0dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d0de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d13c <_dtoa_r+0xb84>
 800d0e2:	b11b      	cbz	r3, 800d0ec <_dtoa_r+0xb34>
 800d0e4:	f10a 0308 	add.w	r3, sl, #8
 800d0e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d0ea:	6013      	str	r3, [r2, #0]
 800d0ec:	4650      	mov	r0, sl
 800d0ee:	b019      	add	sp, #100	@ 0x64
 800d0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	f77f ae37 	ble.w	800cd6a <_dtoa_r+0x7b2>
 800d0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800d100:	2001      	movs	r0, #1
 800d102:	e655      	b.n	800cdb0 <_dtoa_r+0x7f8>
 800d104:	9b00      	ldr	r3, [sp, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	f77f aed6 	ble.w	800ceb8 <_dtoa_r+0x900>
 800d10c:	4656      	mov	r6, sl
 800d10e:	4621      	mov	r1, r4
 800d110:	4648      	mov	r0, r9
 800d112:	f7ff f9c9 	bl	800c4a8 <quorem>
 800d116:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d11a:	f806 8b01 	strb.w	r8, [r6], #1
 800d11e:	9b00      	ldr	r3, [sp, #0]
 800d120:	eba6 020a 	sub.w	r2, r6, sl
 800d124:	4293      	cmp	r3, r2
 800d126:	ddb3      	ble.n	800d090 <_dtoa_r+0xad8>
 800d128:	4649      	mov	r1, r9
 800d12a:	2300      	movs	r3, #0
 800d12c:	220a      	movs	r2, #10
 800d12e:	4658      	mov	r0, fp
 800d130:	f000 f968 	bl	800d404 <__multadd>
 800d134:	4681      	mov	r9, r0
 800d136:	e7ea      	b.n	800d10e <_dtoa_r+0xb56>
 800d138:	08077384 	.word	0x08077384
 800d13c:	0807731f 	.word	0x0807731f

0800d140 <_free_r>:
 800d140:	b538      	push	{r3, r4, r5, lr}
 800d142:	4605      	mov	r5, r0
 800d144:	2900      	cmp	r1, #0
 800d146:	d041      	beq.n	800d1cc <_free_r+0x8c>
 800d148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d14c:	1f0c      	subs	r4, r1, #4
 800d14e:	2b00      	cmp	r3, #0
 800d150:	bfb8      	it	lt
 800d152:	18e4      	addlt	r4, r4, r3
 800d154:	f000 f8e8 	bl	800d328 <__malloc_lock>
 800d158:	4a1d      	ldr	r2, [pc, #116]	@ (800d1d0 <_free_r+0x90>)
 800d15a:	6813      	ldr	r3, [r2, #0]
 800d15c:	b933      	cbnz	r3, 800d16c <_free_r+0x2c>
 800d15e:	6063      	str	r3, [r4, #4]
 800d160:	6014      	str	r4, [r2, #0]
 800d162:	4628      	mov	r0, r5
 800d164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d168:	f000 b8e4 	b.w	800d334 <__malloc_unlock>
 800d16c:	42a3      	cmp	r3, r4
 800d16e:	d908      	bls.n	800d182 <_free_r+0x42>
 800d170:	6820      	ldr	r0, [r4, #0]
 800d172:	1821      	adds	r1, r4, r0
 800d174:	428b      	cmp	r3, r1
 800d176:	bf01      	itttt	eq
 800d178:	6819      	ldreq	r1, [r3, #0]
 800d17a:	685b      	ldreq	r3, [r3, #4]
 800d17c:	1809      	addeq	r1, r1, r0
 800d17e:	6021      	streq	r1, [r4, #0]
 800d180:	e7ed      	b.n	800d15e <_free_r+0x1e>
 800d182:	461a      	mov	r2, r3
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	b10b      	cbz	r3, 800d18c <_free_r+0x4c>
 800d188:	42a3      	cmp	r3, r4
 800d18a:	d9fa      	bls.n	800d182 <_free_r+0x42>
 800d18c:	6811      	ldr	r1, [r2, #0]
 800d18e:	1850      	adds	r0, r2, r1
 800d190:	42a0      	cmp	r0, r4
 800d192:	d10b      	bne.n	800d1ac <_free_r+0x6c>
 800d194:	6820      	ldr	r0, [r4, #0]
 800d196:	4401      	add	r1, r0
 800d198:	1850      	adds	r0, r2, r1
 800d19a:	4283      	cmp	r3, r0
 800d19c:	6011      	str	r1, [r2, #0]
 800d19e:	d1e0      	bne.n	800d162 <_free_r+0x22>
 800d1a0:	6818      	ldr	r0, [r3, #0]
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	6053      	str	r3, [r2, #4]
 800d1a6:	4408      	add	r0, r1
 800d1a8:	6010      	str	r0, [r2, #0]
 800d1aa:	e7da      	b.n	800d162 <_free_r+0x22>
 800d1ac:	d902      	bls.n	800d1b4 <_free_r+0x74>
 800d1ae:	230c      	movs	r3, #12
 800d1b0:	602b      	str	r3, [r5, #0]
 800d1b2:	e7d6      	b.n	800d162 <_free_r+0x22>
 800d1b4:	6820      	ldr	r0, [r4, #0]
 800d1b6:	1821      	adds	r1, r4, r0
 800d1b8:	428b      	cmp	r3, r1
 800d1ba:	bf04      	itt	eq
 800d1bc:	6819      	ldreq	r1, [r3, #0]
 800d1be:	685b      	ldreq	r3, [r3, #4]
 800d1c0:	6063      	str	r3, [r4, #4]
 800d1c2:	bf04      	itt	eq
 800d1c4:	1809      	addeq	r1, r1, r0
 800d1c6:	6021      	streq	r1, [r4, #0]
 800d1c8:	6054      	str	r4, [r2, #4]
 800d1ca:	e7ca      	b.n	800d162 <_free_r+0x22>
 800d1cc:	bd38      	pop	{r3, r4, r5, pc}
 800d1ce:	bf00      	nop
 800d1d0:	20040ac8 	.word	0x20040ac8

0800d1d4 <malloc>:
 800d1d4:	4b02      	ldr	r3, [pc, #8]	@ (800d1e0 <malloc+0xc>)
 800d1d6:	4601      	mov	r1, r0
 800d1d8:	6818      	ldr	r0, [r3, #0]
 800d1da:	f000 b825 	b.w	800d228 <_malloc_r>
 800d1de:	bf00      	nop
 800d1e0:	200400c8 	.word	0x200400c8

0800d1e4 <sbrk_aligned>:
 800d1e4:	b570      	push	{r4, r5, r6, lr}
 800d1e6:	4e0f      	ldr	r6, [pc, #60]	@ (800d224 <sbrk_aligned+0x40>)
 800d1e8:	460c      	mov	r4, r1
 800d1ea:	6831      	ldr	r1, [r6, #0]
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	b911      	cbnz	r1, 800d1f6 <sbrk_aligned+0x12>
 800d1f0:	f001 f82e 	bl	800e250 <_sbrk_r>
 800d1f4:	6030      	str	r0, [r6, #0]
 800d1f6:	4621      	mov	r1, r4
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	f001 f829 	bl	800e250 <_sbrk_r>
 800d1fe:	1c43      	adds	r3, r0, #1
 800d200:	d103      	bne.n	800d20a <sbrk_aligned+0x26>
 800d202:	f04f 34ff 	mov.w	r4, #4294967295
 800d206:	4620      	mov	r0, r4
 800d208:	bd70      	pop	{r4, r5, r6, pc}
 800d20a:	1cc4      	adds	r4, r0, #3
 800d20c:	f024 0403 	bic.w	r4, r4, #3
 800d210:	42a0      	cmp	r0, r4
 800d212:	d0f8      	beq.n	800d206 <sbrk_aligned+0x22>
 800d214:	1a21      	subs	r1, r4, r0
 800d216:	4628      	mov	r0, r5
 800d218:	f001 f81a 	bl	800e250 <_sbrk_r>
 800d21c:	3001      	adds	r0, #1
 800d21e:	d1f2      	bne.n	800d206 <sbrk_aligned+0x22>
 800d220:	e7ef      	b.n	800d202 <sbrk_aligned+0x1e>
 800d222:	bf00      	nop
 800d224:	20040ac4 	.word	0x20040ac4

0800d228 <_malloc_r>:
 800d228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d22c:	1ccd      	adds	r5, r1, #3
 800d22e:	f025 0503 	bic.w	r5, r5, #3
 800d232:	3508      	adds	r5, #8
 800d234:	2d0c      	cmp	r5, #12
 800d236:	bf38      	it	cc
 800d238:	250c      	movcc	r5, #12
 800d23a:	2d00      	cmp	r5, #0
 800d23c:	4606      	mov	r6, r0
 800d23e:	db01      	blt.n	800d244 <_malloc_r+0x1c>
 800d240:	42a9      	cmp	r1, r5
 800d242:	d904      	bls.n	800d24e <_malloc_r+0x26>
 800d244:	230c      	movs	r3, #12
 800d246:	6033      	str	r3, [r6, #0]
 800d248:	2000      	movs	r0, #0
 800d24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d24e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d324 <_malloc_r+0xfc>
 800d252:	f000 f869 	bl	800d328 <__malloc_lock>
 800d256:	f8d8 3000 	ldr.w	r3, [r8]
 800d25a:	461c      	mov	r4, r3
 800d25c:	bb44      	cbnz	r4, 800d2b0 <_malloc_r+0x88>
 800d25e:	4629      	mov	r1, r5
 800d260:	4630      	mov	r0, r6
 800d262:	f7ff ffbf 	bl	800d1e4 <sbrk_aligned>
 800d266:	1c43      	adds	r3, r0, #1
 800d268:	4604      	mov	r4, r0
 800d26a:	d158      	bne.n	800d31e <_malloc_r+0xf6>
 800d26c:	f8d8 4000 	ldr.w	r4, [r8]
 800d270:	4627      	mov	r7, r4
 800d272:	2f00      	cmp	r7, #0
 800d274:	d143      	bne.n	800d2fe <_malloc_r+0xd6>
 800d276:	2c00      	cmp	r4, #0
 800d278:	d04b      	beq.n	800d312 <_malloc_r+0xea>
 800d27a:	6823      	ldr	r3, [r4, #0]
 800d27c:	4639      	mov	r1, r7
 800d27e:	4630      	mov	r0, r6
 800d280:	eb04 0903 	add.w	r9, r4, r3
 800d284:	f000 ffe4 	bl	800e250 <_sbrk_r>
 800d288:	4581      	cmp	r9, r0
 800d28a:	d142      	bne.n	800d312 <_malloc_r+0xea>
 800d28c:	6821      	ldr	r1, [r4, #0]
 800d28e:	1a6d      	subs	r5, r5, r1
 800d290:	4629      	mov	r1, r5
 800d292:	4630      	mov	r0, r6
 800d294:	f7ff ffa6 	bl	800d1e4 <sbrk_aligned>
 800d298:	3001      	adds	r0, #1
 800d29a:	d03a      	beq.n	800d312 <_malloc_r+0xea>
 800d29c:	6823      	ldr	r3, [r4, #0]
 800d29e:	442b      	add	r3, r5
 800d2a0:	6023      	str	r3, [r4, #0]
 800d2a2:	f8d8 3000 	ldr.w	r3, [r8]
 800d2a6:	685a      	ldr	r2, [r3, #4]
 800d2a8:	bb62      	cbnz	r2, 800d304 <_malloc_r+0xdc>
 800d2aa:	f8c8 7000 	str.w	r7, [r8]
 800d2ae:	e00f      	b.n	800d2d0 <_malloc_r+0xa8>
 800d2b0:	6822      	ldr	r2, [r4, #0]
 800d2b2:	1b52      	subs	r2, r2, r5
 800d2b4:	d420      	bmi.n	800d2f8 <_malloc_r+0xd0>
 800d2b6:	2a0b      	cmp	r2, #11
 800d2b8:	d917      	bls.n	800d2ea <_malloc_r+0xc2>
 800d2ba:	1961      	adds	r1, r4, r5
 800d2bc:	42a3      	cmp	r3, r4
 800d2be:	6025      	str	r5, [r4, #0]
 800d2c0:	bf18      	it	ne
 800d2c2:	6059      	strne	r1, [r3, #4]
 800d2c4:	6863      	ldr	r3, [r4, #4]
 800d2c6:	bf08      	it	eq
 800d2c8:	f8c8 1000 	streq.w	r1, [r8]
 800d2cc:	5162      	str	r2, [r4, r5]
 800d2ce:	604b      	str	r3, [r1, #4]
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	f000 f82f 	bl	800d334 <__malloc_unlock>
 800d2d6:	f104 000b 	add.w	r0, r4, #11
 800d2da:	1d23      	adds	r3, r4, #4
 800d2dc:	f020 0007 	bic.w	r0, r0, #7
 800d2e0:	1ac2      	subs	r2, r0, r3
 800d2e2:	bf1c      	itt	ne
 800d2e4:	1a1b      	subne	r3, r3, r0
 800d2e6:	50a3      	strne	r3, [r4, r2]
 800d2e8:	e7af      	b.n	800d24a <_malloc_r+0x22>
 800d2ea:	6862      	ldr	r2, [r4, #4]
 800d2ec:	42a3      	cmp	r3, r4
 800d2ee:	bf0c      	ite	eq
 800d2f0:	f8c8 2000 	streq.w	r2, [r8]
 800d2f4:	605a      	strne	r2, [r3, #4]
 800d2f6:	e7eb      	b.n	800d2d0 <_malloc_r+0xa8>
 800d2f8:	4623      	mov	r3, r4
 800d2fa:	6864      	ldr	r4, [r4, #4]
 800d2fc:	e7ae      	b.n	800d25c <_malloc_r+0x34>
 800d2fe:	463c      	mov	r4, r7
 800d300:	687f      	ldr	r7, [r7, #4]
 800d302:	e7b6      	b.n	800d272 <_malloc_r+0x4a>
 800d304:	461a      	mov	r2, r3
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	42a3      	cmp	r3, r4
 800d30a:	d1fb      	bne.n	800d304 <_malloc_r+0xdc>
 800d30c:	2300      	movs	r3, #0
 800d30e:	6053      	str	r3, [r2, #4]
 800d310:	e7de      	b.n	800d2d0 <_malloc_r+0xa8>
 800d312:	230c      	movs	r3, #12
 800d314:	6033      	str	r3, [r6, #0]
 800d316:	4630      	mov	r0, r6
 800d318:	f000 f80c 	bl	800d334 <__malloc_unlock>
 800d31c:	e794      	b.n	800d248 <_malloc_r+0x20>
 800d31e:	6005      	str	r5, [r0, #0]
 800d320:	e7d6      	b.n	800d2d0 <_malloc_r+0xa8>
 800d322:	bf00      	nop
 800d324:	20040ac8 	.word	0x20040ac8

0800d328 <__malloc_lock>:
 800d328:	4801      	ldr	r0, [pc, #4]	@ (800d330 <__malloc_lock+0x8>)
 800d32a:	f7ff b89c 	b.w	800c466 <__retarget_lock_acquire_recursive>
 800d32e:	bf00      	nop
 800d330:	20040ac0 	.word	0x20040ac0

0800d334 <__malloc_unlock>:
 800d334:	4801      	ldr	r0, [pc, #4]	@ (800d33c <__malloc_unlock+0x8>)
 800d336:	f7ff b897 	b.w	800c468 <__retarget_lock_release_recursive>
 800d33a:	bf00      	nop
 800d33c:	20040ac0 	.word	0x20040ac0

0800d340 <_Balloc>:
 800d340:	b570      	push	{r4, r5, r6, lr}
 800d342:	69c6      	ldr	r6, [r0, #28]
 800d344:	4604      	mov	r4, r0
 800d346:	460d      	mov	r5, r1
 800d348:	b976      	cbnz	r6, 800d368 <_Balloc+0x28>
 800d34a:	2010      	movs	r0, #16
 800d34c:	f7ff ff42 	bl	800d1d4 <malloc>
 800d350:	4602      	mov	r2, r0
 800d352:	61e0      	str	r0, [r4, #28]
 800d354:	b920      	cbnz	r0, 800d360 <_Balloc+0x20>
 800d356:	4b18      	ldr	r3, [pc, #96]	@ (800d3b8 <_Balloc+0x78>)
 800d358:	4818      	ldr	r0, [pc, #96]	@ (800d3bc <_Balloc+0x7c>)
 800d35a:	216b      	movs	r1, #107	@ 0x6b
 800d35c:	f7ff f886 	bl	800c46c <__assert_func>
 800d360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d364:	6006      	str	r6, [r0, #0]
 800d366:	60c6      	str	r6, [r0, #12]
 800d368:	69e6      	ldr	r6, [r4, #28]
 800d36a:	68f3      	ldr	r3, [r6, #12]
 800d36c:	b183      	cbz	r3, 800d390 <_Balloc+0x50>
 800d36e:	69e3      	ldr	r3, [r4, #28]
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d376:	b9b8      	cbnz	r0, 800d3a8 <_Balloc+0x68>
 800d378:	2101      	movs	r1, #1
 800d37a:	fa01 f605 	lsl.w	r6, r1, r5
 800d37e:	1d72      	adds	r2, r6, #5
 800d380:	0092      	lsls	r2, r2, #2
 800d382:	4620      	mov	r0, r4
 800d384:	f000 ff89 	bl	800e29a <_calloc_r>
 800d388:	b160      	cbz	r0, 800d3a4 <_Balloc+0x64>
 800d38a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d38e:	e00e      	b.n	800d3ae <_Balloc+0x6e>
 800d390:	2221      	movs	r2, #33	@ 0x21
 800d392:	2104      	movs	r1, #4
 800d394:	4620      	mov	r0, r4
 800d396:	f000 ff80 	bl	800e29a <_calloc_r>
 800d39a:	69e3      	ldr	r3, [r4, #28]
 800d39c:	60f0      	str	r0, [r6, #12]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1e4      	bne.n	800d36e <_Balloc+0x2e>
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	bd70      	pop	{r4, r5, r6, pc}
 800d3a8:	6802      	ldr	r2, [r0, #0]
 800d3aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d3b4:	e7f7      	b.n	800d3a6 <_Balloc+0x66>
 800d3b6:	bf00      	nop
 800d3b8:	08077240 	.word	0x08077240
 800d3bc:	08077395 	.word	0x08077395

0800d3c0 <_Bfree>:
 800d3c0:	b570      	push	{r4, r5, r6, lr}
 800d3c2:	69c6      	ldr	r6, [r0, #28]
 800d3c4:	4605      	mov	r5, r0
 800d3c6:	460c      	mov	r4, r1
 800d3c8:	b976      	cbnz	r6, 800d3e8 <_Bfree+0x28>
 800d3ca:	2010      	movs	r0, #16
 800d3cc:	f7ff ff02 	bl	800d1d4 <malloc>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	61e8      	str	r0, [r5, #28]
 800d3d4:	b920      	cbnz	r0, 800d3e0 <_Bfree+0x20>
 800d3d6:	4b09      	ldr	r3, [pc, #36]	@ (800d3fc <_Bfree+0x3c>)
 800d3d8:	4809      	ldr	r0, [pc, #36]	@ (800d400 <_Bfree+0x40>)
 800d3da:	218f      	movs	r1, #143	@ 0x8f
 800d3dc:	f7ff f846 	bl	800c46c <__assert_func>
 800d3e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3e4:	6006      	str	r6, [r0, #0]
 800d3e6:	60c6      	str	r6, [r0, #12]
 800d3e8:	b13c      	cbz	r4, 800d3fa <_Bfree+0x3a>
 800d3ea:	69eb      	ldr	r3, [r5, #28]
 800d3ec:	6862      	ldr	r2, [r4, #4]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3f4:	6021      	str	r1, [r4, #0]
 800d3f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3fa:	bd70      	pop	{r4, r5, r6, pc}
 800d3fc:	08077240 	.word	0x08077240
 800d400:	08077395 	.word	0x08077395

0800d404 <__multadd>:
 800d404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d408:	690d      	ldr	r5, [r1, #16]
 800d40a:	4607      	mov	r7, r0
 800d40c:	460c      	mov	r4, r1
 800d40e:	461e      	mov	r6, r3
 800d410:	f101 0c14 	add.w	ip, r1, #20
 800d414:	2000      	movs	r0, #0
 800d416:	f8dc 3000 	ldr.w	r3, [ip]
 800d41a:	b299      	uxth	r1, r3
 800d41c:	fb02 6101 	mla	r1, r2, r1, r6
 800d420:	0c1e      	lsrs	r6, r3, #16
 800d422:	0c0b      	lsrs	r3, r1, #16
 800d424:	fb02 3306 	mla	r3, r2, r6, r3
 800d428:	b289      	uxth	r1, r1
 800d42a:	3001      	adds	r0, #1
 800d42c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d430:	4285      	cmp	r5, r0
 800d432:	f84c 1b04 	str.w	r1, [ip], #4
 800d436:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d43a:	dcec      	bgt.n	800d416 <__multadd+0x12>
 800d43c:	b30e      	cbz	r6, 800d482 <__multadd+0x7e>
 800d43e:	68a3      	ldr	r3, [r4, #8]
 800d440:	42ab      	cmp	r3, r5
 800d442:	dc19      	bgt.n	800d478 <__multadd+0x74>
 800d444:	6861      	ldr	r1, [r4, #4]
 800d446:	4638      	mov	r0, r7
 800d448:	3101      	adds	r1, #1
 800d44a:	f7ff ff79 	bl	800d340 <_Balloc>
 800d44e:	4680      	mov	r8, r0
 800d450:	b928      	cbnz	r0, 800d45e <__multadd+0x5a>
 800d452:	4602      	mov	r2, r0
 800d454:	4b0c      	ldr	r3, [pc, #48]	@ (800d488 <__multadd+0x84>)
 800d456:	480d      	ldr	r0, [pc, #52]	@ (800d48c <__multadd+0x88>)
 800d458:	21ba      	movs	r1, #186	@ 0xba
 800d45a:	f7ff f807 	bl	800c46c <__assert_func>
 800d45e:	6922      	ldr	r2, [r4, #16]
 800d460:	3202      	adds	r2, #2
 800d462:	f104 010c 	add.w	r1, r4, #12
 800d466:	0092      	lsls	r2, r2, #2
 800d468:	300c      	adds	r0, #12
 800d46a:	f000 ff01 	bl	800e270 <memcpy>
 800d46e:	4621      	mov	r1, r4
 800d470:	4638      	mov	r0, r7
 800d472:	f7ff ffa5 	bl	800d3c0 <_Bfree>
 800d476:	4644      	mov	r4, r8
 800d478:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d47c:	3501      	adds	r5, #1
 800d47e:	615e      	str	r6, [r3, #20]
 800d480:	6125      	str	r5, [r4, #16]
 800d482:	4620      	mov	r0, r4
 800d484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d488:	08077384 	.word	0x08077384
 800d48c:	08077395 	.word	0x08077395

0800d490 <__hi0bits>:
 800d490:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d494:	4603      	mov	r3, r0
 800d496:	bf36      	itet	cc
 800d498:	0403      	lslcc	r3, r0, #16
 800d49a:	2000      	movcs	r0, #0
 800d49c:	2010      	movcc	r0, #16
 800d49e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d4a2:	bf3c      	itt	cc
 800d4a4:	021b      	lslcc	r3, r3, #8
 800d4a6:	3008      	addcc	r0, #8
 800d4a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d4ac:	bf3c      	itt	cc
 800d4ae:	011b      	lslcc	r3, r3, #4
 800d4b0:	3004      	addcc	r0, #4
 800d4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4b6:	bf3c      	itt	cc
 800d4b8:	009b      	lslcc	r3, r3, #2
 800d4ba:	3002      	addcc	r0, #2
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	db05      	blt.n	800d4cc <__hi0bits+0x3c>
 800d4c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d4c4:	f100 0001 	add.w	r0, r0, #1
 800d4c8:	bf08      	it	eq
 800d4ca:	2020      	moveq	r0, #32
 800d4cc:	4770      	bx	lr

0800d4ce <__lo0bits>:
 800d4ce:	6803      	ldr	r3, [r0, #0]
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	f013 0007 	ands.w	r0, r3, #7
 800d4d6:	d00b      	beq.n	800d4f0 <__lo0bits+0x22>
 800d4d8:	07d9      	lsls	r1, r3, #31
 800d4da:	d421      	bmi.n	800d520 <__lo0bits+0x52>
 800d4dc:	0798      	lsls	r0, r3, #30
 800d4de:	bf49      	itett	mi
 800d4e0:	085b      	lsrmi	r3, r3, #1
 800d4e2:	089b      	lsrpl	r3, r3, #2
 800d4e4:	2001      	movmi	r0, #1
 800d4e6:	6013      	strmi	r3, [r2, #0]
 800d4e8:	bf5c      	itt	pl
 800d4ea:	6013      	strpl	r3, [r2, #0]
 800d4ec:	2002      	movpl	r0, #2
 800d4ee:	4770      	bx	lr
 800d4f0:	b299      	uxth	r1, r3
 800d4f2:	b909      	cbnz	r1, 800d4f8 <__lo0bits+0x2a>
 800d4f4:	0c1b      	lsrs	r3, r3, #16
 800d4f6:	2010      	movs	r0, #16
 800d4f8:	b2d9      	uxtb	r1, r3
 800d4fa:	b909      	cbnz	r1, 800d500 <__lo0bits+0x32>
 800d4fc:	3008      	adds	r0, #8
 800d4fe:	0a1b      	lsrs	r3, r3, #8
 800d500:	0719      	lsls	r1, r3, #28
 800d502:	bf04      	itt	eq
 800d504:	091b      	lsreq	r3, r3, #4
 800d506:	3004      	addeq	r0, #4
 800d508:	0799      	lsls	r1, r3, #30
 800d50a:	bf04      	itt	eq
 800d50c:	089b      	lsreq	r3, r3, #2
 800d50e:	3002      	addeq	r0, #2
 800d510:	07d9      	lsls	r1, r3, #31
 800d512:	d403      	bmi.n	800d51c <__lo0bits+0x4e>
 800d514:	085b      	lsrs	r3, r3, #1
 800d516:	f100 0001 	add.w	r0, r0, #1
 800d51a:	d003      	beq.n	800d524 <__lo0bits+0x56>
 800d51c:	6013      	str	r3, [r2, #0]
 800d51e:	4770      	bx	lr
 800d520:	2000      	movs	r0, #0
 800d522:	4770      	bx	lr
 800d524:	2020      	movs	r0, #32
 800d526:	4770      	bx	lr

0800d528 <__i2b>:
 800d528:	b510      	push	{r4, lr}
 800d52a:	460c      	mov	r4, r1
 800d52c:	2101      	movs	r1, #1
 800d52e:	f7ff ff07 	bl	800d340 <_Balloc>
 800d532:	4602      	mov	r2, r0
 800d534:	b928      	cbnz	r0, 800d542 <__i2b+0x1a>
 800d536:	4b05      	ldr	r3, [pc, #20]	@ (800d54c <__i2b+0x24>)
 800d538:	4805      	ldr	r0, [pc, #20]	@ (800d550 <__i2b+0x28>)
 800d53a:	f240 1145 	movw	r1, #325	@ 0x145
 800d53e:	f7fe ff95 	bl	800c46c <__assert_func>
 800d542:	2301      	movs	r3, #1
 800d544:	6144      	str	r4, [r0, #20]
 800d546:	6103      	str	r3, [r0, #16]
 800d548:	bd10      	pop	{r4, pc}
 800d54a:	bf00      	nop
 800d54c:	08077384 	.word	0x08077384
 800d550:	08077395 	.word	0x08077395

0800d554 <__multiply>:
 800d554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d558:	4614      	mov	r4, r2
 800d55a:	690a      	ldr	r2, [r1, #16]
 800d55c:	6923      	ldr	r3, [r4, #16]
 800d55e:	429a      	cmp	r2, r3
 800d560:	bfa8      	it	ge
 800d562:	4623      	movge	r3, r4
 800d564:	460f      	mov	r7, r1
 800d566:	bfa4      	itt	ge
 800d568:	460c      	movge	r4, r1
 800d56a:	461f      	movge	r7, r3
 800d56c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d570:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d574:	68a3      	ldr	r3, [r4, #8]
 800d576:	6861      	ldr	r1, [r4, #4]
 800d578:	eb0a 0609 	add.w	r6, sl, r9
 800d57c:	42b3      	cmp	r3, r6
 800d57e:	b085      	sub	sp, #20
 800d580:	bfb8      	it	lt
 800d582:	3101      	addlt	r1, #1
 800d584:	f7ff fedc 	bl	800d340 <_Balloc>
 800d588:	b930      	cbnz	r0, 800d598 <__multiply+0x44>
 800d58a:	4602      	mov	r2, r0
 800d58c:	4b44      	ldr	r3, [pc, #272]	@ (800d6a0 <__multiply+0x14c>)
 800d58e:	4845      	ldr	r0, [pc, #276]	@ (800d6a4 <__multiply+0x150>)
 800d590:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d594:	f7fe ff6a 	bl	800c46c <__assert_func>
 800d598:	f100 0514 	add.w	r5, r0, #20
 800d59c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d5a0:	462b      	mov	r3, r5
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	4543      	cmp	r3, r8
 800d5a6:	d321      	bcc.n	800d5ec <__multiply+0x98>
 800d5a8:	f107 0114 	add.w	r1, r7, #20
 800d5ac:	f104 0214 	add.w	r2, r4, #20
 800d5b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d5b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d5b8:	9302      	str	r3, [sp, #8]
 800d5ba:	1b13      	subs	r3, r2, r4
 800d5bc:	3b15      	subs	r3, #21
 800d5be:	f023 0303 	bic.w	r3, r3, #3
 800d5c2:	3304      	adds	r3, #4
 800d5c4:	f104 0715 	add.w	r7, r4, #21
 800d5c8:	42ba      	cmp	r2, r7
 800d5ca:	bf38      	it	cc
 800d5cc:	2304      	movcc	r3, #4
 800d5ce:	9301      	str	r3, [sp, #4]
 800d5d0:	9b02      	ldr	r3, [sp, #8]
 800d5d2:	9103      	str	r1, [sp, #12]
 800d5d4:	428b      	cmp	r3, r1
 800d5d6:	d80c      	bhi.n	800d5f2 <__multiply+0x9e>
 800d5d8:	2e00      	cmp	r6, #0
 800d5da:	dd03      	ble.n	800d5e4 <__multiply+0x90>
 800d5dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d05b      	beq.n	800d69c <__multiply+0x148>
 800d5e4:	6106      	str	r6, [r0, #16]
 800d5e6:	b005      	add	sp, #20
 800d5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ec:	f843 2b04 	str.w	r2, [r3], #4
 800d5f0:	e7d8      	b.n	800d5a4 <__multiply+0x50>
 800d5f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d5f6:	f1ba 0f00 	cmp.w	sl, #0
 800d5fa:	d024      	beq.n	800d646 <__multiply+0xf2>
 800d5fc:	f104 0e14 	add.w	lr, r4, #20
 800d600:	46a9      	mov	r9, r5
 800d602:	f04f 0c00 	mov.w	ip, #0
 800d606:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d60a:	f8d9 3000 	ldr.w	r3, [r9]
 800d60e:	fa1f fb87 	uxth.w	fp, r7
 800d612:	b29b      	uxth	r3, r3
 800d614:	fb0a 330b 	mla	r3, sl, fp, r3
 800d618:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d61c:	f8d9 7000 	ldr.w	r7, [r9]
 800d620:	4463      	add	r3, ip
 800d622:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d626:	fb0a c70b 	mla	r7, sl, fp, ip
 800d62a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d62e:	b29b      	uxth	r3, r3
 800d630:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d634:	4572      	cmp	r2, lr
 800d636:	f849 3b04 	str.w	r3, [r9], #4
 800d63a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d63e:	d8e2      	bhi.n	800d606 <__multiply+0xb2>
 800d640:	9b01      	ldr	r3, [sp, #4]
 800d642:	f845 c003 	str.w	ip, [r5, r3]
 800d646:	9b03      	ldr	r3, [sp, #12]
 800d648:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d64c:	3104      	adds	r1, #4
 800d64e:	f1b9 0f00 	cmp.w	r9, #0
 800d652:	d021      	beq.n	800d698 <__multiply+0x144>
 800d654:	682b      	ldr	r3, [r5, #0]
 800d656:	f104 0c14 	add.w	ip, r4, #20
 800d65a:	46ae      	mov	lr, r5
 800d65c:	f04f 0a00 	mov.w	sl, #0
 800d660:	f8bc b000 	ldrh.w	fp, [ip]
 800d664:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d668:	fb09 770b 	mla	r7, r9, fp, r7
 800d66c:	4457      	add	r7, sl
 800d66e:	b29b      	uxth	r3, r3
 800d670:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d674:	f84e 3b04 	str.w	r3, [lr], #4
 800d678:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d67c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d680:	f8be 3000 	ldrh.w	r3, [lr]
 800d684:	fb09 330a 	mla	r3, r9, sl, r3
 800d688:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d68c:	4562      	cmp	r2, ip
 800d68e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d692:	d8e5      	bhi.n	800d660 <__multiply+0x10c>
 800d694:	9f01      	ldr	r7, [sp, #4]
 800d696:	51eb      	str	r3, [r5, r7]
 800d698:	3504      	adds	r5, #4
 800d69a:	e799      	b.n	800d5d0 <__multiply+0x7c>
 800d69c:	3e01      	subs	r6, #1
 800d69e:	e79b      	b.n	800d5d8 <__multiply+0x84>
 800d6a0:	08077384 	.word	0x08077384
 800d6a4:	08077395 	.word	0x08077395

0800d6a8 <__pow5mult>:
 800d6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6ac:	4615      	mov	r5, r2
 800d6ae:	f012 0203 	ands.w	r2, r2, #3
 800d6b2:	4607      	mov	r7, r0
 800d6b4:	460e      	mov	r6, r1
 800d6b6:	d007      	beq.n	800d6c8 <__pow5mult+0x20>
 800d6b8:	4c25      	ldr	r4, [pc, #148]	@ (800d750 <__pow5mult+0xa8>)
 800d6ba:	3a01      	subs	r2, #1
 800d6bc:	2300      	movs	r3, #0
 800d6be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d6c2:	f7ff fe9f 	bl	800d404 <__multadd>
 800d6c6:	4606      	mov	r6, r0
 800d6c8:	10ad      	asrs	r5, r5, #2
 800d6ca:	d03d      	beq.n	800d748 <__pow5mult+0xa0>
 800d6cc:	69fc      	ldr	r4, [r7, #28]
 800d6ce:	b97c      	cbnz	r4, 800d6f0 <__pow5mult+0x48>
 800d6d0:	2010      	movs	r0, #16
 800d6d2:	f7ff fd7f 	bl	800d1d4 <malloc>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	61f8      	str	r0, [r7, #28]
 800d6da:	b928      	cbnz	r0, 800d6e8 <__pow5mult+0x40>
 800d6dc:	4b1d      	ldr	r3, [pc, #116]	@ (800d754 <__pow5mult+0xac>)
 800d6de:	481e      	ldr	r0, [pc, #120]	@ (800d758 <__pow5mult+0xb0>)
 800d6e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d6e4:	f7fe fec2 	bl	800c46c <__assert_func>
 800d6e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6ec:	6004      	str	r4, [r0, #0]
 800d6ee:	60c4      	str	r4, [r0, #12]
 800d6f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d6f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6f8:	b94c      	cbnz	r4, 800d70e <__pow5mult+0x66>
 800d6fa:	f240 2171 	movw	r1, #625	@ 0x271
 800d6fe:	4638      	mov	r0, r7
 800d700:	f7ff ff12 	bl	800d528 <__i2b>
 800d704:	2300      	movs	r3, #0
 800d706:	f8c8 0008 	str.w	r0, [r8, #8]
 800d70a:	4604      	mov	r4, r0
 800d70c:	6003      	str	r3, [r0, #0]
 800d70e:	f04f 0900 	mov.w	r9, #0
 800d712:	07eb      	lsls	r3, r5, #31
 800d714:	d50a      	bpl.n	800d72c <__pow5mult+0x84>
 800d716:	4631      	mov	r1, r6
 800d718:	4622      	mov	r2, r4
 800d71a:	4638      	mov	r0, r7
 800d71c:	f7ff ff1a 	bl	800d554 <__multiply>
 800d720:	4631      	mov	r1, r6
 800d722:	4680      	mov	r8, r0
 800d724:	4638      	mov	r0, r7
 800d726:	f7ff fe4b 	bl	800d3c0 <_Bfree>
 800d72a:	4646      	mov	r6, r8
 800d72c:	106d      	asrs	r5, r5, #1
 800d72e:	d00b      	beq.n	800d748 <__pow5mult+0xa0>
 800d730:	6820      	ldr	r0, [r4, #0]
 800d732:	b938      	cbnz	r0, 800d744 <__pow5mult+0x9c>
 800d734:	4622      	mov	r2, r4
 800d736:	4621      	mov	r1, r4
 800d738:	4638      	mov	r0, r7
 800d73a:	f7ff ff0b 	bl	800d554 <__multiply>
 800d73e:	6020      	str	r0, [r4, #0]
 800d740:	f8c0 9000 	str.w	r9, [r0]
 800d744:	4604      	mov	r4, r0
 800d746:	e7e4      	b.n	800d712 <__pow5mult+0x6a>
 800d748:	4630      	mov	r0, r6
 800d74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d74e:	bf00      	nop
 800d750:	080773f0 	.word	0x080773f0
 800d754:	08077240 	.word	0x08077240
 800d758:	08077395 	.word	0x08077395

0800d75c <__lshift>:
 800d75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d760:	460c      	mov	r4, r1
 800d762:	6849      	ldr	r1, [r1, #4]
 800d764:	6923      	ldr	r3, [r4, #16]
 800d766:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d76a:	68a3      	ldr	r3, [r4, #8]
 800d76c:	4607      	mov	r7, r0
 800d76e:	4691      	mov	r9, r2
 800d770:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d774:	f108 0601 	add.w	r6, r8, #1
 800d778:	42b3      	cmp	r3, r6
 800d77a:	db0b      	blt.n	800d794 <__lshift+0x38>
 800d77c:	4638      	mov	r0, r7
 800d77e:	f7ff fddf 	bl	800d340 <_Balloc>
 800d782:	4605      	mov	r5, r0
 800d784:	b948      	cbnz	r0, 800d79a <__lshift+0x3e>
 800d786:	4602      	mov	r2, r0
 800d788:	4b28      	ldr	r3, [pc, #160]	@ (800d82c <__lshift+0xd0>)
 800d78a:	4829      	ldr	r0, [pc, #164]	@ (800d830 <__lshift+0xd4>)
 800d78c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d790:	f7fe fe6c 	bl	800c46c <__assert_func>
 800d794:	3101      	adds	r1, #1
 800d796:	005b      	lsls	r3, r3, #1
 800d798:	e7ee      	b.n	800d778 <__lshift+0x1c>
 800d79a:	2300      	movs	r3, #0
 800d79c:	f100 0114 	add.w	r1, r0, #20
 800d7a0:	f100 0210 	add.w	r2, r0, #16
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	4553      	cmp	r3, sl
 800d7a8:	db33      	blt.n	800d812 <__lshift+0xb6>
 800d7aa:	6920      	ldr	r0, [r4, #16]
 800d7ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d7b0:	f104 0314 	add.w	r3, r4, #20
 800d7b4:	f019 091f 	ands.w	r9, r9, #31
 800d7b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d7bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d7c0:	d02b      	beq.n	800d81a <__lshift+0xbe>
 800d7c2:	f1c9 0e20 	rsb	lr, r9, #32
 800d7c6:	468a      	mov	sl, r1
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	6818      	ldr	r0, [r3, #0]
 800d7cc:	fa00 f009 	lsl.w	r0, r0, r9
 800d7d0:	4310      	orrs	r0, r2
 800d7d2:	f84a 0b04 	str.w	r0, [sl], #4
 800d7d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7da:	459c      	cmp	ip, r3
 800d7dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d7e0:	d8f3      	bhi.n	800d7ca <__lshift+0x6e>
 800d7e2:	ebac 0304 	sub.w	r3, ip, r4
 800d7e6:	3b15      	subs	r3, #21
 800d7e8:	f023 0303 	bic.w	r3, r3, #3
 800d7ec:	3304      	adds	r3, #4
 800d7ee:	f104 0015 	add.w	r0, r4, #21
 800d7f2:	4584      	cmp	ip, r0
 800d7f4:	bf38      	it	cc
 800d7f6:	2304      	movcc	r3, #4
 800d7f8:	50ca      	str	r2, [r1, r3]
 800d7fa:	b10a      	cbz	r2, 800d800 <__lshift+0xa4>
 800d7fc:	f108 0602 	add.w	r6, r8, #2
 800d800:	3e01      	subs	r6, #1
 800d802:	4638      	mov	r0, r7
 800d804:	612e      	str	r6, [r5, #16]
 800d806:	4621      	mov	r1, r4
 800d808:	f7ff fdda 	bl	800d3c0 <_Bfree>
 800d80c:	4628      	mov	r0, r5
 800d80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d812:	f842 0f04 	str.w	r0, [r2, #4]!
 800d816:	3301      	adds	r3, #1
 800d818:	e7c5      	b.n	800d7a6 <__lshift+0x4a>
 800d81a:	3904      	subs	r1, #4
 800d81c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d820:	f841 2f04 	str.w	r2, [r1, #4]!
 800d824:	459c      	cmp	ip, r3
 800d826:	d8f9      	bhi.n	800d81c <__lshift+0xc0>
 800d828:	e7ea      	b.n	800d800 <__lshift+0xa4>
 800d82a:	bf00      	nop
 800d82c:	08077384 	.word	0x08077384
 800d830:	08077395 	.word	0x08077395

0800d834 <__mcmp>:
 800d834:	690a      	ldr	r2, [r1, #16]
 800d836:	4603      	mov	r3, r0
 800d838:	6900      	ldr	r0, [r0, #16]
 800d83a:	1a80      	subs	r0, r0, r2
 800d83c:	b530      	push	{r4, r5, lr}
 800d83e:	d10e      	bne.n	800d85e <__mcmp+0x2a>
 800d840:	3314      	adds	r3, #20
 800d842:	3114      	adds	r1, #20
 800d844:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d848:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d84c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d850:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d854:	4295      	cmp	r5, r2
 800d856:	d003      	beq.n	800d860 <__mcmp+0x2c>
 800d858:	d205      	bcs.n	800d866 <__mcmp+0x32>
 800d85a:	f04f 30ff 	mov.w	r0, #4294967295
 800d85e:	bd30      	pop	{r4, r5, pc}
 800d860:	42a3      	cmp	r3, r4
 800d862:	d3f3      	bcc.n	800d84c <__mcmp+0x18>
 800d864:	e7fb      	b.n	800d85e <__mcmp+0x2a>
 800d866:	2001      	movs	r0, #1
 800d868:	e7f9      	b.n	800d85e <__mcmp+0x2a>
	...

0800d86c <__mdiff>:
 800d86c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d870:	4689      	mov	r9, r1
 800d872:	4606      	mov	r6, r0
 800d874:	4611      	mov	r1, r2
 800d876:	4648      	mov	r0, r9
 800d878:	4614      	mov	r4, r2
 800d87a:	f7ff ffdb 	bl	800d834 <__mcmp>
 800d87e:	1e05      	subs	r5, r0, #0
 800d880:	d112      	bne.n	800d8a8 <__mdiff+0x3c>
 800d882:	4629      	mov	r1, r5
 800d884:	4630      	mov	r0, r6
 800d886:	f7ff fd5b 	bl	800d340 <_Balloc>
 800d88a:	4602      	mov	r2, r0
 800d88c:	b928      	cbnz	r0, 800d89a <__mdiff+0x2e>
 800d88e:	4b3f      	ldr	r3, [pc, #252]	@ (800d98c <__mdiff+0x120>)
 800d890:	f240 2137 	movw	r1, #567	@ 0x237
 800d894:	483e      	ldr	r0, [pc, #248]	@ (800d990 <__mdiff+0x124>)
 800d896:	f7fe fde9 	bl	800c46c <__assert_func>
 800d89a:	2301      	movs	r3, #1
 800d89c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d8a0:	4610      	mov	r0, r2
 800d8a2:	b003      	add	sp, #12
 800d8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8a8:	bfbc      	itt	lt
 800d8aa:	464b      	movlt	r3, r9
 800d8ac:	46a1      	movlt	r9, r4
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d8b4:	bfba      	itte	lt
 800d8b6:	461c      	movlt	r4, r3
 800d8b8:	2501      	movlt	r5, #1
 800d8ba:	2500      	movge	r5, #0
 800d8bc:	f7ff fd40 	bl	800d340 <_Balloc>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	b918      	cbnz	r0, 800d8cc <__mdiff+0x60>
 800d8c4:	4b31      	ldr	r3, [pc, #196]	@ (800d98c <__mdiff+0x120>)
 800d8c6:	f240 2145 	movw	r1, #581	@ 0x245
 800d8ca:	e7e3      	b.n	800d894 <__mdiff+0x28>
 800d8cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d8d0:	6926      	ldr	r6, [r4, #16]
 800d8d2:	60c5      	str	r5, [r0, #12]
 800d8d4:	f109 0310 	add.w	r3, r9, #16
 800d8d8:	f109 0514 	add.w	r5, r9, #20
 800d8dc:	f104 0e14 	add.w	lr, r4, #20
 800d8e0:	f100 0b14 	add.w	fp, r0, #20
 800d8e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d8e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d8ec:	9301      	str	r3, [sp, #4]
 800d8ee:	46d9      	mov	r9, fp
 800d8f0:	f04f 0c00 	mov.w	ip, #0
 800d8f4:	9b01      	ldr	r3, [sp, #4]
 800d8f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d8fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d8fe:	9301      	str	r3, [sp, #4]
 800d900:	fa1f f38a 	uxth.w	r3, sl
 800d904:	4619      	mov	r1, r3
 800d906:	b283      	uxth	r3, r0
 800d908:	1acb      	subs	r3, r1, r3
 800d90a:	0c00      	lsrs	r0, r0, #16
 800d90c:	4463      	add	r3, ip
 800d90e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d912:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d916:	b29b      	uxth	r3, r3
 800d918:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d91c:	4576      	cmp	r6, lr
 800d91e:	f849 3b04 	str.w	r3, [r9], #4
 800d922:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d926:	d8e5      	bhi.n	800d8f4 <__mdiff+0x88>
 800d928:	1b33      	subs	r3, r6, r4
 800d92a:	3b15      	subs	r3, #21
 800d92c:	f023 0303 	bic.w	r3, r3, #3
 800d930:	3415      	adds	r4, #21
 800d932:	3304      	adds	r3, #4
 800d934:	42a6      	cmp	r6, r4
 800d936:	bf38      	it	cc
 800d938:	2304      	movcc	r3, #4
 800d93a:	441d      	add	r5, r3
 800d93c:	445b      	add	r3, fp
 800d93e:	461e      	mov	r6, r3
 800d940:	462c      	mov	r4, r5
 800d942:	4544      	cmp	r4, r8
 800d944:	d30e      	bcc.n	800d964 <__mdiff+0xf8>
 800d946:	f108 0103 	add.w	r1, r8, #3
 800d94a:	1b49      	subs	r1, r1, r5
 800d94c:	f021 0103 	bic.w	r1, r1, #3
 800d950:	3d03      	subs	r5, #3
 800d952:	45a8      	cmp	r8, r5
 800d954:	bf38      	it	cc
 800d956:	2100      	movcc	r1, #0
 800d958:	440b      	add	r3, r1
 800d95a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d95e:	b191      	cbz	r1, 800d986 <__mdiff+0x11a>
 800d960:	6117      	str	r7, [r2, #16]
 800d962:	e79d      	b.n	800d8a0 <__mdiff+0x34>
 800d964:	f854 1b04 	ldr.w	r1, [r4], #4
 800d968:	46e6      	mov	lr, ip
 800d96a:	0c08      	lsrs	r0, r1, #16
 800d96c:	fa1c fc81 	uxtah	ip, ip, r1
 800d970:	4471      	add	r1, lr
 800d972:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d976:	b289      	uxth	r1, r1
 800d978:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d97c:	f846 1b04 	str.w	r1, [r6], #4
 800d980:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d984:	e7dd      	b.n	800d942 <__mdiff+0xd6>
 800d986:	3f01      	subs	r7, #1
 800d988:	e7e7      	b.n	800d95a <__mdiff+0xee>
 800d98a:	bf00      	nop
 800d98c:	08077384 	.word	0x08077384
 800d990:	08077395 	.word	0x08077395

0800d994 <__d2b>:
 800d994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d998:	460f      	mov	r7, r1
 800d99a:	2101      	movs	r1, #1
 800d99c:	ec59 8b10 	vmov	r8, r9, d0
 800d9a0:	4616      	mov	r6, r2
 800d9a2:	f7ff fccd 	bl	800d340 <_Balloc>
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	b930      	cbnz	r0, 800d9b8 <__d2b+0x24>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	4b23      	ldr	r3, [pc, #140]	@ (800da3c <__d2b+0xa8>)
 800d9ae:	4824      	ldr	r0, [pc, #144]	@ (800da40 <__d2b+0xac>)
 800d9b0:	f240 310f 	movw	r1, #783	@ 0x30f
 800d9b4:	f7fe fd5a 	bl	800c46c <__assert_func>
 800d9b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d9bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d9c0:	b10d      	cbz	r5, 800d9c6 <__d2b+0x32>
 800d9c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d9c6:	9301      	str	r3, [sp, #4]
 800d9c8:	f1b8 0300 	subs.w	r3, r8, #0
 800d9cc:	d023      	beq.n	800da16 <__d2b+0x82>
 800d9ce:	4668      	mov	r0, sp
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	f7ff fd7c 	bl	800d4ce <__lo0bits>
 800d9d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d9da:	b1d0      	cbz	r0, 800da12 <__d2b+0x7e>
 800d9dc:	f1c0 0320 	rsb	r3, r0, #32
 800d9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d9e4:	430b      	orrs	r3, r1
 800d9e6:	40c2      	lsrs	r2, r0
 800d9e8:	6163      	str	r3, [r4, #20]
 800d9ea:	9201      	str	r2, [sp, #4]
 800d9ec:	9b01      	ldr	r3, [sp, #4]
 800d9ee:	61a3      	str	r3, [r4, #24]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	bf0c      	ite	eq
 800d9f4:	2201      	moveq	r2, #1
 800d9f6:	2202      	movne	r2, #2
 800d9f8:	6122      	str	r2, [r4, #16]
 800d9fa:	b1a5      	cbz	r5, 800da26 <__d2b+0x92>
 800d9fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800da00:	4405      	add	r5, r0
 800da02:	603d      	str	r5, [r7, #0]
 800da04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800da08:	6030      	str	r0, [r6, #0]
 800da0a:	4620      	mov	r0, r4
 800da0c:	b003      	add	sp, #12
 800da0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da12:	6161      	str	r1, [r4, #20]
 800da14:	e7ea      	b.n	800d9ec <__d2b+0x58>
 800da16:	a801      	add	r0, sp, #4
 800da18:	f7ff fd59 	bl	800d4ce <__lo0bits>
 800da1c:	9b01      	ldr	r3, [sp, #4]
 800da1e:	6163      	str	r3, [r4, #20]
 800da20:	3020      	adds	r0, #32
 800da22:	2201      	movs	r2, #1
 800da24:	e7e8      	b.n	800d9f8 <__d2b+0x64>
 800da26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800da2e:	6038      	str	r0, [r7, #0]
 800da30:	6918      	ldr	r0, [r3, #16]
 800da32:	f7ff fd2d 	bl	800d490 <__hi0bits>
 800da36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da3a:	e7e5      	b.n	800da08 <__d2b+0x74>
 800da3c:	08077384 	.word	0x08077384
 800da40:	08077395 	.word	0x08077395

0800da44 <__ssputs_r>:
 800da44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da48:	688e      	ldr	r6, [r1, #8]
 800da4a:	461f      	mov	r7, r3
 800da4c:	42be      	cmp	r6, r7
 800da4e:	680b      	ldr	r3, [r1, #0]
 800da50:	4682      	mov	sl, r0
 800da52:	460c      	mov	r4, r1
 800da54:	4690      	mov	r8, r2
 800da56:	d82d      	bhi.n	800dab4 <__ssputs_r+0x70>
 800da58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da60:	d026      	beq.n	800dab0 <__ssputs_r+0x6c>
 800da62:	6965      	ldr	r5, [r4, #20]
 800da64:	6909      	ldr	r1, [r1, #16]
 800da66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da6a:	eba3 0901 	sub.w	r9, r3, r1
 800da6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da72:	1c7b      	adds	r3, r7, #1
 800da74:	444b      	add	r3, r9
 800da76:	106d      	asrs	r5, r5, #1
 800da78:	429d      	cmp	r5, r3
 800da7a:	bf38      	it	cc
 800da7c:	461d      	movcc	r5, r3
 800da7e:	0553      	lsls	r3, r2, #21
 800da80:	d527      	bpl.n	800dad2 <__ssputs_r+0x8e>
 800da82:	4629      	mov	r1, r5
 800da84:	f7ff fbd0 	bl	800d228 <_malloc_r>
 800da88:	4606      	mov	r6, r0
 800da8a:	b360      	cbz	r0, 800dae6 <__ssputs_r+0xa2>
 800da8c:	6921      	ldr	r1, [r4, #16]
 800da8e:	464a      	mov	r2, r9
 800da90:	f000 fbee 	bl	800e270 <memcpy>
 800da94:	89a3      	ldrh	r3, [r4, #12]
 800da96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da9e:	81a3      	strh	r3, [r4, #12]
 800daa0:	6126      	str	r6, [r4, #16]
 800daa2:	6165      	str	r5, [r4, #20]
 800daa4:	444e      	add	r6, r9
 800daa6:	eba5 0509 	sub.w	r5, r5, r9
 800daaa:	6026      	str	r6, [r4, #0]
 800daac:	60a5      	str	r5, [r4, #8]
 800daae:	463e      	mov	r6, r7
 800dab0:	42be      	cmp	r6, r7
 800dab2:	d900      	bls.n	800dab6 <__ssputs_r+0x72>
 800dab4:	463e      	mov	r6, r7
 800dab6:	6820      	ldr	r0, [r4, #0]
 800dab8:	4632      	mov	r2, r6
 800daba:	4641      	mov	r1, r8
 800dabc:	f000 fbae 	bl	800e21c <memmove>
 800dac0:	68a3      	ldr	r3, [r4, #8]
 800dac2:	1b9b      	subs	r3, r3, r6
 800dac4:	60a3      	str	r3, [r4, #8]
 800dac6:	6823      	ldr	r3, [r4, #0]
 800dac8:	4433      	add	r3, r6
 800daca:	6023      	str	r3, [r4, #0]
 800dacc:	2000      	movs	r0, #0
 800dace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad2:	462a      	mov	r2, r5
 800dad4:	f000 fc07 	bl	800e2e6 <_realloc_r>
 800dad8:	4606      	mov	r6, r0
 800dada:	2800      	cmp	r0, #0
 800dadc:	d1e0      	bne.n	800daa0 <__ssputs_r+0x5c>
 800dade:	6921      	ldr	r1, [r4, #16]
 800dae0:	4650      	mov	r0, sl
 800dae2:	f7ff fb2d 	bl	800d140 <_free_r>
 800dae6:	230c      	movs	r3, #12
 800dae8:	f8ca 3000 	str.w	r3, [sl]
 800daec:	89a3      	ldrh	r3, [r4, #12]
 800daee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daf2:	81a3      	strh	r3, [r4, #12]
 800daf4:	f04f 30ff 	mov.w	r0, #4294967295
 800daf8:	e7e9      	b.n	800dace <__ssputs_r+0x8a>
	...

0800dafc <_svfiprintf_r>:
 800dafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db00:	4698      	mov	r8, r3
 800db02:	898b      	ldrh	r3, [r1, #12]
 800db04:	061b      	lsls	r3, r3, #24
 800db06:	b09d      	sub	sp, #116	@ 0x74
 800db08:	4607      	mov	r7, r0
 800db0a:	460d      	mov	r5, r1
 800db0c:	4614      	mov	r4, r2
 800db0e:	d510      	bpl.n	800db32 <_svfiprintf_r+0x36>
 800db10:	690b      	ldr	r3, [r1, #16]
 800db12:	b973      	cbnz	r3, 800db32 <_svfiprintf_r+0x36>
 800db14:	2140      	movs	r1, #64	@ 0x40
 800db16:	f7ff fb87 	bl	800d228 <_malloc_r>
 800db1a:	6028      	str	r0, [r5, #0]
 800db1c:	6128      	str	r0, [r5, #16]
 800db1e:	b930      	cbnz	r0, 800db2e <_svfiprintf_r+0x32>
 800db20:	230c      	movs	r3, #12
 800db22:	603b      	str	r3, [r7, #0]
 800db24:	f04f 30ff 	mov.w	r0, #4294967295
 800db28:	b01d      	add	sp, #116	@ 0x74
 800db2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db2e:	2340      	movs	r3, #64	@ 0x40
 800db30:	616b      	str	r3, [r5, #20]
 800db32:	2300      	movs	r3, #0
 800db34:	9309      	str	r3, [sp, #36]	@ 0x24
 800db36:	2320      	movs	r3, #32
 800db38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800db40:	2330      	movs	r3, #48	@ 0x30
 800db42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dce0 <_svfiprintf_r+0x1e4>
 800db46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db4a:	f04f 0901 	mov.w	r9, #1
 800db4e:	4623      	mov	r3, r4
 800db50:	469a      	mov	sl, r3
 800db52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db56:	b10a      	cbz	r2, 800db5c <_svfiprintf_r+0x60>
 800db58:	2a25      	cmp	r2, #37	@ 0x25
 800db5a:	d1f9      	bne.n	800db50 <_svfiprintf_r+0x54>
 800db5c:	ebba 0b04 	subs.w	fp, sl, r4
 800db60:	d00b      	beq.n	800db7a <_svfiprintf_r+0x7e>
 800db62:	465b      	mov	r3, fp
 800db64:	4622      	mov	r2, r4
 800db66:	4629      	mov	r1, r5
 800db68:	4638      	mov	r0, r7
 800db6a:	f7ff ff6b 	bl	800da44 <__ssputs_r>
 800db6e:	3001      	adds	r0, #1
 800db70:	f000 80a7 	beq.w	800dcc2 <_svfiprintf_r+0x1c6>
 800db74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db76:	445a      	add	r2, fp
 800db78:	9209      	str	r2, [sp, #36]	@ 0x24
 800db7a:	f89a 3000 	ldrb.w	r3, [sl]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f000 809f 	beq.w	800dcc2 <_svfiprintf_r+0x1c6>
 800db84:	2300      	movs	r3, #0
 800db86:	f04f 32ff 	mov.w	r2, #4294967295
 800db8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db8e:	f10a 0a01 	add.w	sl, sl, #1
 800db92:	9304      	str	r3, [sp, #16]
 800db94:	9307      	str	r3, [sp, #28]
 800db96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db9a:	931a      	str	r3, [sp, #104]	@ 0x68
 800db9c:	4654      	mov	r4, sl
 800db9e:	2205      	movs	r2, #5
 800dba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dba4:	484e      	ldr	r0, [pc, #312]	@ (800dce0 <_svfiprintf_r+0x1e4>)
 800dba6:	f7f2 fb2b 	bl	8000200 <memchr>
 800dbaa:	9a04      	ldr	r2, [sp, #16]
 800dbac:	b9d8      	cbnz	r0, 800dbe6 <_svfiprintf_r+0xea>
 800dbae:	06d0      	lsls	r0, r2, #27
 800dbb0:	bf44      	itt	mi
 800dbb2:	2320      	movmi	r3, #32
 800dbb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbb8:	0711      	lsls	r1, r2, #28
 800dbba:	bf44      	itt	mi
 800dbbc:	232b      	movmi	r3, #43	@ 0x2b
 800dbbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbc2:	f89a 3000 	ldrb.w	r3, [sl]
 800dbc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbc8:	d015      	beq.n	800dbf6 <_svfiprintf_r+0xfa>
 800dbca:	9a07      	ldr	r2, [sp, #28]
 800dbcc:	4654      	mov	r4, sl
 800dbce:	2000      	movs	r0, #0
 800dbd0:	f04f 0c0a 	mov.w	ip, #10
 800dbd4:	4621      	mov	r1, r4
 800dbd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbda:	3b30      	subs	r3, #48	@ 0x30
 800dbdc:	2b09      	cmp	r3, #9
 800dbde:	d94b      	bls.n	800dc78 <_svfiprintf_r+0x17c>
 800dbe0:	b1b0      	cbz	r0, 800dc10 <_svfiprintf_r+0x114>
 800dbe2:	9207      	str	r2, [sp, #28]
 800dbe4:	e014      	b.n	800dc10 <_svfiprintf_r+0x114>
 800dbe6:	eba0 0308 	sub.w	r3, r0, r8
 800dbea:	fa09 f303 	lsl.w	r3, r9, r3
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	9304      	str	r3, [sp, #16]
 800dbf2:	46a2      	mov	sl, r4
 800dbf4:	e7d2      	b.n	800db9c <_svfiprintf_r+0xa0>
 800dbf6:	9b03      	ldr	r3, [sp, #12]
 800dbf8:	1d19      	adds	r1, r3, #4
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	9103      	str	r1, [sp, #12]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	bfbb      	ittet	lt
 800dc02:	425b      	neglt	r3, r3
 800dc04:	f042 0202 	orrlt.w	r2, r2, #2
 800dc08:	9307      	strge	r3, [sp, #28]
 800dc0a:	9307      	strlt	r3, [sp, #28]
 800dc0c:	bfb8      	it	lt
 800dc0e:	9204      	strlt	r2, [sp, #16]
 800dc10:	7823      	ldrb	r3, [r4, #0]
 800dc12:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc14:	d10a      	bne.n	800dc2c <_svfiprintf_r+0x130>
 800dc16:	7863      	ldrb	r3, [r4, #1]
 800dc18:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc1a:	d132      	bne.n	800dc82 <_svfiprintf_r+0x186>
 800dc1c:	9b03      	ldr	r3, [sp, #12]
 800dc1e:	1d1a      	adds	r2, r3, #4
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	9203      	str	r2, [sp, #12]
 800dc24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc28:	3402      	adds	r4, #2
 800dc2a:	9305      	str	r3, [sp, #20]
 800dc2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dcf0 <_svfiprintf_r+0x1f4>
 800dc30:	7821      	ldrb	r1, [r4, #0]
 800dc32:	2203      	movs	r2, #3
 800dc34:	4650      	mov	r0, sl
 800dc36:	f7f2 fae3 	bl	8000200 <memchr>
 800dc3a:	b138      	cbz	r0, 800dc4c <_svfiprintf_r+0x150>
 800dc3c:	9b04      	ldr	r3, [sp, #16]
 800dc3e:	eba0 000a 	sub.w	r0, r0, sl
 800dc42:	2240      	movs	r2, #64	@ 0x40
 800dc44:	4082      	lsls	r2, r0
 800dc46:	4313      	orrs	r3, r2
 800dc48:	3401      	adds	r4, #1
 800dc4a:	9304      	str	r3, [sp, #16]
 800dc4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc50:	4824      	ldr	r0, [pc, #144]	@ (800dce4 <_svfiprintf_r+0x1e8>)
 800dc52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc56:	2206      	movs	r2, #6
 800dc58:	f7f2 fad2 	bl	8000200 <memchr>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d036      	beq.n	800dcce <_svfiprintf_r+0x1d2>
 800dc60:	4b21      	ldr	r3, [pc, #132]	@ (800dce8 <_svfiprintf_r+0x1ec>)
 800dc62:	bb1b      	cbnz	r3, 800dcac <_svfiprintf_r+0x1b0>
 800dc64:	9b03      	ldr	r3, [sp, #12]
 800dc66:	3307      	adds	r3, #7
 800dc68:	f023 0307 	bic.w	r3, r3, #7
 800dc6c:	3308      	adds	r3, #8
 800dc6e:	9303      	str	r3, [sp, #12]
 800dc70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc72:	4433      	add	r3, r6
 800dc74:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc76:	e76a      	b.n	800db4e <_svfiprintf_r+0x52>
 800dc78:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc7c:	460c      	mov	r4, r1
 800dc7e:	2001      	movs	r0, #1
 800dc80:	e7a8      	b.n	800dbd4 <_svfiprintf_r+0xd8>
 800dc82:	2300      	movs	r3, #0
 800dc84:	3401      	adds	r4, #1
 800dc86:	9305      	str	r3, [sp, #20]
 800dc88:	4619      	mov	r1, r3
 800dc8a:	f04f 0c0a 	mov.w	ip, #10
 800dc8e:	4620      	mov	r0, r4
 800dc90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc94:	3a30      	subs	r2, #48	@ 0x30
 800dc96:	2a09      	cmp	r2, #9
 800dc98:	d903      	bls.n	800dca2 <_svfiprintf_r+0x1a6>
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d0c6      	beq.n	800dc2c <_svfiprintf_r+0x130>
 800dc9e:	9105      	str	r1, [sp, #20]
 800dca0:	e7c4      	b.n	800dc2c <_svfiprintf_r+0x130>
 800dca2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dca6:	4604      	mov	r4, r0
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e7f0      	b.n	800dc8e <_svfiprintf_r+0x192>
 800dcac:	ab03      	add	r3, sp, #12
 800dcae:	9300      	str	r3, [sp, #0]
 800dcb0:	462a      	mov	r2, r5
 800dcb2:	4b0e      	ldr	r3, [pc, #56]	@ (800dcec <_svfiprintf_r+0x1f0>)
 800dcb4:	a904      	add	r1, sp, #16
 800dcb6:	4638      	mov	r0, r7
 800dcb8:	f7fd fe68 	bl	800b98c <_printf_float>
 800dcbc:	1c42      	adds	r2, r0, #1
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	d1d6      	bne.n	800dc70 <_svfiprintf_r+0x174>
 800dcc2:	89ab      	ldrh	r3, [r5, #12]
 800dcc4:	065b      	lsls	r3, r3, #25
 800dcc6:	f53f af2d 	bmi.w	800db24 <_svfiprintf_r+0x28>
 800dcca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dccc:	e72c      	b.n	800db28 <_svfiprintf_r+0x2c>
 800dcce:	ab03      	add	r3, sp, #12
 800dcd0:	9300      	str	r3, [sp, #0]
 800dcd2:	462a      	mov	r2, r5
 800dcd4:	4b05      	ldr	r3, [pc, #20]	@ (800dcec <_svfiprintf_r+0x1f0>)
 800dcd6:	a904      	add	r1, sp, #16
 800dcd8:	4638      	mov	r0, r7
 800dcda:	f7fe f8ef 	bl	800bebc <_printf_i>
 800dcde:	e7ed      	b.n	800dcbc <_svfiprintf_r+0x1c0>
 800dce0:	080774f0 	.word	0x080774f0
 800dce4:	080774fa 	.word	0x080774fa
 800dce8:	0800b98d 	.word	0x0800b98d
 800dcec:	0800da45 	.word	0x0800da45
 800dcf0:	080774f6 	.word	0x080774f6

0800dcf4 <__sfputc_r>:
 800dcf4:	6893      	ldr	r3, [r2, #8]
 800dcf6:	3b01      	subs	r3, #1
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	b410      	push	{r4}
 800dcfc:	6093      	str	r3, [r2, #8]
 800dcfe:	da08      	bge.n	800dd12 <__sfputc_r+0x1e>
 800dd00:	6994      	ldr	r4, [r2, #24]
 800dd02:	42a3      	cmp	r3, r4
 800dd04:	db01      	blt.n	800dd0a <__sfputc_r+0x16>
 800dd06:	290a      	cmp	r1, #10
 800dd08:	d103      	bne.n	800dd12 <__sfputc_r+0x1e>
 800dd0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd0e:	f000 b9f1 	b.w	800e0f4 <__swbuf_r>
 800dd12:	6813      	ldr	r3, [r2, #0]
 800dd14:	1c58      	adds	r0, r3, #1
 800dd16:	6010      	str	r0, [r2, #0]
 800dd18:	7019      	strb	r1, [r3, #0]
 800dd1a:	4608      	mov	r0, r1
 800dd1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd20:	4770      	bx	lr

0800dd22 <__sfputs_r>:
 800dd22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd24:	4606      	mov	r6, r0
 800dd26:	460f      	mov	r7, r1
 800dd28:	4614      	mov	r4, r2
 800dd2a:	18d5      	adds	r5, r2, r3
 800dd2c:	42ac      	cmp	r4, r5
 800dd2e:	d101      	bne.n	800dd34 <__sfputs_r+0x12>
 800dd30:	2000      	movs	r0, #0
 800dd32:	e007      	b.n	800dd44 <__sfputs_r+0x22>
 800dd34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd38:	463a      	mov	r2, r7
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	f7ff ffda 	bl	800dcf4 <__sfputc_r>
 800dd40:	1c43      	adds	r3, r0, #1
 800dd42:	d1f3      	bne.n	800dd2c <__sfputs_r+0xa>
 800dd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd48 <_vfiprintf_r>:
 800dd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4c:	460d      	mov	r5, r1
 800dd4e:	b09d      	sub	sp, #116	@ 0x74
 800dd50:	4614      	mov	r4, r2
 800dd52:	4698      	mov	r8, r3
 800dd54:	4606      	mov	r6, r0
 800dd56:	b118      	cbz	r0, 800dd60 <_vfiprintf_r+0x18>
 800dd58:	6a03      	ldr	r3, [r0, #32]
 800dd5a:	b90b      	cbnz	r3, 800dd60 <_vfiprintf_r+0x18>
 800dd5c:	f7fe fa5a 	bl	800c214 <__sinit>
 800dd60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd62:	07d9      	lsls	r1, r3, #31
 800dd64:	d405      	bmi.n	800dd72 <_vfiprintf_r+0x2a>
 800dd66:	89ab      	ldrh	r3, [r5, #12]
 800dd68:	059a      	lsls	r2, r3, #22
 800dd6a:	d402      	bmi.n	800dd72 <_vfiprintf_r+0x2a>
 800dd6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd6e:	f7fe fb7a 	bl	800c466 <__retarget_lock_acquire_recursive>
 800dd72:	89ab      	ldrh	r3, [r5, #12]
 800dd74:	071b      	lsls	r3, r3, #28
 800dd76:	d501      	bpl.n	800dd7c <_vfiprintf_r+0x34>
 800dd78:	692b      	ldr	r3, [r5, #16]
 800dd7a:	b99b      	cbnz	r3, 800dda4 <_vfiprintf_r+0x5c>
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	4630      	mov	r0, r6
 800dd80:	f000 f9f6 	bl	800e170 <__swsetup_r>
 800dd84:	b170      	cbz	r0, 800dda4 <_vfiprintf_r+0x5c>
 800dd86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd88:	07dc      	lsls	r4, r3, #31
 800dd8a:	d504      	bpl.n	800dd96 <_vfiprintf_r+0x4e>
 800dd8c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd90:	b01d      	add	sp, #116	@ 0x74
 800dd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd96:	89ab      	ldrh	r3, [r5, #12]
 800dd98:	0598      	lsls	r0, r3, #22
 800dd9a:	d4f7      	bmi.n	800dd8c <_vfiprintf_r+0x44>
 800dd9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd9e:	f7fe fb63 	bl	800c468 <__retarget_lock_release_recursive>
 800dda2:	e7f3      	b.n	800dd8c <_vfiprintf_r+0x44>
 800dda4:	2300      	movs	r3, #0
 800dda6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dda8:	2320      	movs	r3, #32
 800ddaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ddae:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddb2:	2330      	movs	r3, #48	@ 0x30
 800ddb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800df64 <_vfiprintf_r+0x21c>
 800ddb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ddbc:	f04f 0901 	mov.w	r9, #1
 800ddc0:	4623      	mov	r3, r4
 800ddc2:	469a      	mov	sl, r3
 800ddc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddc8:	b10a      	cbz	r2, 800ddce <_vfiprintf_r+0x86>
 800ddca:	2a25      	cmp	r2, #37	@ 0x25
 800ddcc:	d1f9      	bne.n	800ddc2 <_vfiprintf_r+0x7a>
 800ddce:	ebba 0b04 	subs.w	fp, sl, r4
 800ddd2:	d00b      	beq.n	800ddec <_vfiprintf_r+0xa4>
 800ddd4:	465b      	mov	r3, fp
 800ddd6:	4622      	mov	r2, r4
 800ddd8:	4629      	mov	r1, r5
 800ddda:	4630      	mov	r0, r6
 800dddc:	f7ff ffa1 	bl	800dd22 <__sfputs_r>
 800dde0:	3001      	adds	r0, #1
 800dde2:	f000 80a7 	beq.w	800df34 <_vfiprintf_r+0x1ec>
 800dde6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dde8:	445a      	add	r2, fp
 800ddea:	9209      	str	r2, [sp, #36]	@ 0x24
 800ddec:	f89a 3000 	ldrb.w	r3, [sl]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	f000 809f 	beq.w	800df34 <_vfiprintf_r+0x1ec>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	f04f 32ff 	mov.w	r2, #4294967295
 800ddfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de00:	f10a 0a01 	add.w	sl, sl, #1
 800de04:	9304      	str	r3, [sp, #16]
 800de06:	9307      	str	r3, [sp, #28]
 800de08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800de0e:	4654      	mov	r4, sl
 800de10:	2205      	movs	r2, #5
 800de12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de16:	4853      	ldr	r0, [pc, #332]	@ (800df64 <_vfiprintf_r+0x21c>)
 800de18:	f7f2 f9f2 	bl	8000200 <memchr>
 800de1c:	9a04      	ldr	r2, [sp, #16]
 800de1e:	b9d8      	cbnz	r0, 800de58 <_vfiprintf_r+0x110>
 800de20:	06d1      	lsls	r1, r2, #27
 800de22:	bf44      	itt	mi
 800de24:	2320      	movmi	r3, #32
 800de26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de2a:	0713      	lsls	r3, r2, #28
 800de2c:	bf44      	itt	mi
 800de2e:	232b      	movmi	r3, #43	@ 0x2b
 800de30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de34:	f89a 3000 	ldrb.w	r3, [sl]
 800de38:	2b2a      	cmp	r3, #42	@ 0x2a
 800de3a:	d015      	beq.n	800de68 <_vfiprintf_r+0x120>
 800de3c:	9a07      	ldr	r2, [sp, #28]
 800de3e:	4654      	mov	r4, sl
 800de40:	2000      	movs	r0, #0
 800de42:	f04f 0c0a 	mov.w	ip, #10
 800de46:	4621      	mov	r1, r4
 800de48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de4c:	3b30      	subs	r3, #48	@ 0x30
 800de4e:	2b09      	cmp	r3, #9
 800de50:	d94b      	bls.n	800deea <_vfiprintf_r+0x1a2>
 800de52:	b1b0      	cbz	r0, 800de82 <_vfiprintf_r+0x13a>
 800de54:	9207      	str	r2, [sp, #28]
 800de56:	e014      	b.n	800de82 <_vfiprintf_r+0x13a>
 800de58:	eba0 0308 	sub.w	r3, r0, r8
 800de5c:	fa09 f303 	lsl.w	r3, r9, r3
 800de60:	4313      	orrs	r3, r2
 800de62:	9304      	str	r3, [sp, #16]
 800de64:	46a2      	mov	sl, r4
 800de66:	e7d2      	b.n	800de0e <_vfiprintf_r+0xc6>
 800de68:	9b03      	ldr	r3, [sp, #12]
 800de6a:	1d19      	adds	r1, r3, #4
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	9103      	str	r1, [sp, #12]
 800de70:	2b00      	cmp	r3, #0
 800de72:	bfbb      	ittet	lt
 800de74:	425b      	neglt	r3, r3
 800de76:	f042 0202 	orrlt.w	r2, r2, #2
 800de7a:	9307      	strge	r3, [sp, #28]
 800de7c:	9307      	strlt	r3, [sp, #28]
 800de7e:	bfb8      	it	lt
 800de80:	9204      	strlt	r2, [sp, #16]
 800de82:	7823      	ldrb	r3, [r4, #0]
 800de84:	2b2e      	cmp	r3, #46	@ 0x2e
 800de86:	d10a      	bne.n	800de9e <_vfiprintf_r+0x156>
 800de88:	7863      	ldrb	r3, [r4, #1]
 800de8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800de8c:	d132      	bne.n	800def4 <_vfiprintf_r+0x1ac>
 800de8e:	9b03      	ldr	r3, [sp, #12]
 800de90:	1d1a      	adds	r2, r3, #4
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	9203      	str	r2, [sp, #12]
 800de96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de9a:	3402      	adds	r4, #2
 800de9c:	9305      	str	r3, [sp, #20]
 800de9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800df74 <_vfiprintf_r+0x22c>
 800dea2:	7821      	ldrb	r1, [r4, #0]
 800dea4:	2203      	movs	r2, #3
 800dea6:	4650      	mov	r0, sl
 800dea8:	f7f2 f9aa 	bl	8000200 <memchr>
 800deac:	b138      	cbz	r0, 800debe <_vfiprintf_r+0x176>
 800deae:	9b04      	ldr	r3, [sp, #16]
 800deb0:	eba0 000a 	sub.w	r0, r0, sl
 800deb4:	2240      	movs	r2, #64	@ 0x40
 800deb6:	4082      	lsls	r2, r0
 800deb8:	4313      	orrs	r3, r2
 800deba:	3401      	adds	r4, #1
 800debc:	9304      	str	r3, [sp, #16]
 800debe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dec2:	4829      	ldr	r0, [pc, #164]	@ (800df68 <_vfiprintf_r+0x220>)
 800dec4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dec8:	2206      	movs	r2, #6
 800deca:	f7f2 f999 	bl	8000200 <memchr>
 800dece:	2800      	cmp	r0, #0
 800ded0:	d03f      	beq.n	800df52 <_vfiprintf_r+0x20a>
 800ded2:	4b26      	ldr	r3, [pc, #152]	@ (800df6c <_vfiprintf_r+0x224>)
 800ded4:	bb1b      	cbnz	r3, 800df1e <_vfiprintf_r+0x1d6>
 800ded6:	9b03      	ldr	r3, [sp, #12]
 800ded8:	3307      	adds	r3, #7
 800deda:	f023 0307 	bic.w	r3, r3, #7
 800dede:	3308      	adds	r3, #8
 800dee0:	9303      	str	r3, [sp, #12]
 800dee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dee4:	443b      	add	r3, r7
 800dee6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dee8:	e76a      	b.n	800ddc0 <_vfiprintf_r+0x78>
 800deea:	fb0c 3202 	mla	r2, ip, r2, r3
 800deee:	460c      	mov	r4, r1
 800def0:	2001      	movs	r0, #1
 800def2:	e7a8      	b.n	800de46 <_vfiprintf_r+0xfe>
 800def4:	2300      	movs	r3, #0
 800def6:	3401      	adds	r4, #1
 800def8:	9305      	str	r3, [sp, #20]
 800defa:	4619      	mov	r1, r3
 800defc:	f04f 0c0a 	mov.w	ip, #10
 800df00:	4620      	mov	r0, r4
 800df02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df06:	3a30      	subs	r2, #48	@ 0x30
 800df08:	2a09      	cmp	r2, #9
 800df0a:	d903      	bls.n	800df14 <_vfiprintf_r+0x1cc>
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d0c6      	beq.n	800de9e <_vfiprintf_r+0x156>
 800df10:	9105      	str	r1, [sp, #20]
 800df12:	e7c4      	b.n	800de9e <_vfiprintf_r+0x156>
 800df14:	fb0c 2101 	mla	r1, ip, r1, r2
 800df18:	4604      	mov	r4, r0
 800df1a:	2301      	movs	r3, #1
 800df1c:	e7f0      	b.n	800df00 <_vfiprintf_r+0x1b8>
 800df1e:	ab03      	add	r3, sp, #12
 800df20:	9300      	str	r3, [sp, #0]
 800df22:	462a      	mov	r2, r5
 800df24:	4b12      	ldr	r3, [pc, #72]	@ (800df70 <_vfiprintf_r+0x228>)
 800df26:	a904      	add	r1, sp, #16
 800df28:	4630      	mov	r0, r6
 800df2a:	f7fd fd2f 	bl	800b98c <_printf_float>
 800df2e:	4607      	mov	r7, r0
 800df30:	1c78      	adds	r0, r7, #1
 800df32:	d1d6      	bne.n	800dee2 <_vfiprintf_r+0x19a>
 800df34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df36:	07d9      	lsls	r1, r3, #31
 800df38:	d405      	bmi.n	800df46 <_vfiprintf_r+0x1fe>
 800df3a:	89ab      	ldrh	r3, [r5, #12]
 800df3c:	059a      	lsls	r2, r3, #22
 800df3e:	d402      	bmi.n	800df46 <_vfiprintf_r+0x1fe>
 800df40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df42:	f7fe fa91 	bl	800c468 <__retarget_lock_release_recursive>
 800df46:	89ab      	ldrh	r3, [r5, #12]
 800df48:	065b      	lsls	r3, r3, #25
 800df4a:	f53f af1f 	bmi.w	800dd8c <_vfiprintf_r+0x44>
 800df4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df50:	e71e      	b.n	800dd90 <_vfiprintf_r+0x48>
 800df52:	ab03      	add	r3, sp, #12
 800df54:	9300      	str	r3, [sp, #0]
 800df56:	462a      	mov	r2, r5
 800df58:	4b05      	ldr	r3, [pc, #20]	@ (800df70 <_vfiprintf_r+0x228>)
 800df5a:	a904      	add	r1, sp, #16
 800df5c:	4630      	mov	r0, r6
 800df5e:	f7fd ffad 	bl	800bebc <_printf_i>
 800df62:	e7e4      	b.n	800df2e <_vfiprintf_r+0x1e6>
 800df64:	080774f0 	.word	0x080774f0
 800df68:	080774fa 	.word	0x080774fa
 800df6c:	0800b98d 	.word	0x0800b98d
 800df70:	0800dd23 	.word	0x0800dd23
 800df74:	080774f6 	.word	0x080774f6

0800df78 <__sflush_r>:
 800df78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df80:	0716      	lsls	r6, r2, #28
 800df82:	4605      	mov	r5, r0
 800df84:	460c      	mov	r4, r1
 800df86:	d454      	bmi.n	800e032 <__sflush_r+0xba>
 800df88:	684b      	ldr	r3, [r1, #4]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	dc02      	bgt.n	800df94 <__sflush_r+0x1c>
 800df8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800df90:	2b00      	cmp	r3, #0
 800df92:	dd48      	ble.n	800e026 <__sflush_r+0xae>
 800df94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df96:	2e00      	cmp	r6, #0
 800df98:	d045      	beq.n	800e026 <__sflush_r+0xae>
 800df9a:	2300      	movs	r3, #0
 800df9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dfa0:	682f      	ldr	r7, [r5, #0]
 800dfa2:	6a21      	ldr	r1, [r4, #32]
 800dfa4:	602b      	str	r3, [r5, #0]
 800dfa6:	d030      	beq.n	800e00a <__sflush_r+0x92>
 800dfa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dfaa:	89a3      	ldrh	r3, [r4, #12]
 800dfac:	0759      	lsls	r1, r3, #29
 800dfae:	d505      	bpl.n	800dfbc <__sflush_r+0x44>
 800dfb0:	6863      	ldr	r3, [r4, #4]
 800dfb2:	1ad2      	subs	r2, r2, r3
 800dfb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dfb6:	b10b      	cbz	r3, 800dfbc <__sflush_r+0x44>
 800dfb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dfba:	1ad2      	subs	r2, r2, r3
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dfc0:	6a21      	ldr	r1, [r4, #32]
 800dfc2:	4628      	mov	r0, r5
 800dfc4:	47b0      	blx	r6
 800dfc6:	1c43      	adds	r3, r0, #1
 800dfc8:	89a3      	ldrh	r3, [r4, #12]
 800dfca:	d106      	bne.n	800dfda <__sflush_r+0x62>
 800dfcc:	6829      	ldr	r1, [r5, #0]
 800dfce:	291d      	cmp	r1, #29
 800dfd0:	d82b      	bhi.n	800e02a <__sflush_r+0xb2>
 800dfd2:	4a2a      	ldr	r2, [pc, #168]	@ (800e07c <__sflush_r+0x104>)
 800dfd4:	410a      	asrs	r2, r1
 800dfd6:	07d6      	lsls	r6, r2, #31
 800dfd8:	d427      	bmi.n	800e02a <__sflush_r+0xb2>
 800dfda:	2200      	movs	r2, #0
 800dfdc:	6062      	str	r2, [r4, #4]
 800dfde:	04d9      	lsls	r1, r3, #19
 800dfe0:	6922      	ldr	r2, [r4, #16]
 800dfe2:	6022      	str	r2, [r4, #0]
 800dfe4:	d504      	bpl.n	800dff0 <__sflush_r+0x78>
 800dfe6:	1c42      	adds	r2, r0, #1
 800dfe8:	d101      	bne.n	800dfee <__sflush_r+0x76>
 800dfea:	682b      	ldr	r3, [r5, #0]
 800dfec:	b903      	cbnz	r3, 800dff0 <__sflush_r+0x78>
 800dfee:	6560      	str	r0, [r4, #84]	@ 0x54
 800dff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dff2:	602f      	str	r7, [r5, #0]
 800dff4:	b1b9      	cbz	r1, 800e026 <__sflush_r+0xae>
 800dff6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dffa:	4299      	cmp	r1, r3
 800dffc:	d002      	beq.n	800e004 <__sflush_r+0x8c>
 800dffe:	4628      	mov	r0, r5
 800e000:	f7ff f89e 	bl	800d140 <_free_r>
 800e004:	2300      	movs	r3, #0
 800e006:	6363      	str	r3, [r4, #52]	@ 0x34
 800e008:	e00d      	b.n	800e026 <__sflush_r+0xae>
 800e00a:	2301      	movs	r3, #1
 800e00c:	4628      	mov	r0, r5
 800e00e:	47b0      	blx	r6
 800e010:	4602      	mov	r2, r0
 800e012:	1c50      	adds	r0, r2, #1
 800e014:	d1c9      	bne.n	800dfaa <__sflush_r+0x32>
 800e016:	682b      	ldr	r3, [r5, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d0c6      	beq.n	800dfaa <__sflush_r+0x32>
 800e01c:	2b1d      	cmp	r3, #29
 800e01e:	d001      	beq.n	800e024 <__sflush_r+0xac>
 800e020:	2b16      	cmp	r3, #22
 800e022:	d11e      	bne.n	800e062 <__sflush_r+0xea>
 800e024:	602f      	str	r7, [r5, #0]
 800e026:	2000      	movs	r0, #0
 800e028:	e022      	b.n	800e070 <__sflush_r+0xf8>
 800e02a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e02e:	b21b      	sxth	r3, r3
 800e030:	e01b      	b.n	800e06a <__sflush_r+0xf2>
 800e032:	690f      	ldr	r7, [r1, #16]
 800e034:	2f00      	cmp	r7, #0
 800e036:	d0f6      	beq.n	800e026 <__sflush_r+0xae>
 800e038:	0793      	lsls	r3, r2, #30
 800e03a:	680e      	ldr	r6, [r1, #0]
 800e03c:	bf08      	it	eq
 800e03e:	694b      	ldreq	r3, [r1, #20]
 800e040:	600f      	str	r7, [r1, #0]
 800e042:	bf18      	it	ne
 800e044:	2300      	movne	r3, #0
 800e046:	eba6 0807 	sub.w	r8, r6, r7
 800e04a:	608b      	str	r3, [r1, #8]
 800e04c:	f1b8 0f00 	cmp.w	r8, #0
 800e050:	dde9      	ble.n	800e026 <__sflush_r+0xae>
 800e052:	6a21      	ldr	r1, [r4, #32]
 800e054:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e056:	4643      	mov	r3, r8
 800e058:	463a      	mov	r2, r7
 800e05a:	4628      	mov	r0, r5
 800e05c:	47b0      	blx	r6
 800e05e:	2800      	cmp	r0, #0
 800e060:	dc08      	bgt.n	800e074 <__sflush_r+0xfc>
 800e062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e06a:	81a3      	strh	r3, [r4, #12]
 800e06c:	f04f 30ff 	mov.w	r0, #4294967295
 800e070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e074:	4407      	add	r7, r0
 800e076:	eba8 0800 	sub.w	r8, r8, r0
 800e07a:	e7e7      	b.n	800e04c <__sflush_r+0xd4>
 800e07c:	dfbffffe 	.word	0xdfbffffe

0800e080 <_fflush_r>:
 800e080:	b538      	push	{r3, r4, r5, lr}
 800e082:	690b      	ldr	r3, [r1, #16]
 800e084:	4605      	mov	r5, r0
 800e086:	460c      	mov	r4, r1
 800e088:	b913      	cbnz	r3, 800e090 <_fflush_r+0x10>
 800e08a:	2500      	movs	r5, #0
 800e08c:	4628      	mov	r0, r5
 800e08e:	bd38      	pop	{r3, r4, r5, pc}
 800e090:	b118      	cbz	r0, 800e09a <_fflush_r+0x1a>
 800e092:	6a03      	ldr	r3, [r0, #32]
 800e094:	b90b      	cbnz	r3, 800e09a <_fflush_r+0x1a>
 800e096:	f7fe f8bd 	bl	800c214 <__sinit>
 800e09a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d0f3      	beq.n	800e08a <_fflush_r+0xa>
 800e0a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e0a4:	07d0      	lsls	r0, r2, #31
 800e0a6:	d404      	bmi.n	800e0b2 <_fflush_r+0x32>
 800e0a8:	0599      	lsls	r1, r3, #22
 800e0aa:	d402      	bmi.n	800e0b2 <_fflush_r+0x32>
 800e0ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e0ae:	f7fe f9da 	bl	800c466 <__retarget_lock_acquire_recursive>
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	4621      	mov	r1, r4
 800e0b6:	f7ff ff5f 	bl	800df78 <__sflush_r>
 800e0ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e0bc:	07da      	lsls	r2, r3, #31
 800e0be:	4605      	mov	r5, r0
 800e0c0:	d4e4      	bmi.n	800e08c <_fflush_r+0xc>
 800e0c2:	89a3      	ldrh	r3, [r4, #12]
 800e0c4:	059b      	lsls	r3, r3, #22
 800e0c6:	d4e1      	bmi.n	800e08c <_fflush_r+0xc>
 800e0c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e0ca:	f7fe f9cd 	bl	800c468 <__retarget_lock_release_recursive>
 800e0ce:	e7dd      	b.n	800e08c <_fflush_r+0xc>

0800e0d0 <fiprintf>:
 800e0d0:	b40e      	push	{r1, r2, r3}
 800e0d2:	b503      	push	{r0, r1, lr}
 800e0d4:	4601      	mov	r1, r0
 800e0d6:	ab03      	add	r3, sp, #12
 800e0d8:	4805      	ldr	r0, [pc, #20]	@ (800e0f0 <fiprintf+0x20>)
 800e0da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0de:	6800      	ldr	r0, [r0, #0]
 800e0e0:	9301      	str	r3, [sp, #4]
 800e0e2:	f7ff fe31 	bl	800dd48 <_vfiprintf_r>
 800e0e6:	b002      	add	sp, #8
 800e0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0ec:	b003      	add	sp, #12
 800e0ee:	4770      	bx	lr
 800e0f0:	200400c8 	.word	0x200400c8

0800e0f4 <__swbuf_r>:
 800e0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0f6:	460e      	mov	r6, r1
 800e0f8:	4614      	mov	r4, r2
 800e0fa:	4605      	mov	r5, r0
 800e0fc:	b118      	cbz	r0, 800e106 <__swbuf_r+0x12>
 800e0fe:	6a03      	ldr	r3, [r0, #32]
 800e100:	b90b      	cbnz	r3, 800e106 <__swbuf_r+0x12>
 800e102:	f7fe f887 	bl	800c214 <__sinit>
 800e106:	69a3      	ldr	r3, [r4, #24]
 800e108:	60a3      	str	r3, [r4, #8]
 800e10a:	89a3      	ldrh	r3, [r4, #12]
 800e10c:	071a      	lsls	r2, r3, #28
 800e10e:	d501      	bpl.n	800e114 <__swbuf_r+0x20>
 800e110:	6923      	ldr	r3, [r4, #16]
 800e112:	b943      	cbnz	r3, 800e126 <__swbuf_r+0x32>
 800e114:	4621      	mov	r1, r4
 800e116:	4628      	mov	r0, r5
 800e118:	f000 f82a 	bl	800e170 <__swsetup_r>
 800e11c:	b118      	cbz	r0, 800e126 <__swbuf_r+0x32>
 800e11e:	f04f 37ff 	mov.w	r7, #4294967295
 800e122:	4638      	mov	r0, r7
 800e124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e126:	6823      	ldr	r3, [r4, #0]
 800e128:	6922      	ldr	r2, [r4, #16]
 800e12a:	1a98      	subs	r0, r3, r2
 800e12c:	6963      	ldr	r3, [r4, #20]
 800e12e:	b2f6      	uxtb	r6, r6
 800e130:	4283      	cmp	r3, r0
 800e132:	4637      	mov	r7, r6
 800e134:	dc05      	bgt.n	800e142 <__swbuf_r+0x4e>
 800e136:	4621      	mov	r1, r4
 800e138:	4628      	mov	r0, r5
 800e13a:	f7ff ffa1 	bl	800e080 <_fflush_r>
 800e13e:	2800      	cmp	r0, #0
 800e140:	d1ed      	bne.n	800e11e <__swbuf_r+0x2a>
 800e142:	68a3      	ldr	r3, [r4, #8]
 800e144:	3b01      	subs	r3, #1
 800e146:	60a3      	str	r3, [r4, #8]
 800e148:	6823      	ldr	r3, [r4, #0]
 800e14a:	1c5a      	adds	r2, r3, #1
 800e14c:	6022      	str	r2, [r4, #0]
 800e14e:	701e      	strb	r6, [r3, #0]
 800e150:	6962      	ldr	r2, [r4, #20]
 800e152:	1c43      	adds	r3, r0, #1
 800e154:	429a      	cmp	r2, r3
 800e156:	d004      	beq.n	800e162 <__swbuf_r+0x6e>
 800e158:	89a3      	ldrh	r3, [r4, #12]
 800e15a:	07db      	lsls	r3, r3, #31
 800e15c:	d5e1      	bpl.n	800e122 <__swbuf_r+0x2e>
 800e15e:	2e0a      	cmp	r6, #10
 800e160:	d1df      	bne.n	800e122 <__swbuf_r+0x2e>
 800e162:	4621      	mov	r1, r4
 800e164:	4628      	mov	r0, r5
 800e166:	f7ff ff8b 	bl	800e080 <_fflush_r>
 800e16a:	2800      	cmp	r0, #0
 800e16c:	d0d9      	beq.n	800e122 <__swbuf_r+0x2e>
 800e16e:	e7d6      	b.n	800e11e <__swbuf_r+0x2a>

0800e170 <__swsetup_r>:
 800e170:	b538      	push	{r3, r4, r5, lr}
 800e172:	4b29      	ldr	r3, [pc, #164]	@ (800e218 <__swsetup_r+0xa8>)
 800e174:	4605      	mov	r5, r0
 800e176:	6818      	ldr	r0, [r3, #0]
 800e178:	460c      	mov	r4, r1
 800e17a:	b118      	cbz	r0, 800e184 <__swsetup_r+0x14>
 800e17c:	6a03      	ldr	r3, [r0, #32]
 800e17e:	b90b      	cbnz	r3, 800e184 <__swsetup_r+0x14>
 800e180:	f7fe f848 	bl	800c214 <__sinit>
 800e184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e188:	0719      	lsls	r1, r3, #28
 800e18a:	d422      	bmi.n	800e1d2 <__swsetup_r+0x62>
 800e18c:	06da      	lsls	r2, r3, #27
 800e18e:	d407      	bmi.n	800e1a0 <__swsetup_r+0x30>
 800e190:	2209      	movs	r2, #9
 800e192:	602a      	str	r2, [r5, #0]
 800e194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e198:	81a3      	strh	r3, [r4, #12]
 800e19a:	f04f 30ff 	mov.w	r0, #4294967295
 800e19e:	e033      	b.n	800e208 <__swsetup_r+0x98>
 800e1a0:	0758      	lsls	r0, r3, #29
 800e1a2:	d512      	bpl.n	800e1ca <__swsetup_r+0x5a>
 800e1a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e1a6:	b141      	cbz	r1, 800e1ba <__swsetup_r+0x4a>
 800e1a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e1ac:	4299      	cmp	r1, r3
 800e1ae:	d002      	beq.n	800e1b6 <__swsetup_r+0x46>
 800e1b0:	4628      	mov	r0, r5
 800e1b2:	f7fe ffc5 	bl	800d140 <_free_r>
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e1ba:	89a3      	ldrh	r3, [r4, #12]
 800e1bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e1c0:	81a3      	strh	r3, [r4, #12]
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	6063      	str	r3, [r4, #4]
 800e1c6:	6923      	ldr	r3, [r4, #16]
 800e1c8:	6023      	str	r3, [r4, #0]
 800e1ca:	89a3      	ldrh	r3, [r4, #12]
 800e1cc:	f043 0308 	orr.w	r3, r3, #8
 800e1d0:	81a3      	strh	r3, [r4, #12]
 800e1d2:	6923      	ldr	r3, [r4, #16]
 800e1d4:	b94b      	cbnz	r3, 800e1ea <__swsetup_r+0x7a>
 800e1d6:	89a3      	ldrh	r3, [r4, #12]
 800e1d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e1dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e1e0:	d003      	beq.n	800e1ea <__swsetup_r+0x7a>
 800e1e2:	4621      	mov	r1, r4
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f000 f8df 	bl	800e3a8 <__smakebuf_r>
 800e1ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ee:	f013 0201 	ands.w	r2, r3, #1
 800e1f2:	d00a      	beq.n	800e20a <__swsetup_r+0x9a>
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	60a2      	str	r2, [r4, #8]
 800e1f8:	6962      	ldr	r2, [r4, #20]
 800e1fa:	4252      	negs	r2, r2
 800e1fc:	61a2      	str	r2, [r4, #24]
 800e1fe:	6922      	ldr	r2, [r4, #16]
 800e200:	b942      	cbnz	r2, 800e214 <__swsetup_r+0xa4>
 800e202:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e206:	d1c5      	bne.n	800e194 <__swsetup_r+0x24>
 800e208:	bd38      	pop	{r3, r4, r5, pc}
 800e20a:	0799      	lsls	r1, r3, #30
 800e20c:	bf58      	it	pl
 800e20e:	6962      	ldrpl	r2, [r4, #20]
 800e210:	60a2      	str	r2, [r4, #8]
 800e212:	e7f4      	b.n	800e1fe <__swsetup_r+0x8e>
 800e214:	2000      	movs	r0, #0
 800e216:	e7f7      	b.n	800e208 <__swsetup_r+0x98>
 800e218:	200400c8 	.word	0x200400c8

0800e21c <memmove>:
 800e21c:	4288      	cmp	r0, r1
 800e21e:	b510      	push	{r4, lr}
 800e220:	eb01 0402 	add.w	r4, r1, r2
 800e224:	d902      	bls.n	800e22c <memmove+0x10>
 800e226:	4284      	cmp	r4, r0
 800e228:	4623      	mov	r3, r4
 800e22a:	d807      	bhi.n	800e23c <memmove+0x20>
 800e22c:	1e43      	subs	r3, r0, #1
 800e22e:	42a1      	cmp	r1, r4
 800e230:	d008      	beq.n	800e244 <memmove+0x28>
 800e232:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e236:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e23a:	e7f8      	b.n	800e22e <memmove+0x12>
 800e23c:	4402      	add	r2, r0
 800e23e:	4601      	mov	r1, r0
 800e240:	428a      	cmp	r2, r1
 800e242:	d100      	bne.n	800e246 <memmove+0x2a>
 800e244:	bd10      	pop	{r4, pc}
 800e246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e24a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e24e:	e7f7      	b.n	800e240 <memmove+0x24>

0800e250 <_sbrk_r>:
 800e250:	b538      	push	{r3, r4, r5, lr}
 800e252:	4d06      	ldr	r5, [pc, #24]	@ (800e26c <_sbrk_r+0x1c>)
 800e254:	2300      	movs	r3, #0
 800e256:	4604      	mov	r4, r0
 800e258:	4608      	mov	r0, r1
 800e25a:	602b      	str	r3, [r5, #0]
 800e25c:	f7f4 fcfc 	bl	8002c58 <_sbrk>
 800e260:	1c43      	adds	r3, r0, #1
 800e262:	d102      	bne.n	800e26a <_sbrk_r+0x1a>
 800e264:	682b      	ldr	r3, [r5, #0]
 800e266:	b103      	cbz	r3, 800e26a <_sbrk_r+0x1a>
 800e268:	6023      	str	r3, [r4, #0]
 800e26a:	bd38      	pop	{r3, r4, r5, pc}
 800e26c:	20040abc 	.word	0x20040abc

0800e270 <memcpy>:
 800e270:	440a      	add	r2, r1
 800e272:	4291      	cmp	r1, r2
 800e274:	f100 33ff 	add.w	r3, r0, #4294967295
 800e278:	d100      	bne.n	800e27c <memcpy+0xc>
 800e27a:	4770      	bx	lr
 800e27c:	b510      	push	{r4, lr}
 800e27e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e282:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e286:	4291      	cmp	r1, r2
 800e288:	d1f9      	bne.n	800e27e <memcpy+0xe>
 800e28a:	bd10      	pop	{r4, pc}

0800e28c <abort>:
 800e28c:	b508      	push	{r3, lr}
 800e28e:	2006      	movs	r0, #6
 800e290:	f000 f8ee 	bl	800e470 <raise>
 800e294:	2001      	movs	r0, #1
 800e296:	f7f4 fc67 	bl	8002b68 <_exit>

0800e29a <_calloc_r>:
 800e29a:	b570      	push	{r4, r5, r6, lr}
 800e29c:	fba1 5402 	umull	r5, r4, r1, r2
 800e2a0:	b93c      	cbnz	r4, 800e2b2 <_calloc_r+0x18>
 800e2a2:	4629      	mov	r1, r5
 800e2a4:	f7fe ffc0 	bl	800d228 <_malloc_r>
 800e2a8:	4606      	mov	r6, r0
 800e2aa:	b928      	cbnz	r0, 800e2b8 <_calloc_r+0x1e>
 800e2ac:	2600      	movs	r6, #0
 800e2ae:	4630      	mov	r0, r6
 800e2b0:	bd70      	pop	{r4, r5, r6, pc}
 800e2b2:	220c      	movs	r2, #12
 800e2b4:	6002      	str	r2, [r0, #0]
 800e2b6:	e7f9      	b.n	800e2ac <_calloc_r+0x12>
 800e2b8:	462a      	mov	r2, r5
 800e2ba:	4621      	mov	r1, r4
 800e2bc:	f7fe f855 	bl	800c36a <memset>
 800e2c0:	e7f5      	b.n	800e2ae <_calloc_r+0x14>

0800e2c2 <__ascii_mbtowc>:
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	b901      	cbnz	r1, 800e2c8 <__ascii_mbtowc+0x6>
 800e2c6:	a901      	add	r1, sp, #4
 800e2c8:	b142      	cbz	r2, 800e2dc <__ascii_mbtowc+0x1a>
 800e2ca:	b14b      	cbz	r3, 800e2e0 <__ascii_mbtowc+0x1e>
 800e2cc:	7813      	ldrb	r3, [r2, #0]
 800e2ce:	600b      	str	r3, [r1, #0]
 800e2d0:	7812      	ldrb	r2, [r2, #0]
 800e2d2:	1e10      	subs	r0, r2, #0
 800e2d4:	bf18      	it	ne
 800e2d6:	2001      	movne	r0, #1
 800e2d8:	b002      	add	sp, #8
 800e2da:	4770      	bx	lr
 800e2dc:	4610      	mov	r0, r2
 800e2de:	e7fb      	b.n	800e2d8 <__ascii_mbtowc+0x16>
 800e2e0:	f06f 0001 	mvn.w	r0, #1
 800e2e4:	e7f8      	b.n	800e2d8 <__ascii_mbtowc+0x16>

0800e2e6 <_realloc_r>:
 800e2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ea:	4680      	mov	r8, r0
 800e2ec:	4615      	mov	r5, r2
 800e2ee:	460c      	mov	r4, r1
 800e2f0:	b921      	cbnz	r1, 800e2fc <_realloc_r+0x16>
 800e2f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f6:	4611      	mov	r1, r2
 800e2f8:	f7fe bf96 	b.w	800d228 <_malloc_r>
 800e2fc:	b92a      	cbnz	r2, 800e30a <_realloc_r+0x24>
 800e2fe:	f7fe ff1f 	bl	800d140 <_free_r>
 800e302:	2400      	movs	r4, #0
 800e304:	4620      	mov	r0, r4
 800e306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e30a:	f000 f8ef 	bl	800e4ec <_malloc_usable_size_r>
 800e30e:	4285      	cmp	r5, r0
 800e310:	4606      	mov	r6, r0
 800e312:	d802      	bhi.n	800e31a <_realloc_r+0x34>
 800e314:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e318:	d8f4      	bhi.n	800e304 <_realloc_r+0x1e>
 800e31a:	4629      	mov	r1, r5
 800e31c:	4640      	mov	r0, r8
 800e31e:	f7fe ff83 	bl	800d228 <_malloc_r>
 800e322:	4607      	mov	r7, r0
 800e324:	2800      	cmp	r0, #0
 800e326:	d0ec      	beq.n	800e302 <_realloc_r+0x1c>
 800e328:	42b5      	cmp	r5, r6
 800e32a:	462a      	mov	r2, r5
 800e32c:	4621      	mov	r1, r4
 800e32e:	bf28      	it	cs
 800e330:	4632      	movcs	r2, r6
 800e332:	f7ff ff9d 	bl	800e270 <memcpy>
 800e336:	4621      	mov	r1, r4
 800e338:	4640      	mov	r0, r8
 800e33a:	f7fe ff01 	bl	800d140 <_free_r>
 800e33e:	463c      	mov	r4, r7
 800e340:	e7e0      	b.n	800e304 <_realloc_r+0x1e>

0800e342 <__ascii_wctomb>:
 800e342:	4603      	mov	r3, r0
 800e344:	4608      	mov	r0, r1
 800e346:	b141      	cbz	r1, 800e35a <__ascii_wctomb+0x18>
 800e348:	2aff      	cmp	r2, #255	@ 0xff
 800e34a:	d904      	bls.n	800e356 <__ascii_wctomb+0x14>
 800e34c:	228a      	movs	r2, #138	@ 0x8a
 800e34e:	601a      	str	r2, [r3, #0]
 800e350:	f04f 30ff 	mov.w	r0, #4294967295
 800e354:	4770      	bx	lr
 800e356:	700a      	strb	r2, [r1, #0]
 800e358:	2001      	movs	r0, #1
 800e35a:	4770      	bx	lr

0800e35c <__swhatbuf_r>:
 800e35c:	b570      	push	{r4, r5, r6, lr}
 800e35e:	460c      	mov	r4, r1
 800e360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e364:	2900      	cmp	r1, #0
 800e366:	b096      	sub	sp, #88	@ 0x58
 800e368:	4615      	mov	r5, r2
 800e36a:	461e      	mov	r6, r3
 800e36c:	da0d      	bge.n	800e38a <__swhatbuf_r+0x2e>
 800e36e:	89a3      	ldrh	r3, [r4, #12]
 800e370:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e374:	f04f 0100 	mov.w	r1, #0
 800e378:	bf14      	ite	ne
 800e37a:	2340      	movne	r3, #64	@ 0x40
 800e37c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e380:	2000      	movs	r0, #0
 800e382:	6031      	str	r1, [r6, #0]
 800e384:	602b      	str	r3, [r5, #0]
 800e386:	b016      	add	sp, #88	@ 0x58
 800e388:	bd70      	pop	{r4, r5, r6, pc}
 800e38a:	466a      	mov	r2, sp
 800e38c:	f000 f878 	bl	800e480 <_fstat_r>
 800e390:	2800      	cmp	r0, #0
 800e392:	dbec      	blt.n	800e36e <__swhatbuf_r+0x12>
 800e394:	9901      	ldr	r1, [sp, #4]
 800e396:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e39a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e39e:	4259      	negs	r1, r3
 800e3a0:	4159      	adcs	r1, r3
 800e3a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3a6:	e7eb      	b.n	800e380 <__swhatbuf_r+0x24>

0800e3a8 <__smakebuf_r>:
 800e3a8:	898b      	ldrh	r3, [r1, #12]
 800e3aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3ac:	079d      	lsls	r5, r3, #30
 800e3ae:	4606      	mov	r6, r0
 800e3b0:	460c      	mov	r4, r1
 800e3b2:	d507      	bpl.n	800e3c4 <__smakebuf_r+0x1c>
 800e3b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e3b8:	6023      	str	r3, [r4, #0]
 800e3ba:	6123      	str	r3, [r4, #16]
 800e3bc:	2301      	movs	r3, #1
 800e3be:	6163      	str	r3, [r4, #20]
 800e3c0:	b003      	add	sp, #12
 800e3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3c4:	ab01      	add	r3, sp, #4
 800e3c6:	466a      	mov	r2, sp
 800e3c8:	f7ff ffc8 	bl	800e35c <__swhatbuf_r>
 800e3cc:	9f00      	ldr	r7, [sp, #0]
 800e3ce:	4605      	mov	r5, r0
 800e3d0:	4639      	mov	r1, r7
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	f7fe ff28 	bl	800d228 <_malloc_r>
 800e3d8:	b948      	cbnz	r0, 800e3ee <__smakebuf_r+0x46>
 800e3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3de:	059a      	lsls	r2, r3, #22
 800e3e0:	d4ee      	bmi.n	800e3c0 <__smakebuf_r+0x18>
 800e3e2:	f023 0303 	bic.w	r3, r3, #3
 800e3e6:	f043 0302 	orr.w	r3, r3, #2
 800e3ea:	81a3      	strh	r3, [r4, #12]
 800e3ec:	e7e2      	b.n	800e3b4 <__smakebuf_r+0xc>
 800e3ee:	89a3      	ldrh	r3, [r4, #12]
 800e3f0:	6020      	str	r0, [r4, #0]
 800e3f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3f6:	81a3      	strh	r3, [r4, #12]
 800e3f8:	9b01      	ldr	r3, [sp, #4]
 800e3fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e3fe:	b15b      	cbz	r3, 800e418 <__smakebuf_r+0x70>
 800e400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e404:	4630      	mov	r0, r6
 800e406:	f000 f84d 	bl	800e4a4 <_isatty_r>
 800e40a:	b128      	cbz	r0, 800e418 <__smakebuf_r+0x70>
 800e40c:	89a3      	ldrh	r3, [r4, #12]
 800e40e:	f023 0303 	bic.w	r3, r3, #3
 800e412:	f043 0301 	orr.w	r3, r3, #1
 800e416:	81a3      	strh	r3, [r4, #12]
 800e418:	89a3      	ldrh	r3, [r4, #12]
 800e41a:	431d      	orrs	r5, r3
 800e41c:	81a5      	strh	r5, [r4, #12]
 800e41e:	e7cf      	b.n	800e3c0 <__smakebuf_r+0x18>

0800e420 <_raise_r>:
 800e420:	291f      	cmp	r1, #31
 800e422:	b538      	push	{r3, r4, r5, lr}
 800e424:	4605      	mov	r5, r0
 800e426:	460c      	mov	r4, r1
 800e428:	d904      	bls.n	800e434 <_raise_r+0x14>
 800e42a:	2316      	movs	r3, #22
 800e42c:	6003      	str	r3, [r0, #0]
 800e42e:	f04f 30ff 	mov.w	r0, #4294967295
 800e432:	bd38      	pop	{r3, r4, r5, pc}
 800e434:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e436:	b112      	cbz	r2, 800e43e <_raise_r+0x1e>
 800e438:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e43c:	b94b      	cbnz	r3, 800e452 <_raise_r+0x32>
 800e43e:	4628      	mov	r0, r5
 800e440:	f000 f852 	bl	800e4e8 <_getpid_r>
 800e444:	4622      	mov	r2, r4
 800e446:	4601      	mov	r1, r0
 800e448:	4628      	mov	r0, r5
 800e44a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e44e:	f000 b839 	b.w	800e4c4 <_kill_r>
 800e452:	2b01      	cmp	r3, #1
 800e454:	d00a      	beq.n	800e46c <_raise_r+0x4c>
 800e456:	1c59      	adds	r1, r3, #1
 800e458:	d103      	bne.n	800e462 <_raise_r+0x42>
 800e45a:	2316      	movs	r3, #22
 800e45c:	6003      	str	r3, [r0, #0]
 800e45e:	2001      	movs	r0, #1
 800e460:	e7e7      	b.n	800e432 <_raise_r+0x12>
 800e462:	2100      	movs	r1, #0
 800e464:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e468:	4620      	mov	r0, r4
 800e46a:	4798      	blx	r3
 800e46c:	2000      	movs	r0, #0
 800e46e:	e7e0      	b.n	800e432 <_raise_r+0x12>

0800e470 <raise>:
 800e470:	4b02      	ldr	r3, [pc, #8]	@ (800e47c <raise+0xc>)
 800e472:	4601      	mov	r1, r0
 800e474:	6818      	ldr	r0, [r3, #0]
 800e476:	f7ff bfd3 	b.w	800e420 <_raise_r>
 800e47a:	bf00      	nop
 800e47c:	200400c8 	.word	0x200400c8

0800e480 <_fstat_r>:
 800e480:	b538      	push	{r3, r4, r5, lr}
 800e482:	4d07      	ldr	r5, [pc, #28]	@ (800e4a0 <_fstat_r+0x20>)
 800e484:	2300      	movs	r3, #0
 800e486:	4604      	mov	r4, r0
 800e488:	4608      	mov	r0, r1
 800e48a:	4611      	mov	r1, r2
 800e48c:	602b      	str	r3, [r5, #0]
 800e48e:	f7f4 fbbb 	bl	8002c08 <_fstat>
 800e492:	1c43      	adds	r3, r0, #1
 800e494:	d102      	bne.n	800e49c <_fstat_r+0x1c>
 800e496:	682b      	ldr	r3, [r5, #0]
 800e498:	b103      	cbz	r3, 800e49c <_fstat_r+0x1c>
 800e49a:	6023      	str	r3, [r4, #0]
 800e49c:	bd38      	pop	{r3, r4, r5, pc}
 800e49e:	bf00      	nop
 800e4a0:	20040abc 	.word	0x20040abc

0800e4a4 <_isatty_r>:
 800e4a4:	b538      	push	{r3, r4, r5, lr}
 800e4a6:	4d06      	ldr	r5, [pc, #24]	@ (800e4c0 <_isatty_r+0x1c>)
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	4604      	mov	r4, r0
 800e4ac:	4608      	mov	r0, r1
 800e4ae:	602b      	str	r3, [r5, #0]
 800e4b0:	f7f4 fbba 	bl	8002c28 <_isatty>
 800e4b4:	1c43      	adds	r3, r0, #1
 800e4b6:	d102      	bne.n	800e4be <_isatty_r+0x1a>
 800e4b8:	682b      	ldr	r3, [r5, #0]
 800e4ba:	b103      	cbz	r3, 800e4be <_isatty_r+0x1a>
 800e4bc:	6023      	str	r3, [r4, #0]
 800e4be:	bd38      	pop	{r3, r4, r5, pc}
 800e4c0:	20040abc 	.word	0x20040abc

0800e4c4 <_kill_r>:
 800e4c4:	b538      	push	{r3, r4, r5, lr}
 800e4c6:	4d07      	ldr	r5, [pc, #28]	@ (800e4e4 <_kill_r+0x20>)
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	4608      	mov	r0, r1
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	602b      	str	r3, [r5, #0]
 800e4d2:	f7f4 fb39 	bl	8002b48 <_kill>
 800e4d6:	1c43      	adds	r3, r0, #1
 800e4d8:	d102      	bne.n	800e4e0 <_kill_r+0x1c>
 800e4da:	682b      	ldr	r3, [r5, #0]
 800e4dc:	b103      	cbz	r3, 800e4e0 <_kill_r+0x1c>
 800e4de:	6023      	str	r3, [r4, #0]
 800e4e0:	bd38      	pop	{r3, r4, r5, pc}
 800e4e2:	bf00      	nop
 800e4e4:	20040abc 	.word	0x20040abc

0800e4e8 <_getpid_r>:
 800e4e8:	f7f4 bb26 	b.w	8002b38 <_getpid>

0800e4ec <_malloc_usable_size_r>:
 800e4ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4f0:	1f18      	subs	r0, r3, #4
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	bfbc      	itt	lt
 800e4f6:	580b      	ldrlt	r3, [r1, r0]
 800e4f8:	18c0      	addlt	r0, r0, r3
 800e4fa:	4770      	bx	lr

0800e4fc <_init>:
 800e4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4fe:	bf00      	nop
 800e500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e502:	bc08      	pop	{r3}
 800e504:	469e      	mov	lr, r3
 800e506:	4770      	bx	lr

0800e508 <_fini>:
 800e508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e50a:	bf00      	nop
 800e50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e50e:	bc08      	pop	{r3}
 800e510:	469e      	mov	lr, r3
 800e512:	4770      	bx	lr
