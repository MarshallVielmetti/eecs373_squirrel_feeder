
integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c818  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00048fdc  0800c9d8  0800c9d8  0000d9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080559b4  080559b4  00057118  2**0
                  CONTENTS
  4 .ARM          00000008  080559b4  080559b4  000569b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080559bc  080559bc  00057118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080559bc  080559bc  000569bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080559c0  080559c0  000569c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000118  20040000  080559c4  00057000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  20040118  08055adc  00057118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040918  08055adc  00057918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00057118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb34  00000000  00000000  00057148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045ac  00000000  00000000  00076c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  0007b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001471  00000000  00000000  0007ccb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003072a  00000000  00000000  0007e129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023f87  00000000  00000000  000ae853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f5e6  00000000  00000000  000d27da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f1dc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a48  00000000  00000000  001f1e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001f984c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040118 	.word	0x20040118
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c9c0 	.word	0x0800c9c0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2004011c 	.word	0x2004011c
 80001fc:	0800c9c0 	.word	0x0800c9c0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b96a 	b.w	8000dc8 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	460c      	mov	r4, r1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d14e      	bne.n	8000bb6 <__udivmoddi4+0xaa>
 8000b18:	4694      	mov	ip, r2
 8000b1a:	458c      	cmp	ip, r1
 8000b1c:	4686      	mov	lr, r0
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	d962      	bls.n	8000bea <__udivmoddi4+0xde>
 8000b24:	b14a      	cbz	r2, 8000b3a <__udivmoddi4+0x2e>
 8000b26:	f1c2 0320 	rsb	r3, r2, #32
 8000b2a:	4091      	lsls	r1, r2
 8000b2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b34:	4319      	orrs	r1, r3
 8000b36:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3e:	fa1f f68c 	uxth.w	r6, ip
 8000b42:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b4a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb04 f106 	mul.w	r1, r4, r6
 8000b56:	4299      	cmp	r1, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x64>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b62:	f080 8112 	bcs.w	8000d8a <__udivmoddi4+0x27e>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 810f 	bls.w	8000d8a <__udivmoddi4+0x27e>
 8000b6c:	3c02      	subs	r4, #2
 8000b6e:	4463      	add	r3, ip
 8000b70:	1a59      	subs	r1, r3, r1
 8000b72:	fa1f f38e 	uxth.w	r3, lr
 8000b76:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b82:	fb00 f606 	mul.w	r6, r0, r6
 8000b86:	429e      	cmp	r6, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x94>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b92:	f080 80fc 	bcs.w	8000d8e <__udivmoddi4+0x282>
 8000b96:	429e      	cmp	r6, r3
 8000b98:	f240 80f9 	bls.w	8000d8e <__udivmoddi4+0x282>
 8000b9c:	4463      	add	r3, ip
 8000b9e:	3802      	subs	r0, #2
 8000ba0:	1b9b      	subs	r3, r3, r6
 8000ba2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	b11d      	cbz	r5, 8000bb2 <__udivmoddi4+0xa6>
 8000baa:	40d3      	lsrs	r3, r2
 8000bac:	2200      	movs	r2, #0
 8000bae:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d905      	bls.n	8000bc6 <__udivmoddi4+0xba>
 8000bba:	b10d      	cbz	r5, 8000bc0 <__udivmoddi4+0xb4>
 8000bbc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	e7f5      	b.n	8000bb2 <__udivmoddi4+0xa6>
 8000bc6:	fab3 f183 	clz	r1, r3
 8000bca:	2900      	cmp	r1, #0
 8000bcc:	d146      	bne.n	8000c5c <__udivmoddi4+0x150>
 8000bce:	42a3      	cmp	r3, r4
 8000bd0:	d302      	bcc.n	8000bd8 <__udivmoddi4+0xcc>
 8000bd2:	4290      	cmp	r0, r2
 8000bd4:	f0c0 80f0 	bcc.w	8000db8 <__udivmoddi4+0x2ac>
 8000bd8:	1a86      	subs	r6, r0, r2
 8000bda:	eb64 0303 	sbc.w	r3, r4, r3
 8000bde:	2001      	movs	r0, #1
 8000be0:	2d00      	cmp	r5, #0
 8000be2:	d0e6      	beq.n	8000bb2 <__udivmoddi4+0xa6>
 8000be4:	e9c5 6300 	strd	r6, r3, [r5]
 8000be8:	e7e3      	b.n	8000bb2 <__udivmoddi4+0xa6>
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	f040 8090 	bne.w	8000d10 <__udivmoddi4+0x204>
 8000bf0:	eba1 040c 	sub.w	r4, r1, ip
 8000bf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf8:	fa1f f78c 	uxth.w	r7, ip
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c06:	fb08 4416 	mls	r4, r8, r6, r4
 8000c0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0e:	fb07 f006 	mul.w	r0, r7, r6
 8000c12:	4298      	cmp	r0, r3
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x11c>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x11a>
 8000c20:	4298      	cmp	r0, r3
 8000c22:	f200 80cd 	bhi.w	8000dc0 <__udivmoddi4+0x2b4>
 8000c26:	4626      	mov	r6, r4
 8000c28:	1a1c      	subs	r4, r3, r0
 8000c2a:	fa1f f38e 	uxth.w	r3, lr
 8000c2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c32:	fb08 4410 	mls	r4, r8, r0, r4
 8000c36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3a:	fb00 f707 	mul.w	r7, r0, r7
 8000c3e:	429f      	cmp	r7, r3
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x148>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x146>
 8000c4c:	429f      	cmp	r7, r3
 8000c4e:	f200 80b0 	bhi.w	8000db2 <__udivmoddi4+0x2a6>
 8000c52:	4620      	mov	r0, r4
 8000c54:	1bdb      	subs	r3, r3, r7
 8000c56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5a:	e7a5      	b.n	8000ba8 <__udivmoddi4+0x9c>
 8000c5c:	f1c1 0620 	rsb	r6, r1, #32
 8000c60:	408b      	lsls	r3, r1
 8000c62:	fa22 f706 	lsr.w	r7, r2, r6
 8000c66:	431f      	orrs	r7, r3
 8000c68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c70:	ea43 030c 	orr.w	r3, r3, ip
 8000c74:	40f4      	lsrs	r4, r6
 8000c76:	fa00 f801 	lsl.w	r8, r0, r1
 8000c7a:	0c38      	lsrs	r0, r7, #16
 8000c7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c80:	fbb4 fef0 	udiv	lr, r4, r0
 8000c84:	fa1f fc87 	uxth.w	ip, r7
 8000c88:	fb00 441e 	mls	r4, r0, lr, r4
 8000c8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c90:	fb0e f90c 	mul.w	r9, lr, ip
 8000c94:	45a1      	cmp	r9, r4
 8000c96:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9a:	d90a      	bls.n	8000cb2 <__udivmoddi4+0x1a6>
 8000c9c:	193c      	adds	r4, r7, r4
 8000c9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ca2:	f080 8084 	bcs.w	8000dae <__udivmoddi4+0x2a2>
 8000ca6:	45a1      	cmp	r9, r4
 8000ca8:	f240 8081 	bls.w	8000dae <__udivmoddi4+0x2a2>
 8000cac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cb0:	443c      	add	r4, r7
 8000cb2:	eba4 0409 	sub.w	r4, r4, r9
 8000cb6:	fa1f f983 	uxth.w	r9, r3
 8000cba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cbe:	fb00 4413 	mls	r4, r0, r3, r4
 8000cc2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cca:	45a4      	cmp	ip, r4
 8000ccc:	d907      	bls.n	8000cde <__udivmoddi4+0x1d2>
 8000cce:	193c      	adds	r4, r7, r4
 8000cd0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cd4:	d267      	bcs.n	8000da6 <__udivmoddi4+0x29a>
 8000cd6:	45a4      	cmp	ip, r4
 8000cd8:	d965      	bls.n	8000da6 <__udivmoddi4+0x29a>
 8000cda:	3b02      	subs	r3, #2
 8000cdc:	443c      	add	r4, r7
 8000cde:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ce2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ce6:	eba4 040c 	sub.w	r4, r4, ip
 8000cea:	429c      	cmp	r4, r3
 8000cec:	46ce      	mov	lr, r9
 8000cee:	469c      	mov	ip, r3
 8000cf0:	d351      	bcc.n	8000d96 <__udivmoddi4+0x28a>
 8000cf2:	d04e      	beq.n	8000d92 <__udivmoddi4+0x286>
 8000cf4:	b155      	cbz	r5, 8000d0c <__udivmoddi4+0x200>
 8000cf6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cfa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cfe:	fa04 f606 	lsl.w	r6, r4, r6
 8000d02:	40cb      	lsrs	r3, r1
 8000d04:	431e      	orrs	r6, r3
 8000d06:	40cc      	lsrs	r4, r1
 8000d08:	e9c5 6400 	strd	r6, r4, [r5]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	e750      	b.n	8000bb2 <__udivmoddi4+0xa6>
 8000d10:	f1c2 0320 	rsb	r3, r2, #32
 8000d14:	fa20 f103 	lsr.w	r1, r0, r3
 8000d18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d20:	4094      	lsls	r4, r2
 8000d22:	430c      	orrs	r4, r1
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d2c:	fa1f f78c 	uxth.w	r7, ip
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3110 	mls	r1, r8, r0, r3
 8000d38:	0c23      	lsrs	r3, r4, #16
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f107 	mul.w	r1, r0, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x24c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d4e:	d22c      	bcs.n	8000daa <__udivmoddi4+0x29e>
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d92a      	bls.n	8000daa <__udivmoddi4+0x29e>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4463      	add	r3, ip
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d60:	fb08 3311 	mls	r3, r8, r1, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb01 f307 	mul.w	r3, r1, r7
 8000d6c:	42a3      	cmp	r3, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x276>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d78:	d213      	bcs.n	8000da2 <__udivmoddi4+0x296>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d911      	bls.n	8000da2 <__udivmoddi4+0x296>
 8000d7e:	3902      	subs	r1, #2
 8000d80:	4464      	add	r4, ip
 8000d82:	1ae4      	subs	r4, r4, r3
 8000d84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d88:	e739      	b.n	8000bfe <__udivmoddi4+0xf2>
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	e6f0      	b.n	8000b70 <__udivmoddi4+0x64>
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e706      	b.n	8000ba0 <__udivmoddi4+0x94>
 8000d92:	45c8      	cmp	r8, r9
 8000d94:	d2ae      	bcs.n	8000cf4 <__udivmoddi4+0x1e8>
 8000d96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d9e:	3801      	subs	r0, #1
 8000da0:	e7a8      	b.n	8000cf4 <__udivmoddi4+0x1e8>
 8000da2:	4631      	mov	r1, r6
 8000da4:	e7ed      	b.n	8000d82 <__udivmoddi4+0x276>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e799      	b.n	8000cde <__udivmoddi4+0x1d2>
 8000daa:	4630      	mov	r0, r6
 8000dac:	e7d4      	b.n	8000d58 <__udivmoddi4+0x24c>
 8000dae:	46d6      	mov	lr, sl
 8000db0:	e77f      	b.n	8000cb2 <__udivmoddi4+0x1a6>
 8000db2:	4463      	add	r3, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	e74d      	b.n	8000c54 <__udivmoddi4+0x148>
 8000db8:	4606      	mov	r6, r0
 8000dba:	4623      	mov	r3, r4
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e70f      	b.n	8000be0 <__udivmoddi4+0xd4>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	4463      	add	r3, ip
 8000dc4:	e730      	b.n	8000c28 <__udivmoddi4+0x11c>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <camera_init>:

/*
 * PUBLIC CAMERA INTERFACE
 */

void camera_init(void) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	image_size = 0;
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <camera_init+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
	cur_image_idx = 0;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <camera_init+0x44>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]

	pic_index = 0;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <camera_init+0x48>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	801a      	strh	r2, [r3, #0]

	//  has to be mod 100 bcz file names have to be like 8 chars
	rand_seed = rand() % 100;
 8000de2:	f00a fc2b 	bl	800b63c <rand>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <camera_init+0x4c>)
 8000dea:	fb82 1203 	smull	r1, r2, r2, r3
 8000dee:	1151      	asrs	r1, r2, #5
 8000df0:	17da      	asrs	r2, r3, #31
 8000df2:	1a8a      	subs	r2, r1, r2
 8000df4:	2164      	movs	r1, #100	@ 0x64
 8000df6:	fb01 f202 	mul.w	r2, r1, r2
 8000dfa:	1a9a      	subs	r2, r3, r2
 8000dfc:	b292      	uxth	r2, r2
 8000dfe:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <camera_init+0x50>)
 8000e00:	801a      	strh	r2, [r3, #0]

	camera_ready = true;
 8000e02:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <camera_init+0x54>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20040138 	.word	0x20040138
 8000e10:	2004013c 	.word	0x2004013c
 8000e14:	20040140 	.word	0x20040140
 8000e18:	51eb851f 	.word	0x51eb851f
 8000e1c:	20040142 	.word	0x20040142
 8000e20:	20040134 	.word	0x20040134

08000e24 <camera_take_photo>:

uint8_t camera_take_photo(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
	if (!camera_ready) {
 8000e2a:	4b25      	ldr	r3, [pc, #148]	@ (8000ec0 <camera_take_photo+0x9c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	f083 0301 	eor.w	r3, r3, #1
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <camera_take_photo+0x18>
		return 0; // camera not ready, return failure
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e03c      	b.n	8000eb6 <camera_take_photo+0x92>
	}

	// instruct the physical camera to take a photo
	uint8_t success = VC0706_StopCapture();
 8000e3c:	f001 fdb4 	bl	80029a8 <VC0706_StopCapture>
 8000e40:	4603      	mov	r3, r0
 8000e42:	73fb      	strb	r3, [r7, #15]

	// Verify success and update state
	if (!success) {
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <camera_take_photo+0x2a>
		return 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e033      	b.n	8000eb6 <camera_take_photo+0x92>
	}

	HAL_Delay(100);
 8000e4e:	2064      	movs	r0, #100	@ 0x64
 8000e50:	f002 fa52 	bl	80032f8 <HAL_Delay>


	success = VC0706_TakePhoto();
 8000e54:	f001 fd70 	bl	8002938 <VC0706_TakePhoto>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	73fb      	strb	r3, [r7, #15]

	if (!success) {
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <camera_take_photo+0x42>
		return 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e027      	b.n	8000eb6 <camera_take_photo+0x92>
	}

	HAL_Delay(100);
 8000e66:	2064      	movs	r0, #100	@ 0x64
 8000e68:	f002 fa46 	bl	80032f8 <HAL_Delay>

	/*
	 * Read in the length of the image
	 */
	image_size = VC0706_ReadImageDataLength();
 8000e6c:	f001 fdd2 	bl	8002a14 <VC0706_ReadImageDataLength>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <camera_take_photo+0xa0>)
 8000e76:	601a      	str	r2, [r3, #0]

	/*
	 * Now initialize the file handle
	 */
	char img_name[9];
	sprintf(img_name, "%d%d.jpg", pic_index, rand_seed);
 8000e78:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <camera_take_photo+0xa4>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <camera_take_photo+0xa8>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	1d38      	adds	r0, r7, #4
 8000e84:	4912      	ldr	r1, [pc, #72]	@ (8000ed0 <camera_take_photo+0xac>)
 8000e86:	f00a fcd9 	bl	800b83c <siprintf>
//	FRESULT fres = f_open(&(file_writer), img_name, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
	f_open(&(file_writer), img_name, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	221a      	movs	r2, #26
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4810      	ldr	r0, [pc, #64]	@ (8000ed4 <camera_take_photo+0xb0>)
 8000e92:	f009 ff9f 	bl	800add4 <f_open>

	pic_index++;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <camera_take_photo+0xa4>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <camera_take_photo+0xa4>)
 8000ea0:	801a      	strh	r2, [r3, #0]

	/*
	 * now must initialize the camera struct to be able to start receiving photos
	 */

	cur_image_idx = 0;
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <camera_take_photo+0xb4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
	camera_ready = 0; // no longer ready to take a new photo
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <camera_take_photo+0x9c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&CAM_TIMER_HANDLE);
 8000eae:	480b      	ldr	r0, [pc, #44]	@ (8000edc <camera_take_photo+0xb8>)
 8000eb0:	f006 f874 	bl	8006f9c <HAL_TIM_Base_Start_IT>

	return 1;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20040134 	.word	0x20040134
 8000ec4:	20040138 	.word	0x20040138
 8000ec8:	20040140 	.word	0x20040140
 8000ecc:	20040142 	.word	0x20040142
 8000ed0:	0800c9d8 	.word	0x0800c9d8
 8000ed4:	20040170 	.word	0x20040170
 8000ed8:	2004013c 	.word	0x2004013c
 8000edc:	20040564 	.word	0x20040564

08000ee0 <finish_image>:

static void finish_image(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
	VC0706_ReadImageBlock(img_read_buf, cur_image_idx);
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <finish_image+0x68>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4619      	mov	r1, r3
 8000eec:	4817      	ldr	r0, [pc, #92]	@ (8000f4c <finish_image+0x6c>)
 8000eee:	f001 fdbb 	bl	8002a68 <VC0706_ReadImageBlock>

	UINT bytes_wrote;

	for (uint32_t i = 1; i < 32; i++) {
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	e016      	b.n	8000f26 <finish_image+0x46>
		if (img_read_buf[i-1 + 5] == 0xFF && img_read_buf[i + 5] == 0xD9) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3304      	adds	r3, #4
 8000efc:	4a13      	ldr	r2, [pc, #76]	@ (8000f4c <finish_image+0x6c>)
 8000efe:	5cd3      	ldrb	r3, [r2, r3]
 8000f00:	2bff      	cmp	r3, #255	@ 0xff
 8000f02:	d10d      	bne.n	8000f20 <finish_image+0x40>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3305      	adds	r3, #5
 8000f08:	4a10      	ldr	r2, [pc, #64]	@ (8000f4c <finish_image+0x6c>)
 8000f0a:	5cd3      	ldrb	r3, [r2, r3]
 8000f0c:	2bd9      	cmp	r3, #217	@ 0xd9
 8000f0e:	d107      	bne.n	8000f20 <finish_image+0x40>
			// found end sequence
			f_write(&file_writer, img_read_buf + 5, i + 1, &bytes_wrote);
 8000f10:	490f      	ldr	r1, [pc, #60]	@ (8000f50 <finish_image+0x70>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	463b      	mov	r3, r7
 8000f18:	480e      	ldr	r0, [pc, #56]	@ (8000f54 <finish_image+0x74>)
 8000f1a:	f00a f915 	bl	800b148 <f_write>
			break;
 8000f1e:	e005      	b.n	8000f2c <finish_image+0x4c>
	for (uint32_t i = 1; i < 32; i++) {
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3301      	adds	r3, #1
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b1f      	cmp	r3, #31
 8000f2a:	d9e5      	bls.n	8000ef8 <finish_image+0x18>
		}
	}

	f_close(&file_writer);
 8000f2c:	4809      	ldr	r0, [pc, #36]	@ (8000f54 <finish_image+0x74>)
 8000f2e:	f00a fafe 	bl	800b52e <f_close>

	HAL_TIM_Base_Stop_IT(&CAM_TIMER_HANDLE);
 8000f32:	4809      	ldr	r0, [pc, #36]	@ (8000f58 <finish_image+0x78>)
 8000f34:	f006 f8a2 	bl	800707c <HAL_TIM_Base_Stop_IT>

	camera_ready = true; // ready to take a new image
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <finish_image+0x7c>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2004013c 	.word	0x2004013c
 8000f4c:	20040144 	.word	0x20040144
 8000f50:	20040149 	.word	0x20040149
 8000f54:	20040170 	.word	0x20040170
 8000f58:	20040564 	.word	0x20040564
 8000f5c:	20040134 	.word	0x20040134

08000f60 <process_chunk>:

static uint8_t process_chunk(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	if (cur_image_idx >= image_size - CAMERA_READ_IMG_SIZE) {
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <process_chunk+0x58>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f1a3 0220 	sub.w	r2, r3, #32
 8000f6e:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <process_chunk+0x5c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d803      	bhi.n	8000f7e <process_chunk+0x1e>
		finish_image(); // needs to perform the final processing in this->finish_image
 8000f76:	f7ff ffb3 	bl	8000ee0 <finish_image>
		return 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e018      	b.n	8000fb0 <process_chunk+0x50>
	}

	uint8_t status = VC0706_ReadImageBlock(img_read_buf, cur_image_idx);
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <process_chunk+0x5c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4619      	mov	r1, r3
 8000f84:	480e      	ldr	r0, [pc, #56]	@ (8000fc0 <process_chunk+0x60>)
 8000f86:	f001 fd6f 	bl	8002a68 <VC0706_ReadImageBlock>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]

	if (!status) {
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <process_chunk+0x38>
		return 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	e00b      	b.n	8000fb0 <process_chunk+0x50>
	}

	UINT bytes_wrote;
	f_write(&file_writer, img_read_buf + 5, CAMERA_READ_IMG_SIZE, &bytes_wrote);
 8000f98:	490a      	ldr	r1, [pc, #40]	@ (8000fc4 <process_chunk+0x64>)
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	480a      	ldr	r0, [pc, #40]	@ (8000fc8 <process_chunk+0x68>)
 8000fa0:	f00a f8d2 	bl	800b148 <f_write>

	cur_image_idx += 0x20;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <process_chunk+0x5c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3320      	adds	r3, #32
 8000faa:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <process_chunk+0x5c>)
 8000fac:	6013      	str	r3, [r2, #0]

	return 0; //normal case
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20040138 	.word	0x20040138
 8000fbc:	2004013c 	.word	0x2004013c
 8000fc0:	20040144 	.word	0x20040144
 8000fc4:	20040149 	.word	0x20040149
 8000fc8:	20040170 	.word	0x20040170

08000fcc <camera_process>:


uint8_t camera_process(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
	uint8_t end_flag = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	uint8_t num_chunks_processed = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	71bb      	strb	r3, [r7, #6]

	while (!end_flag && num_chunks_processed++ < CAMERA_PROCESS_CHUNKS) {
 8000fda:	e003      	b.n	8000fe4 <camera_process+0x18>
		end_flag = process_chunk();
 8000fdc:	f7ff ffc0 	bl	8000f60 <process_chunk>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	71fb      	strb	r3, [r7, #7]
	while (!end_flag && num_chunks_processed++ < CAMERA_PROCESS_CHUNKS) {
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d104      	bne.n	8000ff4 <camera_process+0x28>
 8000fea:	79bb      	ldrb	r3, [r7, #6]
 8000fec:	1c5a      	adds	r2, r3, #1
 8000fee:	71ba      	strb	r2, [r7, #6]
 8000ff0:	2b09      	cmp	r3, #9
 8000ff2:	d9f3      	bls.n	8000fdc <camera_process+0x10>
	}

	return end_flag; // 1 means the last chunk was read
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <camera_get_ready>:

uint8_t camera_get_ready() {
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
	return camera_ready;
 8001004:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <camera_get_ready+0x14>)
 8001006:	781b      	ldrb	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20040134 	.word	0x20040134

08001018 <init_peripherals>:

extern int weight;
extern int squirrel_count;


void init_peripherals() {
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_Delay(2500);
 800101c:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001020:	f002 f96a 	bl	80032f8 <HAL_Delay>

	camera_init();
 8001024:	f7ff fed2 	bl	8000dcc <camera_init>

	// shared between the IR sensor and pressure sensor
	HAL_TIM_Base_Start_IT(&IR_SENSOR_TIMER_HANDLE);
 8001028:	480b      	ldr	r0, [pc, #44]	@ (8001058 <init_peripherals+0x40>)
 800102a:	f005 ffb7 	bl	8006f9c <HAL_TIM_Base_Start_IT>

	ir_sensor_init();
 800102e:	f000 f8d1 	bl	80011d4 <ir_sensor_init>
	ps_init();
 8001032:	f000 fb03 	bl	800163c <ps_init>
	lcd_init(&feeder);
 8001036:	4809      	ldr	r0, [pc, #36]	@ (800105c <init_peripherals+0x44>)
 8001038:	f000 fa40 	bl	80014bc <lcd_init>

	feeder.state = WAITING_FOR_SQUIRREL;
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <init_peripherals+0x44>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
	feeder.squirrel_count = 0;
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <init_peripherals+0x44>)
 8001044:	2200      	movs	r2, #0
 8001046:	605a      	str	r2, [r3, #4]
	feeder.out_of_food = false;
 8001048:	4b04      	ldr	r3, [pc, #16]	@ (800105c <init_peripherals+0x44>)
 800104a:	2200      	movs	r2, #0
 800104c:	721a      	strb	r2, [r3, #8]

	// start main timer
	HAL_TIM_Base_Start_IT(&MAIN_TIMER_HANDLE);
 800104e:	4804      	ldr	r0, [pc, #16]	@ (8001060 <init_peripherals+0x48>)
 8001050:	f005 ffa4 	bl	8006f9c <HAL_TIM_Base_Start_IT>

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200405fc 	.word	0x200405fc
 800105c:	200403a0 	.word	0x200403a0
 8001060:	20040694 	.word	0x20040694

08001064 <main_isr>:
static void dispensing_isr();
static void cooldown_isr();
static void out_of_food_isr();

// main program logic interrupt routine
void main_isr() {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

	// send the feeder state to the lcd and update it
	switch (feeder.state) {
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <main_isr+0x4c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b04      	cmp	r3, #4
 800106e:	d81c      	bhi.n	80010aa <main_isr+0x46>
 8001070:	a201      	add	r2, pc, #4	@ (adr r2, 8001078 <main_isr+0x14>)
 8001072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001076:	bf00      	nop
 8001078:	0800108d 	.word	0x0800108d
 800107c:	08001093 	.word	0x08001093
 8001080:	08001099 	.word	0x08001099
 8001084:	0800109f 	.word	0x0800109f
 8001088:	080010a5 	.word	0x080010a5
	case WAITING_FOR_SQUIRREL:
		waiting_for_squirrel_isr();
 800108c:	f000 f812 	bl	80010b4 <waiting_for_squirrel_isr>
		break;
 8001090:	e00b      	b.n	80010aa <main_isr+0x46>
	case DETECTED_SQUIRREL:
		detected_squirrel_isr();
 8001092:	f000 f825 	bl	80010e0 <detected_squirrel_isr>
		break;
 8001096:	e008      	b.n	80010aa <main_isr+0x46>
	case DISPENSING:
		dispensing_isr();
 8001098:	f000 f840 	bl	800111c <dispensing_isr>
		break;
 800109c:	e005      	b.n	80010aa <main_isr+0x46>
	case COOLDOWN:
		cooldown_isr();
 800109e:	f000 f869 	bl	8001174 <cooldown_isr>
		break;
 80010a2:	e002      	b.n	80010aa <main_isr+0x46>
	case OUT_OF_FOOD:
		out_of_food_isr();
 80010a4:	f000 f880 	bl	80011a8 <out_of_food_isr>
		break;
 80010a8:	bf00      	nop
	}
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200403a0 	.word	0x200403a0

080010b4 <waiting_for_squirrel_isr>:

static void waiting_for_squirrel_isr() {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	if(get_cur_distance_average() > IR_DISTANCE_THRESHOLD) {
 80010b8:	f000 f90a 	bl	80012d0 <get_cur_distance_average>
 80010bc:	eef0 7a40 	vmov.f32	s15, s0
 80010c0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80010c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	dc00      	bgt.n	80010d0 <waiting_for_squirrel_isr+0x1c>
		feeder.state = DETECTED_SQUIRREL;
	}
}
 80010ce:	e002      	b.n	80010d6 <waiting_for_squirrel_isr+0x22>
		feeder.state = DETECTED_SQUIRREL;
 80010d0:	4b02      	ldr	r3, [pc, #8]	@ (80010dc <waiting_for_squirrel_isr+0x28>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200403a0 	.word	0x200403a0

080010e0 <detected_squirrel_isr>:

static void detected_squirrel_isr() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	feeder.squirrel_count++;
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <detected_squirrel_isr+0x34>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	3301      	adds	r3, #1
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <detected_squirrel_isr+0x34>)
 80010ec:	6053      	str	r3, [r2, #4]

	error_state = camera_take_photo();
 80010ee:	f7ff fe99 	bl	8000e24 <camera_take_photo>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <detected_squirrel_isr+0x38>)
 80010f8:	701a      	strb	r2, [r3, #0]
	motor_start();
 80010fa:	f000 ffd3 	bl	80020a4 <motor_start>

	if(!error_state) {
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <detected_squirrel_isr+0x38>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <detected_squirrel_isr+0x2a>
		while(1){} // Should probably remove error-handling for demo
 8001106:	bf00      	nop
 8001108:	e7fd      	b.n	8001106 <detected_squirrel_isr+0x26>
	}

	feeder.state = DISPENSING;
 800110a:	4b02      	ldr	r3, [pc, #8]	@ (8001114 <detected_squirrel_isr+0x34>)
 800110c:	2202      	movs	r2, #2
 800110e:	701a      	strb	r2, [r3, #0]
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200403a0 	.word	0x200403a0
 8001118:	200403ac 	.word	0x200403ac

0800111c <dispensing_isr>:

static uint32_t times_dispensed = 0;
static void dispensing_isr() {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	if (ps_get_reading() >= PS_FOOD_THRESHOLD) {
 8001120:	f000 faa0 	bl	8001664 <ps_get_reading>
 8001124:	4603      	mov	r3, r0
 8001126:	f241 3287 	movw	r2, #4999	@ 0x1387
 800112a:	4293      	cmp	r3, r2
 800112c:	dd08      	ble.n	8001140 <dispensing_isr+0x24>
		// Must have dispensed enough food
		motor_stop();
 800112e:	f000 ffcd 	bl	80020cc <motor_stop>

		feeder.state = COOLDOWN;
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <dispensing_isr+0x50>)
 8001134:	2203      	movs	r2, #3
 8001136:	701a      	strb	r2, [r3, #0]
		times_dispensed = 0;
 8001138:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <dispensing_isr+0x54>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]

		return;
 800113e:	e014      	b.n	800116a <dispensing_isr+0x4e>
	}

	if (times_dispensed >= MAX_DISPENSE_ITERATIONS) {
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <dispensing_isr+0x54>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b04      	cmp	r3, #4
 8001146:	d908      	bls.n	800115a <dispensing_isr+0x3e>
		// has dispensed 5 times on this iteration already -- out of food
		motor_stop();
 8001148:	f000 ffc0 	bl	80020cc <motor_stop>

		feeder.state = OUT_OF_FOOD;
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <dispensing_isr+0x50>)
 800114e:	2204      	movs	r2, #4
 8001150:	701a      	strb	r2, [r3, #0]
		times_dispensed = 0;
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <dispensing_isr+0x54>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]

		return;
 8001158:	e007      	b.n	800116a <dispensing_isr+0x4e>
	}

	// Down here is "average" use case -- needs to continue dispensing
	++times_dispensed;
 800115a:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <dispensing_isr+0x54>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	4a03      	ldr	r2, [pc, #12]	@ (8001170 <dispensing_isr+0x54>)
 8001162:	6013      	str	r3, [r2, #0]

	// Stay in the same state
	feeder.state = DISPENSING;
 8001164:	4b01      	ldr	r3, [pc, #4]	@ (800116c <dispensing_isr+0x50>)
 8001166:	2202      	movs	r2, #2
 8001168:	701a      	strb	r2, [r3, #0]
}
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200403a0 	.word	0x200403a0
 8001170:	200403b0 	.word	0x200403b0

08001174 <cooldown_isr>:

/*
 * Prevents the system from dispensing food over and over again
 */
static uint32_t cooldown_cur_iteration = 0;
static void cooldown_isr(void) {
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	cooldown_cur_iteration += 1;
 8001178:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <cooldown_isr+0x2c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	4a08      	ldr	r2, [pc, #32]	@ (80011a0 <cooldown_isr+0x2c>)
 8001180:	6013      	str	r3, [r2, #0]

	if (cooldown_cur_iteration == COOLDOWN_ISR_ITERATIONS) {
 8001182:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <cooldown_isr+0x2c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b14      	cmp	r3, #20
 8001188:	d105      	bne.n	8001196 <cooldown_isr+0x22>
		cooldown_cur_iteration = 0;
 800118a:	4b05      	ldr	r3, [pc, #20]	@ (80011a0 <cooldown_isr+0x2c>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
		feeder.state = WAITING_FOR_SQUIRREL;
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <cooldown_isr+0x30>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
	}
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	200403b4 	.word	0x200403b4
 80011a4:	200403a0 	.word	0x200403a0

080011a8 <out_of_food_isr>:

// In order to reset the feeder, just put your hand on the pressure sensor
static void out_of_food_isr() {	// We don't have a great way to determine when food is added back
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	feeder.out_of_food = true;
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <out_of_food_isr+0x28>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	721a      	strb	r2, [r3, #8]

	if (ps_get_reading() > PS_RESET_THRESHOLD) {
 80011b2:	f000 fa57 	bl	8001664 <ps_get_reading>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80011bc:	4293      	cmp	r3, r2
 80011be:	dd05      	ble.n	80011cc <out_of_food_isr+0x24>
		feeder.out_of_food = false;
 80011c0:	4b03      	ldr	r3, [pc, #12]	@ (80011d0 <out_of_food_isr+0x28>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	721a      	strb	r2, [r3, #8]
		feeder.state = WAITING_FOR_SQUIRREL;
 80011c6:	4b02      	ldr	r3, [pc, #8]	@ (80011d0 <out_of_food_isr+0x28>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
	}
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200403a0 	.word	0x200403a0

080011d4 <ir_sensor_init>:

static float distance_measurements[NUM_MEASUREMENTS_TO_AVG];
static uint8_t distance_idx = 0;


void ir_sensor_init() {
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
	// make sure doesn't auto trigger without readings
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 80011da:	2300      	movs	r3, #0
 80011dc:	71fb      	strb	r3, [r7, #7]
 80011de:	e008      	b.n	80011f2 <ir_sensor_init+0x1e>
		distance_measurements[i] = 1000;
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	4a09      	ldr	r2, [pc, #36]	@ (8001208 <ir_sensor_init+0x34>)
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	4a08      	ldr	r2, [pc, #32]	@ (800120c <ir_sensor_init+0x38>)
 80011ea:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	3301      	adds	r3, #1
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2b07      	cmp	r3, #7
 80011f6:	d9f3      	bls.n	80011e0 <ir_sensor_init+0xc>
	}
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	200403b8 	.word	0x200403b8
 800120c:	447a0000 	.word	0x447a0000

08001210 <read_distance>:

static float read_distance() {
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
	 uint32_t ADC_VAL = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]

	 HAL_ADC_Start(&IR_ADC_HANDLE);//start conversion
 800121a:	481b      	ldr	r0, [pc, #108]	@ (8001288 <read_distance+0x78>)
 800121c:	f002 fbb0 	bl	8003980 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&IR_ADC_HANDLE, 0xFFFFFFFF);//wait for conversion to finish
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	4818      	ldr	r0, [pc, #96]	@ (8001288 <read_distance+0x78>)
 8001226:	f002 fc0e 	bl	8003a46 <HAL_ADC_PollForConversion>
	 ADC_VAL = HAL_ADC_GetValue(&IR_ADC_HANDLE);//retrieve value
 800122a:	4817      	ldr	r0, [pc, #92]	@ (8001288 <read_distance+0x78>)
 800122c:	f002 fc9a 	bl	8003b64 <HAL_ADC_GetValue>
 8001230:	60f8      	str	r0, [r7, #12]

	 float voltage = (3.3* ADC_VAL)/4025.0;
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f7ff f976 	bl	8000524 <__aeabi_ui2d>
 8001238:	a30f      	add	r3, pc, #60	@ (adr r3, 8001278 <read_distance+0x68>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff f9eb 	bl	8000618 <__aeabi_dmul>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	a30d      	add	r3, pc, #52	@ (adr r3, 8001280 <read_distance+0x70>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	f7ff fb0c 	bl	800086c <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fbee 	bl	8000a3c <__aeabi_d2f>
 8001260:	4603      	mov	r3, r0
 8001262:	60bb      	str	r3, [r7, #8]

	 // TODO  - special conversion if we need to
	 float distance = voltage;
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	607b      	str	r3, [r7, #4]

	 return distance;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ee07 3a90 	vmov	s15, r3
}
 800126e:	eeb0 0a67 	vmov.f32	s0, s15
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	66666666 	.word	0x66666666
 800127c:	400a6666 	.word	0x400a6666
 8001280:	00000000 	.word	0x00000000
 8001284:	40af7200 	.word	0x40af7200
 8001288:	200403e8 	.word	0x200403e8

0800128c <ir_sensor_interrupt_routine>:

void ir_sensor_interrupt_routine() {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
	float curr = read_distance();
 8001292:	f7ff ffbd 	bl	8001210 <read_distance>
 8001296:	ed87 0a01 	vstr	s0, [r7, #4]

	distance_measurements[distance_idx++] = curr;
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <ir_sensor_interrupt_routine+0x3c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	b2d1      	uxtb	r1, r2
 80012a2:	4a09      	ldr	r2, [pc, #36]	@ (80012c8 <ir_sensor_interrupt_routine+0x3c>)
 80012a4:	7011      	strb	r1, [r2, #0]
 80012a6:	4a09      	ldr	r2, [pc, #36]	@ (80012cc <ir_sensor_interrupt_routine+0x40>)
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	601a      	str	r2, [r3, #0]
	distance_idx %= NUM_MEASUREMENTS_TO_AVG;
 80012b0:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <ir_sensor_interrupt_routine+0x3c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <ir_sensor_interrupt_routine+0x3c>)
 80012bc:	701a      	strb	r2, [r3, #0]
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200403d8 	.word	0x200403d8
 80012cc:	200403b8 	.word	0x200403b8

080012d0 <get_cur_distance_average>:

float get_cur_distance_average() {
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
	float ttl = 0;
 80012d6:	f04f 0300 	mov.w	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	70fb      	strb	r3, [r7, #3]
 80012e0:	e00e      	b.n	8001300 <get_cur_distance_average+0x30>
		ttl += distance_measurements[i];
 80012e2:	78fb      	ldrb	r3, [r7, #3]
 80012e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001324 <get_cur_distance_average+0x54>)
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80012f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f6:	edc7 7a01 	vstr	s15, [r7, #4]
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	3301      	adds	r3, #1
 80012fe:	70fb      	strb	r3, [r7, #3]
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	2b07      	cmp	r3, #7
 8001304:	d9ed      	bls.n	80012e2 <get_cur_distance_average+0x12>
	}

	return ttl / NUM_MEASUREMENTS_TO_AVG;
 8001306:	edd7 7a01 	vldr	s15, [r7, #4]
 800130a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800130e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001312:	eef0 7a66 	vmov.f32	s15, s13
}
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	200403b8 	.word	0x200403b8

08001328 <squirrel_clip>:
#include <stdio.h>
//
extern SPI_HandleTypeDef hspi3;
extern TIM_HandleTypeDef LCD_TIMER_HANDLE;

void squirrel_clip() {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af02      	add	r7, sp, #8
	ILI9341_DrawImage((ILI9341_WIDTH - 320)/2,(ILI9341_HEIGHT-240)/2,320,240,(const uint16_t*)squirrelclip);
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <squirrel_clip+0x20>)
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	23f0      	movs	r3, #240	@ 0xf0
 8001334:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001338:	2100      	movs	r1, #0
 800133a:	2000      	movs	r0, #0
 800133c:	f001 ff20 	bl	8003180 <ILI9341_DrawImage>
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	0802df3c 	.word	0x0802df3c

0800134c <squirrel_res>:

void squirrel_res() {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af02      	add	r7, sp, #8
	ILI9341_DrawImage((ILI9341_WIDTH - 320)/2,(ILI9341_HEIGHT-213)/2,320,213,(const uint16_t*)squirrelres);
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <squirrel_res+0x20>)
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	23d5      	movs	r3, #213	@ 0xd5
 8001358:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800135c:	210d      	movs	r1, #13
 800135e:	2000      	movs	r0, #0
 8001360:	f001 ff0e 	bl	8003180 <ILI9341_DrawImage>
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	0800cabc 	.word	0x0800cabc

08001370 <display_stats>:

void m_logo() {
	ILI9341_DrawImage((ILI9341_WIDTH - 320)/2,(ILI9341_HEIGHT-203)/2,320,203,(const uint16_t*)MLogo);
}

void display_stats(int weight, int squirrel_count) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b090      	sub	sp, #64	@ 0x40
 8001374:	af04      	add	r7, sp, #16
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	const char* team1 = "FEED";
 800137a:	4b46      	ldr	r3, [pc, #280]	@ (8001494 <display_stats+0x124>)
 800137c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	const char* team2 = "THE";
 800137e:	4b46      	ldr	r3, [pc, #280]	@ (8001498 <display_stats+0x128>)
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28
	const char* team3 = "SQUIRRELS";
 8001382:	4b46      	ldr	r3, [pc, #280]	@ (800149c <display_stats+0x12c>)
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
	const char* class = "FROM EECS 373";
 8001386:	4b46      	ldr	r3, [pc, #280]	@ (80014a0 <display_stats+0x130>)
 8001388:	623b      	str	r3, [r7, #32]
	const char* linebrk = "-*-*-*-*-*-";
 800138a:	4b46      	ldr	r3, [pc, #280]	@ (80014a4 <display_stats+0x134>)
 800138c:	61fb      	str	r3, [r7, #28]

	// Needs help
	char strSquirrels[4];
	sprintf(strSquirrels, "%d", squirrel_count);
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	4944      	ldr	r1, [pc, #272]	@ (80014a8 <display_stats+0x138>)
 8001396:	4618      	mov	r0, r3
 8001398:	f00a fa50 	bl	800b83c <siprintf>
	char strWeight[4];
	sprintf(strWeight, "%d", weight);
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4941      	ldr	r1, [pc, #260]	@ (80014a8 <display_stats+0x138>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f00a fa49 	bl	800b83c <siprintf>

	const char* squcount = strcat("Squirrels Fed: ", strSquirrels);
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	4619      	mov	r1, r3
 80013b0:	483e      	ldr	r0, [pc, #248]	@ (80014ac <display_stats+0x13c>)
 80013b2:	f00a faae 	bl	800b912 <strcat>
 80013b6:	61b8      	str	r0, [r7, #24]
	const char* flevels = strcat("Food Dispensed: ", strWeight);
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	4619      	mov	r1, r3
 80013be:	483c      	ldr	r0, [pc, #240]	@ (80014b0 <display_stats+0x140>)
 80013c0:	f00a faa7 	bl	800b912 <strcat>
 80013c4:	6178      	str	r0, [r7, #20]

	// FEED THE SQUIRRELS FROM EECS 383 -*-*-*-*-*
	ILI9341_WriteString(10, 10, team1, Font_16x26, ILI9341_YELLOW, ILI9341_BLUE);
 80013c6:	4b3b      	ldr	r3, [pc, #236]	@ (80014b4 <display_stats+0x144>)
 80013c8:	221f      	movs	r2, #31
 80013ca:	9202      	str	r2, [sp, #8]
 80013cc:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80013d0:	9201      	str	r2, [sp, #4]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	9200      	str	r2, [sp, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013da:	210a      	movs	r1, #10
 80013dc:	200a      	movs	r0, #10
 80013de:	f001 fe03 	bl	8002fe8 <ILI9341_WriteString>
	ILI9341_WriteString(10, 40, team2, Font_16x26, ILI9341_YELLOW, ILI9341_BLUE);
 80013e2:	4b34      	ldr	r3, [pc, #208]	@ (80014b4 <display_stats+0x144>)
 80013e4:	221f      	movs	r2, #31
 80013e6:	9202      	str	r2, [sp, #8]
 80013e8:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80013ec:	9201      	str	r2, [sp, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	9200      	str	r2, [sp, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013f6:	2128      	movs	r1, #40	@ 0x28
 80013f8:	200a      	movs	r0, #10
 80013fa:	f001 fdf5 	bl	8002fe8 <ILI9341_WriteString>
	ILI9341_WriteString(10, 70, team3, Font_16x26, ILI9341_YELLOW, ILI9341_BLUE);
 80013fe:	4b2d      	ldr	r3, [pc, #180]	@ (80014b4 <display_stats+0x144>)
 8001400:	221f      	movs	r2, #31
 8001402:	9202      	str	r2, [sp, #8]
 8001404:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001408:	9201      	str	r2, [sp, #4]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	9200      	str	r2, [sp, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001412:	2146      	movs	r1, #70	@ 0x46
 8001414:	200a      	movs	r0, #10
 8001416:	f001 fde7 	bl	8002fe8 <ILI9341_WriteString>
	ILI9341_WriteString(10, 100, class, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 800141a:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <display_stats+0x148>)
 800141c:	221f      	movs	r2, #31
 800141e:	9202      	str	r2, [sp, #8]
 8001420:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001424:	9201      	str	r2, [sp, #4]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	9200      	str	r2, [sp, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6a3a      	ldr	r2, [r7, #32]
 800142e:	2164      	movs	r1, #100	@ 0x64
 8001430:	200a      	movs	r0, #10
 8001432:	f001 fdd9 	bl	8002fe8 <ILI9341_WriteString>
	ILI9341_WriteString(10, 130, linebrk, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <display_stats+0x148>)
 8001438:	221f      	movs	r2, #31
 800143a:	9202      	str	r2, [sp, #8]
 800143c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	9200      	str	r2, [sp, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	69fa      	ldr	r2, [r7, #28]
 800144a:	2182      	movs	r1, #130	@ 0x82
 800144c:	200a      	movs	r0, #10
 800144e:	f001 fdcb 	bl	8002fe8 <ILI9341_WriteString>

	// Squirrels Fed: squcount
	// Food Dispensed: strWeight
	ILI9341_WriteString(10, 160, squcount, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <display_stats+0x148>)
 8001454:	221f      	movs	r2, #31
 8001456:	9202      	str	r2, [sp, #8]
 8001458:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800145c:	9201      	str	r2, [sp, #4]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	9200      	str	r2, [sp, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	21a0      	movs	r1, #160	@ 0xa0
 8001468:	200a      	movs	r0, #10
 800146a:	f001 fdbd 	bl	8002fe8 <ILI9341_WriteString>
	ILI9341_WriteString(10, 190, flevels, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <display_stats+0x148>)
 8001470:	221f      	movs	r2, #31
 8001472:	9202      	str	r2, [sp, #8]
 8001474:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001478:	9201      	str	r2, [sp, #4]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	9200      	str	r2, [sp, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	21be      	movs	r1, #190	@ 0xbe
 8001484:	200a      	movs	r0, #10
 8001486:	f001 fdaf 	bl	8002fe8 <ILI9341_WriteString>
}
 800148a:	bf00      	nop
 800148c:	3730      	adds	r7, #48	@ 0x30
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	0800c9e4 	.word	0x0800c9e4
 8001498:	0800c9ec 	.word	0x0800c9ec
 800149c:	0800c9f0 	.word	0x0800c9f0
 80014a0:	0800c9fc 	.word	0x0800c9fc
 80014a4:	0800ca0c 	.word	0x0800ca0c
 80014a8:	0800ca18 	.word	0x0800ca18
 80014ac:	0800ca1c 	.word	0x0800ca1c
 80014b0:	0800ca2c 	.word	0x0800ca2c
 80014b4:	20040094 	.word	0x20040094
 80014b8:	2004008c 	.word	0x2004008c

080014bc <lcd_init>:

void lcd_init() {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	ILI9341_Unselect();
 80014c0:	f001 fb43 	bl	8002b4a <ILI9341_Unselect>
	ILI9341_Init();
 80014c4:	f001 fbf0 	bl	8002ca8 <ILI9341_Init>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <lcd_between>:
void lcd_between(){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 80014d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014d4:	f001 ff10 	bl	80032f8 <HAL_Delay>
	ILI9341_FillScreen(ILI9341_WHITE);
 80014d8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80014dc:	f001 fe3e 	bl	800315c <ILI9341_FillScreen>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <microDelay>:

/*
 * Really short delay function
 */
static void microDelay(uint16_t delay)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	80fb      	strh	r3, [r7, #6]
	return;
 80014ee:	bf00      	nop
  __HAL_TIM_SET_COUNTER(&PS_TIMER_HANDLE, 0);
  while (__HAL_TIM_GET_COUNTER(&PS_TIMER_HANDLE) < delay);
}
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <getHX711>:

/*
 * reads in data value from HX711
 */
static int32_t getHX711(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 8001506:	f001 feeb 	bl	80032e0 <HAL_GetTick>
 800150a:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(PS0_DATA_GPIO_Port, PS0_DATA_Pin) == GPIO_PIN_SET)
 800150c:	e008      	b.n	8001520 <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 800150e:	f001 fee7 	bl	80032e0 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2bc8      	cmp	r3, #200	@ 0xc8
 800151a:	d901      	bls.n	8001520 <getHX711+0x24>
      return 0;
 800151c:	2300      	movs	r3, #0
 800151e:	e045      	b.n	80015ac <getHX711+0xb0>
  while(HAL_GPIO_ReadPin(PS0_DATA_GPIO_Port, PS0_DATA_Pin) == GPIO_PIN_SET)
 8001520:	2108      	movs	r1, #8
 8001522:	4824      	ldr	r0, [pc, #144]	@ (80015b4 <getHX711+0xb8>)
 8001524:	f003 fa52 	bl	80049cc <HAL_GPIO_ReadPin>
 8001528:	4603      	mov	r3, r0
 800152a:	2b01      	cmp	r3, #1
 800152c:	d0ef      	beq.n	800150e <getHX711+0x12>
  }

  for(int8_t len=0; len<24 ; len++)
 800152e:	2300      	movs	r3, #0
 8001530:	72fb      	strb	r3, [r7, #11]
 8001532:	e022      	b.n	800157a <getHX711+0x7e>
  {
    HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	2102      	movs	r1, #2
 8001538:	481e      	ldr	r0, [pc, #120]	@ (80015b4 <getHX711+0xb8>)
 800153a:	f003 fa5f 	bl	80049fc <HAL_GPIO_WritePin>
    microDelay(1);
 800153e:	2001      	movs	r0, #1
 8001540:	f7ff ffd0 	bl	80014e4 <microDelay>
    data = data << 1;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2102      	movs	r1, #2
 800154e:	4819      	ldr	r0, [pc, #100]	@ (80015b4 <getHX711+0xb8>)
 8001550:	f003 fa54 	bl	80049fc <HAL_GPIO_WritePin>
    microDelay(1);
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff ffc5 	bl	80014e4 <microDelay>
    if(HAL_GPIO_ReadPin(PS0_DATA_GPIO_Port, PS0_DATA_Pin) == GPIO_PIN_SET)
 800155a:	2108      	movs	r1, #8
 800155c:	4815      	ldr	r0, [pc, #84]	@ (80015b4 <getHX711+0xb8>)
 800155e:	f003 fa35 	bl	80049cc <HAL_GPIO_ReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	2b01      	cmp	r3, #1
 8001566:	d102      	bne.n	800156e <getHX711+0x72>
      data ++;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	3301      	adds	r3, #1
 800156c:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 800156e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	3301      	adds	r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	72fb      	strb	r3, [r7, #11]
 800157a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800157e:	2b17      	cmp	r3, #23
 8001580:	ddd8      	ble.n	8001534 <getHX711+0x38>
  }

  data = data ^ 0x800000;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8001588:	60fb      	str	r3, [r7, #12]

  /*
   * END BIT
   */
  HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	2102      	movs	r1, #2
 800158e:	4809      	ldr	r0, [pc, #36]	@ (80015b4 <getHX711+0xb8>)
 8001590:	f003 fa34 	bl	80049fc <HAL_GPIO_WritePin>
  microDelay(1);
 8001594:	2001      	movs	r0, #1
 8001596:	f7ff ffa5 	bl	80014e4 <microDelay>
  HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	2102      	movs	r1, #2
 800159e:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <getHX711+0xb8>)
 80015a0:	f003 fa2c 	bl	80049fc <HAL_GPIO_WritePin>
  microDelay(1);
 80015a4:	2001      	movs	r0, #1
 80015a6:	f7ff ff9d 	bl	80014e4 <microDelay>

  return data;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	48000800 	.word	0x48000800

080015b8 <weigh>:


static int weigh()
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
  int32_t  total = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  int32_t  samples = 50;
 80015c2:	2332      	movs	r3, #50	@ 0x32
 80015c4:	60fb      	str	r3, [r7, #12]
  int milligram;
  float coefficient;

  for(uint16_t i=0 ; i<samples ; i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	827b      	strh	r3, [r7, #18]
 80015ca:	e008      	b.n	80015de <weigh+0x26>
  {
      total += getHX711();
 80015cc:	f7ff ff96 	bl	80014fc <getHX711>
 80015d0:	4602      	mov	r2, r0
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	4413      	add	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]
  for(uint16_t i=0 ; i<samples ; i++)
 80015d8:	8a7b      	ldrh	r3, [r7, #18]
 80015da:	3301      	adds	r3, #1
 80015dc:	827b      	strh	r3, [r7, #18]
 80015de:	8a7b      	ldrh	r3, [r7, #18]
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	dcf2      	bgt.n	80015cc <weigh+0x14>
  }
  int32_t average = (int32_t)(total / samples);
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80015ee:	60bb      	str	r3, [r7, #8]
  coefficient = knownOriginal / knownHX711;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <weigh+0x78>)
 80015f2:	edd3 6a00 	vldr	s13, [r3]
 80015f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <weigh+0x7c>)
 80015f8:	ed93 7a00 	vldr	s14, [r3]
 80015fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001600:	edc7 7a01 	vstr	s15, [r7, #4]
  milligram = (int)(average-PS0_TARE)*coefficient;
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <weigh+0x80>)
 8001608:	4413      	add	r3, r2
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001612:	edd7 7a01 	vldr	s15, [r7, #4]
 8001616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800161e:	ee17 3a90 	vmov	r3, s15
 8001622:	603b      	str	r3, [r7, #0]
  return milligram;
 8001624:	683b      	ldr	r3, [r7, #0]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20040000 	.word	0x20040000
 8001634:	20040004 	.word	0x20040004
 8001638:	ff7e8f5e 	.word	0xff7e8f5e

0800163c <ps_init>:


void ps_init() {};
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <ps_isr>:

void ps_isr() {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	CURRENT_READING = weigh();
 8001650:	f7ff ffb2 	bl	80015b8 <weigh>
 8001654:	4603      	mov	r3, r0
 8001656:	4a02      	ldr	r2, [pc, #8]	@ (8001660 <ps_isr+0x14>)
 8001658:	6013      	str	r3, [r2, #0]
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200403dc 	.word	0x200403dc

08001664 <ps_get_reading>:

int ps_get_reading() {
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
	return CURRENT_READING;
 8001668:	4b03      	ldr	r3, [pc, #12]	@ (8001678 <ps_get_reading+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	200403dc 	.word	0x200403dc

0800167c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	f5ad 6d8d 	sub.w	sp, sp, #1128	@ 0x468
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001684:	f001 fdc4 	bl	8003210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001688:	f000 f842 	bl	8001710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168c:	f000 fb62 	bl	8001d54 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001690:	f000 fb14 	bl	8001cbc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001694:	f000 f8e6 	bl	8001864 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001698:	f007 f8ce 	bl	8008838 <MX_FATFS_Init>
  MX_SPI3_Init();
 800169c:	f000 f920 	bl	80018e0 <MX_SPI3_Init>
  MX_ADC1_Init();
 80016a0:	f000 f87c 	bl	800179c <MX_ADC1_Init>
  MX_TIM2_Init();
 80016a4:	f000 f95a 	bl	800195c <MX_TIM2_Init>
  MX_TIM3_Init();
 80016a8:	f000 f9a6 	bl	80019f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80016ac:	f000 f9f2 	bl	8001a94 <MX_TIM4_Init>
  MX_TIM5_Init();
 80016b0:	f000 fa3e 	bl	8001b30 <MX_TIM5_Init>
  MX_TIM15_Init();
 80016b4:	f000 fa8a 	bl	8001bcc <MX_TIM15_Init>
  MX_TIM16_Init();
 80016b8:	f000 fada 	bl	8001c70 <MX_TIM16_Init>

  FATFS FatFs; 	//Fatfs handle
   FIL fil; 		//File handle
   FRESULT fres; //Result after operations

   fres = f_mount(&FatFs, "", 1); //1=mount now
 80016bc:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 80016c0:	2201      	movs	r2, #1
 80016c2:	4910      	ldr	r1, [pc, #64]	@ (8001704 <main+0x88>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f009 fb3f 	bl	800ad48 <f_mount>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f887 3467 	strb.w	r3, [r7, #1127]	@ 0x467
   while (fres != FR_OK);
 80016d0:	bf00      	nop
 80016d2:	f897 3467 	ldrb.w	r3, [r7, #1127]	@ 0x467
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1fb      	bne.n	80016d2 <main+0x56>

   init_peripherals();
 80016da:	f7ff fc9d 	bl	8001018 <init_peripherals>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//weight = ps_get_reading();
	//squirrel_count = 1; //currently the logic for this is not implemented
	squirrel_clip();
 80016de:	f7ff fe23 	bl	8001328 <squirrel_clip>
	lcd_between();
 80016e2:	f7ff fef3 	bl	80014cc <lcd_between>
	squirrel_res();
 80016e6:	f7ff fe31 	bl	800134c <squirrel_res>
	lcd_between();
 80016ea:	f7ff feef 	bl	80014cc <lcd_between>
	display_stats(weight,squirrel_count);
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <main+0x8c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a06      	ldr	r2, [pc, #24]	@ (800170c <main+0x90>)
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fe39 	bl	8001370 <display_stats>
  {
 80016fe:	bf00      	nop
 8001700:	e7ed      	b.n	80016de <main+0x62>
 8001702:	bf00      	nop
 8001704:	0800ca40 	.word	0x0800ca40
 8001708:	200403e0 	.word	0x200403e0
 800170c:	200403e4 	.word	0x200403e4

08001710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b096      	sub	sp, #88	@ 0x58
 8001714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	2244      	movs	r2, #68	@ 0x44
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f00a f8ef 	bl	800b902 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001724:	463b      	mov	r3, r7
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001732:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001736:	f003 f999 	bl	8004a6c <HAL_PWREx_ControlVoltageScaling>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001740:	f000 fc5c 	bl	8001ffc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001744:	2310      	movs	r3, #16
 8001746:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001748:	2301      	movs	r3, #1
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001750:	2360      	movs	r3, #96	@ 0x60
 8001752:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001754:	2300      	movs	r3, #0
 8001756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4618      	mov	r0, r3
 800175e:	f003 fa39 	bl	8004bd4 <HAL_RCC_OscConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001768:	f000 fc48 	bl	8001ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176c:	230f      	movs	r3, #15
 800176e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001780:	463b      	mov	r3, r7
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f003 fe3f 	bl	8005408 <HAL_RCC_ClockConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001790:	f000 fc34 	bl	8001ffc <Error_Handler>
  }
}
 8001794:	bf00      	nop
 8001796:	3758      	adds	r7, #88	@ 0x58
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017a2:	463b      	mov	r3, r7
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017b2:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <MX_ADC1_Init+0xbc>)
 80017b4:	4a29      	ldr	r2, [pc, #164]	@ (800185c <MX_ADC1_Init+0xc0>)
 80017b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017b8:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <MX_ADC1_Init+0xbc>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017be:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <MX_ADC1_Init+0xbc>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017c4:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <MX_ADC1_Init+0xbc>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ca:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <MX_ADC1_Init+0xbc>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017d0:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <MX_ADC1_Init+0xbc>)
 80017d2:	2204      	movs	r2, #4
 80017d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017d6:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <MX_ADC1_Init+0xbc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001858 <MX_ADC1_Init+0xbc>)
 80017de:	2200      	movs	r2, #0
 80017e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80017e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <MX_ADC1_Init+0xbc>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <MX_ADC1_Init+0xbc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <MX_ADC1_Init+0xbc>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017f6:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <MX_ADC1_Init+0xbc>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017fc:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <MX_ADC1_Init+0xbc>)
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001804:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <MX_ADC1_Init+0xbc>)
 8001806:	2200      	movs	r2, #0
 8001808:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800180a:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <MX_ADC1_Init+0xbc>)
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001812:	4811      	ldr	r0, [pc, #68]	@ (8001858 <MX_ADC1_Init+0xbc>)
 8001814:	f001 ff6e 	bl	80036f4 <HAL_ADC_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800181e:	f000 fbed 	bl	8001ffc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <MX_ADC1_Init+0xc4>)
 8001824:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001826:	2306      	movs	r3, #6
 8001828:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800182e:	237f      	movs	r3, #127	@ 0x7f
 8001830:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001832:	2304      	movs	r3, #4
 8001834:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800183a:	463b      	mov	r3, r7
 800183c:	4619      	mov	r1, r3
 800183e:	4806      	ldr	r0, [pc, #24]	@ (8001858 <MX_ADC1_Init+0xbc>)
 8001840:	f002 f99e 	bl	8003b80 <HAL_ADC_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800184a:	f000 fbd7 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200403e8 	.word	0x200403e8
 800185c:	50040000 	.word	0x50040000
 8001860:	36902000 	.word	0x36902000

08001864 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001868:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <MX_SPI1_Init+0x74>)
 800186a:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <MX_SPI1_Init+0x78>)
 800186c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800186e:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <MX_SPI1_Init+0x74>)
 8001870:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <MX_SPI1_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800187c:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <MX_SPI1_Init+0x74>)
 800187e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001882:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001884:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <MX_SPI1_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188a:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <MX_SPI1_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001890:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <MX_SPI1_Init+0x74>)
 8001892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001896:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001898:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <MX_SPI1_Init+0x74>)
 800189a:	2218      	movs	r2, #24
 800189c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800189e:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <MX_SPI1_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <MX_SPI1_Init+0x74>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <MX_SPI1_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018b0:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <MX_SPI1_Init+0x74>)
 80018b2:	2207      	movs	r2, #7
 80018b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018b6:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <MX_SPI1_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <MX_SPI1_Init+0x74>)
 80018be:	2208      	movs	r2, #8
 80018c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018c2:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <MX_SPI1_Init+0x74>)
 80018c4:	f004 fd76 	bl	80063b4 <HAL_SPI_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018ce:	f000 fb95 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20040450 	.word	0x20040450
 80018dc:	40013000 	.word	0x40013000

080018e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <MX_SPI3_Init+0x74>)
 80018e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001958 <MX_SPI3_Init+0x78>)
 80018e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <MX_SPI3_Init+0x74>)
 80018ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018f2:	4b18      	ldr	r3, [pc, #96]	@ (8001954 <MX_SPI3_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f8:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <MX_SPI3_Init+0x74>)
 80018fa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80018fe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <MX_SPI3_Init+0x74>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <MX_SPI3_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <MX_SPI3_Init+0x74>)
 800190e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001912:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001914:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <MX_SPI3_Init+0x74>)
 8001916:	2228      	movs	r2, #40	@ 0x28
 8001918:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <MX_SPI3_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <MX_SPI3_Init+0x74>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <MX_SPI3_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <MX_SPI3_Init+0x74>)
 800192e:	2207      	movs	r2, #7
 8001930:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <MX_SPI3_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <MX_SPI3_Init+0x74>)
 800193a:	2208      	movs	r2, #8
 800193c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	@ (8001954 <MX_SPI3_Init+0x74>)
 8001940:	f004 fd38 	bl	80063b4 <HAL_SPI_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800194a:	f000 fb57 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200404b4 	.word	0x200404b4
 8001958:	40003c00 	.word	0x40003c00

0800195c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800197a:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <MX_TIM2_Init+0x98>)
 800197c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001980:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001982:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <MX_TIM2_Init+0x98>)
 8001984:	2247      	movs	r2, #71	@ 0x47
 8001986:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b1a      	ldr	r3, [pc, #104]	@ (80019f4 <MX_TIM2_Init+0x98>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800198e:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <MX_TIM2_Init+0x98>)
 8001990:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001994:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <MX_TIM2_Init+0x98>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199c:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <MX_TIM2_Init+0x98>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019a2:	4814      	ldr	r0, [pc, #80]	@ (80019f4 <MX_TIM2_Init+0x98>)
 80019a4:	f005 faa2 	bl	8006eec <HAL_TIM_Base_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019ae:	f000 fb25 	bl	8001ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4619      	mov	r1, r3
 80019be:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <MX_TIM2_Init+0x98>)
 80019c0:	f005 fc92 	bl	80072e8 <HAL_TIM_ConfigClockSource>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019ca:	f000 fb17 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4806      	ldr	r0, [pc, #24]	@ (80019f4 <MX_TIM2_Init+0x98>)
 80019dc:	f005 fec0 	bl	8007760 <HAL_TIMEx_MasterConfigSynchronization>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019e6:	f000 fb09 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20040518 	.word	0x20040518

080019f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fe:	f107 0310 	add.w	r3, r7, #16
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a16:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <MX_TIM3_Init+0x94>)
 8001a18:	4a1d      	ldr	r2, [pc, #116]	@ (8001a90 <MX_TIM3_Init+0x98>)
 8001a1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <MX_TIM3_Init+0x94>)
 8001a1e:	223f      	movs	r2, #63	@ 0x3f
 8001a20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <MX_TIM3_Init+0x94>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a28:	4b18      	ldr	r3, [pc, #96]	@ (8001a8c <MX_TIM3_Init+0x94>)
 8001a2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a30:	4b16      	ldr	r3, [pc, #88]	@ (8001a8c <MX_TIM3_Init+0x94>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a36:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <MX_TIM3_Init+0x94>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a3c:	4813      	ldr	r0, [pc, #76]	@ (8001a8c <MX_TIM3_Init+0x94>)
 8001a3e:	f005 fa55 	bl	8006eec <HAL_TIM_Base_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a48:	f000 fad8 	bl	8001ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	4619      	mov	r1, r3
 8001a58:	480c      	ldr	r0, [pc, #48]	@ (8001a8c <MX_TIM3_Init+0x94>)
 8001a5a:	f005 fc45 	bl	80072e8 <HAL_TIM_ConfigClockSource>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a64:	f000 faca 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <MX_TIM3_Init+0x94>)
 8001a76:	f005 fe73 	bl	8007760 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a80:	f000 fabc 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20040564 	.word	0x20040564
 8001a90:	40000400 	.word	0x40000400

08001a94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <MX_TIM4_Init+0x94>)
 8001ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b2c <MX_TIM4_Init+0x98>)
 8001ab6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 127;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <MX_TIM4_Init+0x94>)
 8001aba:	227f      	movs	r2, #127	@ 0x7f
 8001abc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <MX_TIM4_Init+0x94>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 62;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <MX_TIM4_Init+0x94>)
 8001ac6:	223e      	movs	r2, #62	@ 0x3e
 8001ac8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aca:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <MX_TIM4_Init+0x94>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <MX_TIM4_Init+0x94>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ad6:	4814      	ldr	r0, [pc, #80]	@ (8001b28 <MX_TIM4_Init+0x94>)
 8001ad8:	f005 fa08 	bl	8006eec <HAL_TIM_Base_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001ae2:	f000 fa8b 	bl	8001ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	4619      	mov	r1, r3
 8001af2:	480d      	ldr	r0, [pc, #52]	@ (8001b28 <MX_TIM4_Init+0x94>)
 8001af4:	f005 fbf8 	bl	80072e8 <HAL_TIM_ConfigClockSource>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001afe:	f000 fa7d 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4806      	ldr	r0, [pc, #24]	@ (8001b28 <MX_TIM4_Init+0x94>)
 8001b10:	f005 fe26 	bl	8007760 <HAL_TIMEx_MasterConfigSynchronization>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001b1a:	f000 fa6f 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	3720      	adds	r7, #32
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200405b0 	.word	0x200405b0
 8001b2c:	40000800 	.word	0x40000800

08001b30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc4 <MX_TIM5_Init+0x94>)
 8001b50:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc8 <MX_TIM5_Init+0x98>)
 8001b52:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc4 <MX_TIM5_Init+0x94>)
 8001b56:	2207      	movs	r2, #7
 8001b58:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc4 <MX_TIM5_Init+0x94>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001b60:	4b18      	ldr	r3, [pc, #96]	@ (8001bc4 <MX_TIM5_Init+0x94>)
 8001b62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b68:	4b16      	ldr	r3, [pc, #88]	@ (8001bc4 <MX_TIM5_Init+0x94>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <MX_TIM5_Init+0x94>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b74:	4813      	ldr	r0, [pc, #76]	@ (8001bc4 <MX_TIM5_Init+0x94>)
 8001b76:	f005 f9b9 	bl	8006eec <HAL_TIM_Base_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001b80:	f000 fa3c 	bl	8001ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480c      	ldr	r0, [pc, #48]	@ (8001bc4 <MX_TIM5_Init+0x94>)
 8001b92:	f005 fba9 	bl	80072e8 <HAL_TIM_ConfigClockSource>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001b9c:	f000 fa2e 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <MX_TIM5_Init+0x94>)
 8001bae:	f005 fdd7 	bl	8007760 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001bb8:	f000 fa20 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200405fc 	.word	0x200405fc
 8001bc8:	40000c00 	.word	0x40000c00

08001bcc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001bea:	4b1f      	ldr	r3, [pc, #124]	@ (8001c68 <MX_TIM15_Init+0x9c>)
 8001bec:	4a1f      	ldr	r2, [pc, #124]	@ (8001c6c <MX_TIM15_Init+0xa0>)
 8001bee:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <MX_TIM15_Init+0x9c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <MX_TIM15_Init+0x9c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <MX_TIM15_Init+0x9c>)
 8001bfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c02:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c04:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <MX_TIM15_Init+0x9c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001c0a:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <MX_TIM15_Init+0x9c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c10:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <MX_TIM15_Init+0x9c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001c16:	4814      	ldr	r0, [pc, #80]	@ (8001c68 <MX_TIM15_Init+0x9c>)
 8001c18:	f005 f968 	bl	8006eec <HAL_TIM_Base_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001c22:	f000 f9eb 	bl	8001ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	4619      	mov	r1, r3
 8001c32:	480d      	ldr	r0, [pc, #52]	@ (8001c68 <MX_TIM15_Init+0x9c>)
 8001c34:	f005 fb58 	bl	80072e8 <HAL_TIM_ConfigClockSource>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001c3e:	f000 f9dd 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4806      	ldr	r0, [pc, #24]	@ (8001c68 <MX_TIM15_Init+0x9c>)
 8001c50:	f005 fd86 	bl	8007760 <HAL_TIMEx_MasterConfigSynchronization>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001c5a:	f000 f9cf 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	3720      	adds	r7, #32
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20040648 	.word	0x20040648
 8001c6c:	40014000 	.word	0x40014000

08001c70 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb4 <MX_TIM16_Init+0x44>)
 8001c76:	4a10      	ldr	r2, [pc, #64]	@ (8001cb8 <MX_TIM16_Init+0x48>)
 8001c78:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <MX_TIM16_Init+0x44>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <MX_TIM16_Init+0x44>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <MX_TIM16_Init+0x44>)
 8001c88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c8c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8e:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <MX_TIM16_Init+0x44>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c94:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <MX_TIM16_Init+0x44>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <MX_TIM16_Init+0x44>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ca0:	4804      	ldr	r0, [pc, #16]	@ (8001cb4 <MX_TIM16_Init+0x44>)
 8001ca2:	f005 f923 	bl	8006eec <HAL_TIM_Base_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001cac:	f000 f9a6 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20040694 	.word	0x20040694
 8001cb8:	40014400 	.word	0x40014400

08001cbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cc0:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <MX_USART3_UART_Init+0x90>)
 8001cc2:	4a23      	ldr	r2, [pc, #140]	@ (8001d50 <MX_USART3_UART_Init+0x94>)
 8001cc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001cc6:	4b21      	ldr	r3, [pc, #132]	@ (8001d4c <MX_USART3_UART_Init+0x90>)
 8001cc8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001ccc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cce:	4b1f      	ldr	r3, [pc, #124]	@ (8001d4c <MX_USART3_UART_Init+0x90>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <MX_USART3_UART_Init+0x90>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <MX_USART3_UART_Init+0x90>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <MX_USART3_UART_Init+0x90>)
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce6:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <MX_USART3_UART_Init+0x90>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cec:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <MX_USART3_UART_Init+0x90>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cf2:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <MX_USART3_UART_Init+0x90>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	@ (8001d4c <MX_USART3_UART_Init+0x90>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <MX_USART3_UART_Init+0x90>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d04:	4811      	ldr	r0, [pc, #68]	@ (8001d4c <MX_USART3_UART_Init+0x90>)
 8001d06:	f005 fdd1 	bl	80078ac <HAL_UART_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d10:	f000 f974 	bl	8001ffc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d14:	2100      	movs	r1, #0
 8001d16:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <MX_USART3_UART_Init+0x90>)
 8001d18:	f006 fcc4 	bl	80086a4 <HAL_UARTEx_SetTxFifoThreshold>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d22:	f000 f96b 	bl	8001ffc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d26:	2100      	movs	r1, #0
 8001d28:	4808      	ldr	r0, [pc, #32]	@ (8001d4c <MX_USART3_UART_Init+0x90>)
 8001d2a:	f006 fcf9 	bl	8008720 <HAL_UARTEx_SetRxFifoThreshold>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001d34:	f000 f962 	bl	8001ffc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d38:	4804      	ldr	r0, [pc, #16]	@ (8001d4c <MX_USART3_UART_Init+0x90>)
 8001d3a:	f006 fc7a 	bl	8008632 <HAL_UARTEx_DisableFifoMode>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001d44:	f000 f95a 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	200406e0 	.word	0x200406e0
 8001d50:	40004800 	.word	0x40004800

08001d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	@ 0x30
 8001d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d6a:	4b9d      	ldr	r3, [pc, #628]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	4a9c      	ldr	r2, [pc, #624]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001d70:	f043 0320 	orr.w	r3, r3, #32
 8001d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d76:	4b9a      	ldr	r3, [pc, #616]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d82:	4b97      	ldr	r3, [pc, #604]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	4a96      	ldr	r2, [pc, #600]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8e:	4b94      	ldr	r3, [pc, #592]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	4b91      	ldr	r3, [pc, #580]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9e:	4a90      	ldr	r2, [pc, #576]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da6:	4b8e      	ldr	r3, [pc, #568]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db2:	4b8b      	ldr	r3, [pc, #556]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db6:	4a8a      	ldr	r2, [pc, #552]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dbe:	4b88      	ldr	r3, [pc, #544]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dca:	4b85      	ldr	r3, [pc, #532]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dce:	4a84      	ldr	r2, [pc, #528]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd6:	4b82      	ldr	r3, [pc, #520]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de2:	4b7f      	ldr	r3, [pc, #508]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de6:	4a7e      	ldr	r2, [pc, #504]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001de8:	f043 0308 	orr.w	r3, r3, #8
 8001dec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dee:	4b7c      	ldr	r3, [pc, #496]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dfa:	4b79      	ldr	r3, [pc, #484]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfe:	4a78      	ldr	r2, [pc, #480]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001e00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e06:	4b76      	ldr	r3, [pc, #472]	@ (8001fe0 <MX_GPIO_Init+0x28c>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8001e12:	f002 fecf 	bl	8004bb4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PS1_CLK_Pin|M1_2_Pin|M1_3_Pin|LCD_CS_Pin
 8001e16:	2200      	movs	r2, #0
 8001e18:	f24c 0129 	movw	r1, #49193	@ 0xc029
 8001e1c:	4871      	ldr	r0, [pc, #452]	@ (8001fe4 <MX_GPIO_Init+0x290>)
 8001e1e:	f002 fded 	bl	80049fc <HAL_GPIO_WritePin>
                          |LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PS0_CLK_Pin|M0_0_Pin|M0_1_Pin|M0_2_Pin
 8001e22:	2200      	movs	r2, #0
 8001e24:	f641 7102 	movw	r1, #7938	@ 0x1f02
 8001e28:	486f      	ldr	r0, [pc, #444]	@ (8001fe8 <MX_GPIO_Init+0x294>)
 8001e2a:	f002 fde7 	bl	80049fc <HAL_GPIO_WritePin>
                          |M0_3_Pin|M1_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e34:	486d      	ldr	r0, [pc, #436]	@ (8001fec <MX_GPIO_Init+0x298>)
 8001e36:	f002 fde1 	bl	80049fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_CS_Pin|M1_1_Pin, GPIO_PIN_RESET);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f244 0104 	movw	r1, #16388	@ 0x4004
 8001e40:	486b      	ldr	r0, [pc, #428]	@ (8001ff0 <MX_GPIO_Init+0x29c>)
 8001e42:	f002 fddb 	bl	80049fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PS1_CLK_Pin M1_2_Pin M1_3_Pin LCD_CS_Pin
                           LCD_DC_Pin */
  GPIO_InitStruct.Pin = PS1_CLK_Pin|M1_2_Pin|M1_3_Pin|LCD_CS_Pin
 8001e46:	f24c 0329 	movw	r3, #49193	@ 0xc029
 8001e4a:	61fb      	str	r3, [r7, #28]
                          |LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4861      	ldr	r0, [pc, #388]	@ (8001fe4 <MX_GPIO_Init+0x290>)
 8001e60:	f002 fc22 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS1_DATA_Pin */
  GPIO_InitStruct.Pin = PS1_DATA_Pin;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PS1_DATA_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	4619      	mov	r1, r3
 8001e76:	485b      	ldr	r0, [pc, #364]	@ (8001fe4 <MX_GPIO_Init+0x290>)
 8001e78:	f002 fc16 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS0_CLK_Pin M0_0_Pin M0_1_Pin M0_2_Pin
                           M0_3_Pin M1_0_Pin */
  GPIO_InitStruct.Pin = PS0_CLK_Pin|M0_0_Pin|M0_1_Pin|M0_2_Pin
 8001e7c:	f641 7302 	movw	r3, #7938	@ 0x1f02
 8001e80:	61fb      	str	r3, [r7, #28]
                          |M0_3_Pin|M1_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e82:	2301      	movs	r3, #1
 8001e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8e:	f107 031c 	add.w	r3, r7, #28
 8001e92:	4619      	mov	r1, r3
 8001e94:	4854      	ldr	r0, [pc, #336]	@ (8001fe8 <MX_GPIO_Init+0x294>)
 8001e96:	f002 fc07 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS0_DATA_Pin */
  GPIO_InitStruct.Pin = PS0_DATA_Pin;
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PS0_DATA_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	484e      	ldr	r0, [pc, #312]	@ (8001fe8 <MX_GPIO_Init+0x294>)
 8001eae:	f002 fbfb 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001eb2:	f44f 53fc 	mov.w	r3, #8064	@ 0x1f80
 8001eb6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4847      	ldr	r0, [pc, #284]	@ (8001fec <MX_GPIO_Init+0x298>)
 8001ed0:	f002 fbea 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001ed4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	483f      	ldr	r0, [pc, #252]	@ (8001fec <MX_GPIO_Init+0x298>)
 8001eee:	f002 fbdb 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001ef2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001f04:	2303      	movs	r3, #3
 8001f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4837      	ldr	r0, [pc, #220]	@ (8001fec <MX_GPIO_Init+0x298>)
 8001f10:	f002 fbca 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001f14:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001f26:	230d      	movs	r3, #13
 8001f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2a:	f107 031c 	add.w	r3, r7, #28
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4830      	ldr	r0, [pc, #192]	@ (8001ff4 <MX_GPIO_Init+0x2a0>)
 8001f32:	f002 fbb9 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin M1_1_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|M1_1_Pin;
 8001f36:	f244 0304 	movw	r3, #16388	@ 0x4004
 8001f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4828      	ldr	r0, [pc, #160]	@ (8001ff0 <MX_GPIO_Init+0x29c>)
 8001f50:	f002 fbaa 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001f54:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001f66:	2308      	movs	r3, #8
 8001f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4821      	ldr	r0, [pc, #132]	@ (8001ff8 <MX_GPIO_Init+0x2a4>)
 8001f72:	f002 fb99 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f76:	2340      	movs	r3, #64	@ 0x40
 8001f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001f86:	230d      	movs	r3, #13
 8001f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8a:	f107 031c 	add.w	r3, r7, #28
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4815      	ldr	r0, [pc, #84]	@ (8001fe8 <MX_GPIO_Init+0x294>)
 8001f92:	f002 fb89 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001f96:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fa8:	230a      	movs	r3, #10
 8001faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fb6:	f002 fb77 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fd2:	f002 fb69 	bl	80046a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fd6:	bf00      	nop
 8001fd8:	3730      	adds	r7, #48	@ 0x30
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	48001400 	.word	0x48001400
 8001fe8:	48000800 	.word	0x48000800
 8001fec:	48001000 	.word	0x48001000
 8001ff0:	48000c00 	.word	0x48000c00
 8001ff4:	48000400 	.word	0x48000400
 8001ff8:	48001800 	.word	0x48001800

08001ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <Error_Handler+0x8>

08002008 <stepper_rotate_clockwise_ir>:
	{1, 0, 0, 1} };

static bool motor_running = false;
static uint32_t cur_rotation_idx = 0;

void stepper_rotate_clockwise_ir() {
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(M0_0_GPIO_Port, M0_0_Pin, steps[cur_rotation_idx][0]);
 800200c:	4b22      	ldr	r3, [pc, #136]	@ (8002098 <stepper_rotate_clockwise_ir+0x90>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a22      	ldr	r2, [pc, #136]	@ (800209c <stepper_rotate_clockwise_ir+0x94>)
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	4413      	add	r3, r2
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002020:	481f      	ldr	r0, [pc, #124]	@ (80020a0 <stepper_rotate_clockwise_ir+0x98>)
 8002022:	f002 fceb 	bl	80049fc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(M0_1_GPIO_Port, M0_1_Pin, steps[cur_rotation_idx][1]);
 8002026:	4b1c      	ldr	r3, [pc, #112]	@ (8002098 <stepper_rotate_clockwise_ir+0x90>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1c      	ldr	r2, [pc, #112]	@ (800209c <stepper_rotate_clockwise_ir+0x94>)
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	4413      	add	r3, r2
 8002030:	3304      	adds	r3, #4
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800203c:	4818      	ldr	r0, [pc, #96]	@ (80020a0 <stepper_rotate_clockwise_ir+0x98>)
 800203e:	f002 fcdd 	bl	80049fc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(M0_2_GPIO_Port, M0_2_Pin, steps[cur_rotation_idx][2]);
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <stepper_rotate_clockwise_ir+0x90>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a15      	ldr	r2, [pc, #84]	@ (800209c <stepper_rotate_clockwise_ir+0x94>)
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	4413      	add	r3, r2
 800204c:	3308      	adds	r3, #8
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002058:	4811      	ldr	r0, [pc, #68]	@ (80020a0 <stepper_rotate_clockwise_ir+0x98>)
 800205a:	f002 fccf 	bl	80049fc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(M0_3_GPIO_Port, M0_3_Pin, steps[cur_rotation_idx][3]);
 800205e:	4b0e      	ldr	r3, [pc, #56]	@ (8002098 <stepper_rotate_clockwise_ir+0x90>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a0e      	ldr	r2, [pc, #56]	@ (800209c <stepper_rotate_clockwise_ir+0x94>)
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	4413      	add	r3, r2
 8002068:	330c      	adds	r3, #12
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002074:	480a      	ldr	r0, [pc, #40]	@ (80020a0 <stepper_rotate_clockwise_ir+0x98>)
 8002076:	f002 fcc1 	bl	80049fc <HAL_GPIO_WritePin>

	 // ALSO M1 TODO

	 cur_rotation_idx++;
 800207a:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <stepper_rotate_clockwise_ir+0x90>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a05      	ldr	r2, [pc, #20]	@ (8002098 <stepper_rotate_clockwise_ir+0x90>)
 8002082:	6013      	str	r3, [r2, #0]
	 if (cur_rotation_idx == 8) {
 8002084:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <stepper_rotate_clockwise_ir+0x90>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b08      	cmp	r3, #8
 800208a:	d102      	bne.n	8002092 <stepper_rotate_clockwise_ir+0x8a>
		 cur_rotation_idx = 0;
 800208c:	4b02      	ldr	r3, [pc, #8]	@ (8002098 <stepper_rotate_clockwise_ir+0x90>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
	 }
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20040778 	.word	0x20040778
 800209c:	20040008 	.word	0x20040008
 80020a0:	48000800 	.word	0x48000800

080020a4 <motor_start>:
//
//	// enable motor timer interrupt
//	HAL_TIM_Base_Start_IT(&MOTOR_TIMER_HANDLE);
//}

void motor_start() {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	if (motor_running) {
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <motor_start+0x20>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d106      	bne.n	80020be <motor_start+0x1a>
		return;
	}

	motor_running = true;
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <motor_start+0x20>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&MOTOR_TIMER_HANDLE);
 80020b6:	4804      	ldr	r0, [pc, #16]	@ (80020c8 <motor_start+0x24>)
 80020b8:	f004 ff70 	bl	8006f9c <HAL_TIM_Base_Start_IT>
 80020bc:	e000      	b.n	80020c0 <motor_start+0x1c>
		return;
 80020be:	bf00      	nop
}
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20040774 	.word	0x20040774
 80020c8:	200405b0 	.word	0x200405b0

080020cc <motor_stop>:

void motor_stop() {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	if (!motor_running) {
 80020d0:	4b07      	ldr	r3, [pc, #28]	@ (80020f0 <motor_stop+0x24>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	f083 0301 	eor.w	r3, r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d106      	bne.n	80020ec <motor_stop+0x20>
		return;
	}

	motor_running = false;
 80020de:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <motor_stop+0x24>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&MOTOR_TIMER_HANDLE);
 80020e4:	4803      	ldr	r0, [pc, #12]	@ (80020f4 <motor_stop+0x28>)
 80020e6:	f004 ffc9 	bl	800707c <HAL_TIM_Base_Stop_IT>
 80020ea:	e000      	b.n	80020ee <motor_stop+0x22>
		return;
 80020ec:	bf00      	nop
}
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20040774 	.word	0x20040774
 80020f4:	200405b0 	.word	0x200405b0

080020f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fe:	4b0f      	ldr	r3, [pc, #60]	@ (800213c <HAL_MspInit+0x44>)
 8002100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002102:	4a0e      	ldr	r2, [pc, #56]	@ (800213c <HAL_MspInit+0x44>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6613      	str	r3, [r2, #96]	@ 0x60
 800210a:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <HAL_MspInit+0x44>)
 800210c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	4b09      	ldr	r3, [pc, #36]	@ (800213c <HAL_MspInit+0x44>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211a:	4a08      	ldr	r2, [pc, #32]	@ (800213c <HAL_MspInit+0x44>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002120:	6593      	str	r3, [r2, #88]	@ 0x58
 8002122:	4b06      	ldr	r3, [pc, #24]	@ (800213c <HAL_MspInit+0x44>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000

08002140 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b0b0      	sub	sp, #192	@ 0xc0
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002158:	f107 0318 	add.w	r3, r7, #24
 800215c:	2294      	movs	r2, #148	@ 0x94
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f009 fbce 	bl	800b902 <memset>
  if(hadc->Instance==ADC1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a35      	ldr	r2, [pc, #212]	@ (8002240 <HAL_ADC_MspInit+0x100>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d162      	bne.n	8002236 <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002170:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002174:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002176:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800217a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800217e:	2301      	movs	r3, #1
 8002180:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002182:	2301      	movs	r3, #1
 8002184:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002186:	2310      	movs	r3, #16
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800218a:	2302      	movs	r3, #2
 800218c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800218e:	2302      	movs	r3, #2
 8002190:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002192:	2302      	movs	r3, #2
 8002194:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002196:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800219a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800219c:	f107 0318 	add.w	r3, r7, #24
 80021a0:	4618      	mov	r0, r3
 80021a2:	f003 fbef 	bl	8005984 <HAL_RCCEx_PeriphCLKConfig>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80021ac:	f7ff ff26 	bl	8001ffc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80021b0:	4b24      	ldr	r3, [pc, #144]	@ (8002244 <HAL_ADC_MspInit+0x104>)
 80021b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b4:	4a23      	ldr	r2, [pc, #140]	@ (8002244 <HAL_ADC_MspInit+0x104>)
 80021b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021bc:	4b21      	ldr	r3, [pc, #132]	@ (8002244 <HAL_ADC_MspInit+0x104>)
 80021be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002244 <HAL_ADC_MspInit+0x104>)
 80021ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002244 <HAL_ADC_MspInit+0x104>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <HAL_ADC_MspInit+0x104>)
 80021d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e0:	4b18      	ldr	r3, [pc, #96]	@ (8002244 <HAL_ADC_MspInit+0x104>)
 80021e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e4:	4a17      	ldr	r2, [pc, #92]	@ (8002244 <HAL_ADC_MspInit+0x104>)
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ec:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <HAL_ADC_MspInit+0x104>)
 80021ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021f8:	2308      	movs	r3, #8
 80021fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80021fe:	230b      	movs	r3, #11
 8002200:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800220e:	4619      	mov	r1, r3
 8002210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002214:	f002 fa48 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IR0_ADC_Pin|IR1_ADC_Pin;
 8002218:	2330      	movs	r3, #48	@ 0x30
 800221a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800221e:	230b      	movs	r3, #11
 8002220:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800222e:	4619      	mov	r1, r3
 8002230:	4805      	ldr	r0, [pc, #20]	@ (8002248 <HAL_ADC_MspInit+0x108>)
 8002232:	f002 fa39 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002236:	bf00      	nop
 8002238:	37c0      	adds	r7, #192	@ 0xc0
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	50040000 	.word	0x50040000
 8002244:	40021000 	.word	0x40021000
 8002248:	48000800 	.word	0x48000800

0800224c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08c      	sub	sp, #48	@ 0x30
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a2e      	ldr	r2, [pc, #184]	@ (8002324 <HAL_SPI_MspInit+0xd8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d129      	bne.n	80022c2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800226e:	4b2e      	ldr	r3, [pc, #184]	@ (8002328 <HAL_SPI_MspInit+0xdc>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002272:	4a2d      	ldr	r2, [pc, #180]	@ (8002328 <HAL_SPI_MspInit+0xdc>)
 8002274:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002278:	6613      	str	r3, [r2, #96]	@ 0x60
 800227a:	4b2b      	ldr	r3, [pc, #172]	@ (8002328 <HAL_SPI_MspInit+0xdc>)
 800227c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002282:	61bb      	str	r3, [r7, #24]
 8002284:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	4b28      	ldr	r3, [pc, #160]	@ (8002328 <HAL_SPI_MspInit+0xdc>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228a:	4a27      	ldr	r2, [pc, #156]	@ (8002328 <HAL_SPI_MspInit+0xdc>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002292:	4b25      	ldr	r3, [pc, #148]	@ (8002328 <HAL_SPI_MspInit+0xdc>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800229e:	23e0      	movs	r3, #224	@ 0xe0
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	2303      	movs	r3, #3
 80022ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ae:	2305      	movs	r3, #5
 80022b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	4619      	mov	r1, r3
 80022b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022bc:	f002 f9f4 	bl	80046a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80022c0:	e02c      	b.n	800231c <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a19      	ldr	r2, [pc, #100]	@ (800232c <HAL_SPI_MspInit+0xe0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d127      	bne.n	800231c <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80022cc:	4b16      	ldr	r3, [pc, #88]	@ (8002328 <HAL_SPI_MspInit+0xdc>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d0:	4a15      	ldr	r2, [pc, #84]	@ (8002328 <HAL_SPI_MspInit+0xdc>)
 80022d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022d8:	4b13      	ldr	r3, [pc, #76]	@ (8002328 <HAL_SPI_MspInit+0xdc>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e4:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <HAL_SPI_MspInit+0xdc>)
 80022e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002328 <HAL_SPI_MspInit+0xdc>)
 80022ea:	f043 0302 	orr.w	r3, r3, #2
 80022ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002328 <HAL_SPI_MspInit+0xdc>)
 80022f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 80022fc:	2328      	movs	r3, #40	@ 0x28
 80022fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800230c:	2306      	movs	r3, #6
 800230e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002310:	f107 031c 	add.w	r3, r7, #28
 8002314:	4619      	mov	r1, r3
 8002316:	4806      	ldr	r0, [pc, #24]	@ (8002330 <HAL_SPI_MspInit+0xe4>)
 8002318:	f002 f9c6 	bl	80046a8 <HAL_GPIO_Init>
}
 800231c:	bf00      	nop
 800231e:	3730      	adds	r7, #48	@ 0x30
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40013000 	.word	0x40013000
 8002328:	40021000 	.word	0x40021000
 800232c:	40003c00 	.word	0x40003c00
 8002330:	48000400 	.word	0x48000400

08002334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b092      	sub	sp, #72	@ 0x48
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002354:	d129      	bne.n	80023aa <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002356:	4b82      	ldr	r3, [pc, #520]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235a:	4a81      	ldr	r2, [pc, #516]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6593      	str	r3, [r2, #88]	@ 0x58
 8002362:	4b7f      	ldr	r3, [pc, #508]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	633b      	str	r3, [r7, #48]	@ 0x30
 800236c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236e:	4b7c      	ldr	r3, [pc, #496]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002372:	4a7b      	ldr	r2, [pc, #492]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800237a:	4b79      	ldr	r3, [pc, #484]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002386:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800238a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002398:	2301      	movs	r3, #1
 800239a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023a0:	4619      	mov	r1, r3
 80023a2:	4870      	ldr	r0, [pc, #448]	@ (8002564 <HAL_TIM_Base_MspInit+0x230>)
 80023a4:	f002 f980 	bl	80046a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80023a8:	e0d6      	b.n	8002558 <HAL_TIM_Base_MspInit+0x224>
  else if(htim_base->Instance==TIM3)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002568 <HAL_TIM_Base_MspInit+0x234>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d130      	bne.n	8002416 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 80023b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b8:	4a69      	ldr	r2, [pc, #420]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 80023ba:	f043 0302 	orr.w	r3, r3, #2
 80023be:	6593      	str	r3, [r2, #88]	@ 0x58
 80023c0:	4b67      	ldr	r3, [pc, #412]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023cc:	4b64      	ldr	r3, [pc, #400]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 80023ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d0:	4a63      	ldr	r2, [pc, #396]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 80023d2:	f043 0304 	orr.w	r3, r3, #4
 80023d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023d8:	4b61      	ldr	r3, [pc, #388]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 80023da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023e4:	2380      	movs	r3, #128	@ 0x80
 80023e6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e8:	2302      	movs	r3, #2
 80023ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2300      	movs	r3, #0
 80023f2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023f4:	2302      	movs	r3, #2
 80023f6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023fc:	4619      	mov	r1, r3
 80023fe:	485b      	ldr	r0, [pc, #364]	@ (800256c <HAL_TIM_Base_MspInit+0x238>)
 8002400:	f002 f952 	bl	80046a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002404:	2200      	movs	r2, #0
 8002406:	2100      	movs	r1, #0
 8002408:	201d      	movs	r0, #29
 800240a:	f002 f916 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800240e:	201d      	movs	r0, #29
 8002410:	f002 f92f 	bl	8004672 <HAL_NVIC_EnableIRQ>
}
 8002414:	e0a0      	b.n	8002558 <HAL_TIM_Base_MspInit+0x224>
  else if(htim_base->Instance==TIM4)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a55      	ldr	r2, [pc, #340]	@ (8002570 <HAL_TIM_Base_MspInit+0x23c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d131      	bne.n	8002484 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002420:	4b4f      	ldr	r3, [pc, #316]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002424:	4a4e      	ldr	r2, [pc, #312]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	6593      	str	r3, [r2, #88]	@ 0x58
 800242c:	4b4c      	ldr	r3, [pc, #304]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	623b      	str	r3, [r7, #32]
 8002436:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002438:	4b49      	ldr	r3, [pc, #292]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 800243a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243c:	4a48      	ldr	r2, [pc, #288]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 800243e:	f043 0308 	orr.w	r3, r3, #8
 8002442:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002444:	4b46      	ldr	r3, [pc, #280]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 8002446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002450:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002454:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	2300      	movs	r3, #0
 8002460:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002462:	2302      	movs	r3, #2
 8002464:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002466:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800246a:	4619      	mov	r1, r3
 800246c:	4841      	ldr	r0, [pc, #260]	@ (8002574 <HAL_TIM_Base_MspInit+0x240>)
 800246e:	f002 f91b 	bl	80046a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	201e      	movs	r0, #30
 8002478:	f002 f8df 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800247c:	201e      	movs	r0, #30
 800247e:	f002 f8f8 	bl	8004672 <HAL_NVIC_EnableIRQ>
}
 8002482:	e069      	b.n	8002558 <HAL_TIM_Base_MspInit+0x224>
  else if(htim_base->Instance==TIM5)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a3b      	ldr	r2, [pc, #236]	@ (8002578 <HAL_TIM_Base_MspInit+0x244>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d114      	bne.n	80024b8 <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800248e:	4b34      	ldr	r3, [pc, #208]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	4a33      	ldr	r2, [pc, #204]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 8002494:	f043 0308 	orr.w	r3, r3, #8
 8002498:	6593      	str	r3, [r2, #88]	@ 0x58
 800249a:	4b31      	ldr	r3, [pc, #196]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	2032      	movs	r0, #50	@ 0x32
 80024ac:	f002 f8c5 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80024b0:	2032      	movs	r0, #50	@ 0x32
 80024b2:	f002 f8de 	bl	8004672 <HAL_NVIC_EnableIRQ>
}
 80024b6:	e04f      	b.n	8002558 <HAL_TIM_Base_MspInit+0x224>
  else if(htim_base->Instance==TIM15)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2f      	ldr	r2, [pc, #188]	@ (800257c <HAL_TIM_Base_MspInit+0x248>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d131      	bne.n	8002526 <HAL_TIM_Base_MspInit+0x1f2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80024c2:	4b27      	ldr	r3, [pc, #156]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 80024c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c6:	4a26      	ldr	r2, [pc, #152]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80024ce:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 80024d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	4b21      	ldr	r3, [pc, #132]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024de:	4a20      	ldr	r2, [pc, #128]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80024f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002504:	230e      	movs	r3, #14
 8002506:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002508:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800250c:	4619      	mov	r1, r3
 800250e:	4815      	ldr	r0, [pc, #84]	@ (8002564 <HAL_TIM_Base_MspInit+0x230>)
 8002510:	f002 f8ca 	bl	80046a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	2018      	movs	r0, #24
 800251a:	f002 f88e 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800251e:	2018      	movs	r0, #24
 8002520:	f002 f8a7 	bl	8004672 <HAL_NVIC_EnableIRQ>
}
 8002524:	e018      	b.n	8002558 <HAL_TIM_Base_MspInit+0x224>
  else if(htim_base->Instance==TIM16)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a15      	ldr	r2, [pc, #84]	@ (8002580 <HAL_TIM_Base_MspInit+0x24c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d113      	bne.n	8002558 <HAL_TIM_Base_MspInit+0x224>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002530:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 8002532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002534:	4a0a      	ldr	r2, [pc, #40]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 8002536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800253a:	6613      	str	r3, [r2, #96]	@ 0x60
 800253c:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <HAL_TIM_Base_MspInit+0x22c>)
 800253e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002548:	2200      	movs	r2, #0
 800254a:	2100      	movs	r1, #0
 800254c:	2019      	movs	r0, #25
 800254e:	f002 f874 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002552:	2019      	movs	r0, #25
 8002554:	f002 f88d 	bl	8004672 <HAL_NVIC_EnableIRQ>
}
 8002558:	bf00      	nop
 800255a:	3748      	adds	r7, #72	@ 0x48
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000
 8002564:	48000400 	.word	0x48000400
 8002568:	40000400 	.word	0x40000400
 800256c:	48000800 	.word	0x48000800
 8002570:	40000800 	.word	0x40000800
 8002574:	48000c00 	.word	0x48000c00
 8002578:	40000c00 	.word	0x40000c00
 800257c:	40014000 	.word	0x40014000
 8002580:	40014400 	.word	0x40014400

08002584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b0ae      	sub	sp, #184	@ 0xb8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	2294      	movs	r2, #148	@ 0x94
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f009 f9ac 	bl	800b902 <memset>
  if(huart->Instance==USART3)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a21      	ldr	r2, [pc, #132]	@ (8002634 <HAL_UART_MspInit+0xb0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d13b      	bne.n	800262c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025b4:	2304      	movs	r3, #4
 80025b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025b8:	2300      	movs	r3, #0
 80025ba:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025bc:	f107 0310 	add.w	r3, r7, #16
 80025c0:	4618      	mov	r0, r3
 80025c2:	f003 f9df 	bl	8005984 <HAL_RCCEx_PeriphCLKConfig>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025cc:	f7ff fd16 	bl	8001ffc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025d0:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <HAL_UART_MspInit+0xb4>)
 80025d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d4:	4a18      	ldr	r2, [pc, #96]	@ (8002638 <HAL_UART_MspInit+0xb4>)
 80025d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025da:	6593      	str	r3, [r2, #88]	@ 0x58
 80025dc:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <HAL_UART_MspInit+0xb4>)
 80025de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025e8:	4b13      	ldr	r3, [pc, #76]	@ (8002638 <HAL_UART_MspInit+0xb4>)
 80025ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ec:	4a12      	ldr	r2, [pc, #72]	@ (8002638 <HAL_UART_MspInit+0xb4>)
 80025ee:	f043 0308 	orr.w	r3, r3, #8
 80025f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f4:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <HAL_UART_MspInit+0xb4>)
 80025f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = CAM_TX_Pin|CAM_RX_Pin;
 8002600:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002604:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002614:	2303      	movs	r3, #3
 8002616:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800261a:	2307      	movs	r3, #7
 800261c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002620:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002624:	4619      	mov	r1, r3
 8002626:	4805      	ldr	r0, [pc, #20]	@ (800263c <HAL_UART_MspInit+0xb8>)
 8002628:	f002 f83e 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800262c:	bf00      	nop
 800262e:	37b8      	adds	r7, #184	@ 0xb8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40004800 	.word	0x40004800
 8002638:	40021000 	.word	0x40021000
 800263c:	48000c00 	.word	0x48000c00

08002640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <NMI_Handler+0x4>

08002648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <HardFault_Handler+0x4>

08002650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <MemManage_Handler+0x4>

08002658 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <BusFault_Handler+0x4>

08002660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <UsageFault_Handler+0x4>

08002668 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002696:	f000 fe0f 	bl	80032b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80026a4:	4802      	ldr	r0, [pc, #8]	@ (80026b0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80026a6:	f004 fd18 	bl	80070da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20040648 	.word	0x20040648

080026b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80026b8:	4803      	ldr	r0, [pc, #12]	@ (80026c8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80026ba:	f004 fd0e 	bl	80070da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  main_isr();
 80026be:	f7fe fcd1 	bl	8001064 <main_isr>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20040694 	.word	0x20040694

080026cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026d0:	4805      	ldr	r0, [pc, #20]	@ (80026e8 <TIM3_IRQHandler+0x1c>)
 80026d2:	f004 fd02 	bl	80070da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  // camera not ready means that it has taken a photo and needs to be written
  if (!camera_get_ready()) {
 80026d6:	f7fe fc93 	bl	8001000 <camera_get_ready>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <TIM3_IRQHandler+0x18>
	  camera_process(); //process a "chunk" of data
 80026e0:	f7fe fc74 	bl	8000fcc <camera_process>
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20040564 	.word	0x20040564

080026ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026f0:	4803      	ldr	r0, [pc, #12]	@ (8002700 <TIM4_IRQHandler+0x14>)
 80026f2:	f004 fcf2 	bl	80070da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  stepper_rotate_clockwise_ir();
 80026f6:	f7ff fc87 	bl	8002008 <stepper_rotate_clockwise_ir>

  /* USER CODE END TIM4_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200405b0 	.word	0x200405b0

08002704 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002708:	4804      	ldr	r0, [pc, #16]	@ (800271c <TIM5_IRQHandler+0x18>)
 800270a:	f004 fce6 	bl	80070da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  ir_sensor_interrupt_routine();
 800270e:	f7fe fdbd 	bl	800128c <ir_sensor_interrupt_routine>
  ps_isr();
 8002712:	f7fe ff9b 	bl	800164c <ps_isr>

  /* USER CODE END TIM5_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200405fc 	.word	0x200405fc

08002720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return 1;
 8002724:	2301      	movs	r3, #1
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_kill>:

int _kill(int pid, int sig)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800273a:	f009 f93f 	bl	800b9bc <__errno>
 800273e:	4603      	mov	r3, r0
 8002740:	2216      	movs	r2, #22
 8002742:	601a      	str	r2, [r3, #0]
  return -1;
 8002744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <_exit>:

void _exit (int status)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002758:	f04f 31ff 	mov.w	r1, #4294967295
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ffe7 	bl	8002730 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002762:	bf00      	nop
 8002764:	e7fd      	b.n	8002762 <_exit+0x12>

08002766 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	e00a      	b.n	800278e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002778:	f3af 8000 	nop.w
 800277c:	4601      	mov	r1, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	60ba      	str	r2, [r7, #8]
 8002784:	b2ca      	uxtb	r2, r1
 8002786:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3301      	adds	r3, #1
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	429a      	cmp	r2, r3
 8002794:	dbf0      	blt.n	8002778 <_read+0x12>
  }

  return len;
 8002796:	687b      	ldr	r3, [r7, #4]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	e009      	b.n	80027c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	60ba      	str	r2, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	3301      	adds	r3, #1
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	dbf1      	blt.n	80027b2 <_write+0x12>
  }
  return len;
 80027ce:	687b      	ldr	r3, [r7, #4]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_close>:

int _close(int file)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002800:	605a      	str	r2, [r3, #4]
  return 0;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <_isatty>:

int _isatty(int file)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002818:	2301      	movs	r3, #1
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002848:	4a14      	ldr	r2, [pc, #80]	@ (800289c <_sbrk+0x5c>)
 800284a:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <_sbrk+0x60>)
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002854:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800285c:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <_sbrk+0x64>)
 800285e:	4a12      	ldr	r2, [pc, #72]	@ (80028a8 <_sbrk+0x68>)
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	429a      	cmp	r2, r3
 800286e:	d207      	bcs.n	8002880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002870:	f009 f8a4 	bl	800b9bc <__errno>
 8002874:	4603      	mov	r3, r0
 8002876:	220c      	movs	r2, #12
 8002878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	e009      	b.n	8002894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002880:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002886:	4b07      	ldr	r3, [pc, #28]	@ (80028a4 <_sbrk+0x64>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	4a05      	ldr	r2, [pc, #20]	@ (80028a4 <_sbrk+0x64>)
 8002890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	200a0000 	.word	0x200a0000
 80028a0:	00000400 	.word	0x00000400
 80028a4:	2004077c 	.word	0x2004077c
 80028a8:	20040918 	.word	0x20040918

080028ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028b0:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <SystemInit+0x20>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b6:	4a05      	ldr	r2, [pc, #20]	@ (80028cc <SystemInit+0x20>)
 80028b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <VC0706_SendCommand>:
/* VC0706_SendCommand
 * cmd - one of the command a data bytes
 * params - array of additional command bytes
 * params_len - length of parameters array
 */
void VC0706_SendCommand(uint8_t cmd, uint8_t *params, uint8_t params_len) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	6039      	str	r1, [r7, #0]
 80028da:	71fb      	strb	r3, [r7, #7]
 80028dc:	4613      	mov	r3, r2
 80028de:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[16];

    /*
     * Universal Command Prefix
     */
    buffer[0] = VC0706_CMD_PREFIX;
 80028e0:	2356      	movs	r3, #86	@ 0x56
 80028e2:	733b      	strb	r3, [r7, #12]
    buffer[1] = VC0706_SERIAL_NUM;
 80028e4:	2300      	movs	r3, #0
 80028e6:	737b      	strb	r3, [r7, #13]

    // Insert the command ID byte
    buffer[2] = cmd;
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	73bb      	strb	r3, [r7, #14]

    /*
     * Copy params into command buffer
     */
    for (uint8_t i = 0; i < params_len; i++) {
 80028ec:	2300      	movs	r3, #0
 80028ee:	77fb      	strb	r3, [r7, #31]
 80028f0:	e00c      	b.n	800290c <VC0706_SendCommand+0x3c>
        buffer[3 + i] = params[i];
 80028f2:	7ffb      	ldrb	r3, [r7, #31]
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	441a      	add	r2, r3
 80028f8:	7ffb      	ldrb	r3, [r7, #31]
 80028fa:	3303      	adds	r3, #3
 80028fc:	7812      	ldrb	r2, [r2, #0]
 80028fe:	3320      	adds	r3, #32
 8002900:	443b      	add	r3, r7
 8002902:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < params_len; i++) {
 8002906:	7ffb      	ldrb	r3, [r7, #31]
 8002908:	3301      	adds	r3, #1
 800290a:	77fb      	strb	r3, [r7, #31]
 800290c:	7ffa      	ldrb	r2, [r7, #31]
 800290e:	79bb      	ldrb	r3, [r7, #6]
 8002910:	429a      	cmp	r2, r3
 8002912:	d3ee      	bcc.n	80028f2 <VC0706_SendCommand+0x22>
    }

    HAL_UART_Transmit(&CAM_UART_HANDLE, buffer, 3 + params_len, HAL_MAX_DELAY);
 8002914:	79bb      	ldrb	r3, [r7, #6]
 8002916:	b29b      	uxth	r3, r3
 8002918:	3303      	adds	r3, #3
 800291a:	b29a      	uxth	r2, r3
 800291c:	f107 010c 	add.w	r1, r7, #12
 8002920:	f04f 33ff 	mov.w	r3, #4294967295
 8002924:	4803      	ldr	r0, [pc, #12]	@ (8002934 <VC0706_SendCommand+0x64>)
 8002926:	f005 f811 	bl	800794c <HAL_UART_Transmit>
}
 800292a:	bf00      	nop
 800292c:	3720      	adds	r7, #32
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200406e0 	.word	0x200406e0

08002938 <VC0706_TakePhoto>:

/* VC0706_TakePhoto
 *
 * Sends take photo command and verifies response ACK
 */
uint8_t VC0706_TakePhoto(void) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
    uint8_t takePhotoCommand[] = {0x01, 0x00}; // Parameters for taking a photo
 800293e:	2301      	movs	r3, #1
 8002940:	81bb      	strh	r3, [r7, #12]
    VC0706_SendCommand(VC0706_CMD_TAKE_PHOTO, takePhotoCommand, sizeof(takePhotoCommand));
 8002942:	f107 030c 	add.w	r3, r7, #12
 8002946:	2202      	movs	r2, #2
 8002948:	4619      	mov	r1, r3
 800294a:	2036      	movs	r0, #54	@ 0x36
 800294c:	f7ff ffc0 	bl	80028d0 <VC0706_SendCommand>

    // response array
    uint8_t response[5]={0};
 8002950:	2300      	movs	r3, #0
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	2300      	movs	r3, #0
 8002956:	723b      	strb	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT); // 1-second timeout
 8002958:	1d39      	adds	r1, r7, #4
 800295a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800295e:	2205      	movs	r2, #5
 8002960:	4810      	ldr	r0, [pc, #64]	@ (80029a4 <VC0706_TakePhoto+0x6c>)
 8002962:	f005 f881 	bl	8007a68 <HAL_UART_Receive>
 8002966:	4603      	mov	r3, r0
 8002968:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <VC0706_TakePhoto+0x3c>
        // Timeout or error occurred, handle accordingly
        return 0; // Indicate failure to receive acknowledgment
 8002970:	2300      	movs	r3, #0
 8002972:	e012      	b.n	800299a <VC0706_TakePhoto+0x62>
    }

    // Check if the received response is as expected: 0x76 0x00 0x36 0x00 0x00
    return response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00;
 8002974:	793b      	ldrb	r3, [r7, #4]
 8002976:	2b76      	cmp	r3, #118	@ 0x76
 8002978:	d10d      	bne.n	8002996 <VC0706_TakePhoto+0x5e>
 800297a:	797b      	ldrb	r3, [r7, #5]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <VC0706_TakePhoto+0x5e>
 8002980:	79bb      	ldrb	r3, [r7, #6]
 8002982:	2b36      	cmp	r3, #54	@ 0x36
 8002984:	d107      	bne.n	8002996 <VC0706_TakePhoto+0x5e>
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d104      	bne.n	8002996 <VC0706_TakePhoto+0x5e>
 800298c:	7a3b      	ldrb	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <VC0706_TakePhoto+0x5e>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <VC0706_TakePhoto+0x60>
 8002996:	2300      	movs	r3, #0
 8002998:	b2db      	uxtb	r3, r3
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200406e0 	.word	0x200406e0

080029a8 <VC0706_StopCapture>:

/* VC0706_StopCapture
 * Sends the stop capture command, and verifies the ack
 *
 */
uint8_t VC0706_StopCapture(void) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
    uint8_t stopCaptureCommand[] = {0x01, 0x03};
 80029ae:	f240 3301 	movw	r3, #769	@ 0x301
 80029b2:	81bb      	strh	r3, [r7, #12]
    uint8_t response[5] = {0}; // Expected response: 0x76 0x00 0x36 0x00 0x00
 80029b4:	2300      	movs	r3, #0
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	2300      	movs	r3, #0
 80029ba:	723b      	strb	r3, [r7, #8]

    // Send the Stop Capture command
    VC0706_SendCommand(VC0706_CMD_STOP_CAPTURE, stopCaptureCommand, sizeof(stopCaptureCommand));
 80029bc:	f107 030c 	add.w	r3, r7, #12
 80029c0:	2202      	movs	r2, #2
 80029c2:	4619      	mov	r1, r3
 80029c4:	2036      	movs	r0, #54	@ 0x36
 80029c6:	f7ff ff83 	bl	80028d0 <VC0706_SendCommand>

    // Receive the response
    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT);
 80029ca:	1d39      	adds	r1, r7, #4
 80029cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029d0:	2205      	movs	r2, #5
 80029d2:	480f      	ldr	r0, [pc, #60]	@ (8002a10 <VC0706_StopCapture+0x68>)
 80029d4:	f005 f848 	bl	8007a68 <HAL_UART_Receive>
 80029d8:	4603      	mov	r3, r0
 80029da:	73fb      	strb	r3, [r7, #15]

    // Check if the response is as expected
    return (status == HAL_OK) && (response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00);
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d110      	bne.n	8002a04 <VC0706_StopCapture+0x5c>
 80029e2:	793b      	ldrb	r3, [r7, #4]
 80029e4:	2b76      	cmp	r3, #118	@ 0x76
 80029e6:	d10d      	bne.n	8002a04 <VC0706_StopCapture+0x5c>
 80029e8:	797b      	ldrb	r3, [r7, #5]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10a      	bne.n	8002a04 <VC0706_StopCapture+0x5c>
 80029ee:	79bb      	ldrb	r3, [r7, #6]
 80029f0:	2b36      	cmp	r3, #54	@ 0x36
 80029f2:	d107      	bne.n	8002a04 <VC0706_StopCapture+0x5c>
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d104      	bne.n	8002a04 <VC0706_StopCapture+0x5c>
 80029fa:	7a3b      	ldrb	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <VC0706_StopCapture+0x5c>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <VC0706_StopCapture+0x5e>
 8002a04:	2300      	movs	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	200406e0 	.word	0x200406e0

08002a14 <VC0706_ReadImageDataLength>:
 *
 * Sends read image data length command returns correctly formated uint16_t containing
 * the length of the most recently taken image in bytes
 *
 */
uint16_t VC0706_ReadImageDataLength(void) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
	uint8_t read_image_len_cmd[] = {0x01, 0x00};
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	823b      	strh	r3, [r7, #16]
	VC0706_SendCommand(VC0706_CMD_READ_DATA_LEN, read_image_len_cmd, sizeof(read_image_len_cmd));
 8002a1e:	f107 0310 	add.w	r3, r7, #16
 8002a22:	2202      	movs	r2, #2
 8002a24:	4619      	mov	r1, r3
 8002a26:	2034      	movs	r0, #52	@ 0x34
 8002a28:	f7ff ff52 	bl	80028d0 <VC0706_SendCommand>

	uint8_t response[9]; // repsonse buffer
	HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT);
 8002a2c:	1d39      	adds	r1, r7, #4
 8002a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a32:	2209      	movs	r2, #9
 8002a34:	480b      	ldr	r0, [pc, #44]	@ (8002a64 <VC0706_ReadImageDataLength+0x50>)
 8002a36:	f005 f817 	bl	8007a68 <HAL_UART_Receive>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	75fb      	strb	r3, [r7, #23]


    if (status != HAL_OK) {
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <VC0706_ReadImageDataLength+0x34>
    	return 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e008      	b.n	8002a5a <VC0706_ReadImageDataLength+0x46>
    }

    uint16_t image_len = (response[7] << 8) | response[8];
 8002a48:	7afb      	ldrb	r3, [r7, #11]
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	b21a      	sxth	r2, r3
 8002a4e:	7b3b      	ldrb	r3, [r7, #12]
 8002a50:	b21b      	sxth	r3, r3
 8002a52:	4313      	orrs	r3, r2
 8002a54:	b21b      	sxth	r3, r3
 8002a56:	82bb      	strh	r3, [r7, #20]

    return image_len;
 8002a58:	8abb      	ldrh	r3, [r7, #20]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	200406e0 	.word	0x200406e0

08002a68 <VC0706_ReadImageBlock>:
/* VC0706_ReadImageBlock
 * Sends the read image command, and then receives one block of image data into the provided buffer
 *
 * feeds the entire response into the image_buffer, which is at least 42 bytes
 */
uint8_t VC0706_ReadImageBlock(uint8_t *image_buffer, uint32_t start_address) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
    uint8_t readCommand[13];

    readCommand[0] = 0x0C;
 8002a72:	230c      	movs	r3, #12
 8002a74:	723b      	strb	r3, [r7, #8]
    readCommand[1] = 0x00;
 8002a76:	2300      	movs	r3, #0
 8002a78:	727b      	strb	r3, [r7, #9]
    readCommand[2] = 0x0A; // was 0D
 8002a7a:	230a      	movs	r3, #10
 8002a7c:	72bb      	strb	r3, [r7, #10]
    readCommand[3] = 0x00;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	72fb      	strb	r3, [r7, #11]
    readCommand[4] = 0x00;
 8002a82:	2300      	movs	r3, #0
 8002a84:	733b      	strb	r3, [r7, #12]

    readCommand[5] = (start_address >> 8) & 0xFF;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	737b      	strb	r3, [r7, #13]
    readCommand[6] = start_address & 0xFF;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	73bb      	strb	r3, [r7, #14]

    readCommand[7] = 0x00;
 8002a94:	2300      	movs	r3, #0
 8002a96:	73fb      	strb	r3, [r7, #15]
    readCommand[8] = 0x00;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	743b      	strb	r3, [r7, #16]

    readCommand[9] = 0x00;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	747b      	strb	r3, [r7, #17]
    readCommand[10] = 0x20;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	74bb      	strb	r3, [r7, #18]

    readCommand[11] = 0x00;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	74fb      	strb	r3, [r7, #19]
    readCommand[12] = 0xFF;
 8002aa8:	23ff      	movs	r3, #255	@ 0xff
 8002aaa:	753b      	strb	r3, [r7, #20]

    VC0706_SendCommand(VC0706_CMD_READ_DATA, readCommand, sizeof(readCommand));
 8002aac:	f107 0308 	add.w	r3, r7, #8
 8002ab0:	220d      	movs	r2, #13
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	2032      	movs	r0, #50	@ 0x32
 8002ab6:	f7ff ff0b 	bl	80028d0 <VC0706_SendCommand>

    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, image_buffer, VC0706_IMAGE_BLOCK_SIZE + 10, VC0706_RESPONSE_TIMEOUT);
 8002aba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002abe:	222a      	movs	r2, #42	@ 0x2a
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4807      	ldr	r0, [pc, #28]	@ (8002ae0 <VC0706_ReadImageBlock+0x78>)
 8002ac4:	f004 ffd0 	bl	8007a68 <HAL_UART_Receive>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	75fb      	strb	r3, [r7, #23]

    return status == HAL_OK;
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf0c      	ite	eq
 8002ad2:	2301      	moveq	r3, #1
 8002ad4:	2300      	movne	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	200406e0 	.word	0x200406e0

08002ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ae8:	f7ff fee0 	bl	80028ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002aec:	480c      	ldr	r0, [pc, #48]	@ (8002b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8002aee:	490d      	ldr	r1, [pc, #52]	@ (8002b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002af0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b28 <LoopForever+0xe>)
  movs r3, #0
 8002af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af4:	e002      	b.n	8002afc <LoopCopyDataInit>

08002af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002afa:	3304      	adds	r3, #4

08002afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b00:	d3f9      	bcc.n	8002af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b02:	4a0a      	ldr	r2, [pc, #40]	@ (8002b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b04:	4c0a      	ldr	r4, [pc, #40]	@ (8002b30 <LoopForever+0x16>)
  movs r3, #0
 8002b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b08:	e001      	b.n	8002b0e <LoopFillZerobss>

08002b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b0c:	3204      	adds	r2, #4

08002b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b10:	d3fb      	bcc.n	8002b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b12:	f008 ff59 	bl	800b9c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b16:	f7fe fdb1 	bl	800167c <main>

08002b1a <LoopForever>:

LoopForever:
    b LoopForever
 8002b1a:	e7fe      	b.n	8002b1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b1c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002b20:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8002b24:	20040118 	.word	0x20040118
  ldr r2, =_sidata
 8002b28:	080559c4 	.word	0x080559c4
  ldr r2, =_sbss
 8002b2c:	20040118 	.word	0x20040118
  ldr r4, =_ebss
 8002b30:	20040918 	.word	0x20040918

08002b34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b34:	e7fe      	b.n	8002b34 <ADC1_IRQHandler>

08002b36 <ILI9341_Select>:
 */

#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8002b36:	b580      	push	{r7, lr}
 8002b38:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2110      	movs	r1, #16
 8002b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b42:	f001 ff5b 	bl	80049fc <HAL_GPIO_WritePin>
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	2110      	movs	r1, #16
 8002b52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b56:	f001 ff51 	bl	80049fc <HAL_GPIO_WritePin>
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8002b64:	2200      	movs	r2, #0
 8002b66:	2101      	movs	r1, #1
 8002b68:	4806      	ldr	r0, [pc, #24]	@ (8002b84 <ILI9341_Reset+0x24>)
 8002b6a:	f001 ff47 	bl	80049fc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002b6e:	2005      	movs	r0, #5
 8002b70:	f000 fbc2 	bl	80032f8 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8002b74:	2201      	movs	r2, #1
 8002b76:	2101      	movs	r1, #1
 8002b78:	4802      	ldr	r0, [pc, #8]	@ (8002b84 <ILI9341_Reset+0x24>)
 8002b7a:	f001 ff3f 	bl	80049fc <HAL_GPIO_WritePin>
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	48000400 	.word	0x48000400

08002b88 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2102      	movs	r1, #2
 8002b96:	4807      	ldr	r0, [pc, #28]	@ (8002bb4 <ILI9341_WriteCommand+0x2c>)
 8002b98:	f001 ff30 	bl	80049fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002b9c:	1df9      	adds	r1, r7, #7
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4804      	ldr	r0, [pc, #16]	@ (8002bb8 <ILI9341_WriteCommand+0x30>)
 8002ba6:	f003 fca8 	bl	80064fa <HAL_SPI_Transmit>

}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	48000400 	.word	0x48000400
 8002bb8:	20040450 	.word	0x20040450

08002bbc <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	2102      	movs	r1, #2
 8002bca:	4811      	ldr	r0, [pc, #68]	@ (8002c10 <ILI9341_WriteData+0x54>)
 8002bcc:	f001 ff16 	bl	80049fc <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8002bd0:	e015      	b.n	8002bfe <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bd8:	bf28      	it	cs
 8002bda:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8002bde:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8002be0:	89fa      	ldrh	r2, [r7, #14]
 8002be2:	f04f 33ff 	mov.w	r3, #4294967295
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	480a      	ldr	r0, [pc, #40]	@ (8002c14 <ILI9341_WriteData+0x58>)
 8002bea:	f003 fc86 	bl	80064fa <HAL_SPI_Transmit>

        buff += chunk_size;
 8002bee:	89fb      	ldrh	r3, [r7, #14]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8002bf6:	89fb      	ldrh	r3, [r7, #14]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e6      	bne.n	8002bd2 <ILI9341_WriteData+0x16>
    }
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	48000400 	.word	0x48000400
 8002c14:	20040450 	.word	0x20040450

08002c18 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4604      	mov	r4, r0
 8002c20:	4608      	mov	r0, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	461a      	mov	r2, r3
 8002c26:	4623      	mov	r3, r4
 8002c28:	80fb      	strh	r3, [r7, #6]
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	80bb      	strh	r3, [r7, #4]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	807b      	strh	r3, [r7, #2]
 8002c32:	4613      	mov	r3, r2
 8002c34:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8002c36:	202a      	movs	r0, #42	@ 0x2a
 8002c38:	f7ff ffa6 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	733b      	strb	r3, [r7, #12]
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	737b      	strb	r3, [r7, #13]
 8002c4c:	887b      	ldrh	r3, [r7, #2]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	73bb      	strb	r3, [r7, #14]
 8002c56:	887b      	ldrh	r3, [r7, #2]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	2104      	movs	r1, #4
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff ffaa 	bl	8002bbc <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8002c68:	202b      	movs	r0, #43	@ 0x2b
 8002c6a:	f7ff ff8d 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8002c6e:	88bb      	ldrh	r3, [r7, #4]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	723b      	strb	r3, [r7, #8]
 8002c78:	88bb      	ldrh	r3, [r7, #4]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	727b      	strb	r3, [r7, #9]
 8002c7e:	883b      	ldrh	r3, [r7, #0]
 8002c80:	0a1b      	lsrs	r3, r3, #8
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	72bb      	strb	r3, [r7, #10]
 8002c88:	883b      	ldrh	r3, [r7, #0]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8002c8e:	f107 0308 	add.w	r3, r7, #8
 8002c92:	2104      	movs	r1, #4
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff91 	bl	8002bbc <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8002c9a:	202c      	movs	r0, #44	@ 0x2c
 8002c9c:	f7ff ff74 	bl	8002b88 <ILI9341_WriteCommand>
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd90      	pop	{r4, r7, pc}

08002ca8 <ILI9341_Init>:

void ILI9341_Init() {
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b09b      	sub	sp, #108	@ 0x6c
 8002cac:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8002cae:	f7ff ff42 	bl	8002b36 <ILI9341_Select>
    ILI9341_Reset();
 8002cb2:	f7ff ff55 	bl	8002b60 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f7ff ff66 	bl	8002b88 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8002cbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cc0:	f000 fb1a 	bl	80032f8 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8002cc4:	20cb      	movs	r0, #203	@ 0xcb
 8002cc6:	f7ff ff5f 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8002cca:	4a87      	ldr	r2, [pc, #540]	@ (8002ee8 <ILI9341_Init+0x240>)
 8002ccc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002cd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cd4:	6018      	str	r0, [r3, #0]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002cda:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002cde:	2105      	movs	r1, #5
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff6b 	bl	8002bbc <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8002ce6:	20cf      	movs	r0, #207	@ 0xcf
 8002ce8:	f7ff ff4e 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8002cec:	4a7f      	ldr	r2, [pc, #508]	@ (8002eec <ILI9341_Init+0x244>)
 8002cee:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	8019      	strh	r1, [r3, #0]
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	0c12      	lsrs	r2, r2, #16
 8002cfc:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002cfe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002d02:	2103      	movs	r1, #3
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ff59 	bl	8002bbc <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8002d0a:	20e8      	movs	r0, #232	@ 0xe8
 8002d0c:	f7ff ff3c 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8002d10:	4a77      	ldr	r2, [pc, #476]	@ (8002ef0 <ILI9341_Init+0x248>)
 8002d12:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	4611      	mov	r1, r2
 8002d1a:	8019      	strh	r1, [r3, #0]
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	0c12      	lsrs	r2, r2, #16
 8002d20:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002d22:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002d26:	2103      	movs	r1, #3
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff47 	bl	8002bbc <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8002d2e:	20ea      	movs	r0, #234	@ 0xea
 8002d30:	f7ff ff2a 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 8002d3a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d3e:	2102      	movs	r1, #2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff3b 	bl	8002bbc <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8002d46:	20ed      	movs	r0, #237	@ 0xed
 8002d48:	f7ff ff1e 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8002d4c:	4b69      	ldr	r3, [pc, #420]	@ (8002ef4 <ILI9341_Init+0x24c>)
 8002d4e:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8002d50:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002d54:	2104      	movs	r1, #4
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff ff30 	bl	8002bbc <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8002d5c:	20f7      	movs	r0, #247	@ 0xf7
 8002d5e:	f7ff ff13 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8002d62:	2320      	movs	r3, #32
 8002d64:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8002d68:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff24 	bl	8002bbc <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8002d74:	20c0      	movs	r0, #192	@ 0xc0
 8002d76:	f7ff ff07 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8002d7a:	2323      	movs	r3, #35	@ 0x23
 8002d7c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8002d80:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d84:	2101      	movs	r1, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ff18 	bl	8002bbc <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8002d8c:	20c1      	movs	r0, #193	@ 0xc1
 8002d8e:	f7ff fefb 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8002d92:	2310      	movs	r3, #16
 8002d94:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 8002d98:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff0c 	bl	8002bbc <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8002da4:	20c5      	movs	r0, #197	@ 0xc5
 8002da6:	f7ff feef 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8002daa:	f642 033e 	movw	r3, #10302	@ 0x283e
 8002dae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 8002db2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002db6:	2102      	movs	r1, #2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff feff 	bl	8002bbc <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8002dbe:	20c7      	movs	r0, #199	@ 0xc7
 8002dc0:	f7ff fee2 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8002dc4:	2386      	movs	r3, #134	@ 0x86
 8002dc6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8002dca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fef3 	bl	8002bbc <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8002dd6:	2036      	movs	r0, #54	@ 0x36
 8002dd8:	f7ff fed6 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8002ddc:	2348      	movs	r3, #72	@ 0x48
 8002dde:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 8002de2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002de6:	2101      	movs	r1, #1
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fee7 	bl	8002bbc <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8002dee:	203a      	movs	r0, #58	@ 0x3a
 8002df0:	f7ff feca 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8002df4:	2355      	movs	r3, #85	@ 0x55
 8002df6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 8002dfa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002dfe:	2101      	movs	r1, #1
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fedb 	bl	8002bbc <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8002e06:	20b1      	movs	r0, #177	@ 0xb1
 8002e08:	f7ff febe 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8002e0c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002e10:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 8002e12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e16:	2102      	movs	r1, #2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fecf 	bl	8002bbc <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8002e1e:	20b6      	movs	r0, #182	@ 0xb6
 8002e20:	f7ff feb2 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8002e24:	4a34      	ldr	r2, [pc, #208]	@ (8002ef8 <ILI9341_Init+0x250>)
 8002e26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	8019      	strh	r1, [r3, #0]
 8002e30:	3302      	adds	r3, #2
 8002e32:	0c12      	lsrs	r2, r2, #16
 8002e34:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002e36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e3a:	2103      	movs	r1, #3
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff febd 	bl	8002bbc <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8002e42:	20f2      	movs	r0, #242	@ 0xf2
 8002e44:	f7ff fea0 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 8002e4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff feb1 	bl	8002bbc <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8002e5a:	2026      	movs	r0, #38	@ 0x26
 8002e5c:	f7ff fe94 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 8002e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fea5 	bl	8002bbc <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8002e72:	20e0      	movs	r0, #224	@ 0xe0
 8002e74:	f7ff fe88 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8002e78:	4b20      	ldr	r3, [pc, #128]	@ (8002efc <ILI9341_Init+0x254>)
 8002e7a:	f107 0414 	add.w	r4, r7, #20
 8002e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e80:	c407      	stmia	r4!, {r0, r1, r2}
 8002e82:	8023      	strh	r3, [r4, #0]
 8002e84:	3402      	adds	r4, #2
 8002e86:	0c1b      	lsrs	r3, r3, #16
 8002e88:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8002e8a:	f107 0314 	add.w	r3, r7, #20
 8002e8e:	210f      	movs	r1, #15
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fe93 	bl	8002bbc <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8002e96:	20e1      	movs	r0, #225	@ 0xe1
 8002e98:	f7ff fe76 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8002e9c:	4b18      	ldr	r3, [pc, #96]	@ (8002f00 <ILI9341_Init+0x258>)
 8002e9e:	1d3c      	adds	r4, r7, #4
 8002ea0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ea2:	c407      	stmia	r4!, {r0, r1, r2}
 8002ea4:	8023      	strh	r3, [r4, #0]
 8002ea6:	3402      	adds	r4, #2
 8002ea8:	0c1b      	lsrs	r3, r3, #16
 8002eaa:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	210f      	movs	r1, #15
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fe83 	bl	8002bbc <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8002eb6:	2011      	movs	r0, #17
 8002eb8:	f7ff fe66 	bl	8002b88 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8002ebc:	2078      	movs	r0, #120	@ 0x78
 8002ebe:	f000 fa1b 	bl	80032f8 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8002ec2:	2029      	movs	r0, #41	@ 0x29
 8002ec4:	f7ff fe60 	bl	8002b88 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8002ec8:	2036      	movs	r0, #54	@ 0x36
 8002eca:	f7ff fe5d 	bl	8002b88 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8002ece:	23e8      	movs	r3, #232	@ 0xe8
 8002ed0:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002ed2:	463b      	mov	r3, r7
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fe70 	bl	8002bbc <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8002edc:	f7ff fe35 	bl	8002b4a <ILI9341_Unselect>
}
 8002ee0:	bf00      	nop
 8002ee2:	376c      	adds	r7, #108	@ 0x6c
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd90      	pop	{r4, r7, pc}
 8002ee8:	0800ca44 	.word	0x0800ca44
 8002eec:	0800ca4c 	.word	0x0800ca4c
 8002ef0:	0800ca50 	.word	0x0800ca50
 8002ef4:	81120364 	.word	0x81120364
 8002ef8:	0800ca54 	.word	0x0800ca54
 8002efc:	0800ca58 	.word	0x0800ca58
 8002f00:	0800ca68 	.word	0x0800ca68

08002f04 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002f04:	b082      	sub	sp, #8
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b088      	sub	sp, #32
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f0e:	4603      	mov	r3, r0
 8002f10:	80fb      	strh	r3, [r7, #6]
 8002f12:	460b      	mov	r3, r1
 8002f14:	80bb      	strh	r3, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002f1e:	461a      	mov	r2, r3
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	4413      	add	r3, r2
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002f2e:	4619      	mov	r1, r3
 8002f30:	88bb      	ldrh	r3, [r7, #4]
 8002f32:	440b      	add	r3, r1
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	88b9      	ldrh	r1, [r7, #4]
 8002f3c:	88f8      	ldrh	r0, [r7, #6]
 8002f3e:	f7ff fe6b 	bl	8002c18 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	e041      	b.n	8002fcc <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8002f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	3b20      	subs	r3, #32
 8002f4e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4619      	mov	r1, r3
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	440b      	add	r3, r1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002f64:	2300      	movs	r3, #0
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	e027      	b.n	8002fba <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00e      	beq.n	8002f98 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002f7a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	743b      	strb	r3, [r7, #16]
 8002f84:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8002f8a:	f107 0310 	add.w	r3, r7, #16
 8002f8e:	2102      	movs	r1, #2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fe13 	bl	8002bbc <ILI9341_WriteData>
 8002f96:	e00d      	b.n	8002fb4 <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002f98:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	733b      	strb	r3, [r7, #12]
 8002fa2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8002fa8:	f107 030c 	add.w	r3, r7, #12
 8002fac:	2102      	movs	r1, #2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fe04 	bl	8002bbc <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d3d1      	bcc.n	8002f6a <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d3b7      	bcc.n	8002f48 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fe4:	b002      	add	sp, #8
 8002fe6:	4770      	bx	lr

08002fe8 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002fe8:	b082      	sub	sp, #8
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af04      	add	r7, sp, #16
 8002ff0:	603a      	str	r2, [r7, #0]
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	80fb      	strh	r3, [r7, #6]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8002ffc:	f7ff fd9b 	bl	8002b36 <ILI9341_Select>

    while(*str) {
 8003000:	e02e      	b.n	8003060 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	7d3a      	ldrb	r2, [r7, #20]
 8003006:	4413      	add	r3, r2
 8003008:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800300c:	db13      	blt.n	8003036 <ILI9341_WriteString+0x4e>
            x = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8003012:	7d7b      	ldrb	r3, [r7, #21]
 8003014:	461a      	mov	r2, r3
 8003016:	88bb      	ldrh	r3, [r7, #4]
 8003018:	4413      	add	r3, r2
 800301a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 800301c:	88bb      	ldrh	r3, [r7, #4]
 800301e:	7d7a      	ldrb	r2, [r7, #21]
 8003020:	4413      	add	r3, r2
 8003022:	2bef      	cmp	r3, #239	@ 0xef
 8003024:	dc21      	bgt.n	800306a <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b20      	cmp	r3, #32
 800302c:	d103      	bne.n	8003036 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	603b      	str	r3, [r7, #0]
                continue;
 8003034:	e014      	b.n	8003060 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	88b9      	ldrh	r1, [r7, #4]
 800303c:	88f8      	ldrh	r0, [r7, #6]
 800303e:	8c3b      	ldrh	r3, [r7, #32]
 8003040:	9302      	str	r3, [sp, #8]
 8003042:	8bbb      	ldrh	r3, [r7, #28]
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f7ff ff5a 	bl	8002f04 <ILI9341_WriteChar>
        x += font.width;
 8003050:	7d3b      	ldrb	r3, [r7, #20]
 8003052:	461a      	mov	r2, r3
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	4413      	add	r3, r2
 8003058:	80fb      	strh	r3, [r7, #6]
        str++;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1cc      	bne.n	8003002 <ILI9341_WriteString+0x1a>
 8003068:	e000      	b.n	800306c <ILI9341_WriteString+0x84>
                break;
 800306a:	bf00      	nop
    }

    ILI9341_Unselect();
 800306c:	f7ff fd6d 	bl	8002b4a <ILI9341_Unselect>
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800307a:	b002      	add	sp, #8
 800307c:	4770      	bx	lr
	...

08003080 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	4604      	mov	r4, r0
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4623      	mov	r3, r4
 8003090:	80fb      	strh	r3, [r7, #6]
 8003092:	4603      	mov	r3, r0
 8003094:	80bb      	strh	r3, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	807b      	strh	r3, [r7, #2]
 800309a:	4613      	mov	r3, r2
 800309c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80030a4:	d252      	bcs.n	800314c <ILI9341_FillRectangle+0xcc>
 80030a6:	88bb      	ldrh	r3, [r7, #4]
 80030a8:	2bef      	cmp	r3, #239	@ 0xef
 80030aa:	d84f      	bhi.n	800314c <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80030ac:	88fa      	ldrh	r2, [r7, #6]
 80030ae:	887b      	ldrh	r3, [r7, #2]
 80030b0:	4413      	add	r3, r2
 80030b2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80030b6:	dd03      	ble.n	80030c0 <ILI9341_FillRectangle+0x40>
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80030be:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 80030c0:	88ba      	ldrh	r2, [r7, #4]
 80030c2:	883b      	ldrh	r3, [r7, #0]
 80030c4:	4413      	add	r3, r2
 80030c6:	2bf0      	cmp	r3, #240	@ 0xf0
 80030c8:	dd03      	ble.n	80030d2 <ILI9341_FillRectangle+0x52>
 80030ca:	88bb      	ldrh	r3, [r7, #4]
 80030cc:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80030d0:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 80030d2:	f7ff fd30 	bl	8002b36 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80030d6:	88fa      	ldrh	r2, [r7, #6]
 80030d8:	887b      	ldrh	r3, [r7, #2]
 80030da:	4413      	add	r3, r2
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29c      	uxth	r4, r3
 80030e2:	88ba      	ldrh	r2, [r7, #4]
 80030e4:	883b      	ldrh	r3, [r7, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	88b9      	ldrh	r1, [r7, #4]
 80030f0:	88f8      	ldrh	r0, [r7, #6]
 80030f2:	4622      	mov	r2, r4
 80030f4:	f7ff fd90 	bl	8002c18 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80030f8:	8c3b      	ldrh	r3, [r7, #32]
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	733b      	strb	r3, [r7, #12]
 8003102:	8c3b      	ldrh	r3, [r7, #32]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8003108:	2201      	movs	r2, #1
 800310a:	2102      	movs	r1, #2
 800310c:	4811      	ldr	r0, [pc, #68]	@ (8003154 <ILI9341_FillRectangle+0xd4>)
 800310e:	f001 fc75 	bl	80049fc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8003112:	883b      	ldrh	r3, [r7, #0]
 8003114:	80bb      	strh	r3, [r7, #4]
 8003116:	e013      	b.n	8003140 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8003118:	887b      	ldrh	r3, [r7, #2]
 800311a:	80fb      	strh	r3, [r7, #6]
 800311c:	e00a      	b.n	8003134 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800311e:	f107 010c 	add.w	r1, r7, #12
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	2202      	movs	r2, #2
 8003128:	480b      	ldr	r0, [pc, #44]	@ (8003158 <ILI9341_FillRectangle+0xd8>)
 800312a:	f003 f9e6 	bl	80064fa <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	3b01      	subs	r3, #1
 8003132:	80fb      	strh	r3, [r7, #6]
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f1      	bne.n	800311e <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 800313a:	88bb      	ldrh	r3, [r7, #4]
 800313c:	3b01      	subs	r3, #1
 800313e:	80bb      	strh	r3, [r7, #4]
 8003140:	88bb      	ldrh	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1e8      	bne.n	8003118 <ILI9341_FillRectangle+0x98>

        }
    }

    ILI9341_Unselect();
 8003146:	f7ff fd00 	bl	8002b4a <ILI9341_Unselect>
 800314a:	e000      	b.n	800314e <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800314c:	bf00      	nop
}
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	bd90      	pop	{r4, r7, pc}
 8003154:	48000400 	.word	0x48000400
 8003158:	20040450 	.word	0x20040450

0800315c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af02      	add	r7, sp, #8
 8003162:	4603      	mov	r3, r0
 8003164:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	23f0      	movs	r3, #240	@ 0xf0
 800316c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003170:	2100      	movs	r1, #0
 8003172:	2000      	movs	r0, #0
 8003174:	f7ff ff84 	bl	8003080 <ILI9341_FillRectangle>
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4604      	mov	r4, r0
 8003188:	4608      	mov	r0, r1
 800318a:	4611      	mov	r1, r2
 800318c:	461a      	mov	r2, r3
 800318e:	4623      	mov	r3, r4
 8003190:	80fb      	strh	r3, [r7, #6]
 8003192:	4603      	mov	r3, r0
 8003194:	80bb      	strh	r3, [r7, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	807b      	strh	r3, [r7, #2]
 800319a:	4613      	mov	r3, r2
 800319c:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80031a4:	d22c      	bcs.n	8003200 <ILI9341_DrawImage+0x80>
 80031a6:	88bb      	ldrh	r3, [r7, #4]
 80031a8:	2bef      	cmp	r3, #239	@ 0xef
 80031aa:	d829      	bhi.n	8003200 <ILI9341_DrawImage+0x80>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 80031ac:	88fa      	ldrh	r2, [r7, #6]
 80031ae:	887b      	ldrh	r3, [r7, #2]
 80031b0:	4413      	add	r3, r2
 80031b2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80031b6:	dc25      	bgt.n	8003204 <ILI9341_DrawImage+0x84>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 80031b8:	88ba      	ldrh	r2, [r7, #4]
 80031ba:	883b      	ldrh	r3, [r7, #0]
 80031bc:	4413      	add	r3, r2
 80031be:	2bf0      	cmp	r3, #240	@ 0xf0
 80031c0:	dc22      	bgt.n	8003208 <ILI9341_DrawImage+0x88>

    ILI9341_Select();
 80031c2:	f7ff fcb8 	bl	8002b36 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80031c6:	88fa      	ldrh	r2, [r7, #6]
 80031c8:	887b      	ldrh	r3, [r7, #2]
 80031ca:	4413      	add	r3, r2
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29c      	uxth	r4, r3
 80031d2:	88ba      	ldrh	r2, [r7, #4]
 80031d4:	883b      	ldrh	r3, [r7, #0]
 80031d6:	4413      	add	r3, r2
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29b      	uxth	r3, r3
 80031de:	88b9      	ldrh	r1, [r7, #4]
 80031e0:	88f8      	ldrh	r0, [r7, #6]
 80031e2:	4622      	mov	r2, r4
 80031e4:	f7ff fd18 	bl	8002c18 <ILI9341_SetAddressWindow>
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 80031e8:	887b      	ldrh	r3, [r7, #2]
 80031ea:	883a      	ldrh	r2, [r7, #0]
 80031ec:	fb02 f303 	mul.w	r3, r2, r3
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4619      	mov	r1, r3
 80031f4:	69b8      	ldr	r0, [r7, #24]
 80031f6:	f7ff fce1 	bl	8002bbc <ILI9341_WriteData>
    ILI9341_Unselect();
 80031fa:	f7ff fca6 	bl	8002b4a <ILI9341_Unselect>
 80031fe:	e004      	b.n	800320a <ILI9341_DrawImage+0x8a>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8003200:	bf00      	nop
 8003202:	e002      	b.n	800320a <ILI9341_DrawImage+0x8a>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 8003204:	bf00      	nop
 8003206:	e000      	b.n	800320a <ILI9341_DrawImage+0x8a>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 8003208:	bf00      	nop
}
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bd90      	pop	{r4, r7, pc}

08003210 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800321a:	2003      	movs	r0, #3
 800321c:	f001 fa02 	bl	8004624 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003220:	2000      	movs	r0, #0
 8003222:	f000 f80d 	bl	8003240 <HAL_InitTick>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	71fb      	strb	r3, [r7, #7]
 8003230:	e001      	b.n	8003236 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003232:	f7fe ff61 	bl	80020f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003236:	79fb      	ldrb	r3, [r7, #7]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800324c:	4b17      	ldr	r3, [pc, #92]	@ (80032ac <HAL_InitTick+0x6c>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d023      	beq.n	800329c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003254:	4b16      	ldr	r3, [pc, #88]	@ (80032b0 <HAL_InitTick+0x70>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4b14      	ldr	r3, [pc, #80]	@ (80032ac <HAL_InitTick+0x6c>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	4619      	mov	r1, r3
 800325e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003262:	fbb3 f3f1 	udiv	r3, r3, r1
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	4618      	mov	r0, r3
 800326c:	f001 fa0f 	bl	800468e <HAL_SYSTICK_Config>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10f      	bne.n	8003296 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b0f      	cmp	r3, #15
 800327a:	d809      	bhi.n	8003290 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800327c:	2200      	movs	r2, #0
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	f001 f9d9 	bl	800463a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003288:	4a0a      	ldr	r2, [pc, #40]	@ (80032b4 <HAL_InitTick+0x74>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e007      	b.n	80032a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
 8003294:	e004      	b.n	80032a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
 800329a:	e001      	b.n	80032a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	200400a0 	.word	0x200400a0
 80032b0:	20040088 	.word	0x20040088
 80032b4:	2004009c 	.word	0x2004009c

080032b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032bc:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <HAL_IncTick+0x20>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <HAL_IncTick+0x24>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4413      	add	r3, r2
 80032c8:	4a04      	ldr	r2, [pc, #16]	@ (80032dc <HAL_IncTick+0x24>)
 80032ca:	6013      	str	r3, [r2, #0]
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	200400a0 	.word	0x200400a0
 80032dc:	20040780 	.word	0x20040780

080032e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return uwTick;
 80032e4:	4b03      	ldr	r3, [pc, #12]	@ (80032f4 <HAL_GetTick+0x14>)
 80032e6:	681b      	ldr	r3, [r3, #0]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20040780 	.word	0x20040780

080032f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003300:	f7ff ffee 	bl	80032e0 <HAL_GetTick>
 8003304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003310:	d005      	beq.n	800331e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003312:	4b0a      	ldr	r3, [pc, #40]	@ (800333c <HAL_Delay+0x44>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800331e:	bf00      	nop
 8003320:	f7ff ffde 	bl	80032e0 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	429a      	cmp	r2, r3
 800332e:	d8f7      	bhi.n	8003320 <HAL_Delay+0x28>
  {
  }
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200400a0 	.word	0x200400a0

08003340 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	609a      	str	r2, [r3, #8]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	609a      	str	r2, [r3, #8]
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3360      	adds	r3, #96	@ 0x60
 80033ba:	461a      	mov	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <LL_ADC_SetOffset+0x44>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80033e0:	bf00      	nop
 80033e2:	371c      	adds	r7, #28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	03fff000 	.word	0x03fff000

080033f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3360      	adds	r3, #96	@ 0x60
 80033fe:	461a      	mov	r2, r3
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3360      	adds	r3, #96	@ 0x60
 800342c:	461a      	mov	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	431a      	orrs	r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	615a      	str	r2, [r3, #20]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800349e:	b480      	push	{r7}
 80034a0:	b087      	sub	sp, #28
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	3330      	adds	r3, #48	@ 0x30
 80034ae:	461a      	mov	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	0a1b      	lsrs	r3, r3, #8
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	4413      	add	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	211f      	movs	r1, #31
 80034ca:	fa01 f303 	lsl.w	r3, r1, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	401a      	ands	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	0e9b      	lsrs	r3, r3, #26
 80034d6:	f003 011f 	and.w	r1, r3, #31
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f003 031f 	and.w	r3, r3, #31
 80034e0:	fa01 f303 	lsl.w	r3, r1, r3
 80034e4:	431a      	orrs	r2, r3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b087      	sub	sp, #28
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3314      	adds	r3, #20
 8003506:	461a      	mov	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	0e5b      	lsrs	r3, r3, #25
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	4413      	add	r3, r2
 8003514:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	0d1b      	lsrs	r3, r3, #20
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	2107      	movs	r1, #7
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	401a      	ands	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	0d1b      	lsrs	r3, r3, #20
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	431a      	orrs	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003540:	bf00      	nop
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003564:	43db      	mvns	r3, r3
 8003566:	401a      	ands	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f003 0318 	and.w	r3, r3, #24
 800356e:	4908      	ldr	r1, [pc, #32]	@ (8003590 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003570:	40d9      	lsrs	r1, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	400b      	ands	r3, r1
 8003576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357a:	431a      	orrs	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	0007ffff 	.word	0x0007ffff

08003594 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80035a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6093      	str	r3, [r2, #8]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035cc:	d101      	bne.n	80035d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80035f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003618:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800361c:	d101      	bne.n	8003622 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003640:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003644:	f043 0201 	orr.w	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <LL_ADC_IsEnabled+0x18>
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <LL_ADC_IsEnabled+0x1a>
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800368e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003692:	f043 0204 	orr.w	r2, r3, #4
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d101      	bne.n	80036be <LL_ADC_REG_IsConversionOngoing+0x18>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d101      	bne.n	80036e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e129      	b.n	8003962 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003718:	2b00      	cmp	r3, #0
 800371a:	d109      	bne.n	8003730 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7fe fd0f 	bl	8002140 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff3f 	bl	80035b8 <LL_ADC_IsDeepPowerDownEnabled>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d004      	beq.n	800374a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ff25 	bl	8003594 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff ff5a 	bl	8003608 <LL_ADC_IsInternalRegulatorEnabled>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d115      	bne.n	8003786 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff ff3e 	bl	80035e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003764:	4b81      	ldr	r3, [pc, #516]	@ (800396c <HAL_ADC_Init+0x278>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	4a81      	ldr	r2, [pc, #516]	@ (8003970 <HAL_ADC_Init+0x27c>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	3301      	adds	r3, #1
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003778:	e002      	b.n	8003780 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3b01      	subs	r3, #1
 800377e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f9      	bne.n	800377a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff ff3c 	bl	8003608 <LL_ADC_IsInternalRegulatorEnabled>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10d      	bne.n	80037b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379a:	f043 0210 	orr.w	r2, r3, #16
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	f043 0201 	orr.w	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff ff75 	bl	80036a6 <LL_ADC_REG_IsConversionOngoing>
 80037bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f040 80c2 	bne.w	8003950 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f040 80be 	bne.w	8003950 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80037dc:	f043 0202 	orr.w	r2, r3, #2
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff ff35 	bl	8003658 <LL_ADC_IsEnabled>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037f4:	485f      	ldr	r0, [pc, #380]	@ (8003974 <HAL_ADC_Init+0x280>)
 80037f6:	f7ff ff2f 	bl	8003658 <LL_ADC_IsEnabled>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d105      	bne.n	800380c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4619      	mov	r1, r3
 8003806:	485c      	ldr	r0, [pc, #368]	@ (8003978 <HAL_ADC_Init+0x284>)
 8003808:	f7ff fd9a 	bl	8003340 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7e5b      	ldrb	r3, [r3, #25]
 8003810:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003816:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800381c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003822:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800382a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d106      	bne.n	8003848 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	3b01      	subs	r3, #1
 8003840:	045b      	lsls	r3, r3, #17
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384c:	2b00      	cmp	r3, #0
 800384e:	d009      	beq.n	8003864 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003854:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	4b44      	ldr	r3, [pc, #272]	@ (800397c <HAL_ADC_Init+0x288>)
 800386c:	4013      	ands	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	69b9      	ldr	r1, [r7, #24]
 8003874:	430b      	orrs	r3, r1
 8003876:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff ff25 	bl	80036cc <LL_ADC_INJ_IsConversionOngoing>
 8003882:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d140      	bne.n	800390c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d13d      	bne.n	800390c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	7e1b      	ldrb	r3, [r3, #24]
 8003898:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800389a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038b2:	f023 0306 	bic.w	r3, r3, #6
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	69b9      	ldr	r1, [r7, #24]
 80038bc:	430b      	orrs	r3, r1
 80038be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d118      	bne.n	80038fc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80038d4:	f023 0304 	bic.w	r3, r3, #4
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038e0:	4311      	orrs	r1, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80038e6:	4311      	orrs	r1, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80038ec:	430a      	orrs	r2, r1
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0201 	orr.w	r2, r2, #1
 80038f8:	611a      	str	r2, [r3, #16]
 80038fa:	e007      	b.n	800390c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d10c      	bne.n	800392e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391a:	f023 010f 	bic.w	r1, r3, #15
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	1e5a      	subs	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	631a      	str	r2, [r3, #48]	@ 0x30
 800392c:	e007      	b.n	800393e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 020f 	bic.w	r2, r2, #15
 800393c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003942:	f023 0303 	bic.w	r3, r3, #3
 8003946:	f043 0201 	orr.w	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	659a      	str	r2, [r3, #88]	@ 0x58
 800394e:	e007      	b.n	8003960 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003954:	f043 0210 	orr.w	r2, r3, #16
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003960:	7ffb      	ldrb	r3, [r7, #31]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20040088 	.word	0x20040088
 8003970:	053e2d63 	.word	0x053e2d63
 8003974:	50040000 	.word	0x50040000
 8003978:	50040300 	.word	0x50040300
 800397c:	fff0c007 	.word	0xfff0c007

08003980 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fe8a 	bl	80036a6 <LL_ADC_REG_IsConversionOngoing>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d14f      	bne.n	8003a38 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_Start+0x26>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e04b      	b.n	8003a3e <HAL_ADC_Start+0xbe>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fce2 	bl	8004378 <ADC_Enable>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d137      	bne.n	8003a2e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039de:	d106      	bne.n	80039ee <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e4:	f023 0206 	bic.w	r2, r3, #6
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039ec:	e002      	b.n	80039f4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	221c      	movs	r2, #28
 80039fa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a16:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a1a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fe29 	bl	800367e <LL_ADC_REG_StartConversion>
 8003a2c:	e006      	b.n	8003a3c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003a36:	e001      	b.n	8003a3c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b086      	sub	sp, #24
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d102      	bne.n	8003a5e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003a58:	2308      	movs	r3, #8
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	e010      	b.n	8003a80 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e06f      	b.n	8003b5c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003a80:	f7ff fc2e 	bl	80032e0 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a86:	e021      	b.n	8003acc <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d01d      	beq.n	8003acc <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003a90:	f7ff fc26 	bl	80032e0 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d302      	bcc.n	8003aa6 <HAL_ADC_PollForConversion+0x60>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d112      	bne.n	8003acc <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab8:	f043 0204 	orr.w	r2, r3, #4
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e047      	b.n	8003b5c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0d6      	beq.n	8003a88 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ade:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fcc4 	bl	8003478 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d01c      	beq.n	8003b30 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	7e5b      	ldrb	r3, [r3, #25]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d118      	bne.n	8003b30 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d111      	bne.n	8003b30 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d105      	bne.n	8003b30 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b28:	f043 0201 	orr.w	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d104      	bne.n	8003b48 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2208      	movs	r2, #8
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e008      	b.n	8003b5a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	220c      	movs	r2, #12
 8003b58:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b0b6      	sub	sp, #216	@ 0xd8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x22>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e3d5      	b.n	800434e <HAL_ADC_ConfigChannel+0x7ce>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fd79 	bl	80036a6 <LL_ADC_REG_IsConversionOngoing>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f040 83ba 	bne.w	8004330 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b05      	cmp	r3, #5
 8003bca:	d824      	bhi.n	8003c16 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	3b02      	subs	r3, #2
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d81b      	bhi.n	8003c0e <HAL_ADC_ConfigChannel+0x8e>
 8003bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bdc <HAL_ADC_ConfigChannel+0x5c>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003bed 	.word	0x08003bed
 8003be0:	08003bf5 	.word	0x08003bf5
 8003be4:	08003bfd 	.word	0x08003bfd
 8003be8:	08003c05 	.word	0x08003c05
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003bec:	230c      	movs	r3, #12
 8003bee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003bf2:	e010      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003bf4:	2312      	movs	r3, #18
 8003bf6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003bfa:	e00c      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003bfc:	2318      	movs	r3, #24
 8003bfe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c02:	e008      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003c04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c0c:	e003      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003c0e:	2306      	movs	r3, #6
 8003c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c14:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003c24:	f7ff fc3b 	bl	800349e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff fd3a 	bl	80036a6 <LL_ADC_REG_IsConversionOngoing>
 8003c32:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fd46 	bl	80036cc <LL_ADC_INJ_IsConversionOngoing>
 8003c40:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f040 81bf 	bne.w	8003fcc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f040 81ba 	bne.w	8003fcc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c60:	d10f      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f7ff fc42 	bl	80034f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff fbe9 	bl	8003452 <LL_ADC_SetSamplingTimeCommonConfig>
 8003c80:	e00e      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6819      	ldr	r1, [r3, #0]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f7ff fc31 	bl	80034f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff fbd9 	bl	8003452 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	08db      	lsrs	r3, r3, #3
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6919      	ldr	r1, [r3, #16]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cd2:	f7ff fb69 	bl	80033a8 <LL_ADC_SetOffset>
 8003cd6:	e179      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fb86 	bl	80033f0 <LL_ADC_GetOffsetChannel>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x184>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fb7b 	bl	80033f0 <LL_ADC_GetOffsetChannel>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	0e9b      	lsrs	r3, r3, #26
 8003cfe:	f003 021f 	and.w	r2, r3, #31
 8003d02:	e01e      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1c2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fb70 	bl	80033f0 <LL_ADC_GetOffsetChannel>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d1a:	fa93 f3a3 	rbit	r3, r3
 8003d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003d32:	2320      	movs	r3, #32
 8003d34:	e004      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003d36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d105      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x1da>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	0e9b      	lsrs	r3, r3, #26
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	e018      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x20c>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003d6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003d76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003d7e:	2320      	movs	r3, #32
 8003d80:	e004      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003d82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d106      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fb3f 	bl	800341c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2101      	movs	r1, #1
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff fb23 	bl	80033f0 <LL_ADC_GetOffsetChannel>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <HAL_ADC_ConfigChannel+0x24a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2101      	movs	r1, #1
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fb18 	bl	80033f0 <LL_ADC_GetOffsetChannel>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	0e9b      	lsrs	r3, r3, #26
 8003dc4:	f003 021f 	and.w	r2, r3, #31
 8003dc8:	e01e      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x288>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2101      	movs	r1, #1
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fb0d 	bl	80033f0 <LL_ADC_GetOffsetChannel>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003df0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003df8:	2320      	movs	r3, #32
 8003dfa:	e004      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003dfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e00:	fab3 f383 	clz	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x2a0>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	0e9b      	lsrs	r3, r3, #26
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	e018      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x2d2>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e2c:	fa93 f3a3 	rbit	r3, r3
 8003e30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003e34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003e44:	2320      	movs	r3, #32
 8003e46:	e004      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e4c:	fab3 f383 	clz	r3, r3
 8003e50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d106      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fadc 	bl	800341c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2102      	movs	r1, #2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff fac0 	bl	80033f0 <LL_ADC_GetOffsetChannel>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x310>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2102      	movs	r1, #2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fab5 	bl	80033f0 <LL_ADC_GetOffsetChannel>
 8003e86:	4603      	mov	r3, r0
 8003e88:	0e9b      	lsrs	r3, r3, #26
 8003e8a:	f003 021f 	and.w	r2, r3, #31
 8003e8e:	e01e      	b.n	8003ece <HAL_ADC_ConfigChannel+0x34e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2102      	movs	r1, #2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff faaa 	bl	80033f0 <LL_ADC_GetOffsetChannel>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ea6:	fa93 f3a3 	rbit	r3, r3
 8003eaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003eae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003eb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003ebe:	2320      	movs	r3, #32
 8003ec0:	e004      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ec6:	fab3 f383 	clz	r3, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d105      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0x366>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	0e9b      	lsrs	r3, r3, #26
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	e014      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x390>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003eee:	fa93 f3a3 	rbit	r3, r3
 8003ef2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ef6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003efa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003f02:	2320      	movs	r3, #32
 8003f04:	e004      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003f06:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d106      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff fa7d 	bl	800341c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2103      	movs	r1, #3
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fa61 	bl	80033f0 <LL_ADC_GetOffsetChannel>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x3ce>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2103      	movs	r1, #3
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fa56 	bl	80033f0 <LL_ADC_GetOffsetChannel>
 8003f44:	4603      	mov	r3, r0
 8003f46:	0e9b      	lsrs	r3, r3, #26
 8003f48:	f003 021f 	and.w	r2, r3, #31
 8003f4c:	e017      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x3fe>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2103      	movs	r1, #3
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fa4b 	bl	80033f0 <LL_ADC_GetOffsetChannel>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f60:	fa93 f3a3 	rbit	r3, r3
 8003f64:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003f66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f68:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003f6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003f70:	2320      	movs	r3, #32
 8003f72:	e003      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003f74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f76:	fab3 f383 	clz	r3, r3
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d105      	bne.n	8003f96 <HAL_ADC_ConfigChannel+0x416>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	0e9b      	lsrs	r3, r3, #26
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	e011      	b.n	8003fba <HAL_ADC_ConfigChannel+0x43a>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f9e:	fa93 f3a3 	rbit	r3, r3
 8003fa2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003fa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fa6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003fa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003fae:	2320      	movs	r3, #32
 8003fb0:	e003      	b.n	8003fba <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003fb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fb4:	fab3 f383 	clz	r3, r3
 8003fb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d106      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2103      	movs	r1, #3
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff fa28 	bl	800341c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff fb41 	bl	8003658 <LL_ADC_IsEnabled>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f040 813f 	bne.w	800425c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6819      	ldr	r1, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f7ff faae 	bl	800354c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4a8e      	ldr	r2, [pc, #568]	@ (8004230 <HAL_ADC_ConfigChannel+0x6b0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	f040 8130 	bne.w	800425c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10b      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x4a4>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	0e9b      	lsrs	r3, r3, #26
 8004012:	3301      	adds	r3, #1
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	2b09      	cmp	r3, #9
 800401a:	bf94      	ite	ls
 800401c:	2301      	movls	r3, #1
 800401e:	2300      	movhi	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	e019      	b.n	8004058 <HAL_ADC_ConfigChannel+0x4d8>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800402c:	fa93 f3a3 	rbit	r3, r3
 8004030:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004034:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800403c:	2320      	movs	r3, #32
 800403e:	e003      	b.n	8004048 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004040:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004042:	fab3 f383 	clz	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	3301      	adds	r3, #1
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	2b09      	cmp	r3, #9
 8004050:	bf94      	ite	ls
 8004052:	2301      	movls	r3, #1
 8004054:	2300      	movhi	r3, #0
 8004056:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004058:	2b00      	cmp	r3, #0
 800405a:	d079      	beq.n	8004150 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004064:	2b00      	cmp	r3, #0
 8004066:	d107      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x4f8>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	0e9b      	lsrs	r3, r3, #26
 800406e:	3301      	adds	r3, #1
 8004070:	069b      	lsls	r3, r3, #26
 8004072:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004076:	e015      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x524>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004088:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800408a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004090:	2320      	movs	r3, #32
 8004092:	e003      	b.n	800409c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	3301      	adds	r3, #1
 800409e:	069b      	lsls	r3, r3, #26
 80040a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x544>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	0e9b      	lsrs	r3, r3, #26
 80040b6:	3301      	adds	r3, #1
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	2101      	movs	r1, #1
 80040be:	fa01 f303 	lsl.w	r3, r1, r3
 80040c2:	e017      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x574>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040cc:	fa93 f3a3 	rbit	r3, r3
 80040d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80040d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80040d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80040dc:	2320      	movs	r3, #32
 80040de:	e003      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80040e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040e2:	fab3 f383 	clz	r3, r3
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	3301      	adds	r3, #1
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	2101      	movs	r1, #1
 80040f0:	fa01 f303 	lsl.w	r3, r1, r3
 80040f4:	ea42 0103 	orr.w	r1, r2, r3
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <HAL_ADC_ConfigChannel+0x59a>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	0e9b      	lsrs	r3, r3, #26
 800410a:	3301      	adds	r3, #1
 800410c:	f003 021f 	and.w	r2, r3, #31
 8004110:	4613      	mov	r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4413      	add	r3, r2
 8004116:	051b      	lsls	r3, r3, #20
 8004118:	e018      	b.n	800414c <HAL_ADC_ConfigChannel+0x5cc>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004122:	fa93 f3a3 	rbit	r3, r3
 8004126:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800412c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004132:	2320      	movs	r3, #32
 8004134:	e003      	b.n	800413e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004138:	fab3 f383 	clz	r3, r3
 800413c:	b2db      	uxtb	r3, r3
 800413e:	3301      	adds	r3, #1
 8004140:	f003 021f 	and.w	r2, r3, #31
 8004144:	4613      	mov	r3, r2
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	4413      	add	r3, r2
 800414a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800414c:	430b      	orrs	r3, r1
 800414e:	e080      	b.n	8004252 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004158:	2b00      	cmp	r3, #0
 800415a:	d107      	bne.n	800416c <HAL_ADC_ConfigChannel+0x5ec>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	0e9b      	lsrs	r3, r3, #26
 8004162:	3301      	adds	r3, #1
 8004164:	069b      	lsls	r3, r3, #26
 8004166:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800416a:	e015      	b.n	8004198 <HAL_ADC_ConfigChannel+0x618>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004174:	fa93 f3a3 	rbit	r3, r3
 8004178:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800417e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004184:	2320      	movs	r3, #32
 8004186:	e003      	b.n	8004190 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	3301      	adds	r3, #1
 8004192:	069b      	lsls	r3, r3, #26
 8004194:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x638>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	0e9b      	lsrs	r3, r3, #26
 80041aa:	3301      	adds	r3, #1
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	2101      	movs	r1, #1
 80041b2:	fa01 f303 	lsl.w	r3, r1, r3
 80041b6:	e017      	b.n	80041e8 <HAL_ADC_ConfigChannel+0x668>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	fa93 f3a3 	rbit	r3, r3
 80041c4:	61bb      	str	r3, [r7, #24]
  return result;
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80041d0:	2320      	movs	r3, #32
 80041d2:	e003      	b.n	80041dc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	fab3 f383 	clz	r3, r3
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	3301      	adds	r3, #1
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2101      	movs	r1, #1
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	ea42 0103 	orr.w	r1, r2, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10d      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x694>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	0e9b      	lsrs	r3, r3, #26
 80041fe:	3301      	adds	r3, #1
 8004200:	f003 021f 	and.w	r2, r3, #31
 8004204:	4613      	mov	r3, r2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	4413      	add	r3, r2
 800420a:	3b1e      	subs	r3, #30
 800420c:	051b      	lsls	r3, r3, #20
 800420e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004212:	e01d      	b.n	8004250 <HAL_ADC_ConfigChannel+0x6d0>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	fa93 f3a3 	rbit	r3, r3
 8004220:	60fb      	str	r3, [r7, #12]
  return result;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d103      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800422c:	2320      	movs	r3, #32
 800422e:	e005      	b.n	800423c <HAL_ADC_ConfigChannel+0x6bc>
 8004230:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	3301      	adds	r3, #1
 800423e:	f003 021f 	and.w	r2, r3, #31
 8004242:	4613      	mov	r3, r2
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	4413      	add	r3, r2
 8004248:	3b1e      	subs	r3, #30
 800424a:	051b      	lsls	r3, r3, #20
 800424c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004250:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004256:	4619      	mov	r1, r3
 8004258:	f7ff f94d 	bl	80034f6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b3d      	ldr	r3, [pc, #244]	@ (8004358 <HAL_ADC_ConfigChannel+0x7d8>)
 8004262:	4013      	ands	r3, r2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d06c      	beq.n	8004342 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004268:	483c      	ldr	r0, [pc, #240]	@ (800435c <HAL_ADC_ConfigChannel+0x7dc>)
 800426a:	f7ff f88f 	bl	800338c <LL_ADC_GetCommonPathInternalCh>
 800426e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a3a      	ldr	r2, [pc, #232]	@ (8004360 <HAL_ADC_ConfigChannel+0x7e0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d127      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800427c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004280:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d121      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a35      	ldr	r2, [pc, #212]	@ (8004364 <HAL_ADC_ConfigChannel+0x7e4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d157      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004292:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004296:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800429a:	4619      	mov	r1, r3
 800429c:	482f      	ldr	r0, [pc, #188]	@ (800435c <HAL_ADC_ConfigChannel+0x7dc>)
 800429e:	f7ff f862 	bl	8003366 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042a2:	4b31      	ldr	r3, [pc, #196]	@ (8004368 <HAL_ADC_ConfigChannel+0x7e8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	099b      	lsrs	r3, r3, #6
 80042a8:	4a30      	ldr	r2, [pc, #192]	@ (800436c <HAL_ADC_ConfigChannel+0x7ec>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	4613      	mov	r3, r2
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80042bc:	e002      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f9      	bne.n	80042be <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042ca:	e03a      	b.n	8004342 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a27      	ldr	r2, [pc, #156]	@ (8004370 <HAL_ADC_ConfigChannel+0x7f0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d113      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10d      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004364 <HAL_ADC_ConfigChannel+0x7e4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d12a      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042f4:	4619      	mov	r1, r3
 80042f6:	4819      	ldr	r0, [pc, #100]	@ (800435c <HAL_ADC_ConfigChannel+0x7dc>)
 80042f8:	f7ff f835 	bl	8003366 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042fc:	e021      	b.n	8004342 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1c      	ldr	r2, [pc, #112]	@ (8004374 <HAL_ADC_ConfigChannel+0x7f4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d11c      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004308:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800430c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d116      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a12      	ldr	r2, [pc, #72]	@ (8004364 <HAL_ADC_ConfigChannel+0x7e4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d111      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800431e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004322:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004326:	4619      	mov	r1, r3
 8004328:	480c      	ldr	r0, [pc, #48]	@ (800435c <HAL_ADC_ConfigChannel+0x7dc>)
 800432a:	f7ff f81c 	bl	8003366 <LL_ADC_SetCommonPathInternalCh>
 800432e:	e008      	b.n	8004342 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004334:	f043 0220 	orr.w	r2, r3, #32
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800434a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800434e:	4618      	mov	r0, r3
 8004350:	37d8      	adds	r7, #216	@ 0xd8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	80080000 	.word	0x80080000
 800435c:	50040300 	.word	0x50040300
 8004360:	c7520000 	.word	0xc7520000
 8004364:	50040000 	.word	0x50040000
 8004368:	20040088 	.word	0x20040088
 800436c:	053e2d63 	.word	0x053e2d63
 8004370:	cb840000 	.word	0xcb840000
 8004374:	80000001 	.word	0x80000001

08004378 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004380:	2300      	movs	r3, #0
 8004382:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff f965 	bl	8003658 <LL_ADC_IsEnabled>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d169      	bne.n	8004468 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	4b36      	ldr	r3, [pc, #216]	@ (8004474 <ADC_Enable+0xfc>)
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00d      	beq.n	80043be <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a6:	f043 0210 	orr.w	r2, r3, #16
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e055      	b.n	800446a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff f934 	bl	8003630 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80043c8:	482b      	ldr	r0, [pc, #172]	@ (8004478 <ADC_Enable+0x100>)
 80043ca:	f7fe ffdf 	bl	800338c <LL_ADC_GetCommonPathInternalCh>
 80043ce:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80043d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d013      	beq.n	8004400 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043d8:	4b28      	ldr	r3, [pc, #160]	@ (800447c <ADC_Enable+0x104>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	099b      	lsrs	r3, r3, #6
 80043de:	4a28      	ldr	r2, [pc, #160]	@ (8004480 <ADC_Enable+0x108>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	099b      	lsrs	r3, r3, #6
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	4613      	mov	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80043f2:	e002      	b.n	80043fa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f9      	bne.n	80043f4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004400:	f7fe ff6e 	bl	80032e0 <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004406:	e028      	b.n	800445a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff f923 	bl	8003658 <LL_ADC_IsEnabled>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff f907 	bl	8003630 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004422:	f7fe ff5d 	bl	80032e0 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d914      	bls.n	800445a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d00d      	beq.n	800445a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004442:	f043 0210 	orr.w	r2, r3, #16
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444e:	f043 0201 	orr.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e007      	b.n	800446a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d1cf      	bne.n	8004408 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	8000003f 	.word	0x8000003f
 8004478:	50040300 	.word	0x50040300
 800447c:	20040088 	.word	0x20040088
 8004480:	053e2d63 	.word	0x053e2d63

08004484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004494:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044a0:	4013      	ands	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044b6:	4a04      	ldr	r2, [pc, #16]	@ (80044c8 <__NVIC_SetPriorityGrouping+0x44>)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	60d3      	str	r3, [r2, #12]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d0:	4b04      	ldr	r3, [pc, #16]	@ (80044e4 <__NVIC_GetPriorityGrouping+0x18>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	f003 0307 	and.w	r3, r3, #7
}
 80044da:	4618      	mov	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	db0b      	blt.n	8004512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	f003 021f 	and.w	r2, r3, #31
 8004500:	4907      	ldr	r1, [pc, #28]	@ (8004520 <__NVIC_EnableIRQ+0x38>)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	2001      	movs	r0, #1
 800450a:	fa00 f202 	lsl.w	r2, r0, r2
 800450e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	e000e100 	.word	0xe000e100

08004524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	6039      	str	r1, [r7, #0]
 800452e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004534:	2b00      	cmp	r3, #0
 8004536:	db0a      	blt.n	800454e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	490c      	ldr	r1, [pc, #48]	@ (8004570 <__NVIC_SetPriority+0x4c>)
 800453e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004542:	0112      	lsls	r2, r2, #4
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	440b      	add	r3, r1
 8004548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800454c:	e00a      	b.n	8004564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	4908      	ldr	r1, [pc, #32]	@ (8004574 <__NVIC_SetPriority+0x50>)
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	3b04      	subs	r3, #4
 800455c:	0112      	lsls	r2, r2, #4
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	440b      	add	r3, r1
 8004562:	761a      	strb	r2, [r3, #24]
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	e000e100 	.word	0xe000e100
 8004574:	e000ed00 	.word	0xe000ed00

08004578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004578:	b480      	push	{r7}
 800457a:	b089      	sub	sp, #36	@ 0x24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f1c3 0307 	rsb	r3, r3, #7
 8004592:	2b04      	cmp	r3, #4
 8004594:	bf28      	it	cs
 8004596:	2304      	movcs	r3, #4
 8004598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3304      	adds	r3, #4
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d902      	bls.n	80045a8 <NVIC_EncodePriority+0x30>
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3b03      	subs	r3, #3
 80045a6:	e000      	b.n	80045aa <NVIC_EncodePriority+0x32>
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ac:	f04f 32ff 	mov.w	r2, #4294967295
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43da      	mvns	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	401a      	ands	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c0:	f04f 31ff 	mov.w	r1, #4294967295
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ca:	43d9      	mvns	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d0:	4313      	orrs	r3, r2
         );
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3724      	adds	r7, #36	@ 0x24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045f0:	d301      	bcc.n	80045f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045f2:	2301      	movs	r3, #1
 80045f4:	e00f      	b.n	8004616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004620 <SysTick_Config+0x40>)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045fe:	210f      	movs	r1, #15
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	f7ff ff8e 	bl	8004524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004608:	4b05      	ldr	r3, [pc, #20]	@ (8004620 <SysTick_Config+0x40>)
 800460a:	2200      	movs	r2, #0
 800460c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800460e:	4b04      	ldr	r3, [pc, #16]	@ (8004620 <SysTick_Config+0x40>)
 8004610:	2207      	movs	r2, #7
 8004612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	e000e010 	.word	0xe000e010

08004624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff ff29 	bl	8004484 <__NVIC_SetPriorityGrouping>
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b086      	sub	sp, #24
 800463e:	af00      	add	r7, sp, #0
 8004640:	4603      	mov	r3, r0
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800464c:	f7ff ff3e 	bl	80044cc <__NVIC_GetPriorityGrouping>
 8004650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	68b9      	ldr	r1, [r7, #8]
 8004656:	6978      	ldr	r0, [r7, #20]
 8004658:	f7ff ff8e 	bl	8004578 <NVIC_EncodePriority>
 800465c:	4602      	mov	r2, r0
 800465e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004662:	4611      	mov	r1, r2
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff ff5d 	bl	8004524 <__NVIC_SetPriority>
}
 800466a:	bf00      	nop
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	4603      	mov	r3, r0
 800467a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800467c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ff31 	bl	80044e8 <__NVIC_EnableIRQ>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff ffa2 	bl	80045e0 <SysTick_Config>
 800469c:	4603      	mov	r3, r0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046b6:	e166      	b.n	8004986 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	2101      	movs	r1, #1
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	4013      	ands	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8158 	beq.w	8004980 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d005      	beq.n	80046e8 <HAL_GPIO_Init+0x40>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d130      	bne.n	800474a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	2203      	movs	r2, #3
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4013      	ands	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800471e:	2201      	movs	r2, #1
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43db      	mvns	r3, r3
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4013      	ands	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	091b      	lsrs	r3, r3, #4
 8004734:	f003 0201 	and.w	r2, r3, #1
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	2b03      	cmp	r3, #3
 8004754:	d017      	beq.n	8004786 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	2203      	movs	r2, #3
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	43db      	mvns	r3, r3
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4013      	ands	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d123      	bne.n	80047da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	08da      	lsrs	r2, r3, #3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3208      	adds	r2, #8
 800479a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	220f      	movs	r2, #15
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	43db      	mvns	r3, r3
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4013      	ands	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	08da      	lsrs	r2, r3, #3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3208      	adds	r2, #8
 80047d4:	6939      	ldr	r1, [r7, #16]
 80047d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	2203      	movs	r2, #3
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43db      	mvns	r3, r3
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4013      	ands	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 0203 	and.w	r2, r3, #3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 80b2 	beq.w	8004980 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800481c:	4b61      	ldr	r3, [pc, #388]	@ (80049a4 <HAL_GPIO_Init+0x2fc>)
 800481e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004820:	4a60      	ldr	r2, [pc, #384]	@ (80049a4 <HAL_GPIO_Init+0x2fc>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	6613      	str	r3, [r2, #96]	@ 0x60
 8004828:	4b5e      	ldr	r3, [pc, #376]	@ (80049a4 <HAL_GPIO_Init+0x2fc>)
 800482a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004834:	4a5c      	ldr	r2, [pc, #368]	@ (80049a8 <HAL_GPIO_Init+0x300>)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	089b      	lsrs	r3, r3, #2
 800483a:	3302      	adds	r3, #2
 800483c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004840:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f003 0303 	and.w	r3, r3, #3
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	220f      	movs	r2, #15
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4013      	ands	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800485e:	d02b      	beq.n	80048b8 <HAL_GPIO_Init+0x210>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a52      	ldr	r2, [pc, #328]	@ (80049ac <HAL_GPIO_Init+0x304>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d025      	beq.n	80048b4 <HAL_GPIO_Init+0x20c>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a51      	ldr	r2, [pc, #324]	@ (80049b0 <HAL_GPIO_Init+0x308>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d01f      	beq.n	80048b0 <HAL_GPIO_Init+0x208>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a50      	ldr	r2, [pc, #320]	@ (80049b4 <HAL_GPIO_Init+0x30c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d019      	beq.n	80048ac <HAL_GPIO_Init+0x204>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a4f      	ldr	r2, [pc, #316]	@ (80049b8 <HAL_GPIO_Init+0x310>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <HAL_GPIO_Init+0x200>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a4e      	ldr	r2, [pc, #312]	@ (80049bc <HAL_GPIO_Init+0x314>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00d      	beq.n	80048a4 <HAL_GPIO_Init+0x1fc>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a4d      	ldr	r2, [pc, #308]	@ (80049c0 <HAL_GPIO_Init+0x318>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d007      	beq.n	80048a0 <HAL_GPIO_Init+0x1f8>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a4c      	ldr	r2, [pc, #304]	@ (80049c4 <HAL_GPIO_Init+0x31c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d101      	bne.n	800489c <HAL_GPIO_Init+0x1f4>
 8004898:	2307      	movs	r3, #7
 800489a:	e00e      	b.n	80048ba <HAL_GPIO_Init+0x212>
 800489c:	2308      	movs	r3, #8
 800489e:	e00c      	b.n	80048ba <HAL_GPIO_Init+0x212>
 80048a0:	2306      	movs	r3, #6
 80048a2:	e00a      	b.n	80048ba <HAL_GPIO_Init+0x212>
 80048a4:	2305      	movs	r3, #5
 80048a6:	e008      	b.n	80048ba <HAL_GPIO_Init+0x212>
 80048a8:	2304      	movs	r3, #4
 80048aa:	e006      	b.n	80048ba <HAL_GPIO_Init+0x212>
 80048ac:	2303      	movs	r3, #3
 80048ae:	e004      	b.n	80048ba <HAL_GPIO_Init+0x212>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e002      	b.n	80048ba <HAL_GPIO_Init+0x212>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <HAL_GPIO_Init+0x212>
 80048b8:	2300      	movs	r3, #0
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	f002 0203 	and.w	r2, r2, #3
 80048c0:	0092      	lsls	r2, r2, #2
 80048c2:	4093      	lsls	r3, r2
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048ca:	4937      	ldr	r1, [pc, #220]	@ (80049a8 <HAL_GPIO_Init+0x300>)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	089b      	lsrs	r3, r3, #2
 80048d0:	3302      	adds	r3, #2
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048d8:	4b3b      	ldr	r3, [pc, #236]	@ (80049c8 <HAL_GPIO_Init+0x320>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	43db      	mvns	r3, r3
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4013      	ands	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048fc:	4a32      	ldr	r2, [pc, #200]	@ (80049c8 <HAL_GPIO_Init+0x320>)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004902:	4b31      	ldr	r3, [pc, #196]	@ (80049c8 <HAL_GPIO_Init+0x320>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	43db      	mvns	r3, r3
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	4013      	ands	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004926:	4a28      	ldr	r2, [pc, #160]	@ (80049c8 <HAL_GPIO_Init+0x320>)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800492c:	4b26      	ldr	r3, [pc, #152]	@ (80049c8 <HAL_GPIO_Init+0x320>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	43db      	mvns	r3, r3
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4013      	ands	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004950:	4a1d      	ldr	r2, [pc, #116]	@ (80049c8 <HAL_GPIO_Init+0x320>)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004956:	4b1c      	ldr	r3, [pc, #112]	@ (80049c8 <HAL_GPIO_Init+0x320>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	43db      	mvns	r3, r3
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4013      	ands	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800497a:	4a13      	ldr	r2, [pc, #76]	@ (80049c8 <HAL_GPIO_Init+0x320>)
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	3301      	adds	r3, #1
 8004984:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	f47f ae91 	bne.w	80046b8 <HAL_GPIO_Init+0x10>
  }
}
 8004996:	bf00      	nop
 8004998:	bf00      	nop
 800499a:	371c      	adds	r7, #28
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40010000 	.word	0x40010000
 80049ac:	48000400 	.word	0x48000400
 80049b0:	48000800 	.word	0x48000800
 80049b4:	48000c00 	.word	0x48000c00
 80049b8:	48001000 	.word	0x48001000
 80049bc:	48001400 	.word	0x48001400
 80049c0:	48001800 	.word	0x48001800
 80049c4:	48001c00 	.word	0x48001c00
 80049c8:	40010400 	.word	0x40010400

080049cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	887b      	ldrh	r3, [r7, #2]
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049e4:	2301      	movs	r3, #1
 80049e6:	73fb      	strb	r3, [r7, #15]
 80049e8:	e001      	b.n	80049ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	807b      	strh	r3, [r7, #2]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a0c:	787b      	ldrb	r3, [r7, #1]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a12:	887a      	ldrh	r2, [r7, #2]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a18:	e002      	b.n	8004a20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a1a:	887a      	ldrh	r2, [r7, #2]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a30:	4b0d      	ldr	r3, [pc, #52]	@ (8004a68 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3c:	d102      	bne.n	8004a44 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004a3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a42:	e00b      	b.n	8004a5c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004a44:	4b08      	ldr	r3, [pc, #32]	@ (8004a68 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a52:	d102      	bne.n	8004a5a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004a54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a58:	e000      	b.n	8004a5c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004a5a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40007000 	.word	0x40007000

08004a6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d141      	bne.n	8004afe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a86:	d131      	bne.n	8004aec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a88:	4b47      	ldr	r3, [pc, #284]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a8e:	4a46      	ldr	r2, [pc, #280]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a98:	4b43      	ldr	r3, [pc, #268]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004aa0:	4a41      	ldr	r2, [pc, #260]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004aa8:	4b40      	ldr	r3, [pc, #256]	@ (8004bac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2232      	movs	r2, #50	@ 0x32
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	4a3f      	ldr	r2, [pc, #252]	@ (8004bb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	0c9b      	lsrs	r3, r3, #18
 8004aba:	3301      	adds	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004abe:	e002      	b.n	8004ac6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ac6:	4b38      	ldr	r3, [pc, #224]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad2:	d102      	bne.n	8004ada <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f2      	bne.n	8004ac0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ada:	4b33      	ldr	r3, [pc, #204]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ae6:	d158      	bne.n	8004b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e057      	b.n	8004b9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004aec:	4b2e      	ldr	r3, [pc, #184]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004af2:	4a2d      	ldr	r2, [pc, #180]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004af8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004afc:	e04d      	b.n	8004b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b04:	d141      	bne.n	8004b8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b06:	4b28      	ldr	r3, [pc, #160]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b12:	d131      	bne.n	8004b78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b14:	4b24      	ldr	r3, [pc, #144]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b1a:	4a23      	ldr	r2, [pc, #140]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b24:	4b20      	ldr	r3, [pc, #128]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004b34:	4b1d      	ldr	r3, [pc, #116]	@ (8004bac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2232      	movs	r2, #50	@ 0x32
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b40:	fba2 2303 	umull	r2, r3, r2, r3
 8004b44:	0c9b      	lsrs	r3, r3, #18
 8004b46:	3301      	adds	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b4a:	e002      	b.n	8004b52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b52:	4b15      	ldr	r3, [pc, #84]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b5e:	d102      	bne.n	8004b66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f2      	bne.n	8004b4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b66:	4b10      	ldr	r3, [pc, #64]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b72:	d112      	bne.n	8004b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e011      	b.n	8004b9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b78:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004b88:	e007      	b.n	8004b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b8a:	4b07      	ldr	r3, [pc, #28]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b92:	4a05      	ldr	r2, [pc, #20]	@ (8004ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b98:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	40007000 	.word	0x40007000
 8004bac:	20040088 	.word	0x20040088
 8004bb0:	431bde83 	.word	0x431bde83

08004bb4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004bb8:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	4a04      	ldr	r2, [pc, #16]	@ (8004bd0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004bbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bc2:	6053      	str	r3, [r2, #4]
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40007000 	.word	0x40007000

08004bd4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f000 bc08 	b.w	80053f8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004be8:	4b96      	ldr	r3, [pc, #600]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bf2:	4b94      	ldr	r3, [pc, #592]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80e4 	beq.w	8004dd2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <HAL_RCC_OscConfig+0x4c>
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	2b0c      	cmp	r3, #12
 8004c14:	f040 808b 	bne.w	8004d2e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	f040 8087 	bne.w	8004d2e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c20:	4b88      	ldr	r3, [pc, #544]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_OscConfig+0x64>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e3df      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1a      	ldr	r2, [r3, #32]
 8004c3c:	4b81      	ldr	r3, [pc, #516]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d004      	beq.n	8004c52 <HAL_RCC_OscConfig+0x7e>
 8004c48:	4b7e      	ldr	r3, [pc, #504]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c50:	e005      	b.n	8004c5e <HAL_RCC_OscConfig+0x8a>
 8004c52:	4b7c      	ldr	r3, [pc, #496]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d223      	bcs.n	8004caa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fdcc 	bl	8005804 <RCC_SetFlashLatencyFromMSIRange>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e3c0      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c76:	4b73      	ldr	r3, [pc, #460]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a72      	ldr	r2, [pc, #456]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004c7c:	f043 0308 	orr.w	r3, r3, #8
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	4b70      	ldr	r3, [pc, #448]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	496d      	ldr	r1, [pc, #436]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c94:	4b6b      	ldr	r3, [pc, #428]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	4968      	ldr	r1, [pc, #416]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]
 8004ca8:	e025      	b.n	8004cf6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004caa:	4b66      	ldr	r3, [pc, #408]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a65      	ldr	r2, [pc, #404]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004cb0:	f043 0308 	orr.w	r3, r3, #8
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	4b63      	ldr	r3, [pc, #396]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	4960      	ldr	r1, [pc, #384]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	495b      	ldr	r1, [pc, #364]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fd8c 	bl	8005804 <RCC_SetFlashLatencyFromMSIRange>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e380      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cf6:	f000 fcc1 	bl	800567c <HAL_RCC_GetSysClockFreq>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	4b51      	ldr	r3, [pc, #324]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	4950      	ldr	r1, [pc, #320]	@ (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004d08:	5ccb      	ldrb	r3, [r1, r3]
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d12:	4a4e      	ldr	r2, [pc, #312]	@ (8004e4c <HAL_RCC_OscConfig+0x278>)
 8004d14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d16:	4b4e      	ldr	r3, [pc, #312]	@ (8004e50 <HAL_RCC_OscConfig+0x27c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe fa90 	bl	8003240 <HAL_InitTick>
 8004d20:	4603      	mov	r3, r0
 8004d22:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d052      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	e364      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d032      	beq.n	8004d9c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d36:	4b43      	ldr	r3, [pc, #268]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a42      	ldr	r2, [pc, #264]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d42:	f7fe facd 	bl	80032e0 <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d4a:	f7fe fac9 	bl	80032e0 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e34d      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d5c:	4b39      	ldr	r3, [pc, #228]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0f0      	beq.n	8004d4a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d68:	4b36      	ldr	r3, [pc, #216]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a35      	ldr	r2, [pc, #212]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004d6e:	f043 0308 	orr.w	r3, r3, #8
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	4b33      	ldr	r3, [pc, #204]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	4930      	ldr	r1, [pc, #192]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d86:	4b2f      	ldr	r3, [pc, #188]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	492b      	ldr	r1, [pc, #172]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	604b      	str	r3, [r1, #4]
 8004d9a:	e01a      	b.n	8004dd2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d9c:	4b29      	ldr	r3, [pc, #164]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a28      	ldr	r2, [pc, #160]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004da2:	f023 0301 	bic.w	r3, r3, #1
 8004da6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004da8:	f7fe fa9a 	bl	80032e0 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004db0:	f7fe fa96 	bl	80032e0 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e31a      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004dc2:	4b20      	ldr	r3, [pc, #128]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f0      	bne.n	8004db0 <HAL_RCC_OscConfig+0x1dc>
 8004dce:	e000      	b.n	8004dd2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004dd0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d073      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d005      	beq.n	8004df0 <HAL_RCC_OscConfig+0x21c>
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b0c      	cmp	r3, #12
 8004de8:	d10e      	bne.n	8004e08 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d10b      	bne.n	8004e08 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004df0:	4b14      	ldr	r3, [pc, #80]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d063      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x2f0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d15f      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e2f7      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e10:	d106      	bne.n	8004e20 <HAL_RCC_OscConfig+0x24c>
 8004e12:	4b0c      	ldr	r3, [pc, #48]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a0b      	ldr	r2, [pc, #44]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	e025      	b.n	8004e6c <HAL_RCC_OscConfig+0x298>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e28:	d114      	bne.n	8004e54 <HAL_RCC_OscConfig+0x280>
 8004e2a:	4b06      	ldr	r3, [pc, #24]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a05      	ldr	r2, [pc, #20]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	4b03      	ldr	r3, [pc, #12]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a02      	ldr	r2, [pc, #8]	@ (8004e44 <HAL_RCC_OscConfig+0x270>)
 8004e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	e013      	b.n	8004e6c <HAL_RCC_OscConfig+0x298>
 8004e44:	40021000 	.word	0x40021000
 8004e48:	0805373c 	.word	0x0805373c
 8004e4c:	20040088 	.word	0x20040088
 8004e50:	2004009c 	.word	0x2004009c
 8004e54:	4ba0      	ldr	r3, [pc, #640]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a9f      	ldr	r2, [pc, #636]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	4b9d      	ldr	r3, [pc, #628]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a9c      	ldr	r2, [pc, #624]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004e66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d013      	beq.n	8004e9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e74:	f7fe fa34 	bl	80032e0 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e7c:	f7fe fa30 	bl	80032e0 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b64      	cmp	r3, #100	@ 0x64
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e2b4      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e8e:	4b92      	ldr	r3, [pc, #584]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCC_OscConfig+0x2a8>
 8004e9a:	e014      	b.n	8004ec6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9c:	f7fe fa20 	bl	80032e0 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea4:	f7fe fa1c 	bl	80032e0 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b64      	cmp	r3, #100	@ 0x64
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e2a0      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004eb6:	4b88      	ldr	r3, [pc, #544]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x2d0>
 8004ec2:	e000      	b.n	8004ec6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d060      	beq.n	8004f94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x310>
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2b0c      	cmp	r3, #12
 8004edc:	d119      	bne.n	8004f12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d116      	bne.n	8004f12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ee4:	4b7c      	ldr	r3, [pc, #496]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_OscConfig+0x328>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e27d      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efc:	4b76      	ldr	r3, [pc, #472]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	061b      	lsls	r3, r3, #24
 8004f0a:	4973      	ldr	r1, [pc, #460]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f10:	e040      	b.n	8004f94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d023      	beq.n	8004f62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f1a:	4b6f      	ldr	r3, [pc, #444]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a6e      	ldr	r2, [pc, #440]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f26:	f7fe f9db 	bl	80032e0 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f2e:	f7fe f9d7 	bl	80032e0 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e25b      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f40:	4b65      	ldr	r3, [pc, #404]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4c:	4b62      	ldr	r3, [pc, #392]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	061b      	lsls	r3, r3, #24
 8004f5a:	495f      	ldr	r1, [pc, #380]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	604b      	str	r3, [r1, #4]
 8004f60:	e018      	b.n	8004f94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f62:	4b5d      	ldr	r3, [pc, #372]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a5c      	ldr	r2, [pc, #368]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6e:	f7fe f9b7 	bl	80032e0 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f76:	f7fe f9b3 	bl	80032e0 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e237      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f88:	4b53      	ldr	r3, [pc, #332]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f0      	bne.n	8004f76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d03c      	beq.n	800501a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01c      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fae:	4a4a      	ldr	r2, [pc, #296]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fe f992 	bl	80032e0 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc0:	f7fe f98e 	bl	80032e0 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e212      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fd2:	4b41      	ldr	r3, [pc, #260]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0ef      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x3ec>
 8004fe0:	e01b      	b.n	800501a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fe8:	4a3b      	ldr	r2, [pc, #236]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8004fea:	f023 0301 	bic.w	r3, r3, #1
 8004fee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff2:	f7fe f975 	bl	80032e0 <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ffa:	f7fe f971 	bl	80032e0 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e1f5      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800500c:	4b32      	ldr	r3, [pc, #200]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 800500e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1ef      	bne.n	8004ffa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 80a6 	beq.w	8005174 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005028:	2300      	movs	r3, #0
 800502a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800502c:	4b2a      	ldr	r3, [pc, #168]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10d      	bne.n	8005054 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005038:	4b27      	ldr	r3, [pc, #156]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 800503a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503c:	4a26      	ldr	r2, [pc, #152]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 800503e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005042:	6593      	str	r3, [r2, #88]	@ 0x58
 8005044:	4b24      	ldr	r3, [pc, #144]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 8005046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005050:	2301      	movs	r3, #1
 8005052:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005054:	4b21      	ldr	r3, [pc, #132]	@ (80050dc <HAL_RCC_OscConfig+0x508>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d118      	bne.n	8005092 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005060:	4b1e      	ldr	r3, [pc, #120]	@ (80050dc <HAL_RCC_OscConfig+0x508>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1d      	ldr	r2, [pc, #116]	@ (80050dc <HAL_RCC_OscConfig+0x508>)
 8005066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800506a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800506c:	f7fe f938 	bl	80032e0 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005074:	f7fe f934 	bl	80032e0 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e1b8      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005086:	4b15      	ldr	r3, [pc, #84]	@ (80050dc <HAL_RCC_OscConfig+0x508>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d108      	bne.n	80050ac <HAL_RCC_OscConfig+0x4d8>
 800509a:	4b0f      	ldr	r3, [pc, #60]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a0:	4a0d      	ldr	r2, [pc, #52]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050aa:	e029      	b.n	8005100 <HAL_RCC_OscConfig+0x52c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b05      	cmp	r3, #5
 80050b2:	d115      	bne.n	80050e0 <HAL_RCC_OscConfig+0x50c>
 80050b4:	4b08      	ldr	r3, [pc, #32]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ba:	4a07      	ldr	r2, [pc, #28]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 80050bc:	f043 0304 	orr.w	r3, r3, #4
 80050c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050c4:	4b04      	ldr	r3, [pc, #16]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 80050c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ca:	4a03      	ldr	r2, [pc, #12]	@ (80050d8 <HAL_RCC_OscConfig+0x504>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050d4:	e014      	b.n	8005100 <HAL_RCC_OscConfig+0x52c>
 80050d6:	bf00      	nop
 80050d8:	40021000 	.word	0x40021000
 80050dc:	40007000 	.word	0x40007000
 80050e0:	4b9d      	ldr	r3, [pc, #628]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e6:	4a9c      	ldr	r2, [pc, #624]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 80050e8:	f023 0301 	bic.w	r3, r3, #1
 80050ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050f0:	4b99      	ldr	r3, [pc, #612]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f6:	4a98      	ldr	r2, [pc, #608]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 80050f8:	f023 0304 	bic.w	r3, r3, #4
 80050fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d016      	beq.n	8005136 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005108:	f7fe f8ea 	bl	80032e0 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800510e:	e00a      	b.n	8005126 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005110:	f7fe f8e6 	bl	80032e0 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e168      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005126:	4b8c      	ldr	r3, [pc, #560]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 8005128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0ed      	beq.n	8005110 <HAL_RCC_OscConfig+0x53c>
 8005134:	e015      	b.n	8005162 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005136:	f7fe f8d3 	bl	80032e0 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800513c:	e00a      	b.n	8005154 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513e:	f7fe f8cf 	bl	80032e0 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e151      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005154:	4b80      	ldr	r3, [pc, #512]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1ed      	bne.n	800513e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005162:	7ffb      	ldrb	r3, [r7, #31]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d105      	bne.n	8005174 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005168:	4b7b      	ldr	r3, [pc, #492]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 800516a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800516c:	4a7a      	ldr	r2, [pc, #488]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 800516e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005172:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d03c      	beq.n	80051fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01c      	beq.n	80051c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005188:	4b73      	ldr	r3, [pc, #460]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 800518a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800518e:	4a72      	ldr	r2, [pc, #456]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005198:	f7fe f8a2 	bl	80032e0 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051a0:	f7fe f89e 	bl	80032e0 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e122      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051b2:	4b69      	ldr	r3, [pc, #420]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 80051b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0ef      	beq.n	80051a0 <HAL_RCC_OscConfig+0x5cc>
 80051c0:	e01b      	b.n	80051fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051c2:	4b65      	ldr	r3, [pc, #404]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 80051c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051c8:	4a63      	ldr	r2, [pc, #396]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d2:	f7fe f885 	bl	80032e0 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051da:	f7fe f881 	bl	80032e0 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e105      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051ec:	4b5a      	ldr	r3, [pc, #360]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 80051ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1ef      	bne.n	80051da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 80f9 	beq.w	80053f6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005208:	2b02      	cmp	r3, #2
 800520a:	f040 80cf 	bne.w	80053ac <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800520e:	4b52      	ldr	r3, [pc, #328]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f003 0203 	and.w	r2, r3, #3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	429a      	cmp	r2, r3
 8005220:	d12c      	bne.n	800527c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522c:	3b01      	subs	r3, #1
 800522e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005230:	429a      	cmp	r2, r3
 8005232:	d123      	bne.n	800527c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800523e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005240:	429a      	cmp	r2, r3
 8005242:	d11b      	bne.n	800527c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005250:	429a      	cmp	r2, r3
 8005252:	d113      	bne.n	800527c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800525e:	085b      	lsrs	r3, r3, #1
 8005260:	3b01      	subs	r3, #1
 8005262:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005264:	429a      	cmp	r2, r3
 8005266:	d109      	bne.n	800527c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005272:	085b      	lsrs	r3, r3, #1
 8005274:	3b01      	subs	r3, #1
 8005276:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005278:	429a      	cmp	r2, r3
 800527a:	d071      	beq.n	8005360 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	2b0c      	cmp	r3, #12
 8005280:	d068      	beq.n	8005354 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005282:	4b35      	ldr	r3, [pc, #212]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d105      	bne.n	800529a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800528e:	4b32      	ldr	r3, [pc, #200]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e0ac      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800529e:	4b2e      	ldr	r3, [pc, #184]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 80052a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052aa:	f7fe f819 	bl	80032e0 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b2:	f7fe f815 	bl	80032e0 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e099      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052c4:	4b24      	ldr	r3, [pc, #144]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f0      	bne.n	80052b2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052d0:	4b21      	ldr	r3, [pc, #132]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	4b21      	ldr	r3, [pc, #132]	@ (800535c <HAL_RCC_OscConfig+0x788>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80052e0:	3a01      	subs	r2, #1
 80052e2:	0112      	lsls	r2, r2, #4
 80052e4:	4311      	orrs	r1, r2
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80052ea:	0212      	lsls	r2, r2, #8
 80052ec:	4311      	orrs	r1, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80052f2:	0852      	lsrs	r2, r2, #1
 80052f4:	3a01      	subs	r2, #1
 80052f6:	0552      	lsls	r2, r2, #21
 80052f8:	4311      	orrs	r1, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80052fe:	0852      	lsrs	r2, r2, #1
 8005300:	3a01      	subs	r2, #1
 8005302:	0652      	lsls	r2, r2, #25
 8005304:	4311      	orrs	r1, r2
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800530a:	06d2      	lsls	r2, r2, #27
 800530c:	430a      	orrs	r2, r1
 800530e:	4912      	ldr	r1, [pc, #72]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 8005310:	4313      	orrs	r3, r2
 8005312:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005314:	4b10      	ldr	r3, [pc, #64]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a0f      	ldr	r2, [pc, #60]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 800531a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800531e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005320:	4b0d      	ldr	r3, [pc, #52]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4a0c      	ldr	r2, [pc, #48]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 8005326:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800532a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800532c:	f7fd ffd8 	bl	80032e0 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005334:	f7fd ffd4 	bl	80032e0 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e058      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005346:	4b04      	ldr	r3, [pc, #16]	@ (8005358 <HAL_RCC_OscConfig+0x784>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0f0      	beq.n	8005334 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005352:	e050      	b.n	80053f6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e04f      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
 8005358:	40021000 	.word	0x40021000
 800535c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005360:	4b27      	ldr	r3, [pc, #156]	@ (8005400 <HAL_RCC_OscConfig+0x82c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d144      	bne.n	80053f6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800536c:	4b24      	ldr	r3, [pc, #144]	@ (8005400 <HAL_RCC_OscConfig+0x82c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a23      	ldr	r2, [pc, #140]	@ (8005400 <HAL_RCC_OscConfig+0x82c>)
 8005372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005376:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005378:	4b21      	ldr	r3, [pc, #132]	@ (8005400 <HAL_RCC_OscConfig+0x82c>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4a20      	ldr	r2, [pc, #128]	@ (8005400 <HAL_RCC_OscConfig+0x82c>)
 800537e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005382:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005384:	f7fd ffac 	bl	80032e0 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800538c:	f7fd ffa8 	bl	80032e0 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e02c      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800539e:	4b18      	ldr	r3, [pc, #96]	@ (8005400 <HAL_RCC_OscConfig+0x82c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0x7b8>
 80053aa:	e024      	b.n	80053f6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	2b0c      	cmp	r3, #12
 80053b0:	d01f      	beq.n	80053f2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b2:	4b13      	ldr	r3, [pc, #76]	@ (8005400 <HAL_RCC_OscConfig+0x82c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a12      	ldr	r2, [pc, #72]	@ (8005400 <HAL_RCC_OscConfig+0x82c>)
 80053b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053be:	f7fd ff8f 	bl	80032e0 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c6:	f7fd ff8b 	bl	80032e0 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e00f      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d8:	4b09      	ldr	r3, [pc, #36]	@ (8005400 <HAL_RCC_OscConfig+0x82c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1f0      	bne.n	80053c6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80053e4:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <HAL_RCC_OscConfig+0x82c>)
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	4905      	ldr	r1, [pc, #20]	@ (8005400 <HAL_RCC_OscConfig+0x82c>)
 80053ea:	4b06      	ldr	r3, [pc, #24]	@ (8005404 <HAL_RCC_OscConfig+0x830>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	60cb      	str	r3, [r1, #12]
 80053f0:	e001      	b.n	80053f6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3720      	adds	r7, #32
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40021000 	.word	0x40021000
 8005404:	feeefffc 	.word	0xfeeefffc

08005408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e11d      	b.n	800565c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005420:	4b90      	ldr	r3, [pc, #576]	@ (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d910      	bls.n	8005450 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542e:	4b8d      	ldr	r3, [pc, #564]	@ (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f023 020f 	bic.w	r2, r3, #15
 8005436:	498b      	ldr	r1, [pc, #556]	@ (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	4313      	orrs	r3, r2
 800543c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800543e:	4b89      	ldr	r3, [pc, #548]	@ (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d001      	beq.n	8005450 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e105      	b.n	800565c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d010      	beq.n	800547e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	4b81      	ldr	r3, [pc, #516]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005468:	429a      	cmp	r2, r3
 800546a:	d908      	bls.n	800547e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800546c:	4b7e      	ldr	r3, [pc, #504]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	497b      	ldr	r1, [pc, #492]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 800547a:	4313      	orrs	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d079      	beq.n	800557e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b03      	cmp	r3, #3
 8005490:	d11e      	bne.n	80054d0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005492:	4b75      	ldr	r3, [pc, #468]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e0dc      	b.n	800565c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80054a2:	f000 fa09 	bl	80058b8 <RCC_GetSysClockFreqFromPLLSource>
 80054a6:	4603      	mov	r3, r0
 80054a8:	4a70      	ldr	r2, [pc, #448]	@ (800566c <HAL_RCC_ClockConfig+0x264>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d946      	bls.n	800553c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80054ae:	4b6e      	ldr	r3, [pc, #440]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d140      	bne.n	800553c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054ba:	4b6b      	ldr	r3, [pc, #428]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054c2:	4a69      	ldr	r2, [pc, #420]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 80054c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80054ca:	2380      	movs	r3, #128	@ 0x80
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	e035      	b.n	800553c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d107      	bne.n	80054e8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054d8:	4b63      	ldr	r3, [pc, #396]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d115      	bne.n	8005510 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0b9      	b.n	800565c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d107      	bne.n	8005500 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054f0:	4b5d      	ldr	r3, [pc, #372]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d109      	bne.n	8005510 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0ad      	b.n	800565c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005500:	4b59      	ldr	r3, [pc, #356]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e0a5      	b.n	800565c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005510:	f000 f8b4 	bl	800567c <HAL_RCC_GetSysClockFreq>
 8005514:	4603      	mov	r3, r0
 8005516:	4a55      	ldr	r2, [pc, #340]	@ (800566c <HAL_RCC_ClockConfig+0x264>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d90f      	bls.n	800553c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800551c:	4b52      	ldr	r3, [pc, #328]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005528:	4b4f      	ldr	r3, [pc, #316]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005530:	4a4d      	ldr	r2, [pc, #308]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 8005532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005536:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005538:	2380      	movs	r3, #128	@ 0x80
 800553a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800553c:	4b4a      	ldr	r3, [pc, #296]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f023 0203 	bic.w	r2, r3, #3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4947      	ldr	r1, [pc, #284]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 800554a:	4313      	orrs	r3, r2
 800554c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800554e:	f7fd fec7 	bl	80032e0 <HAL_GetTick>
 8005552:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005554:	e00a      	b.n	800556c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005556:	f7fd fec3 	bl	80032e0 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005564:	4293      	cmp	r3, r2
 8005566:	d901      	bls.n	800556c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e077      	b.n	800565c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556c:	4b3e      	ldr	r3, [pc, #248]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 020c 	and.w	r2, r3, #12
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	429a      	cmp	r2, r3
 800557c:	d1eb      	bne.n	8005556 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b80      	cmp	r3, #128	@ 0x80
 8005582:	d105      	bne.n	8005590 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005584:	4b38      	ldr	r3, [pc, #224]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	4a37      	ldr	r2, [pc, #220]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 800558a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800558e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d010      	beq.n	80055be <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	4b31      	ldr	r3, [pc, #196]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d208      	bcs.n	80055be <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	492b      	ldr	r1, [pc, #172]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055be:	4b29      	ldr	r3, [pc, #164]	@ (8005664 <HAL_RCC_ClockConfig+0x25c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d210      	bcs.n	80055ee <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055cc:	4b25      	ldr	r3, [pc, #148]	@ (8005664 <HAL_RCC_ClockConfig+0x25c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f023 020f 	bic.w	r2, r3, #15
 80055d4:	4923      	ldr	r1, [pc, #140]	@ (8005664 <HAL_RCC_ClockConfig+0x25c>)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	4313      	orrs	r3, r2
 80055da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055dc:	4b21      	ldr	r3, [pc, #132]	@ (8005664 <HAL_RCC_ClockConfig+0x25c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 030f 	and.w	r3, r3, #15
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d001      	beq.n	80055ee <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e036      	b.n	800565c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	4918      	ldr	r1, [pc, #96]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 8005608:	4313      	orrs	r3, r2
 800560a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d009      	beq.n	800562c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005618:	4b13      	ldr	r3, [pc, #76]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4910      	ldr	r1, [pc, #64]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 8005628:	4313      	orrs	r3, r2
 800562a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800562c:	f000 f826 	bl	800567c <HAL_RCC_GetSysClockFreq>
 8005630:	4602      	mov	r2, r0
 8005632:	4b0d      	ldr	r3, [pc, #52]	@ (8005668 <HAL_RCC_ClockConfig+0x260>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	091b      	lsrs	r3, r3, #4
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	490c      	ldr	r1, [pc, #48]	@ (8005670 <HAL_RCC_ClockConfig+0x268>)
 800563e:	5ccb      	ldrb	r3, [r1, r3]
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
 8005648:	4a0a      	ldr	r2, [pc, #40]	@ (8005674 <HAL_RCC_ClockConfig+0x26c>)
 800564a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800564c:	4b0a      	ldr	r3, [pc, #40]	@ (8005678 <HAL_RCC_ClockConfig+0x270>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f7fd fdf5 	bl	8003240 <HAL_InitTick>
 8005656:	4603      	mov	r3, r0
 8005658:	73fb      	strb	r3, [r7, #15]

  return status;
 800565a:	7bfb      	ldrb	r3, [r7, #15]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40022000 	.word	0x40022000
 8005668:	40021000 	.word	0x40021000
 800566c:	04c4b400 	.word	0x04c4b400
 8005670:	0805373c 	.word	0x0805373c
 8005674:	20040088 	.word	0x20040088
 8005678:	2004009c 	.word	0x2004009c

0800567c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800567c:	b480      	push	{r7}
 800567e:	b089      	sub	sp, #36	@ 0x24
 8005680:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	61fb      	str	r3, [r7, #28]
 8005686:	2300      	movs	r3, #0
 8005688:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800568a:	4b3e      	ldr	r3, [pc, #248]	@ (8005784 <HAL_RCC_GetSysClockFreq+0x108>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 030c 	and.w	r3, r3, #12
 8005692:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005694:	4b3b      	ldr	r3, [pc, #236]	@ (8005784 <HAL_RCC_GetSysClockFreq+0x108>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f003 0303 	and.w	r3, r3, #3
 800569c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_RCC_GetSysClockFreq+0x34>
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2b0c      	cmp	r3, #12
 80056a8:	d121      	bne.n	80056ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d11e      	bne.n	80056ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80056b0:	4b34      	ldr	r3, [pc, #208]	@ (8005784 <HAL_RCC_GetSysClockFreq+0x108>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d107      	bne.n	80056cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80056bc:	4b31      	ldr	r3, [pc, #196]	@ (8005784 <HAL_RCC_GetSysClockFreq+0x108>)
 80056be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056c2:	0a1b      	lsrs	r3, r3, #8
 80056c4:	f003 030f 	and.w	r3, r3, #15
 80056c8:	61fb      	str	r3, [r7, #28]
 80056ca:	e005      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80056cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005784 <HAL_RCC_GetSysClockFreq+0x108>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80056d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x10c>)
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10d      	bne.n	8005704 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056ec:	e00a      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d102      	bne.n	80056fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80056f4:	4b25      	ldr	r3, [pc, #148]	@ (800578c <HAL_RCC_GetSysClockFreq+0x110>)
 80056f6:	61bb      	str	r3, [r7, #24]
 80056f8:	e004      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d101      	bne.n	8005704 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005700:	4b23      	ldr	r3, [pc, #140]	@ (8005790 <HAL_RCC_GetSysClockFreq+0x114>)
 8005702:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	2b0c      	cmp	r3, #12
 8005708:	d134      	bne.n	8005774 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800570a:	4b1e      	ldr	r3, [pc, #120]	@ (8005784 <HAL_RCC_GetSysClockFreq+0x108>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b02      	cmp	r3, #2
 8005718:	d003      	beq.n	8005722 <HAL_RCC_GetSysClockFreq+0xa6>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b03      	cmp	r3, #3
 800571e:	d003      	beq.n	8005728 <HAL_RCC_GetSysClockFreq+0xac>
 8005720:	e005      	b.n	800572e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005722:	4b1a      	ldr	r3, [pc, #104]	@ (800578c <HAL_RCC_GetSysClockFreq+0x110>)
 8005724:	617b      	str	r3, [r7, #20]
      break;
 8005726:	e005      	b.n	8005734 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005728:	4b19      	ldr	r3, [pc, #100]	@ (8005790 <HAL_RCC_GetSysClockFreq+0x114>)
 800572a:	617b      	str	r3, [r7, #20]
      break;
 800572c:	e002      	b.n	8005734 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	617b      	str	r3, [r7, #20]
      break;
 8005732:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005734:	4b13      	ldr	r3, [pc, #76]	@ (8005784 <HAL_RCC_GetSysClockFreq+0x108>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	091b      	lsrs	r3, r3, #4
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	3301      	adds	r3, #1
 8005740:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005742:	4b10      	ldr	r3, [pc, #64]	@ (8005784 <HAL_RCC_GetSysClockFreq+0x108>)
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	0a1b      	lsrs	r3, r3, #8
 8005748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	fb03 f202 	mul.w	r2, r3, r2
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	fbb2 f3f3 	udiv	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800575a:	4b0a      	ldr	r3, [pc, #40]	@ (8005784 <HAL_RCC_GetSysClockFreq+0x108>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	0e5b      	lsrs	r3, r3, #25
 8005760:	f003 0303 	and.w	r3, r3, #3
 8005764:	3301      	adds	r3, #1
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005772:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005774:	69bb      	ldr	r3, [r7, #24]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3724      	adds	r7, #36	@ 0x24
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40021000 	.word	0x40021000
 8005788:	08053754 	.word	0x08053754
 800578c:	00f42400 	.word	0x00f42400
 8005790:	007a1200 	.word	0x007a1200

08005794 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005798:	4b03      	ldr	r3, [pc, #12]	@ (80057a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800579a:	681b      	ldr	r3, [r3, #0]
}
 800579c:	4618      	mov	r0, r3
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	20040088 	.word	0x20040088

080057ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057b0:	f7ff fff0 	bl	8005794 <HAL_RCC_GetHCLKFreq>
 80057b4:	4602      	mov	r2, r0
 80057b6:	4b06      	ldr	r3, [pc, #24]	@ (80057d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	0a1b      	lsrs	r3, r3, #8
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	4904      	ldr	r1, [pc, #16]	@ (80057d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057c2:	5ccb      	ldrb	r3, [r1, r3]
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	40021000 	.word	0x40021000
 80057d4:	0805374c 	.word	0x0805374c

080057d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057dc:	f7ff ffda 	bl	8005794 <HAL_RCC_GetHCLKFreq>
 80057e0:	4602      	mov	r2, r0
 80057e2:	4b06      	ldr	r3, [pc, #24]	@ (80057fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	0adb      	lsrs	r3, r3, #11
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	4904      	ldr	r1, [pc, #16]	@ (8005800 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057ee:	5ccb      	ldrb	r3, [r1, r3]
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40021000 	.word	0x40021000
 8005800:	0805374c 	.word	0x0805374c

08005804 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800580c:	2300      	movs	r3, #0
 800580e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005810:	4b27      	ldr	r3, [pc, #156]	@ (80058b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800581c:	f7ff f906 	bl	8004a2c <HAL_PWREx_GetVoltageRange>
 8005820:	6178      	str	r0, [r7, #20]
 8005822:	e014      	b.n	800584e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005824:	4b22      	ldr	r3, [pc, #136]	@ (80058b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005828:	4a21      	ldr	r2, [pc, #132]	@ (80058b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800582a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800582e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005830:	4b1f      	ldr	r3, [pc, #124]	@ (80058b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800583c:	f7ff f8f6 	bl	8004a2c <HAL_PWREx_GetVoltageRange>
 8005840:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005842:	4b1b      	ldr	r3, [pc, #108]	@ (80058b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005846:	4a1a      	ldr	r2, [pc, #104]	@ (80058b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005848:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800584c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005854:	d10b      	bne.n	800586e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b80      	cmp	r3, #128	@ 0x80
 800585a:	d913      	bls.n	8005884 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005860:	d902      	bls.n	8005868 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005862:	2302      	movs	r3, #2
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	e00d      	b.n	8005884 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005868:	2301      	movs	r3, #1
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	e00a      	b.n	8005884 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b7f      	cmp	r3, #127	@ 0x7f
 8005872:	d902      	bls.n	800587a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005874:	2302      	movs	r3, #2
 8005876:	613b      	str	r3, [r7, #16]
 8005878:	e004      	b.n	8005884 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b70      	cmp	r3, #112	@ 0x70
 800587e:	d101      	bne.n	8005884 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005880:	2301      	movs	r3, #1
 8005882:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005884:	4b0b      	ldr	r3, [pc, #44]	@ (80058b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f023 020f 	bic.w	r2, r3, #15
 800588c:	4909      	ldr	r1, [pc, #36]	@ (80058b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005894:	4b07      	ldr	r3, [pc, #28]	@ (80058b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d001      	beq.n	80058a6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	40021000 	.word	0x40021000
 80058b4:	40022000 	.word	0x40022000

080058b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058be:	4b2d      	ldr	r3, [pc, #180]	@ (8005974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d00b      	beq.n	80058e6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d825      	bhi.n	8005920 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d008      	beq.n	80058ec <RCC_GetSysClockFreqFromPLLSource+0x34>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d11f      	bne.n	8005920 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80058e0:	4b25      	ldr	r3, [pc, #148]	@ (8005978 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80058e2:	613b      	str	r3, [r7, #16]
    break;
 80058e4:	e01f      	b.n	8005926 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80058e6:	4b25      	ldr	r3, [pc, #148]	@ (800597c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80058e8:	613b      	str	r3, [r7, #16]
    break;
 80058ea:	e01c      	b.n	8005926 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058ec:	4b21      	ldr	r3, [pc, #132]	@ (8005974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d107      	bne.n	8005908 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80058fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058fe:	0a1b      	lsrs	r3, r3, #8
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e005      	b.n	8005914 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005908:	4b1a      	ldr	r3, [pc, #104]	@ (8005974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005914:	4a1a      	ldr	r2, [pc, #104]	@ (8005980 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591c:	613b      	str	r3, [r7, #16]
    break;
 800591e:	e002      	b.n	8005926 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	613b      	str	r3, [r7, #16]
    break;
 8005924:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005926:	4b13      	ldr	r3, [pc, #76]	@ (8005974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	091b      	lsrs	r3, r3, #4
 800592c:	f003 030f 	and.w	r3, r3, #15
 8005930:	3301      	adds	r3, #1
 8005932:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005934:	4b0f      	ldr	r3, [pc, #60]	@ (8005974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	0a1b      	lsrs	r3, r3, #8
 800593a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	fb03 f202 	mul.w	r2, r3, r2
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	fbb2 f3f3 	udiv	r3, r2, r3
 800594a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800594c:	4b09      	ldr	r3, [pc, #36]	@ (8005974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	0e5b      	lsrs	r3, r3, #25
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	3301      	adds	r3, #1
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	fbb2 f3f3 	udiv	r3, r2, r3
 8005964:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005966:	683b      	ldr	r3, [r7, #0]
}
 8005968:	4618      	mov	r0, r3
 800596a:	371c      	adds	r7, #28
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	40021000 	.word	0x40021000
 8005978:	00f42400 	.word	0x00f42400
 800597c:	007a1200 	.word	0x007a1200
 8005980:	08053754 	.word	0x08053754

08005984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800598c:	2300      	movs	r3, #0
 800598e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005990:	2300      	movs	r3, #0
 8005992:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800599c:	2b00      	cmp	r3, #0
 800599e:	d040      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059a4:	2b80      	cmp	r3, #128	@ 0x80
 80059a6:	d02a      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80059a8:	2b80      	cmp	r3, #128	@ 0x80
 80059aa:	d825      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80059ac:	2b60      	cmp	r3, #96	@ 0x60
 80059ae:	d026      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80059b0:	2b60      	cmp	r3, #96	@ 0x60
 80059b2:	d821      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80059b4:	2b40      	cmp	r3, #64	@ 0x40
 80059b6:	d006      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80059b8:	2b40      	cmp	r3, #64	@ 0x40
 80059ba:	d81d      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d009      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d010      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80059c4:	e018      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059c6:	4b89      	ldr	r3, [pc, #548]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	4a88      	ldr	r2, [pc, #544]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059d0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059d2:	e015      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fb02 	bl	8005fe4 <RCCEx_PLLSAI1_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059e4:	e00c      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3320      	adds	r3, #32
 80059ea:	2100      	movs	r1, #0
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fbed 	bl	80061cc <RCCEx_PLLSAI2_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059f6:	e003      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	74fb      	strb	r3, [r7, #19]
      break;
 80059fc:	e000      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80059fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a00:	7cfb      	ldrb	r3, [r7, #19]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10b      	bne.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a06:	4b79      	ldr	r3, [pc, #484]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a0c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a14:	4975      	ldr	r1, [pc, #468]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005a1c:	e001      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1e:	7cfb      	ldrb	r3, [r7, #19]
 8005a20:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d047      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a36:	d030      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a3c:	d82a      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a42:	d02a      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005a44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a48:	d824      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a4e:	d008      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a54:	d81e      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a5e:	d010      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005a60:	e018      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a62:	4b62      	ldr	r3, [pc, #392]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	4a61      	ldr	r2, [pc, #388]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a6c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a6e:	e015      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3304      	adds	r3, #4
 8005a74:	2100      	movs	r1, #0
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fab4 	bl	8005fe4 <RCCEx_PLLSAI1_Config>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a80:	e00c      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3320      	adds	r3, #32
 8005a86:	2100      	movs	r1, #0
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 fb9f 	bl	80061cc <RCCEx_PLLSAI2_Config>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a92:	e003      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	74fb      	strb	r3, [r7, #19]
      break;
 8005a98:	e000      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005a9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a9c:	7cfb      	ldrb	r3, [r7, #19]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10b      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005aa2:	4b52      	ldr	r3, [pc, #328]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab0:	494e      	ldr	r1, [pc, #312]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005ab8:	e001      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aba:	7cfb      	ldrb	r3, [r7, #19]
 8005abc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 809f 	beq.w	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005acc:	2300      	movs	r3, #0
 8005ace:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ad0:	4b46      	ldr	r3, [pc, #280]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00d      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae6:	4b41      	ldr	r3, [pc, #260]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aea:	4a40      	ldr	r2, [pc, #256]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005af0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005af2:	4b3e      	ldr	r3, [pc, #248]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005afa:	60bb      	str	r3, [r7, #8]
 8005afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005afe:	2301      	movs	r3, #1
 8005b00:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b02:	4b3b      	ldr	r3, [pc, #236]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a3a      	ldr	r2, [pc, #232]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b0e:	f7fd fbe7 	bl	80032e0 <HAL_GetTick>
 8005b12:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b14:	e009      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b16:	f7fd fbe3 	bl	80032e0 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d902      	bls.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	74fb      	strb	r3, [r7, #19]
        break;
 8005b28:	e005      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b2a:	4b31      	ldr	r3, [pc, #196]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0ef      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005b36:	7cfb      	ldrb	r3, [r7, #19]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d15b      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b46:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d01f      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d019      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b5a:	4b24      	ldr	r3, [pc, #144]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b66:	4b21      	ldr	r3, [pc, #132]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b76:	4b1d      	ldr	r3, [pc, #116]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b86:	4a19      	ldr	r2, [pc, #100]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d016      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b98:	f7fd fba2 	bl	80032e0 <HAL_GetTick>
 8005b9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b9e:	e00b      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba0:	f7fd fb9e 	bl	80032e0 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d902      	bls.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	74fb      	strb	r3, [r7, #19]
            break;
 8005bb6:	e006      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0ec      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005bc6:	7cfb      	ldrb	r3, [r7, #19]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10c      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bcc:	4b07      	ldr	r3, [pc, #28]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bdc:	4903      	ldr	r1, [pc, #12]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005be4:	e008      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005be6:	7cfb      	ldrb	r3, [r7, #19]
 8005be8:	74bb      	strb	r3, [r7, #18]
 8005bea:	e005      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf4:	7cfb      	ldrb	r3, [r7, #19]
 8005bf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bf8:	7c7b      	ldrb	r3, [r7, #17]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d105      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bfe:	4ba0      	ldr	r3, [pc, #640]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c02:	4a9f      	ldr	r2, [pc, #636]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c16:	4b9a      	ldr	r3, [pc, #616]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1c:	f023 0203 	bic.w	r2, r3, #3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c24:	4996      	ldr	r1, [pc, #600]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c38:	4b91      	ldr	r3, [pc, #580]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c3e:	f023 020c 	bic.w	r2, r3, #12
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c46:	498e      	ldr	r1, [pc, #568]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c5a:	4b89      	ldr	r3, [pc, #548]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c68:	4985      	ldr	r1, [pc, #532]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c7c:	4b80      	ldr	r3, [pc, #512]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c8a:	497d      	ldr	r1, [pc, #500]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0310 	and.w	r3, r3, #16
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c9e:	4b78      	ldr	r3, [pc, #480]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cac:	4974      	ldr	r1, [pc, #464]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cce:	496c      	ldr	r1, [pc, #432]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ce2:	4b67      	ldr	r3, [pc, #412]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cf0:	4963      	ldr	r1, [pc, #396]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d04:	4b5e      	ldr	r3, [pc, #376]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d12:	495b      	ldr	r1, [pc, #364]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d26:	4b56      	ldr	r3, [pc, #344]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d34:	4952      	ldr	r1, [pc, #328]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d48:	4b4d      	ldr	r3, [pc, #308]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d56:	494a      	ldr	r1, [pc, #296]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d6a:	4b45      	ldr	r3, [pc, #276]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d78:	4941      	ldr	r1, [pc, #260]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d92:	f023 0203 	bic.w	r2, r3, #3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d9a:	4939      	ldr	r1, [pc, #228]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d028      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dae:	4b34      	ldr	r3, [pc, #208]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dbc:	4930      	ldr	r1, [pc, #192]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dcc:	d106      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dce:	4b2c      	ldr	r3, [pc, #176]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	4a2b      	ldr	r2, [pc, #172]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dd8:	60d3      	str	r3, [r2, #12]
 8005dda:	e011      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005de0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005de4:	d10c      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	3304      	adds	r3, #4
 8005dea:	2101      	movs	r1, #1
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 f8f9 	bl	8005fe4 <RCCEx_PLLSAI1_Config>
 8005df2:	4603      	mov	r3, r0
 8005df4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005df6:	7cfb      	ldrb	r3, [r7, #19]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005dfc:	7cfb      	ldrb	r3, [r7, #19]
 8005dfe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d04d      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e14:	d108      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005e16:	4b1a      	ldr	r3, [pc, #104]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e1c:	4a18      	ldr	r2, [pc, #96]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e22:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005e26:	e012      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005e28:	4b15      	ldr	r3, [pc, #84]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e2e:	4a14      	ldr	r2, [pc, #80]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e34:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005e38:	4b11      	ldr	r3, [pc, #68]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e46:	490e      	ldr	r1, [pc, #56]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e56:	d106      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e58:	4b09      	ldr	r3, [pc, #36]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	4a08      	ldr	r2, [pc, #32]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e62:	60d3      	str	r3, [r2, #12]
 8005e64:	e020      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e6e:	d109      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e70:	4b03      	ldr	r3, [pc, #12]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	4a02      	ldr	r2, [pc, #8]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e7a:	60d3      	str	r3, [r2, #12]
 8005e7c:	e014      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005e7e:	bf00      	nop
 8005e80:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e8c:	d10c      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3304      	adds	r3, #4
 8005e92:	2101      	movs	r1, #1
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 f8a5 	bl	8005fe4 <RCCEx_PLLSAI1_Config>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005ea4:	7cfb      	ldrb	r3, [r7, #19]
 8005ea6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d028      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005eb4:	4b4a      	ldr	r3, [pc, #296]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ec2:	4947      	ldr	r1, [pc, #284]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ed2:	d106      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ed4:	4b42      	ldr	r3, [pc, #264]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	4a41      	ldr	r2, [pc, #260]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ede:	60d3      	str	r3, [r2, #12]
 8005ee0:	e011      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ee6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005eea:	d10c      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 f876 	bl	8005fe4 <RCCEx_PLLSAI1_Config>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005efc:	7cfb      	ldrb	r3, [r7, #19]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005f02:	7cfb      	ldrb	r3, [r7, #19]
 8005f04:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01e      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f12:	4b33      	ldr	r3, [pc, #204]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f18:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f22:	492f      	ldr	r1, [pc, #188]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f34:	d10c      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	2102      	movs	r1, #2
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 f851 	bl	8005fe4 <RCCEx_PLLSAI1_Config>
 8005f42:	4603      	mov	r3, r0
 8005f44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f46:	7cfb      	ldrb	r3, [r7, #19]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005f4c:	7cfb      	ldrb	r3, [r7, #19]
 8005f4e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00b      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f5c:	4b20      	ldr	r3, [pc, #128]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f62:	f023 0204 	bic.w	r2, r3, #4
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f6c:	491c      	ldr	r1, [pc, #112]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00b      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005f80:	4b17      	ldr	r3, [pc, #92]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f86:	f023 0218 	bic.w	r2, r3, #24
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f90:	4913      	ldr	r1, [pc, #76]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d017      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005faa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fb4:	490a      	ldr	r1, [pc, #40]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fc6:	d105      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fc8:	4b05      	ldr	r3, [pc, #20]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	4a04      	ldr	r2, [pc, #16]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005fd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40021000 	.word	0x40021000

08005fe4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ff2:	4b72      	ldr	r3, [pc, #456]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00e      	beq.n	800601c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ffe:	4b6f      	ldr	r3, [pc, #444]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f003 0203 	and.w	r2, r3, #3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d103      	bne.n	8006016 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
       ||
 8006012:	2b00      	cmp	r3, #0
 8006014:	d142      	bne.n	800609c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	73fb      	strb	r3, [r7, #15]
 800601a:	e03f      	b.n	800609c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b03      	cmp	r3, #3
 8006022:	d018      	beq.n	8006056 <RCCEx_PLLSAI1_Config+0x72>
 8006024:	2b03      	cmp	r3, #3
 8006026:	d825      	bhi.n	8006074 <RCCEx_PLLSAI1_Config+0x90>
 8006028:	2b01      	cmp	r3, #1
 800602a:	d002      	beq.n	8006032 <RCCEx_PLLSAI1_Config+0x4e>
 800602c:	2b02      	cmp	r3, #2
 800602e:	d009      	beq.n	8006044 <RCCEx_PLLSAI1_Config+0x60>
 8006030:	e020      	b.n	8006074 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006032:	4b62      	ldr	r3, [pc, #392]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d11d      	bne.n	800607a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006042:	e01a      	b.n	800607a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006044:	4b5d      	ldr	r3, [pc, #372]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800604c:	2b00      	cmp	r3, #0
 800604e:	d116      	bne.n	800607e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006054:	e013      	b.n	800607e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006056:	4b59      	ldr	r3, [pc, #356]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10f      	bne.n	8006082 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006062:	4b56      	ldr	r3, [pc, #344]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006072:	e006      	b.n	8006082 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	73fb      	strb	r3, [r7, #15]
      break;
 8006078:	e004      	b.n	8006084 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800607a:	bf00      	nop
 800607c:	e002      	b.n	8006084 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800607e:	bf00      	nop
 8006080:	e000      	b.n	8006084 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006082:	bf00      	nop
    }

    if(status == HAL_OK)
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d108      	bne.n	800609c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800608a:	4b4c      	ldr	r3, [pc, #304]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f023 0203 	bic.w	r2, r3, #3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4949      	ldr	r1, [pc, #292]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006098:	4313      	orrs	r3, r2
 800609a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f040 8086 	bne.w	80061b0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80060a4:	4b45      	ldr	r3, [pc, #276]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a44      	ldr	r2, [pc, #272]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80060aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b0:	f7fd f916 	bl	80032e0 <HAL_GetTick>
 80060b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060b6:	e009      	b.n	80060cc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060b8:	f7fd f912 	bl	80032e0 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d902      	bls.n	80060cc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	73fb      	strb	r3, [r7, #15]
        break;
 80060ca:	e005      	b.n	80060d8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060cc:	4b3b      	ldr	r3, [pc, #236]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1ef      	bne.n	80060b8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d168      	bne.n	80061b0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d113      	bne.n	800610c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060e4:	4b35      	ldr	r3, [pc, #212]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	4b35      	ldr	r3, [pc, #212]	@ (80061c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6892      	ldr	r2, [r2, #8]
 80060f0:	0211      	lsls	r1, r2, #8
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	68d2      	ldr	r2, [r2, #12]
 80060f6:	06d2      	lsls	r2, r2, #27
 80060f8:	4311      	orrs	r1, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6852      	ldr	r2, [r2, #4]
 80060fe:	3a01      	subs	r2, #1
 8006100:	0112      	lsls	r2, r2, #4
 8006102:	430a      	orrs	r2, r1
 8006104:	492d      	ldr	r1, [pc, #180]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006106:	4313      	orrs	r3, r2
 8006108:	610b      	str	r3, [r1, #16]
 800610a:	e02d      	b.n	8006168 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d115      	bne.n	800613e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006112:	4b2a      	ldr	r3, [pc, #168]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006114:	691a      	ldr	r2, [r3, #16]
 8006116:	4b2b      	ldr	r3, [pc, #172]	@ (80061c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006118:	4013      	ands	r3, r2
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6892      	ldr	r2, [r2, #8]
 800611e:	0211      	lsls	r1, r2, #8
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6912      	ldr	r2, [r2, #16]
 8006124:	0852      	lsrs	r2, r2, #1
 8006126:	3a01      	subs	r2, #1
 8006128:	0552      	lsls	r2, r2, #21
 800612a:	4311      	orrs	r1, r2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6852      	ldr	r2, [r2, #4]
 8006130:	3a01      	subs	r2, #1
 8006132:	0112      	lsls	r2, r2, #4
 8006134:	430a      	orrs	r2, r1
 8006136:	4921      	ldr	r1, [pc, #132]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006138:	4313      	orrs	r3, r2
 800613a:	610b      	str	r3, [r1, #16]
 800613c:	e014      	b.n	8006168 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800613e:	4b1f      	ldr	r3, [pc, #124]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	4b21      	ldr	r3, [pc, #132]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006144:	4013      	ands	r3, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6892      	ldr	r2, [r2, #8]
 800614a:	0211      	lsls	r1, r2, #8
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6952      	ldr	r2, [r2, #20]
 8006150:	0852      	lsrs	r2, r2, #1
 8006152:	3a01      	subs	r2, #1
 8006154:	0652      	lsls	r2, r2, #25
 8006156:	4311      	orrs	r1, r2
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6852      	ldr	r2, [r2, #4]
 800615c:	3a01      	subs	r2, #1
 800615e:	0112      	lsls	r2, r2, #4
 8006160:	430a      	orrs	r2, r1
 8006162:	4916      	ldr	r1, [pc, #88]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006164:	4313      	orrs	r3, r2
 8006166:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006168:	4b14      	ldr	r3, [pc, #80]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a13      	ldr	r2, [pc, #76]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800616e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006172:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006174:	f7fd f8b4 	bl	80032e0 <HAL_GetTick>
 8006178:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800617a:	e009      	b.n	8006190 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800617c:	f7fd f8b0 	bl	80032e0 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d902      	bls.n	8006190 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	73fb      	strb	r3, [r7, #15]
          break;
 800618e:	e005      	b.n	800619c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006190:	4b0a      	ldr	r3, [pc, #40]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0ef      	beq.n	800617c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80061a2:	4b06      	ldr	r3, [pc, #24]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	4904      	ldr	r1, [pc, #16]	@ (80061bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40021000 	.word	0x40021000
 80061c0:	07ff800f 	.word	0x07ff800f
 80061c4:	ff9f800f 	.word	0xff9f800f
 80061c8:	f9ff800f 	.word	0xf9ff800f

080061cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80061da:	4b72      	ldr	r3, [pc, #456]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00e      	beq.n	8006204 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80061e6:	4b6f      	ldr	r3, [pc, #444]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f003 0203 	and.w	r2, r3, #3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d103      	bne.n	80061fe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
       ||
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d142      	bne.n	8006284 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	73fb      	strb	r3, [r7, #15]
 8006202:	e03f      	b.n	8006284 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b03      	cmp	r3, #3
 800620a:	d018      	beq.n	800623e <RCCEx_PLLSAI2_Config+0x72>
 800620c:	2b03      	cmp	r3, #3
 800620e:	d825      	bhi.n	800625c <RCCEx_PLLSAI2_Config+0x90>
 8006210:	2b01      	cmp	r3, #1
 8006212:	d002      	beq.n	800621a <RCCEx_PLLSAI2_Config+0x4e>
 8006214:	2b02      	cmp	r3, #2
 8006216:	d009      	beq.n	800622c <RCCEx_PLLSAI2_Config+0x60>
 8006218:	e020      	b.n	800625c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800621a:	4b62      	ldr	r3, [pc, #392]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d11d      	bne.n	8006262 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800622a:	e01a      	b.n	8006262 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800622c:	4b5d      	ldr	r3, [pc, #372]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006234:	2b00      	cmp	r3, #0
 8006236:	d116      	bne.n	8006266 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800623c:	e013      	b.n	8006266 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800623e:	4b59      	ldr	r3, [pc, #356]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10f      	bne.n	800626a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800624a:	4b56      	ldr	r3, [pc, #344]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d109      	bne.n	800626a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800625a:	e006      	b.n	800626a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	73fb      	strb	r3, [r7, #15]
      break;
 8006260:	e004      	b.n	800626c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006262:	bf00      	nop
 8006264:	e002      	b.n	800626c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006266:	bf00      	nop
 8006268:	e000      	b.n	800626c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800626a:	bf00      	nop
    }

    if(status == HAL_OK)
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d108      	bne.n	8006284 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006272:	4b4c      	ldr	r3, [pc, #304]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f023 0203 	bic.w	r2, r3, #3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4949      	ldr	r1, [pc, #292]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006280:	4313      	orrs	r3, r2
 8006282:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2b00      	cmp	r3, #0
 8006288:	f040 8086 	bne.w	8006398 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800628c:	4b45      	ldr	r3, [pc, #276]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a44      	ldr	r2, [pc, #272]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006298:	f7fd f822 	bl	80032e0 <HAL_GetTick>
 800629c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800629e:	e009      	b.n	80062b4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062a0:	f7fd f81e 	bl	80032e0 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d902      	bls.n	80062b4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	73fb      	strb	r3, [r7, #15]
        break;
 80062b2:	e005      	b.n	80062c0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062b4:	4b3b      	ldr	r3, [pc, #236]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1ef      	bne.n	80062a0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d168      	bne.n	8006398 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d113      	bne.n	80062f4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062cc:	4b35      	ldr	r3, [pc, #212]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062ce:	695a      	ldr	r2, [r3, #20]
 80062d0:	4b35      	ldr	r3, [pc, #212]	@ (80063a8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6892      	ldr	r2, [r2, #8]
 80062d8:	0211      	lsls	r1, r2, #8
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	68d2      	ldr	r2, [r2, #12]
 80062de:	06d2      	lsls	r2, r2, #27
 80062e0:	4311      	orrs	r1, r2
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6852      	ldr	r2, [r2, #4]
 80062e6:	3a01      	subs	r2, #1
 80062e8:	0112      	lsls	r2, r2, #4
 80062ea:	430a      	orrs	r2, r1
 80062ec:	492d      	ldr	r1, [pc, #180]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	614b      	str	r3, [r1, #20]
 80062f2:	e02d      	b.n	8006350 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d115      	bne.n	8006326 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062fa:	4b2a      	ldr	r3, [pc, #168]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062fc:	695a      	ldr	r2, [r3, #20]
 80062fe:	4b2b      	ldr	r3, [pc, #172]	@ (80063ac <RCCEx_PLLSAI2_Config+0x1e0>)
 8006300:	4013      	ands	r3, r2
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	6892      	ldr	r2, [r2, #8]
 8006306:	0211      	lsls	r1, r2, #8
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6912      	ldr	r2, [r2, #16]
 800630c:	0852      	lsrs	r2, r2, #1
 800630e:	3a01      	subs	r2, #1
 8006310:	0552      	lsls	r2, r2, #21
 8006312:	4311      	orrs	r1, r2
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6852      	ldr	r2, [r2, #4]
 8006318:	3a01      	subs	r2, #1
 800631a:	0112      	lsls	r2, r2, #4
 800631c:	430a      	orrs	r2, r1
 800631e:	4921      	ldr	r1, [pc, #132]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006320:	4313      	orrs	r3, r2
 8006322:	614b      	str	r3, [r1, #20]
 8006324:	e014      	b.n	8006350 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006326:	4b1f      	ldr	r3, [pc, #124]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006328:	695a      	ldr	r2, [r3, #20]
 800632a:	4b21      	ldr	r3, [pc, #132]	@ (80063b0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800632c:	4013      	ands	r3, r2
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6892      	ldr	r2, [r2, #8]
 8006332:	0211      	lsls	r1, r2, #8
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6952      	ldr	r2, [r2, #20]
 8006338:	0852      	lsrs	r2, r2, #1
 800633a:	3a01      	subs	r2, #1
 800633c:	0652      	lsls	r2, r2, #25
 800633e:	4311      	orrs	r1, r2
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6852      	ldr	r2, [r2, #4]
 8006344:	3a01      	subs	r2, #1
 8006346:	0112      	lsls	r2, r2, #4
 8006348:	430a      	orrs	r2, r1
 800634a:	4916      	ldr	r1, [pc, #88]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800634c:	4313      	orrs	r3, r2
 800634e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006350:	4b14      	ldr	r3, [pc, #80]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a13      	ldr	r2, [pc, #76]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800635a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635c:	f7fc ffc0 	bl	80032e0 <HAL_GetTick>
 8006360:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006362:	e009      	b.n	8006378 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006364:	f7fc ffbc 	bl	80032e0 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d902      	bls.n	8006378 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	73fb      	strb	r3, [r7, #15]
          break;
 8006376:	e005      	b.n	8006384 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006378:	4b0a      	ldr	r3, [pc, #40]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0ef      	beq.n	8006364 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800638a:	4b06      	ldr	r3, [pc, #24]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800638c:	695a      	ldr	r2, [r3, #20]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	4904      	ldr	r1, [pc, #16]	@ (80063a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006394:	4313      	orrs	r3, r2
 8006396:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40021000 	.word	0x40021000
 80063a8:	07ff800f 	.word	0x07ff800f
 80063ac:	ff9f800f 	.word	0xff9f800f
 80063b0:	f9ff800f 	.word	0xf9ff800f

080063b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e095      	b.n	80064f2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d108      	bne.n	80063e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063d6:	d009      	beq.n	80063ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	61da      	str	r2, [r3, #28]
 80063de:	e005      	b.n	80063ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fb ff20 	bl	800224c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006422:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800642c:	d902      	bls.n	8006434 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	e002      	b.n	800643a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006434:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006438:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006442:	d007      	beq.n	8006454 <HAL_SPI_Init+0xa0>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800644c:	d002      	beq.n	8006454 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006464:	431a      	orrs	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	431a      	orrs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	431a      	orrs	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006496:	ea42 0103 	orr.w	r1, r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	0c1b      	lsrs	r3, r3, #16
 80064b0:	f003 0204 	and.w	r2, r3, #4
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	431a      	orrs	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80064d0:	ea42 0103 	orr.w	r1, r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b088      	sub	sp, #32
 80064fe:	af00      	add	r7, sp, #0
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	603b      	str	r3, [r7, #0]
 8006506:	4613      	mov	r3, r2
 8006508:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800650a:	f7fc fee9 	bl	80032e0 <HAL_GetTick>
 800650e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b01      	cmp	r3, #1
 800651e:	d001      	beq.n	8006524 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006520:	2302      	movs	r3, #2
 8006522:	e15c      	b.n	80067de <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <HAL_SPI_Transmit+0x36>
 800652a:	88fb      	ldrh	r3, [r7, #6]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e154      	b.n	80067de <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_SPI_Transmit+0x48>
 800653e:	2302      	movs	r3, #2
 8006540:	e14d      	b.n	80067de <HAL_SPI_Transmit+0x2e4>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2203      	movs	r2, #3
 800654e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	88fa      	ldrh	r2, [r7, #6]
 8006562:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	88fa      	ldrh	r2, [r7, #6]
 8006568:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006594:	d10f      	bne.n	80065b6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c0:	2b40      	cmp	r3, #64	@ 0x40
 80065c2:	d007      	beq.n	80065d4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065dc:	d952      	bls.n	8006684 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_SPI_Transmit+0xf2>
 80065e6:	8b7b      	ldrh	r3, [r7, #26]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d145      	bne.n	8006678 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f0:	881a      	ldrh	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fc:	1c9a      	adds	r2, r3, #2
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006606:	b29b      	uxth	r3, r3
 8006608:	3b01      	subs	r3, #1
 800660a:	b29a      	uxth	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006610:	e032      	b.n	8006678 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b02      	cmp	r3, #2
 800661e:	d112      	bne.n	8006646 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006624:	881a      	ldrh	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006630:	1c9a      	adds	r2, r3, #2
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006644:	e018      	b.n	8006678 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006646:	f7fc fe4b 	bl	80032e0 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d803      	bhi.n	800665e <HAL_SPI_Transmit+0x164>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665c:	d102      	bne.n	8006664 <HAL_SPI_Transmit+0x16a>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e0b2      	b.n	80067de <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1c7      	bne.n	8006612 <HAL_SPI_Transmit+0x118>
 8006682:	e083      	b.n	800678c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_SPI_Transmit+0x198>
 800668c:	8b7b      	ldrh	r3, [r7, #26]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d177      	bne.n	8006782 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006696:	b29b      	uxth	r3, r3
 8006698:	2b01      	cmp	r3, #1
 800669a:	d912      	bls.n	80066c2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a0:	881a      	ldrh	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ac:	1c9a      	adds	r2, r3, #2
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b02      	subs	r3, #2
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80066c0:	e05f      	b.n	8006782 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	330c      	adds	r3, #12
 80066cc:	7812      	ldrb	r2, [r2, #0]
 80066ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80066e8:	e04b      	b.n	8006782 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d12b      	bne.n	8006750 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d912      	bls.n	8006728 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006706:	881a      	ldrh	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006712:	1c9a      	adds	r2, r3, #2
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b02      	subs	r3, #2
 8006720:	b29a      	uxth	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006726:	e02c      	b.n	8006782 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	330c      	adds	r3, #12
 8006732:	7812      	ldrb	r2, [r2, #0]
 8006734:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800674e:	e018      	b.n	8006782 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006750:	f7fc fdc6 	bl	80032e0 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	429a      	cmp	r2, r3
 800675e:	d803      	bhi.n	8006768 <HAL_SPI_Transmit+0x26e>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	d102      	bne.n	800676e <HAL_SPI_Transmit+0x274>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d109      	bne.n	8006782 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e02d      	b.n	80067de <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006786:	b29b      	uxth	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1ae      	bne.n	80066ea <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800678c:	69fa      	ldr	r2, [r7, #28]
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 fb65 	bl	8006e60 <SPI_EndRxTxTransaction>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2220      	movs	r2, #32
 80067a0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10a      	bne.n	80067c0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067aa:	2300      	movs	r3, #0
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e000      	b.n	80067de <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80067dc:	2300      	movs	r3, #0
  }
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3720      	adds	r7, #32
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b08a      	sub	sp, #40	@ 0x28
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	60f8      	str	r0, [r7, #12]
 80067ee:	60b9      	str	r1, [r7, #8]
 80067f0:	607a      	str	r2, [r7, #4]
 80067f2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067f4:	2301      	movs	r3, #1
 80067f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067f8:	f7fc fd72 	bl	80032e0 <HAL_GetTick>
 80067fc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006804:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800680c:	887b      	ldrh	r3, [r7, #2]
 800680e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006810:	887b      	ldrh	r3, [r7, #2]
 8006812:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006814:	7ffb      	ldrb	r3, [r7, #31]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d00c      	beq.n	8006834 <HAL_SPI_TransmitReceive+0x4e>
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006820:	d106      	bne.n	8006830 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d102      	bne.n	8006830 <HAL_SPI_TransmitReceive+0x4a>
 800682a:	7ffb      	ldrb	r3, [r7, #31]
 800682c:	2b04      	cmp	r3, #4
 800682e:	d001      	beq.n	8006834 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
 8006832:	e1f3      	b.n	8006c1c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d005      	beq.n	8006846 <HAL_SPI_TransmitReceive+0x60>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <HAL_SPI_TransmitReceive+0x60>
 8006840:	887b      	ldrh	r3, [r7, #2]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e1e8      	b.n	8006c1c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x72>
 8006854:	2302      	movs	r3, #2
 8006856:	e1e1      	b.n	8006c1c <HAL_SPI_TransmitReceive+0x436>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b04      	cmp	r3, #4
 800686a:	d003      	beq.n	8006874 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2205      	movs	r2, #5
 8006870:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	887a      	ldrh	r2, [r7, #2]
 8006884:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	887a      	ldrh	r2, [r7, #2]
 800688c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	887a      	ldrh	r2, [r7, #2]
 800689a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	887a      	ldrh	r2, [r7, #2]
 80068a0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068b6:	d802      	bhi.n	80068be <HAL_SPI_TransmitReceive+0xd8>
 80068b8:	8abb      	ldrh	r3, [r7, #20]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d908      	bls.n	80068d0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068cc:	605a      	str	r2, [r3, #4]
 80068ce:	e007      	b.n	80068e0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80068de:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ea:	2b40      	cmp	r3, #64	@ 0x40
 80068ec:	d007      	beq.n	80068fe <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006906:	f240 8083 	bls.w	8006a10 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <HAL_SPI_TransmitReceive+0x132>
 8006912:	8afb      	ldrh	r3, [r7, #22]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d16f      	bne.n	80069f8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691c:	881a      	ldrh	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006928:	1c9a      	adds	r2, r3, #2
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006932:	b29b      	uxth	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800693c:	e05c      	b.n	80069f8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b02      	cmp	r3, #2
 800694a:	d11b      	bne.n	8006984 <HAL_SPI_TransmitReceive+0x19e>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d016      	beq.n	8006984 <HAL_SPI_TransmitReceive+0x19e>
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	2b01      	cmp	r3, #1
 800695a:	d113      	bne.n	8006984 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006960:	881a      	ldrh	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696c:	1c9a      	adds	r2, r3, #2
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006976:	b29b      	uxth	r3, r3
 8006978:	3b01      	subs	r3, #1
 800697a:	b29a      	uxth	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b01      	cmp	r3, #1
 8006990:	d11c      	bne.n	80069cc <HAL_SPI_TransmitReceive+0x1e6>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d016      	beq.n	80069cc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a8:	b292      	uxth	r2, r2
 80069aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b0:	1c9a      	adds	r2, r3, #2
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069c8:	2301      	movs	r3, #1
 80069ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069cc:	f7fc fc88 	bl	80032e0 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069d8:	429a      	cmp	r2, r3
 80069da:	d80d      	bhi.n	80069f8 <HAL_SPI_TransmitReceive+0x212>
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e2:	d009      	beq.n	80069f8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e111      	b.n	8006c1c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d19d      	bne.n	800693e <HAL_SPI_TransmitReceive+0x158>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d197      	bne.n	800693e <HAL_SPI_TransmitReceive+0x158>
 8006a0e:	e0e5      	b.n	8006bdc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <HAL_SPI_TransmitReceive+0x23a>
 8006a18:	8afb      	ldrh	r3, [r7, #22]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	f040 80d1 	bne.w	8006bc2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d912      	bls.n	8006a50 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2e:	881a      	ldrh	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3a:	1c9a      	adds	r2, r3, #2
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b02      	subs	r3, #2
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a4e:	e0b8      	b.n	8006bc2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	330c      	adds	r3, #12
 8006a5a:	7812      	ldrb	r2, [r2, #0]
 8006a5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a76:	e0a4      	b.n	8006bc2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d134      	bne.n	8006af0 <HAL_SPI_TransmitReceive+0x30a>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d02f      	beq.n	8006af0 <HAL_SPI_TransmitReceive+0x30a>
 8006a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d12c      	bne.n	8006af0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d912      	bls.n	8006ac6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa4:	881a      	ldrh	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab0:	1c9a      	adds	r2, r3, #2
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	3b02      	subs	r3, #2
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ac4:	e012      	b.n	8006aec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	330c      	adds	r3, #12
 8006ad0:	7812      	ldrb	r2, [r2, #0]
 8006ad2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d148      	bne.n	8006b90 <HAL_SPI_TransmitReceive+0x3aa>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d042      	beq.n	8006b90 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d923      	bls.n	8006b5e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b20:	b292      	uxth	r2, r2
 8006b22:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b28:	1c9a      	adds	r2, r3, #2
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	3b02      	subs	r3, #2
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d81f      	bhi.n	8006b8c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b5a:	605a      	str	r2, [r3, #4]
 8006b5c:	e016      	b.n	8006b8c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f103 020c 	add.w	r2, r3, #12
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6a:	7812      	ldrb	r2, [r2, #0]
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b90:	f7fc fba6 	bl	80032e0 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d803      	bhi.n	8006ba8 <HAL_SPI_TransmitReceive+0x3c2>
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba6:	d102      	bne.n	8006bae <HAL_SPI_TransmitReceive+0x3c8>
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e02c      	b.n	8006c1c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f47f af55 	bne.w	8006a78 <HAL_SPI_TransmitReceive+0x292>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f47f af4e 	bne.w	8006a78 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bdc:	6a3a      	ldr	r2, [r7, #32]
 8006bde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f93d 	bl	8006e60 <SPI_EndRxTxTransaction>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d008      	beq.n	8006bfe <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e00e      	b.n	8006c1c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e000      	b.n	8006c1c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
  }
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3728      	adds	r7, #40	@ 0x28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	4613      	mov	r3, r2
 8006c32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c34:	f7fc fb54 	bl	80032e0 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3c:	1a9b      	subs	r3, r3, r2
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	4413      	add	r3, r2
 8006c42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c44:	f7fc fb4c 	bl	80032e0 <HAL_GetTick>
 8006c48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c4a:	4b39      	ldr	r3, [pc, #228]	@ (8006d30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	015b      	lsls	r3, r3, #5
 8006c50:	0d1b      	lsrs	r3, r3, #20
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	fb02 f303 	mul.w	r3, r2, r3
 8006c58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c5a:	e054      	b.n	8006d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c62:	d050      	beq.n	8006d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c64:	f7fc fb3c 	bl	80032e0 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d902      	bls.n	8006c7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d13d      	bne.n	8006cf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c92:	d111      	bne.n	8006cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c9c:	d004      	beq.n	8006ca8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca6:	d107      	bne.n	8006cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cc0:	d10f      	bne.n	8006ce2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ce0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e017      	b.n	8006d26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	bf0c      	ite	eq
 8006d16:	2301      	moveq	r3, #1
 8006d18:	2300      	movne	r3, #0
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	79fb      	ldrb	r3, [r7, #7]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d19b      	bne.n	8006c5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3720      	adds	r7, #32
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20040088 	.word	0x20040088

08006d34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08a      	sub	sp, #40	@ 0x28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d46:	f7fc facb 	bl	80032e0 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	1a9b      	subs	r3, r3, r2
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	4413      	add	r3, r2
 8006d54:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006d56:	f7fc fac3 	bl	80032e0 <HAL_GetTick>
 8006d5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	330c      	adds	r3, #12
 8006d62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d64:	4b3d      	ldr	r3, [pc, #244]	@ (8006e5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	00da      	lsls	r2, r3, #3
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	0d1b      	lsrs	r3, r3, #20
 8006d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d76:	fb02 f303 	mul.w	r3, r2, r3
 8006d7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d7c:	e060      	b.n	8006e40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006d84:	d107      	bne.n	8006d96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9c:	d050      	beq.n	8006e40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d9e:	f7fc fa9f 	bl	80032e0 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d902      	bls.n	8006db4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d13d      	bne.n	8006e30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006dc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dcc:	d111      	bne.n	8006df2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dd6:	d004      	beq.n	8006de2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de0:	d107      	bne.n	8006df2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006df0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dfa:	d10f      	bne.n	8006e1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e010      	b.n	8006e52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d196      	bne.n	8006d7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3728      	adds	r7, #40	@ 0x28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20040088 	.word	0x20040088

08006e60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af02      	add	r7, sp, #8
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f7ff ff5b 	bl	8006d34 <SPI_WaitFifoStateUntilTimeout>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d007      	beq.n	8006e94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e88:	f043 0220 	orr.w	r2, r3, #32
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e027      	b.n	8006ee4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2180      	movs	r1, #128	@ 0x80
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f7ff fec0 	bl	8006c24 <SPI_WaitFlagStateUntilTimeout>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d007      	beq.n	8006eba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eae:	f043 0220 	orr.w	r2, r3, #32
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e014      	b.n	8006ee4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f7ff ff34 	bl	8006d34 <SPI_WaitFifoStateUntilTimeout>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d007      	beq.n	8006ee2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ed6:	f043 0220 	orr.w	r2, r3, #32
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e000      	b.n	8006ee4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e049      	b.n	8006f92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d106      	bne.n	8006f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7fb fa0e 	bl	8002334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	3304      	adds	r3, #4
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	f000 fad8 	bl	80074e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d001      	beq.n	8006fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e04f      	b.n	8007054 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a23      	ldr	r2, [pc, #140]	@ (8007060 <HAL_TIM_Base_Start_IT+0xc4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d01d      	beq.n	8007012 <HAL_TIM_Base_Start_IT+0x76>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fde:	d018      	beq.n	8007012 <HAL_TIM_Base_Start_IT+0x76>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8007064 <HAL_TIM_Base_Start_IT+0xc8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <HAL_TIM_Base_Start_IT+0x76>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1e      	ldr	r2, [pc, #120]	@ (8007068 <HAL_TIM_Base_Start_IT+0xcc>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00e      	beq.n	8007012 <HAL_TIM_Base_Start_IT+0x76>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800706c <HAL_TIM_Base_Start_IT+0xd0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d009      	beq.n	8007012 <HAL_TIM_Base_Start_IT+0x76>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a1b      	ldr	r2, [pc, #108]	@ (8007070 <HAL_TIM_Base_Start_IT+0xd4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d004      	beq.n	8007012 <HAL_TIM_Base_Start_IT+0x76>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a19      	ldr	r2, [pc, #100]	@ (8007074 <HAL_TIM_Base_Start_IT+0xd8>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d115      	bne.n	800703e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	4b17      	ldr	r3, [pc, #92]	@ (8007078 <HAL_TIM_Base_Start_IT+0xdc>)
 800701a:	4013      	ands	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b06      	cmp	r3, #6
 8007022:	d015      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0xb4>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800702a:	d011      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f042 0201 	orr.w	r2, r2, #1
 800703a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800703c:	e008      	b.n	8007050 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f042 0201 	orr.w	r2, r2, #1
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	e000      	b.n	8007052 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007050:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	40012c00 	.word	0x40012c00
 8007064:	40000400 	.word	0x40000400
 8007068:	40000800 	.word	0x40000800
 800706c:	40000c00 	.word	0x40000c00
 8007070:	40013400 	.word	0x40013400
 8007074:	40014000 	.word	0x40014000
 8007078:	00010007 	.word	0x00010007

0800707c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68da      	ldr	r2, [r3, #12]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0201 	bic.w	r2, r2, #1
 8007092:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6a1a      	ldr	r2, [r3, #32]
 800709a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800709e:	4013      	ands	r3, r2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10f      	bne.n	80070c4 <HAL_TIM_Base_Stop_IT+0x48>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6a1a      	ldr	r2, [r3, #32]
 80070aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80070ae:	4013      	ands	r3, r2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d107      	bne.n	80070c4 <HAL_TIM_Base_Stop_IT+0x48>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0201 	bic.w	r2, r2, #1
 80070c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d020      	beq.n	800713e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d01b      	beq.n	800713e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f06f 0202 	mvn.w	r2, #2
 800710e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f9bc 	bl	80074a2 <HAL_TIM_IC_CaptureCallback>
 800712a:	e005      	b.n	8007138 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f9ae 	bl	800748e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f9bf 	bl	80074b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	2b00      	cmp	r3, #0
 8007146:	d020      	beq.n	800718a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	d01b      	beq.n	800718a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f06f 0204 	mvn.w	r2, #4
 800715a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f996 	bl	80074a2 <HAL_TIM_IC_CaptureCallback>
 8007176:	e005      	b.n	8007184 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f988 	bl	800748e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f999 	bl	80074b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b00      	cmp	r3, #0
 8007192:	d020      	beq.n	80071d6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d01b      	beq.n	80071d6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f06f 0208 	mvn.w	r2, #8
 80071a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2204      	movs	r2, #4
 80071ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	f003 0303 	and.w	r3, r3, #3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f970 	bl	80074a2 <HAL_TIM_IC_CaptureCallback>
 80071c2:	e005      	b.n	80071d0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f962 	bl	800748e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f973 	bl	80074b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d020      	beq.n	8007222 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f003 0310 	and.w	r3, r3, #16
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01b      	beq.n	8007222 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f06f 0210 	mvn.w	r2, #16
 80071f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2208      	movs	r2, #8
 80071f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f94a 	bl	80074a2 <HAL_TIM_IC_CaptureCallback>
 800720e:	e005      	b.n	800721c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f93c 	bl	800748e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f94d 	bl	80074b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00c      	beq.n	8007246 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d007      	beq.n	8007246 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f06f 0201 	mvn.w	r2, #1
 800723e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f91a 	bl	800747a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800724c:	2b00      	cmp	r3, #0
 800724e:	d104      	bne.n	800725a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00c      	beq.n	8007274 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800726c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fb08 	bl	8007884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00c      	beq.n	8007298 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007284:	2b00      	cmp	r3, #0
 8007286:	d007      	beq.n	8007298 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fb00 	bl	8007898 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00c      	beq.n	80072bc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d007      	beq.n	80072bc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80072b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f907 	bl	80074ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f003 0320 	and.w	r3, r3, #32
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00c      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d007      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0220 	mvn.w	r2, #32
 80072d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fac8 	bl	8007870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072e0:	bf00      	nop
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d101      	bne.n	8007304 <HAL_TIM_ConfigClockSource+0x1c>
 8007300:	2302      	movs	r3, #2
 8007302:	e0b6      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x18a>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007322:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800732e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007340:	d03e      	beq.n	80073c0 <HAL_TIM_ConfigClockSource+0xd8>
 8007342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007346:	f200 8087 	bhi.w	8007458 <HAL_TIM_ConfigClockSource+0x170>
 800734a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800734e:	f000 8086 	beq.w	800745e <HAL_TIM_ConfigClockSource+0x176>
 8007352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007356:	d87f      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x170>
 8007358:	2b70      	cmp	r3, #112	@ 0x70
 800735a:	d01a      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0xaa>
 800735c:	2b70      	cmp	r3, #112	@ 0x70
 800735e:	d87b      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x170>
 8007360:	2b60      	cmp	r3, #96	@ 0x60
 8007362:	d050      	beq.n	8007406 <HAL_TIM_ConfigClockSource+0x11e>
 8007364:	2b60      	cmp	r3, #96	@ 0x60
 8007366:	d877      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x170>
 8007368:	2b50      	cmp	r3, #80	@ 0x50
 800736a:	d03c      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0xfe>
 800736c:	2b50      	cmp	r3, #80	@ 0x50
 800736e:	d873      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x170>
 8007370:	2b40      	cmp	r3, #64	@ 0x40
 8007372:	d058      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x13e>
 8007374:	2b40      	cmp	r3, #64	@ 0x40
 8007376:	d86f      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x170>
 8007378:	2b30      	cmp	r3, #48	@ 0x30
 800737a:	d064      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x15e>
 800737c:	2b30      	cmp	r3, #48	@ 0x30
 800737e:	d86b      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x170>
 8007380:	2b20      	cmp	r3, #32
 8007382:	d060      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x15e>
 8007384:	2b20      	cmp	r3, #32
 8007386:	d867      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x170>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d05c      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x15e>
 800738c:	2b10      	cmp	r3, #16
 800738e:	d05a      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x15e>
 8007390:	e062      	b.n	8007458 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073a2:	f000 f9bd 	bl	8007720 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80073b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	609a      	str	r2, [r3, #8]
      break;
 80073be:	e04f      	b.n	8007460 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073d0:	f000 f9a6 	bl	8007720 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689a      	ldr	r2, [r3, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073e2:	609a      	str	r2, [r3, #8]
      break;
 80073e4:	e03c      	b.n	8007460 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073f2:	461a      	mov	r2, r3
 80073f4:	f000 f91a 	bl	800762c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2150      	movs	r1, #80	@ 0x50
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 f973 	bl	80076ea <TIM_ITRx_SetConfig>
      break;
 8007404:	e02c      	b.n	8007460 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007412:	461a      	mov	r2, r3
 8007414:	f000 f939 	bl	800768a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2160      	movs	r1, #96	@ 0x60
 800741e:	4618      	mov	r0, r3
 8007420:	f000 f963 	bl	80076ea <TIM_ITRx_SetConfig>
      break;
 8007424:	e01c      	b.n	8007460 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007432:	461a      	mov	r2, r3
 8007434:	f000 f8fa 	bl	800762c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2140      	movs	r1, #64	@ 0x40
 800743e:	4618      	mov	r0, r3
 8007440:	f000 f953 	bl	80076ea <TIM_ITRx_SetConfig>
      break;
 8007444:	e00c      	b.n	8007460 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f000 f94a 	bl	80076ea <TIM_ITRx_SetConfig>
      break;
 8007456:	e003      	b.n	8007460 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	73fb      	strb	r3, [r7, #15]
      break;
 800745c:	e000      	b.n	8007460 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800745e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800747a:	b480      	push	{r7}
 800747c:	b083      	sub	sp, #12
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007482:	bf00      	nop
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800748e:	b480      	push	{r7}
 8007490:	b083      	sub	sp, #12
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074aa:	bf00      	nop
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074be:	bf00      	nop
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
	...

080074e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a46      	ldr	r2, [pc, #280]	@ (800760c <TIM_Base_SetConfig+0x12c>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d013      	beq.n	8007520 <TIM_Base_SetConfig+0x40>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074fe:	d00f      	beq.n	8007520 <TIM_Base_SetConfig+0x40>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a43      	ldr	r2, [pc, #268]	@ (8007610 <TIM_Base_SetConfig+0x130>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00b      	beq.n	8007520 <TIM_Base_SetConfig+0x40>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a42      	ldr	r2, [pc, #264]	@ (8007614 <TIM_Base_SetConfig+0x134>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d007      	beq.n	8007520 <TIM_Base_SetConfig+0x40>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a41      	ldr	r2, [pc, #260]	@ (8007618 <TIM_Base_SetConfig+0x138>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d003      	beq.n	8007520 <TIM_Base_SetConfig+0x40>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a40      	ldr	r2, [pc, #256]	@ (800761c <TIM_Base_SetConfig+0x13c>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d108      	bne.n	8007532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	4313      	orrs	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a35      	ldr	r2, [pc, #212]	@ (800760c <TIM_Base_SetConfig+0x12c>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d01f      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007540:	d01b      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a32      	ldr	r2, [pc, #200]	@ (8007610 <TIM_Base_SetConfig+0x130>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d017      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a31      	ldr	r2, [pc, #196]	@ (8007614 <TIM_Base_SetConfig+0x134>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d013      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a30      	ldr	r2, [pc, #192]	@ (8007618 <TIM_Base_SetConfig+0x138>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d00f      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a2f      	ldr	r2, [pc, #188]	@ (800761c <TIM_Base_SetConfig+0x13c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d00b      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a2e      	ldr	r2, [pc, #184]	@ (8007620 <TIM_Base_SetConfig+0x140>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d007      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a2d      	ldr	r2, [pc, #180]	@ (8007624 <TIM_Base_SetConfig+0x144>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d003      	beq.n	800757a <TIM_Base_SetConfig+0x9a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a2c      	ldr	r2, [pc, #176]	@ (8007628 <TIM_Base_SetConfig+0x148>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d108      	bne.n	800758c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a16      	ldr	r2, [pc, #88]	@ (800760c <TIM_Base_SetConfig+0x12c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00f      	beq.n	80075d8 <TIM_Base_SetConfig+0xf8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a18      	ldr	r2, [pc, #96]	@ (800761c <TIM_Base_SetConfig+0x13c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00b      	beq.n	80075d8 <TIM_Base_SetConfig+0xf8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a17      	ldr	r2, [pc, #92]	@ (8007620 <TIM_Base_SetConfig+0x140>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d007      	beq.n	80075d8 <TIM_Base_SetConfig+0xf8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a16      	ldr	r2, [pc, #88]	@ (8007624 <TIM_Base_SetConfig+0x144>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d003      	beq.n	80075d8 <TIM_Base_SetConfig+0xf8>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a15      	ldr	r2, [pc, #84]	@ (8007628 <TIM_Base_SetConfig+0x148>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d103      	bne.n	80075e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d105      	bne.n	80075fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f023 0201 	bic.w	r2, r3, #1
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	611a      	str	r2, [r3, #16]
  }
}
 80075fe:	bf00      	nop
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	40012c00 	.word	0x40012c00
 8007610:	40000400 	.word	0x40000400
 8007614:	40000800 	.word	0x40000800
 8007618:	40000c00 	.word	0x40000c00
 800761c:	40013400 	.word	0x40013400
 8007620:	40014000 	.word	0x40014000
 8007624:	40014400 	.word	0x40014400
 8007628:	40014800 	.word	0x40014800

0800762c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6a1b      	ldr	r3, [r3, #32]
 800763c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	f023 0201 	bic.w	r2, r3, #1
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	011b      	lsls	r3, r3, #4
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	4313      	orrs	r3, r2
 8007660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f023 030a 	bic.w	r3, r3, #10
 8007668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	4313      	orrs	r3, r2
 8007670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	621a      	str	r2, [r3, #32]
}
 800767e:	bf00      	nop
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800768a:	b480      	push	{r7}
 800768c:	b087      	sub	sp, #28
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	f023 0210 	bic.w	r2, r3, #16
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80076b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	031b      	lsls	r3, r3, #12
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	4313      	orrs	r3, r2
 80076be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80076c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	621a      	str	r2, [r3, #32]
}
 80076de:	bf00      	nop
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007700:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4313      	orrs	r3, r2
 8007708:	f043 0307 	orr.w	r3, r3, #7
 800770c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	609a      	str	r2, [r3, #8]
}
 8007714:	bf00      	nop
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007720:	b480      	push	{r7}
 8007722:	b087      	sub	sp, #28
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800773a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	021a      	lsls	r2, r3, #8
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	431a      	orrs	r2, r3
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4313      	orrs	r3, r2
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4313      	orrs	r3, r2
 800774c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	609a      	str	r2, [r3, #8]
}
 8007754:	bf00      	nop
 8007756:	371c      	adds	r7, #28
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007774:	2302      	movs	r3, #2
 8007776:	e068      	b.n	800784a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a2e      	ldr	r2, [pc, #184]	@ (8007858 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d004      	beq.n	80077ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a2d      	ldr	r2, [pc, #180]	@ (800785c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d108      	bne.n	80077be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80077b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a1e      	ldr	r2, [pc, #120]	@ (8007858 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d01d      	beq.n	800781e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ea:	d018      	beq.n	800781e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007860 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d013      	beq.n	800781e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007864 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d00e      	beq.n	800781e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a18      	ldr	r2, [pc, #96]	@ (8007868 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d009      	beq.n	800781e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a13      	ldr	r2, [pc, #76]	@ (800785c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d004      	beq.n	800781e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a14      	ldr	r2, [pc, #80]	@ (800786c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d10c      	bne.n	8007838 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	4313      	orrs	r3, r2
 800782e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	40012c00 	.word	0x40012c00
 800785c:	40013400 	.word	0x40013400
 8007860:	40000400 	.word	0x40000400
 8007864:	40000800 	.word	0x40000800
 8007868:	40000c00 	.word	0x40000c00
 800786c:	40014000 	.word	0x40014000

08007870 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e042      	b.n	8007944 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d106      	bne.n	80078d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7fa fe57 	bl	8002584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2224      	movs	r2, #36	@ 0x24
 80078da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0201 	bic.w	r2, r2, #1
 80078ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fc7c 	bl	80081f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f97d 	bl	8007bfc <UART_SetConfig>
 8007902:	4603      	mov	r3, r0
 8007904:	2b01      	cmp	r3, #1
 8007906:	d101      	bne.n	800790c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e01b      	b.n	8007944 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800791a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800792a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0201 	orr.w	r2, r2, #1
 800793a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fcfb 	bl	8008338 <UART_CheckIdleState>
 8007942:	4603      	mov	r3, r0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08a      	sub	sp, #40	@ 0x28
 8007950:	af02      	add	r7, sp, #8
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	603b      	str	r3, [r7, #0]
 8007958:	4613      	mov	r3, r2
 800795a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007962:	2b20      	cmp	r3, #32
 8007964:	d17b      	bne.n	8007a5e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <HAL_UART_Transmit+0x26>
 800796c:	88fb      	ldrh	r3, [r7, #6]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e074      	b.n	8007a60 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2221      	movs	r2, #33	@ 0x21
 8007982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007986:	f7fb fcab 	bl	80032e0 <HAL_GetTick>
 800798a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	88fa      	ldrh	r2, [r7, #6]
 8007990:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	88fa      	ldrh	r2, [r7, #6]
 8007998:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a4:	d108      	bne.n	80079b8 <HAL_UART_Transmit+0x6c>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d104      	bne.n	80079b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	61bb      	str	r3, [r7, #24]
 80079b6:	e003      	b.n	80079c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079bc:	2300      	movs	r3, #0
 80079be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80079c0:	e030      	b.n	8007a24 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2200      	movs	r2, #0
 80079ca:	2180      	movs	r1, #128	@ 0x80
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 fd5d 	bl	800848c <UART_WaitOnFlagUntilTimeout>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d005      	beq.n	80079e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2220      	movs	r2, #32
 80079dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e03d      	b.n	8007a60 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10b      	bne.n	8007a02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	881a      	ldrh	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079f6:	b292      	uxth	r2, r2
 80079f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	3302      	adds	r3, #2
 80079fe:	61bb      	str	r3, [r7, #24]
 8007a00:	e007      	b.n	8007a12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	781a      	ldrb	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1c8      	bne.n	80079c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2200      	movs	r2, #0
 8007a38:	2140      	movs	r1, #64	@ 0x40
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 fd26 	bl	800848c <UART_WaitOnFlagUntilTimeout>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d005      	beq.n	8007a52 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e006      	b.n	8007a60 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e000      	b.n	8007a60 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007a5e:	2302      	movs	r3, #2
  }
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3720      	adds	r7, #32
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08a      	sub	sp, #40	@ 0x28
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	4613      	mov	r3, r2
 8007a76:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a7e:	2b20      	cmp	r3, #32
 8007a80:	f040 80b6 	bne.w	8007bf0 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <HAL_UART_Receive+0x28>
 8007a8a:	88fb      	ldrh	r3, [r7, #6]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e0ae      	b.n	8007bf2 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2222      	movs	r2, #34	@ 0x22
 8007aa0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007aaa:	f7fb fc19 	bl	80032e0 <HAL_GetTick>
 8007aae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	88fa      	ldrh	r2, [r7, #6]
 8007ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	88fa      	ldrh	r2, [r7, #6]
 8007abc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ac8:	d10e      	bne.n	8007ae8 <HAL_UART_Receive+0x80>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d105      	bne.n	8007ade <HAL_UART_Receive+0x76>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007ad8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007adc:	e02d      	b.n	8007b3a <HAL_UART_Receive+0xd2>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	22ff      	movs	r2, #255	@ 0xff
 8007ae2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007ae6:	e028      	b.n	8007b3a <HAL_UART_Receive+0xd2>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10d      	bne.n	8007b0c <HAL_UART_Receive+0xa4>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d104      	bne.n	8007b02 <HAL_UART_Receive+0x9a>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	22ff      	movs	r2, #255	@ 0xff
 8007afc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007b00:	e01b      	b.n	8007b3a <HAL_UART_Receive+0xd2>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	227f      	movs	r2, #127	@ 0x7f
 8007b06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007b0a:	e016      	b.n	8007b3a <HAL_UART_Receive+0xd2>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b14:	d10d      	bne.n	8007b32 <HAL_UART_Receive+0xca>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d104      	bne.n	8007b28 <HAL_UART_Receive+0xc0>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	227f      	movs	r2, #127	@ 0x7f
 8007b22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007b26:	e008      	b.n	8007b3a <HAL_UART_Receive+0xd2>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	223f      	movs	r2, #63	@ 0x3f
 8007b2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007b30:	e003      	b.n	8007b3a <HAL_UART_Receive+0xd2>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007b40:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b4a:	d108      	bne.n	8007b5e <HAL_UART_Receive+0xf6>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d104      	bne.n	8007b5e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007b54:	2300      	movs	r3, #0
 8007b56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	61bb      	str	r3, [r7, #24]
 8007b5c:	e003      	b.n	8007b66 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b62:	2300      	movs	r3, #0
 8007b64:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007b66:	e037      	b.n	8007bd8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2120      	movs	r1, #32
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 fc8a 	bl	800848c <UART_WaitOnFlagUntilTimeout>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d005      	beq.n	8007b8a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e033      	b.n	8007bf2 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10c      	bne.n	8007baa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	8a7b      	ldrh	r3, [r7, #18]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	3302      	adds	r3, #2
 8007ba6:	61bb      	str	r3, [r7, #24]
 8007ba8:	e00d      	b.n	8007bc6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	8a7b      	ldrh	r3, [r7, #18]
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	4013      	ands	r3, r2
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1c1      	bne.n	8007b68 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2220      	movs	r2, #32
 8007be8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	e000      	b.n	8007bf2 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007bf0:	2302      	movs	r3, #2
  }
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3720      	adds	r7, #32
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
	...

08007bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c00:	b08c      	sub	sp, #48	@ 0x30
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	431a      	orrs	r2, r3
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	4baa      	ldr	r3, [pc, #680]	@ (8007ed4 <UART_SetConfig+0x2d8>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	6812      	ldr	r2, [r2, #0]
 8007c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c34:	430b      	orrs	r3, r1
 8007c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a9f      	ldr	r2, [pc, #636]	@ (8007ed8 <UART_SetConfig+0x2dc>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d004      	beq.n	8007c68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c64:	4313      	orrs	r3, r2
 8007c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007c72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	6812      	ldr	r2, [r2, #0]
 8007c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c7c:	430b      	orrs	r3, r1
 8007c7e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c86:	f023 010f 	bic.w	r1, r3, #15
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a90      	ldr	r2, [pc, #576]	@ (8007edc <UART_SetConfig+0x2e0>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d125      	bne.n	8007cec <UART_SetConfig+0xf0>
 8007ca0:	4b8f      	ldr	r3, [pc, #572]	@ (8007ee0 <UART_SetConfig+0x2e4>)
 8007ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca6:	f003 0303 	and.w	r3, r3, #3
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d81a      	bhi.n	8007ce4 <UART_SetConfig+0xe8>
 8007cae:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb4 <UART_SetConfig+0xb8>)
 8007cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb4:	08007cc5 	.word	0x08007cc5
 8007cb8:	08007cd5 	.word	0x08007cd5
 8007cbc:	08007ccd 	.word	0x08007ccd
 8007cc0:	08007cdd 	.word	0x08007cdd
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cca:	e116      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cd2:	e112      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007cd4:	2304      	movs	r3, #4
 8007cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cda:	e10e      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007cdc:	2308      	movs	r3, #8
 8007cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ce2:	e10a      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007ce4:	2310      	movs	r3, #16
 8007ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cea:	e106      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a7c      	ldr	r2, [pc, #496]	@ (8007ee4 <UART_SetConfig+0x2e8>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d138      	bne.n	8007d68 <UART_SetConfig+0x16c>
 8007cf6:	4b7a      	ldr	r3, [pc, #488]	@ (8007ee0 <UART_SetConfig+0x2e4>)
 8007cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cfc:	f003 030c 	and.w	r3, r3, #12
 8007d00:	2b0c      	cmp	r3, #12
 8007d02:	d82d      	bhi.n	8007d60 <UART_SetConfig+0x164>
 8007d04:	a201      	add	r2, pc, #4	@ (adr r2, 8007d0c <UART_SetConfig+0x110>)
 8007d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0a:	bf00      	nop
 8007d0c:	08007d41 	.word	0x08007d41
 8007d10:	08007d61 	.word	0x08007d61
 8007d14:	08007d61 	.word	0x08007d61
 8007d18:	08007d61 	.word	0x08007d61
 8007d1c:	08007d51 	.word	0x08007d51
 8007d20:	08007d61 	.word	0x08007d61
 8007d24:	08007d61 	.word	0x08007d61
 8007d28:	08007d61 	.word	0x08007d61
 8007d2c:	08007d49 	.word	0x08007d49
 8007d30:	08007d61 	.word	0x08007d61
 8007d34:	08007d61 	.word	0x08007d61
 8007d38:	08007d61 	.word	0x08007d61
 8007d3c:	08007d59 	.word	0x08007d59
 8007d40:	2300      	movs	r3, #0
 8007d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d46:	e0d8      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d4e:	e0d4      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007d50:	2304      	movs	r3, #4
 8007d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d56:	e0d0      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007d58:	2308      	movs	r3, #8
 8007d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d5e:	e0cc      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007d60:	2310      	movs	r3, #16
 8007d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d66:	e0c8      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a5e      	ldr	r2, [pc, #376]	@ (8007ee8 <UART_SetConfig+0x2ec>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d125      	bne.n	8007dbe <UART_SetConfig+0x1c2>
 8007d72:	4b5b      	ldr	r3, [pc, #364]	@ (8007ee0 <UART_SetConfig+0x2e4>)
 8007d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007d7c:	2b30      	cmp	r3, #48	@ 0x30
 8007d7e:	d016      	beq.n	8007dae <UART_SetConfig+0x1b2>
 8007d80:	2b30      	cmp	r3, #48	@ 0x30
 8007d82:	d818      	bhi.n	8007db6 <UART_SetConfig+0x1ba>
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	d00a      	beq.n	8007d9e <UART_SetConfig+0x1a2>
 8007d88:	2b20      	cmp	r3, #32
 8007d8a:	d814      	bhi.n	8007db6 <UART_SetConfig+0x1ba>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <UART_SetConfig+0x19a>
 8007d90:	2b10      	cmp	r3, #16
 8007d92:	d008      	beq.n	8007da6 <UART_SetConfig+0x1aa>
 8007d94:	e00f      	b.n	8007db6 <UART_SetConfig+0x1ba>
 8007d96:	2300      	movs	r3, #0
 8007d98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d9c:	e0ad      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007da4:	e0a9      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007da6:	2304      	movs	r3, #4
 8007da8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dac:	e0a5      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007dae:	2308      	movs	r3, #8
 8007db0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007db4:	e0a1      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007db6:	2310      	movs	r3, #16
 8007db8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dbc:	e09d      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a4a      	ldr	r2, [pc, #296]	@ (8007eec <UART_SetConfig+0x2f0>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d125      	bne.n	8007e14 <UART_SetConfig+0x218>
 8007dc8:	4b45      	ldr	r3, [pc, #276]	@ (8007ee0 <UART_SetConfig+0x2e4>)
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007dd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dd4:	d016      	beq.n	8007e04 <UART_SetConfig+0x208>
 8007dd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dd8:	d818      	bhi.n	8007e0c <UART_SetConfig+0x210>
 8007dda:	2b80      	cmp	r3, #128	@ 0x80
 8007ddc:	d00a      	beq.n	8007df4 <UART_SetConfig+0x1f8>
 8007dde:	2b80      	cmp	r3, #128	@ 0x80
 8007de0:	d814      	bhi.n	8007e0c <UART_SetConfig+0x210>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <UART_SetConfig+0x1f0>
 8007de6:	2b40      	cmp	r3, #64	@ 0x40
 8007de8:	d008      	beq.n	8007dfc <UART_SetConfig+0x200>
 8007dea:	e00f      	b.n	8007e0c <UART_SetConfig+0x210>
 8007dec:	2300      	movs	r3, #0
 8007dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007df2:	e082      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007df4:	2302      	movs	r3, #2
 8007df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dfa:	e07e      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007dfc:	2304      	movs	r3, #4
 8007dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e02:	e07a      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007e04:	2308      	movs	r3, #8
 8007e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e0a:	e076      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007e0c:	2310      	movs	r3, #16
 8007e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e12:	e072      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a35      	ldr	r2, [pc, #212]	@ (8007ef0 <UART_SetConfig+0x2f4>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d12a      	bne.n	8007e74 <UART_SetConfig+0x278>
 8007e1e:	4b30      	ldr	r3, [pc, #192]	@ (8007ee0 <UART_SetConfig+0x2e4>)
 8007e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e2c:	d01a      	beq.n	8007e64 <UART_SetConfig+0x268>
 8007e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e32:	d81b      	bhi.n	8007e6c <UART_SetConfig+0x270>
 8007e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e38:	d00c      	beq.n	8007e54 <UART_SetConfig+0x258>
 8007e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e3e:	d815      	bhi.n	8007e6c <UART_SetConfig+0x270>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d003      	beq.n	8007e4c <UART_SetConfig+0x250>
 8007e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e48:	d008      	beq.n	8007e5c <UART_SetConfig+0x260>
 8007e4a:	e00f      	b.n	8007e6c <UART_SetConfig+0x270>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e52:	e052      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007e54:	2302      	movs	r3, #2
 8007e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e5a:	e04e      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007e5c:	2304      	movs	r3, #4
 8007e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e62:	e04a      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007e64:	2308      	movs	r3, #8
 8007e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e6a:	e046      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007e6c:	2310      	movs	r3, #16
 8007e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e72:	e042      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a17      	ldr	r2, [pc, #92]	@ (8007ed8 <UART_SetConfig+0x2dc>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d13a      	bne.n	8007ef4 <UART_SetConfig+0x2f8>
 8007e7e:	4b18      	ldr	r3, [pc, #96]	@ (8007ee0 <UART_SetConfig+0x2e4>)
 8007e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007e88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e8c:	d01a      	beq.n	8007ec4 <UART_SetConfig+0x2c8>
 8007e8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e92:	d81b      	bhi.n	8007ecc <UART_SetConfig+0x2d0>
 8007e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e98:	d00c      	beq.n	8007eb4 <UART_SetConfig+0x2b8>
 8007e9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e9e:	d815      	bhi.n	8007ecc <UART_SetConfig+0x2d0>
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <UART_SetConfig+0x2b0>
 8007ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ea8:	d008      	beq.n	8007ebc <UART_SetConfig+0x2c0>
 8007eaa:	e00f      	b.n	8007ecc <UART_SetConfig+0x2d0>
 8007eac:	2300      	movs	r3, #0
 8007eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eb2:	e022      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eba:	e01e      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007ebc:	2304      	movs	r3, #4
 8007ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ec2:	e01a      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007ec4:	2308      	movs	r3, #8
 8007ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eca:	e016      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007ecc:	2310      	movs	r3, #16
 8007ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ed2:	e012      	b.n	8007efa <UART_SetConfig+0x2fe>
 8007ed4:	cfff69f3 	.word	0xcfff69f3
 8007ed8:	40008000 	.word	0x40008000
 8007edc:	40013800 	.word	0x40013800
 8007ee0:	40021000 	.word	0x40021000
 8007ee4:	40004400 	.word	0x40004400
 8007ee8:	40004800 	.word	0x40004800
 8007eec:	40004c00 	.word	0x40004c00
 8007ef0:	40005000 	.word	0x40005000
 8007ef4:	2310      	movs	r3, #16
 8007ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4aae      	ldr	r2, [pc, #696]	@ (80081b8 <UART_SetConfig+0x5bc>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	f040 8097 	bne.w	8008034 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f0a:	2b08      	cmp	r3, #8
 8007f0c:	d823      	bhi.n	8007f56 <UART_SetConfig+0x35a>
 8007f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f14 <UART_SetConfig+0x318>)
 8007f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f14:	08007f39 	.word	0x08007f39
 8007f18:	08007f57 	.word	0x08007f57
 8007f1c:	08007f41 	.word	0x08007f41
 8007f20:	08007f57 	.word	0x08007f57
 8007f24:	08007f47 	.word	0x08007f47
 8007f28:	08007f57 	.word	0x08007f57
 8007f2c:	08007f57 	.word	0x08007f57
 8007f30:	08007f57 	.word	0x08007f57
 8007f34:	08007f4f 	.word	0x08007f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f38:	f7fd fc38 	bl	80057ac <HAL_RCC_GetPCLK1Freq>
 8007f3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f3e:	e010      	b.n	8007f62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f40:	4b9e      	ldr	r3, [pc, #632]	@ (80081bc <UART_SetConfig+0x5c0>)
 8007f42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f44:	e00d      	b.n	8007f62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f46:	f7fd fb99 	bl	800567c <HAL_RCC_GetSysClockFreq>
 8007f4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f4c:	e009      	b.n	8007f62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f54:	e005      	b.n	8007f62 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 8130 	beq.w	80081ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6e:	4a94      	ldr	r2, [pc, #592]	@ (80081c0 <UART_SetConfig+0x5c4>)
 8007f70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f74:	461a      	mov	r2, r3
 8007f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f78:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f7c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	4613      	mov	r3, r2
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	4413      	add	r3, r2
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d305      	bcc.n	8007f9a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d903      	bls.n	8007fa2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007fa0:	e113      	b.n	80081ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	60bb      	str	r3, [r7, #8]
 8007fa8:	60fa      	str	r2, [r7, #12]
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fae:	4a84      	ldr	r2, [pc, #528]	@ (80081c0 <UART_SetConfig+0x5c4>)
 8007fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	603b      	str	r3, [r7, #0]
 8007fba:	607a      	str	r2, [r7, #4]
 8007fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fc4:	f7f8 fd8a 	bl	8000adc <__aeabi_uldivmod>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4610      	mov	r0, r2
 8007fce:	4619      	mov	r1, r3
 8007fd0:	f04f 0200 	mov.w	r2, #0
 8007fd4:	f04f 0300 	mov.w	r3, #0
 8007fd8:	020b      	lsls	r3, r1, #8
 8007fda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fde:	0202      	lsls	r2, r0, #8
 8007fe0:	6979      	ldr	r1, [r7, #20]
 8007fe2:	6849      	ldr	r1, [r1, #4]
 8007fe4:	0849      	lsrs	r1, r1, #1
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	460c      	mov	r4, r1
 8007fea:	4605      	mov	r5, r0
 8007fec:	eb12 0804 	adds.w	r8, r2, r4
 8007ff0:	eb43 0905 	adc.w	r9, r3, r5
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	469a      	mov	sl, r3
 8007ffc:	4693      	mov	fp, r2
 8007ffe:	4652      	mov	r2, sl
 8008000:	465b      	mov	r3, fp
 8008002:	4640      	mov	r0, r8
 8008004:	4649      	mov	r1, r9
 8008006:	f7f8 fd69 	bl	8000adc <__aeabi_uldivmod>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4613      	mov	r3, r2
 8008010:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008012:	6a3b      	ldr	r3, [r7, #32]
 8008014:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008018:	d308      	bcc.n	800802c <UART_SetConfig+0x430>
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008020:	d204      	bcs.n	800802c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6a3a      	ldr	r2, [r7, #32]
 8008028:	60da      	str	r2, [r3, #12]
 800802a:	e0ce      	b.n	80081ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008032:	e0ca      	b.n	80081ca <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800803c:	d166      	bne.n	800810c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800803e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008042:	2b08      	cmp	r3, #8
 8008044:	d827      	bhi.n	8008096 <UART_SetConfig+0x49a>
 8008046:	a201      	add	r2, pc, #4	@ (adr r2, 800804c <UART_SetConfig+0x450>)
 8008048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804c:	08008071 	.word	0x08008071
 8008050:	08008079 	.word	0x08008079
 8008054:	08008081 	.word	0x08008081
 8008058:	08008097 	.word	0x08008097
 800805c:	08008087 	.word	0x08008087
 8008060:	08008097 	.word	0x08008097
 8008064:	08008097 	.word	0x08008097
 8008068:	08008097 	.word	0x08008097
 800806c:	0800808f 	.word	0x0800808f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008070:	f7fd fb9c 	bl	80057ac <HAL_RCC_GetPCLK1Freq>
 8008074:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008076:	e014      	b.n	80080a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008078:	f7fd fbae 	bl	80057d8 <HAL_RCC_GetPCLK2Freq>
 800807c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800807e:	e010      	b.n	80080a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008080:	4b4e      	ldr	r3, [pc, #312]	@ (80081bc <UART_SetConfig+0x5c0>)
 8008082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008084:	e00d      	b.n	80080a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008086:	f7fd faf9 	bl	800567c <HAL_RCC_GetSysClockFreq>
 800808a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800808c:	e009      	b.n	80080a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800808e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008092:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008094:	e005      	b.n	80080a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80080a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 8090 	beq.w	80081ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ae:	4a44      	ldr	r2, [pc, #272]	@ (80081c0 <UART_SetConfig+0x5c4>)
 80080b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080b4:	461a      	mov	r2, r3
 80080b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80080bc:	005a      	lsls	r2, r3, #1
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	085b      	lsrs	r3, r3, #1
 80080c4:	441a      	add	r2, r3
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	2b0f      	cmp	r3, #15
 80080d4:	d916      	bls.n	8008104 <UART_SetConfig+0x508>
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080dc:	d212      	bcs.n	8008104 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f023 030f 	bic.w	r3, r3, #15
 80080e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	085b      	lsrs	r3, r3, #1
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	8bfb      	ldrh	r3, [r7, #30]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	8bfa      	ldrh	r2, [r7, #30]
 8008100:	60da      	str	r2, [r3, #12]
 8008102:	e062      	b.n	80081ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800810a:	e05e      	b.n	80081ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800810c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008110:	2b08      	cmp	r3, #8
 8008112:	d828      	bhi.n	8008166 <UART_SetConfig+0x56a>
 8008114:	a201      	add	r2, pc, #4	@ (adr r2, 800811c <UART_SetConfig+0x520>)
 8008116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811a:	bf00      	nop
 800811c:	08008141 	.word	0x08008141
 8008120:	08008149 	.word	0x08008149
 8008124:	08008151 	.word	0x08008151
 8008128:	08008167 	.word	0x08008167
 800812c:	08008157 	.word	0x08008157
 8008130:	08008167 	.word	0x08008167
 8008134:	08008167 	.word	0x08008167
 8008138:	08008167 	.word	0x08008167
 800813c:	0800815f 	.word	0x0800815f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008140:	f7fd fb34 	bl	80057ac <HAL_RCC_GetPCLK1Freq>
 8008144:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008146:	e014      	b.n	8008172 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008148:	f7fd fb46 	bl	80057d8 <HAL_RCC_GetPCLK2Freq>
 800814c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800814e:	e010      	b.n	8008172 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008150:	4b1a      	ldr	r3, [pc, #104]	@ (80081bc <UART_SetConfig+0x5c0>)
 8008152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008154:	e00d      	b.n	8008172 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008156:	f7fd fa91 	bl	800567c <HAL_RCC_GetSysClockFreq>
 800815a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800815c:	e009      	b.n	8008172 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800815e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008162:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008164:	e005      	b.n	8008172 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008170:	bf00      	nop
    }

    if (pclk != 0U)
 8008172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008174:	2b00      	cmp	r3, #0
 8008176:	d028      	beq.n	80081ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800817c:	4a10      	ldr	r2, [pc, #64]	@ (80081c0 <UART_SetConfig+0x5c4>)
 800817e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008182:	461a      	mov	r2, r3
 8008184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008186:	fbb3 f2f2 	udiv	r2, r3, r2
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	085b      	lsrs	r3, r3, #1
 8008190:	441a      	add	r2, r3
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	fbb2 f3f3 	udiv	r3, r2, r3
 800819a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	2b0f      	cmp	r3, #15
 80081a0:	d910      	bls.n	80081c4 <UART_SetConfig+0x5c8>
 80081a2:	6a3b      	ldr	r3, [r7, #32]
 80081a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081a8:	d20c      	bcs.n	80081c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	60da      	str	r2, [r3, #12]
 80081b4:	e009      	b.n	80081ca <UART_SetConfig+0x5ce>
 80081b6:	bf00      	nop
 80081b8:	40008000 	.word	0x40008000
 80081bc:	00f42400 	.word	0x00f42400
 80081c0:	0805582c 	.word	0x0805582c
      }
      else
      {
        ret = HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2200      	movs	r2, #0
 80081de:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	2200      	movs	r2, #0
 80081e4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80081e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3730      	adds	r7, #48	@ 0x30
 80081ee:	46bd      	mov	sp, r7
 80081f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080081f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008200:	f003 0308 	and.w	r3, r3, #8
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00a      	beq.n	800821e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00a      	beq.n	8008240 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00a      	beq.n	8008262 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00a      	beq.n	8008284 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	430a      	orrs	r2, r1
 8008282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00a      	beq.n	80082a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00a      	beq.n	80082c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	430a      	orrs	r2, r1
 80082c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01a      	beq.n	800830a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082f2:	d10a      	bne.n	800830a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800830e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	430a      	orrs	r2, r1
 800832a:	605a      	str	r2, [r3, #4]
  }
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b098      	sub	sp, #96	@ 0x60
 800833c:	af02      	add	r7, sp, #8
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008348:	f7fa ffca 	bl	80032e0 <HAL_GetTick>
 800834c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0308 	and.w	r3, r3, #8
 8008358:	2b08      	cmp	r3, #8
 800835a:	d12f      	bne.n	80083bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800835c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008364:	2200      	movs	r2, #0
 8008366:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f88e 	bl	800848c <UART_WaitOnFlagUntilTimeout>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d022      	beq.n	80083bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800838a:	653b      	str	r3, [r7, #80]	@ 0x50
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008394:	647b      	str	r3, [r7, #68]	@ 0x44
 8008396:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800839a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800839c:	e841 2300 	strex	r3, r2, [r1]
 80083a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e6      	bne.n	8008376 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2220      	movs	r2, #32
 80083ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e063      	b.n	8008484 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0304 	and.w	r3, r3, #4
 80083c6:	2b04      	cmp	r3, #4
 80083c8:	d149      	bne.n	800845e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083ce:	9300      	str	r3, [sp, #0]
 80083d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083d2:	2200      	movs	r2, #0
 80083d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f857 	bl	800848c <UART_WaitOnFlagUntilTimeout>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d03c      	beq.n	800845e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	623b      	str	r3, [r7, #32]
   return(result);
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008402:	633b      	str	r3, [r7, #48]	@ 0x30
 8008404:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e6      	bne.n	80083e4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3308      	adds	r3, #8
 800841c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	e853 3f00 	ldrex	r3, [r3]
 8008424:	60fb      	str	r3, [r7, #12]
   return(result);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f023 0301 	bic.w	r3, r3, #1
 800842c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3308      	adds	r3, #8
 8008434:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008436:	61fa      	str	r2, [r7, #28]
 8008438:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843a:	69b9      	ldr	r1, [r7, #24]
 800843c:	69fa      	ldr	r2, [r7, #28]
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	617b      	str	r3, [r7, #20]
   return(result);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1e5      	bne.n	8008416 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2220      	movs	r2, #32
 800844e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e012      	b.n	8008484 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2220      	movs	r2, #32
 8008462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2220      	movs	r2, #32
 800846a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3758      	adds	r7, #88	@ 0x58
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	603b      	str	r3, [r7, #0]
 8008498:	4613      	mov	r3, r2
 800849a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800849c:	e04f      	b.n	800853e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a4:	d04b      	beq.n	800853e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084a6:	f7fa ff1b 	bl	80032e0 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d302      	bcc.n	80084bc <UART_WaitOnFlagUntilTimeout+0x30>
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e04e      	b.n	800855e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0304 	and.w	r3, r3, #4
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d037      	beq.n	800853e <UART_WaitOnFlagUntilTimeout+0xb2>
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2b80      	cmp	r3, #128	@ 0x80
 80084d2:	d034      	beq.n	800853e <UART_WaitOnFlagUntilTimeout+0xb2>
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	2b40      	cmp	r3, #64	@ 0x40
 80084d8:	d031      	beq.n	800853e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	f003 0308 	and.w	r3, r3, #8
 80084e4:	2b08      	cmp	r3, #8
 80084e6:	d110      	bne.n	800850a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2208      	movs	r2, #8
 80084ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 f838 	bl	8008566 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2208      	movs	r2, #8
 80084fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e029      	b.n	800855e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	69db      	ldr	r3, [r3, #28]
 8008510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008518:	d111      	bne.n	800853e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008522:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 f81e 	bl	8008566 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2220      	movs	r2, #32
 800852e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e00f      	b.n	800855e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	69da      	ldr	r2, [r3, #28]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	4013      	ands	r3, r2
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	429a      	cmp	r2, r3
 800854c:	bf0c      	ite	eq
 800854e:	2301      	moveq	r3, #1
 8008550:	2300      	movne	r3, #0
 8008552:	b2db      	uxtb	r3, r3
 8008554:	461a      	mov	r2, r3
 8008556:	79fb      	ldrb	r3, [r7, #7]
 8008558:	429a      	cmp	r2, r3
 800855a:	d0a0      	beq.n	800849e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008566:	b480      	push	{r7}
 8008568:	b095      	sub	sp, #84	@ 0x54
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008576:	e853 3f00 	ldrex	r3, [r3]
 800857a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800857c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	461a      	mov	r2, r3
 800858a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800858c:	643b      	str	r3, [r7, #64]	@ 0x40
 800858e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008590:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008592:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008594:	e841 2300 	strex	r3, r2, [r1]
 8008598:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800859a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e6      	bne.n	800856e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3308      	adds	r3, #8
 80085a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	e853 3f00 	ldrex	r3, [r3]
 80085ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085b6:	f023 0301 	bic.w	r3, r3, #1
 80085ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3308      	adds	r3, #8
 80085c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085cc:	e841 2300 	strex	r3, r2, [r1]
 80085d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1e3      	bne.n	80085a0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d118      	bne.n	8008612 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f023 0310 	bic.w	r3, r3, #16
 80085f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	461a      	mov	r2, r3
 80085fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085fe:	61bb      	str	r3, [r7, #24]
 8008600:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008602:	6979      	ldr	r1, [r7, #20]
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	613b      	str	r3, [r7, #16]
   return(result);
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e6      	bne.n	80085e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2220      	movs	r2, #32
 8008616:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008626:	bf00      	nop
 8008628:	3754      	adds	r7, #84	@ 0x54
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008632:	b480      	push	{r7}
 8008634:	b085      	sub	sp, #20
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008640:	2b01      	cmp	r3, #1
 8008642:	d101      	bne.n	8008648 <HAL_UARTEx_DisableFifoMode+0x16>
 8008644:	2302      	movs	r3, #2
 8008646:	e027      	b.n	8008698 <HAL_UARTEx_DisableFifoMode+0x66>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2224      	movs	r2, #36	@ 0x24
 8008654:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 0201 	bic.w	r2, r2, #1
 800866e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008676:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2220      	movs	r2, #32
 800868a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d101      	bne.n	80086bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086b8:	2302      	movs	r3, #2
 80086ba:	e02d      	b.n	8008718 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2224      	movs	r2, #36	@ 0x24
 80086c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0201 	bic.w	r2, r2, #1
 80086e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f84f 	bl	800879c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2220      	movs	r2, #32
 800870a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008730:	2b01      	cmp	r3, #1
 8008732:	d101      	bne.n	8008738 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008734:	2302      	movs	r3, #2
 8008736:	e02d      	b.n	8008794 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2224      	movs	r2, #36	@ 0x24
 8008744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0201 	bic.w	r2, r2, #1
 800875e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f811 	bl	800879c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2220      	movs	r2, #32
 8008786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d108      	bne.n	80087be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087bc:	e031      	b.n	8008822 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087be:	2308      	movs	r3, #8
 80087c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087c2:	2308      	movs	r3, #8
 80087c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	0e5b      	lsrs	r3, r3, #25
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	f003 0307 	and.w	r3, r3, #7
 80087d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	0f5b      	lsrs	r3, r3, #29
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	f003 0307 	and.w	r3, r3, #7
 80087e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	7b3a      	ldrb	r2, [r7, #12]
 80087ea:	4911      	ldr	r1, [pc, #68]	@ (8008830 <UARTEx_SetNbDataToProcess+0x94>)
 80087ec:	5c8a      	ldrb	r2, [r1, r2]
 80087ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087f2:	7b3a      	ldrb	r2, [r7, #12]
 80087f4:	490f      	ldr	r1, [pc, #60]	@ (8008834 <UARTEx_SetNbDataToProcess+0x98>)
 80087f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	7b7a      	ldrb	r2, [r7, #13]
 8008808:	4909      	ldr	r1, [pc, #36]	@ (8008830 <UARTEx_SetNbDataToProcess+0x94>)
 800880a:	5c8a      	ldrb	r2, [r1, r2]
 800880c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008810:	7b7a      	ldrb	r2, [r7, #13]
 8008812:	4908      	ldr	r1, [pc, #32]	@ (8008834 <UARTEx_SetNbDataToProcess+0x98>)
 8008814:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008816:	fb93 f3f2 	sdiv	r3, r3, r2
 800881a:	b29a      	uxth	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008822:	bf00      	nop
 8008824:	3714      	adds	r7, #20
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	08055844 	.word	0x08055844
 8008834:	0805584c 	.word	0x0805584c

08008838 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800883c:	4904      	ldr	r1, [pc, #16]	@ (8008850 <MX_FATFS_Init+0x18>)
 800883e:	4805      	ldr	r0, [pc, #20]	@ (8008854 <MX_FATFS_Init+0x1c>)
 8008840:	f002 feec 	bl	800b61c <FATFS_LinkDriver>
 8008844:	4603      	mov	r3, r0
 8008846:	461a      	mov	r2, r3
 8008848:	4b03      	ldr	r3, [pc, #12]	@ (8008858 <MX_FATFS_Init+0x20>)
 800884a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800884c:	bf00      	nop
 800884e:	bd80      	pop	{r7, pc}
 8008850:	20040788 	.word	0x20040788
 8008854:	200400a4 	.word	0x200400a4
 8008858:	20040784 	.word	0x20040784

0800885c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800885c:	b480      	push	{r7}
 800885e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008860:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008862:	4618      	mov	r0, r3
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	4603      	mov	r3, r0
 8008874:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8008876:	79fb      	ldrb	r3, [r7, #7]
 8008878:	4618      	mov	r0, r3
 800887a:	f000 f9d7 	bl	8008c2c <USER_SPI_initialize>
 800887e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008880:	4618      	mov	r0, r3
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	4618      	mov	r0, r3
 8008896:	f000 fab5 	bl	8008e04 <USER_SPI_status>
 800889a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800889c:	4618      	mov	r0, r3
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60b9      	str	r1, [r7, #8]
 80088ac:	607a      	str	r2, [r7, #4]
 80088ae:	603b      	str	r3, [r7, #0]
 80088b0:	4603      	mov	r3, r0
 80088b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80088b4:	7bf8      	ldrb	r0, [r7, #15]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	68b9      	ldr	r1, [r7, #8]
 80088bc:	f000 fab8 	bl	8008e30 <USER_SPI_read>
 80088c0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b084      	sub	sp, #16
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	603b      	str	r3, [r7, #0]
 80088d6:	4603      	mov	r3, r0
 80088d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80088da:	7bf8      	ldrb	r0, [r7, #15]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	68b9      	ldr	r1, [r7, #8]
 80088e2:	f000 fb0b 	bl	8008efc <USER_SPI_write>
 80088e6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	4603      	mov	r3, r0
 80088f8:	603a      	str	r2, [r7, #0]
 80088fa:	71fb      	strb	r3, [r7, #7]
 80088fc:	460b      	mov	r3, r1
 80088fe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8008900:	79b9      	ldrb	r1, [r7, #6]
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	4618      	mov	r0, r3
 8008908:	f000 fb74 	bl	8008ff4 <USER_SPI_ioctl>
 800890c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008920:	f7fa fcde 	bl	80032e0 <HAL_GetTick>
 8008924:	4603      	mov	r3, r0
 8008926:	4a04      	ldr	r2, [pc, #16]	@ (8008938 <SPI_Timer_On+0x20>)
 8008928:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800892a:	4a04      	ldr	r2, [pc, #16]	@ (800893c <SPI_Timer_On+0x24>)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6013      	str	r3, [r2, #0]
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	20040790 	.word	0x20040790
 800893c:	20040794 	.word	0x20040794

08008940 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008940:	b580      	push	{r7, lr}
 8008942:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008944:	f7fa fccc 	bl	80032e0 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	4b06      	ldr	r3, [pc, #24]	@ (8008964 <SPI_Timer_Status+0x24>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	1ad2      	subs	r2, r2, r3
 8008950:	4b05      	ldr	r3, [pc, #20]	@ (8008968 <SPI_Timer_Status+0x28>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	429a      	cmp	r2, r3
 8008956:	bf34      	ite	cc
 8008958:	2301      	movcc	r3, #1
 800895a:	2300      	movcs	r3, #0
 800895c:	b2db      	uxtb	r3, r3
}
 800895e:	4618      	mov	r0, r3
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20040790 	.word	0x20040790
 8008968:	20040794 	.word	0x20040794

0800896c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af02      	add	r7, sp, #8
 8008972:	4603      	mov	r3, r0
 8008974:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008976:	f107 020f 	add.w	r2, r7, #15
 800897a:	1df9      	adds	r1, r7, #7
 800897c:	2332      	movs	r3, #50	@ 0x32
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	2301      	movs	r3, #1
 8008982:	4804      	ldr	r0, [pc, #16]	@ (8008994 <xchg_spi+0x28>)
 8008984:	f7fd ff2f 	bl	80067e6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20040450 	.word	0x20040450

08008998 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008998:	b590      	push	{r4, r7, lr}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80089a2:	2300      	movs	r3, #0
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	e00a      	b.n	80089be <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	18d4      	adds	r4, r2, r3
 80089ae:	20ff      	movs	r0, #255	@ 0xff
 80089b0:	f7ff ffdc 	bl	800896c <xchg_spi>
 80089b4:	4603      	mov	r3, r0
 80089b6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3301      	adds	r3, #1
 80089bc:	60fb      	str	r3, [r7, #12]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d3f0      	bcc.n	80089a8 <rcvr_spi_multi+0x10>
	}
}
 80089c6:	bf00      	nop
 80089c8:	bf00      	nop
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd90      	pop	{r4, r7, pc}

080089d0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	b29a      	uxth	r2, r3
 80089de:	f04f 33ff 	mov.w	r3, #4294967295
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	4803      	ldr	r0, [pc, #12]	@ (80089f4 <xmit_spi_multi+0x24>)
 80089e6:	f7fd fd88 	bl	80064fa <HAL_SPI_Transmit>
}
 80089ea:	bf00      	nop
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	20040450 	.word	0x20040450

080089f8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008a00:	f7fa fc6e 	bl	80032e0 <HAL_GetTick>
 8008a04:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008a0a:	20ff      	movs	r0, #255	@ 0xff
 8008a0c:	f7ff ffae 	bl	800896c <xchg_spi>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	2bff      	cmp	r3, #255	@ 0xff
 8008a18:	d007      	beq.n	8008a2a <wait_ready+0x32>
 8008a1a:	f7fa fc61 	bl	80032e0 <HAL_GetTick>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d8ef      	bhi.n	8008a0a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
 8008a2c:	2bff      	cmp	r3, #255	@ 0xff
 8008a2e:	bf0c      	ite	eq
 8008a30:	2301      	moveq	r3, #1
 8008a32:	2300      	movne	r3, #0
 8008a34:	b2db      	uxtb	r3, r3
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
	...

08008a40 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008a44:	2201      	movs	r2, #1
 8008a46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008a4a:	4804      	ldr	r0, [pc, #16]	@ (8008a5c <despiselect+0x1c>)
 8008a4c:	f7fb ffd6 	bl	80049fc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008a50:	20ff      	movs	r0, #255	@ 0xff
 8008a52:	f7ff ff8b 	bl	800896c <xchg_spi>

}
 8008a56:	bf00      	nop
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	48000c00 	.word	0x48000c00

08008a60 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008a64:	2200      	movs	r2, #0
 8008a66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008a6a:	480a      	ldr	r0, [pc, #40]	@ (8008a94 <spiselect+0x34>)
 8008a6c:	f7fb ffc6 	bl	80049fc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008a70:	20ff      	movs	r0, #255	@ 0xff
 8008a72:	f7ff ff7b 	bl	800896c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008a76:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008a7a:	f7ff ffbd 	bl	80089f8 <wait_ready>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <spiselect+0x28>
 8008a84:	2301      	movs	r3, #1
 8008a86:	e002      	b.n	8008a8e <spiselect+0x2e>

	despiselect();
 8008a88:	f7ff ffda 	bl	8008a40 <despiselect>
	return 0;	/* Timeout */
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	48000c00 	.word	0x48000c00

08008a98 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008aa2:	20c8      	movs	r0, #200	@ 0xc8
 8008aa4:	f7ff ff38 	bl	8008918 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008aa8:	20ff      	movs	r0, #255	@ 0xff
 8008aaa:	f7ff ff5f 	bl	800896c <xchg_spi>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
 8008ab4:	2bff      	cmp	r3, #255	@ 0xff
 8008ab6:	d104      	bne.n	8008ac2 <rcvr_datablock+0x2a>
 8008ab8:	f7ff ff42 	bl	8008940 <SPI_Timer_Status>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1f2      	bne.n	8008aa8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
 8008ac4:	2bfe      	cmp	r3, #254	@ 0xfe
 8008ac6:	d001      	beq.n	8008acc <rcvr_datablock+0x34>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	e00a      	b.n	8008ae2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7ff ff62 	bl	8008998 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008ad4:	20ff      	movs	r0, #255	@ 0xff
 8008ad6:	f7ff ff49 	bl	800896c <xchg_spi>
 8008ada:	20ff      	movs	r0, #255	@ 0xff
 8008adc:	f7ff ff46 	bl	800896c <xchg_spi>

	return 1;						/* Function succeeded */
 8008ae0:	2301      	movs	r3, #1
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b084      	sub	sp, #16
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	460b      	mov	r3, r1
 8008af4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008af6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008afa:	f7ff ff7d 	bl	80089f8 <wait_ready>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d101      	bne.n	8008b08 <xmit_datablock+0x1e>
 8008b04:	2300      	movs	r3, #0
 8008b06:	e01e      	b.n	8008b46 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008b08:	78fb      	ldrb	r3, [r7, #3]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7ff ff2e 	bl	800896c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008b10:	78fb      	ldrb	r3, [r7, #3]
 8008b12:	2bfd      	cmp	r3, #253	@ 0xfd
 8008b14:	d016      	beq.n	8008b44 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008b16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff ff58 	bl	80089d0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008b20:	20ff      	movs	r0, #255	@ 0xff
 8008b22:	f7ff ff23 	bl	800896c <xchg_spi>
 8008b26:	20ff      	movs	r0, #255	@ 0xff
 8008b28:	f7ff ff20 	bl	800896c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008b2c:	20ff      	movs	r0, #255	@ 0xff
 8008b2e:	f7ff ff1d 	bl	800896c <xchg_spi>
 8008b32:	4603      	mov	r3, r0
 8008b34:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	f003 031f 	and.w	r3, r3, #31
 8008b3c:	2b05      	cmp	r3, #5
 8008b3e:	d001      	beq.n	8008b44 <xmit_datablock+0x5a>
 8008b40:	2300      	movs	r3, #0
 8008b42:	e000      	b.n	8008b46 <xmit_datablock+0x5c>
	}
	return 1;
 8008b44:	2301      	movs	r3, #1
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	4603      	mov	r3, r0
 8008b56:	6039      	str	r1, [r7, #0]
 8008b58:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	da0e      	bge.n	8008b80 <send_cmd+0x32>
		cmd &= 0x7F;
 8008b62:	79fb      	ldrb	r3, [r7, #7]
 8008b64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b68:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	2037      	movs	r0, #55	@ 0x37
 8008b6e:	f7ff ffee 	bl	8008b4e <send_cmd>
 8008b72:	4603      	mov	r3, r0
 8008b74:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d901      	bls.n	8008b80 <send_cmd+0x32>
 8008b7c:	7bbb      	ldrb	r3, [r7, #14]
 8008b7e:	e051      	b.n	8008c24 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	2b0c      	cmp	r3, #12
 8008b84:	d008      	beq.n	8008b98 <send_cmd+0x4a>
		despiselect();
 8008b86:	f7ff ff5b 	bl	8008a40 <despiselect>
		if (!spiselect()) return 0xFF;
 8008b8a:	f7ff ff69 	bl	8008a60 <spiselect>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <send_cmd+0x4a>
 8008b94:	23ff      	movs	r3, #255	@ 0xff
 8008b96:	e045      	b.n	8008c24 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7ff fee3 	bl	800896c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	0e1b      	lsrs	r3, r3, #24
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff fedd 	bl	800896c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	0c1b      	lsrs	r3, r3, #16
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff fed7 	bl	800896c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	0a1b      	lsrs	r3, r3, #8
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff fed1 	bl	800896c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7ff fecc 	bl	800896c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008bd8:	79fb      	ldrb	r3, [r7, #7]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <send_cmd+0x94>
 8008bde:	2395      	movs	r3, #149	@ 0x95
 8008be0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008be2:	79fb      	ldrb	r3, [r7, #7]
 8008be4:	2b08      	cmp	r3, #8
 8008be6:	d101      	bne.n	8008bec <send_cmd+0x9e>
 8008be8:	2387      	movs	r3, #135	@ 0x87
 8008bea:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff febc 	bl	800896c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008bf4:	79fb      	ldrb	r3, [r7, #7]
 8008bf6:	2b0c      	cmp	r3, #12
 8008bf8:	d102      	bne.n	8008c00 <send_cmd+0xb2>
 8008bfa:	20ff      	movs	r0, #255	@ 0xff
 8008bfc:	f7ff feb6 	bl	800896c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8008c00:	230a      	movs	r3, #10
 8008c02:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8008c04:	20ff      	movs	r0, #255	@ 0xff
 8008c06:	f7ff feb1 	bl	800896c <xchg_spi>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8008c0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	da05      	bge.n	8008c22 <send_cmd+0xd4>
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	73fb      	strb	r3, [r7, #15]
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1f0      	bne.n	8008c04 <send_cmd+0xb6>

	return res;							/* Return received response */
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008c2c:	b590      	push	{r4, r7, lr}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8008c36:	79fb      	ldrb	r3, [r7, #7]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <USER_SPI_initialize+0x14>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e0d6      	b.n	8008dee <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008c40:	4b6d      	ldr	r3, [pc, #436]	@ (8008df8 <USER_SPI_initialize+0x1cc>)
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	f003 0302 	and.w	r3, r3, #2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <USER_SPI_initialize+0x2a>
 8008c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8008df8 <USER_SPI_initialize+0x1cc>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	e0cb      	b.n	8008dee <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8008c56:	4b69      	ldr	r3, [pc, #420]	@ (8008dfc <USER_SPI_initialize+0x1d0>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008c60:	4b66      	ldr	r3, [pc, #408]	@ (8008dfc <USER_SPI_initialize+0x1d0>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f042 0218 	orr.w	r2, r2, #24
 8008c68:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8008c6a:	230a      	movs	r3, #10
 8008c6c:	73fb      	strb	r3, [r7, #15]
 8008c6e:	e005      	b.n	8008c7c <USER_SPI_initialize+0x50>
 8008c70:	20ff      	movs	r0, #255	@ 0xff
 8008c72:	f7ff fe7b 	bl	800896c <xchg_spi>
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	73fb      	strb	r3, [r7, #15]
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1f6      	bne.n	8008c70 <USER_SPI_initialize+0x44>

	ty = 0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8008c86:	2100      	movs	r1, #0
 8008c88:	2000      	movs	r0, #0
 8008c8a:	f7ff ff60 	bl	8008b4e <send_cmd>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	f040 808b 	bne.w	8008dac <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8008c96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008c9a:	f7ff fe3d 	bl	8008918 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8008c9e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8008ca2:	2008      	movs	r0, #8
 8008ca4:	f7ff ff53 	bl	8008b4e <send_cmd>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d151      	bne.n	8008d52 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8008cae:	2300      	movs	r3, #0
 8008cb0:	73fb      	strb	r3, [r7, #15]
 8008cb2:	e00d      	b.n	8008cd0 <USER_SPI_initialize+0xa4>
 8008cb4:	7bfc      	ldrb	r4, [r7, #15]
 8008cb6:	20ff      	movs	r0, #255	@ 0xff
 8008cb8:	f7ff fe58 	bl	800896c <xchg_spi>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f104 0310 	add.w	r3, r4, #16
 8008cc4:	443b      	add	r3, r7
 8008cc6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	73fb      	strb	r3, [r7, #15]
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d9ee      	bls.n	8008cb4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8008cd6:	7abb      	ldrb	r3, [r7, #10]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d167      	bne.n	8008dac <USER_SPI_initialize+0x180>
 8008cdc:	7afb      	ldrb	r3, [r7, #11]
 8008cde:	2baa      	cmp	r3, #170	@ 0xaa
 8008ce0:	d164      	bne.n	8008dac <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8008ce2:	bf00      	nop
 8008ce4:	f7ff fe2c 	bl	8008940 <SPI_Timer_Status>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d007      	beq.n	8008cfe <USER_SPI_initialize+0xd2>
 8008cee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008cf2:	20a9      	movs	r0, #169	@ 0xa9
 8008cf4:	f7ff ff2b 	bl	8008b4e <send_cmd>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1f2      	bne.n	8008ce4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008cfe:	f7ff fe1f 	bl	8008940 <SPI_Timer_Status>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d051      	beq.n	8008dac <USER_SPI_initialize+0x180>
 8008d08:	2100      	movs	r1, #0
 8008d0a:	203a      	movs	r0, #58	@ 0x3a
 8008d0c:	f7ff ff1f 	bl	8008b4e <send_cmd>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d14a      	bne.n	8008dac <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]
 8008d1a:	e00d      	b.n	8008d38 <USER_SPI_initialize+0x10c>
 8008d1c:	7bfc      	ldrb	r4, [r7, #15]
 8008d1e:	20ff      	movs	r0, #255	@ 0xff
 8008d20:	f7ff fe24 	bl	800896c <xchg_spi>
 8008d24:	4603      	mov	r3, r0
 8008d26:	461a      	mov	r2, r3
 8008d28:	f104 0310 	add.w	r3, r4, #16
 8008d2c:	443b      	add	r3, r7
 8008d2e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
 8008d34:	3301      	adds	r3, #1
 8008d36:	73fb      	strb	r3, [r7, #15]
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d9ee      	bls.n	8008d1c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8008d3e:	7a3b      	ldrb	r3, [r7, #8]
 8008d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <USER_SPI_initialize+0x120>
 8008d48:	230c      	movs	r3, #12
 8008d4a:	e000      	b.n	8008d4e <USER_SPI_initialize+0x122>
 8008d4c:	2304      	movs	r3, #4
 8008d4e:	737b      	strb	r3, [r7, #13]
 8008d50:	e02c      	b.n	8008dac <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8008d52:	2100      	movs	r1, #0
 8008d54:	20a9      	movs	r0, #169	@ 0xa9
 8008d56:	f7ff fefa 	bl	8008b4e <send_cmd>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d804      	bhi.n	8008d6a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008d60:	2302      	movs	r3, #2
 8008d62:	737b      	strb	r3, [r7, #13]
 8008d64:	23a9      	movs	r3, #169	@ 0xa9
 8008d66:	73bb      	strb	r3, [r7, #14]
 8008d68:	e003      	b.n	8008d72 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	737b      	strb	r3, [r7, #13]
 8008d6e:	2301      	movs	r3, #1
 8008d70:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008d72:	bf00      	nop
 8008d74:	f7ff fde4 	bl	8008940 <SPI_Timer_Status>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d007      	beq.n	8008d8e <USER_SPI_initialize+0x162>
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	2100      	movs	r1, #0
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7ff fee3 	bl	8008b4e <send_cmd>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1f2      	bne.n	8008d74 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8008d8e:	f7ff fdd7 	bl	8008940 <SPI_Timer_Status>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d007      	beq.n	8008da8 <USER_SPI_initialize+0x17c>
 8008d98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008d9c:	2010      	movs	r0, #16
 8008d9e:	f7ff fed6 	bl	8008b4e <send_cmd>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <USER_SPI_initialize+0x180>
				ty = 0;
 8008da8:	2300      	movs	r3, #0
 8008daa:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8008dac:	4a14      	ldr	r2, [pc, #80]	@ (8008e00 <USER_SPI_initialize+0x1d4>)
 8008dae:	7b7b      	ldrb	r3, [r7, #13]
 8008db0:	7013      	strb	r3, [r2, #0]
	despiselect();
 8008db2:	f7ff fe45 	bl	8008a40 <despiselect>

	if (ty) {			/* OK */
 8008db6:	7b7b      	ldrb	r3, [r7, #13]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d012      	beq.n	8008de2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8008dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8008dfc <USER_SPI_initialize+0x1d0>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008dfc <USER_SPI_initialize+0x1d0>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0210 	orr.w	r2, r2, #16
 8008dce:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8008dd0:	4b09      	ldr	r3, [pc, #36]	@ (8008df8 <USER_SPI_initialize+0x1cc>)
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	f023 0301 	bic.w	r3, r3, #1
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	4b06      	ldr	r3, [pc, #24]	@ (8008df8 <USER_SPI_initialize+0x1cc>)
 8008dde:	701a      	strb	r2, [r3, #0]
 8008de0:	e002      	b.n	8008de8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8008de2:	4b05      	ldr	r3, [pc, #20]	@ (8008df8 <USER_SPI_initialize+0x1cc>)
 8008de4:	2201      	movs	r2, #1
 8008de6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8008de8:	4b03      	ldr	r3, [pc, #12]	@ (8008df8 <USER_SPI_initialize+0x1cc>)
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	b2db      	uxtb	r3, r3
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd90      	pop	{r4, r7, pc}
 8008df6:	bf00      	nop
 8008df8:	200400b8 	.word	0x200400b8
 8008dfc:	20040450 	.word	0x20040450
 8008e00:	2004078c 	.word	0x2004078c

08008e04 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <USER_SPI_status+0x14>
 8008e14:	2301      	movs	r3, #1
 8008e16:	e002      	b.n	8008e1e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8008e18:	4b04      	ldr	r3, [pc, #16]	@ (8008e2c <USER_SPI_status+0x28>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	b2db      	uxtb	r3, r3
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	200400b8 	.word	0x200400b8

08008e30 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60b9      	str	r1, [r7, #8]
 8008e38:	607a      	str	r2, [r7, #4]
 8008e3a:	603b      	str	r3, [r7, #0]
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d102      	bne.n	8008e4c <USER_SPI_read+0x1c>
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <USER_SPI_read+0x20>
 8008e4c:	2304      	movs	r3, #4
 8008e4e:	e04d      	b.n	8008eec <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008e50:	4b28      	ldr	r3, [pc, #160]	@ (8008ef4 <USER_SPI_read+0xc4>)
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <USER_SPI_read+0x32>
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e044      	b.n	8008eec <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8008e62:	4b25      	ldr	r3, [pc, #148]	@ (8008ef8 <USER_SPI_read+0xc8>)
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	f003 0308 	and.w	r3, r3, #8
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d102      	bne.n	8008e74 <USER_SPI_read+0x44>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	025b      	lsls	r3, r3, #9
 8008e72:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d111      	bne.n	8008e9e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	2011      	movs	r0, #17
 8008e7e:	f7ff fe66 	bl	8008b4e <send_cmd>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d129      	bne.n	8008edc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8008e88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008e8c:	68b8      	ldr	r0, [r7, #8]
 8008e8e:	f7ff fe03 	bl	8008a98 <rcvr_datablock>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d021      	beq.n	8008edc <USER_SPI_read+0xac>
			count = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	603b      	str	r3, [r7, #0]
 8008e9c:	e01e      	b.n	8008edc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	2012      	movs	r0, #18
 8008ea2:	f7ff fe54 	bl	8008b4e <send_cmd>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d117      	bne.n	8008edc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8008eac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008eb0:	68b8      	ldr	r0, [r7, #8]
 8008eb2:	f7ff fdf1 	bl	8008a98 <rcvr_datablock>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00a      	beq.n	8008ed2 <USER_SPI_read+0xa2>
				buff += 512;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008ec2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	603b      	str	r3, [r7, #0]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1ed      	bne.n	8008eac <USER_SPI_read+0x7c>
 8008ed0:	e000      	b.n	8008ed4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8008ed2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	200c      	movs	r0, #12
 8008ed8:	f7ff fe39 	bl	8008b4e <send_cmd>
		}
	}
	despiselect();
 8008edc:	f7ff fdb0 	bl	8008a40 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	bf14      	ite	ne
 8008ee6:	2301      	movne	r3, #1
 8008ee8:	2300      	moveq	r3, #0
 8008eea:	b2db      	uxtb	r3, r3
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	200400b8 	.word	0x200400b8
 8008ef8:	2004078c 	.word	0x2004078c

08008efc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	607a      	str	r2, [r7, #4]
 8008f06:	603b      	str	r3, [r7, #0]
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d102      	bne.n	8008f18 <USER_SPI_write+0x1c>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <USER_SPI_write+0x20>
 8008f18:	2304      	movs	r3, #4
 8008f1a:	e063      	b.n	8008fe4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8008f1c:	4b33      	ldr	r3, [pc, #204]	@ (8008fec <USER_SPI_write+0xf0>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <USER_SPI_write+0x32>
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e05a      	b.n	8008fe4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8008f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8008fec <USER_SPI_write+0xf0>)
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	f003 0304 	and.w	r3, r3, #4
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <USER_SPI_write+0x44>
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	e051      	b.n	8008fe4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8008f40:	4b2b      	ldr	r3, [pc, #172]	@ (8008ff0 <USER_SPI_write+0xf4>)
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	f003 0308 	and.w	r3, r3, #8
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d102      	bne.n	8008f52 <USER_SPI_write+0x56>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	025b      	lsls	r3, r3, #9
 8008f50:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d110      	bne.n	8008f7a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008f58:	6879      	ldr	r1, [r7, #4]
 8008f5a:	2018      	movs	r0, #24
 8008f5c:	f7ff fdf7 	bl	8008b4e <send_cmd>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d136      	bne.n	8008fd4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8008f66:	21fe      	movs	r1, #254	@ 0xfe
 8008f68:	68b8      	ldr	r0, [r7, #8]
 8008f6a:	f7ff fdbe 	bl	8008aea <xmit_datablock>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d02f      	beq.n	8008fd4 <USER_SPI_write+0xd8>
			count = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	603b      	str	r3, [r7, #0]
 8008f78:	e02c      	b.n	8008fd4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8008f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8008ff0 <USER_SPI_write+0xf4>)
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	f003 0306 	and.w	r3, r3, #6
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d003      	beq.n	8008f8e <USER_SPI_write+0x92>
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	2097      	movs	r0, #151	@ 0x97
 8008f8a:	f7ff fde0 	bl	8008b4e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	2019      	movs	r0, #25
 8008f92:	f7ff fddc 	bl	8008b4e <send_cmd>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d11b      	bne.n	8008fd4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8008f9c:	21fc      	movs	r1, #252	@ 0xfc
 8008f9e:	68b8      	ldr	r0, [r7, #8]
 8008fa0:	f7ff fda3 	bl	8008aea <xmit_datablock>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <USER_SPI_write+0xc4>
				buff += 512;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008fb0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	603b      	str	r3, [r7, #0]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1ee      	bne.n	8008f9c <USER_SPI_write+0xa0>
 8008fbe:	e000      	b.n	8008fc2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8008fc0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8008fc2:	21fd      	movs	r1, #253	@ 0xfd
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	f7ff fd90 	bl	8008aea <xmit_datablock>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <USER_SPI_write+0xd8>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8008fd4:	f7ff fd34 	bl	8008a40 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	bf14      	ite	ne
 8008fde:	2301      	movne	r3, #1
 8008fe0:	2300      	moveq	r3, #0
 8008fe2:	b2db      	uxtb	r3, r3
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	200400b8 	.word	0x200400b8
 8008ff0:	2004078c 	.word	0x2004078c

08008ff4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b08c      	sub	sp, #48	@ 0x30
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	603a      	str	r2, [r7, #0]
 8008ffe:	71fb      	strb	r3, [r7, #7]
 8009000:	460b      	mov	r3, r1
 8009002:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <USER_SPI_ioctl+0x1a>
 800900a:	2304      	movs	r3, #4
 800900c:	e15a      	b.n	80092c4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800900e:	4baf      	ldr	r3, [pc, #700]	@ (80092cc <USER_SPI_ioctl+0x2d8>)
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	b2db      	uxtb	r3, r3
 8009014:	f003 0301 	and.w	r3, r3, #1
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <USER_SPI_ioctl+0x2c>
 800901c:	2303      	movs	r3, #3
 800901e:	e151      	b.n	80092c4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8009026:	79bb      	ldrb	r3, [r7, #6]
 8009028:	2b04      	cmp	r3, #4
 800902a:	f200 8136 	bhi.w	800929a <USER_SPI_ioctl+0x2a6>
 800902e:	a201      	add	r2, pc, #4	@ (adr r2, 8009034 <USER_SPI_ioctl+0x40>)
 8009030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009034:	08009049 	.word	0x08009049
 8009038:	0800905d 	.word	0x0800905d
 800903c:	0800929b 	.word	0x0800929b
 8009040:	08009109 	.word	0x08009109
 8009044:	080091ff 	.word	0x080091ff
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009048:	f7ff fd0a 	bl	8008a60 <spiselect>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 8127 	beq.w	80092a2 <USER_SPI_ioctl+0x2ae>
 8009054:	2300      	movs	r3, #0
 8009056:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800905a:	e122      	b.n	80092a2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800905c:	2100      	movs	r1, #0
 800905e:	2009      	movs	r0, #9
 8009060:	f7ff fd75 	bl	8008b4e <send_cmd>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	f040 811d 	bne.w	80092a6 <USER_SPI_ioctl+0x2b2>
 800906c:	f107 030c 	add.w	r3, r7, #12
 8009070:	2110      	movs	r1, #16
 8009072:	4618      	mov	r0, r3
 8009074:	f7ff fd10 	bl	8008a98 <rcvr_datablock>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 8113 	beq.w	80092a6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009080:	7b3b      	ldrb	r3, [r7, #12]
 8009082:	099b      	lsrs	r3, r3, #6
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b01      	cmp	r3, #1
 8009088:	d111      	bne.n	80090ae <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800908a:	7d7b      	ldrb	r3, [r7, #21]
 800908c:	461a      	mov	r2, r3
 800908e:	7d3b      	ldrb	r3, [r7, #20]
 8009090:	021b      	lsls	r3, r3, #8
 8009092:	4413      	add	r3, r2
 8009094:	461a      	mov	r2, r3
 8009096:	7cfb      	ldrb	r3, [r7, #19]
 8009098:	041b      	lsls	r3, r3, #16
 800909a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800909e:	4413      	add	r3, r2
 80090a0:	3301      	adds	r3, #1
 80090a2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	029a      	lsls	r2, r3, #10
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	e028      	b.n	8009100 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80090ae:	7c7b      	ldrb	r3, [r7, #17]
 80090b0:	f003 030f 	and.w	r3, r3, #15
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	7dbb      	ldrb	r3, [r7, #22]
 80090b8:	09db      	lsrs	r3, r3, #7
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	4413      	add	r3, r2
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	7d7b      	ldrb	r3, [r7, #21]
 80090c2:	005b      	lsls	r3, r3, #1
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	f003 0306 	and.w	r3, r3, #6
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	4413      	add	r3, r2
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	3302      	adds	r3, #2
 80090d2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80090d6:	7d3b      	ldrb	r3, [r7, #20]
 80090d8:	099b      	lsrs	r3, r3, #6
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	461a      	mov	r2, r3
 80090de:	7cfb      	ldrb	r3, [r7, #19]
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	441a      	add	r2, r3
 80090e4:	7cbb      	ldrb	r3, [r7, #18]
 80090e6:	029b      	lsls	r3, r3, #10
 80090e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80090ec:	4413      	add	r3, r2
 80090ee:	3301      	adds	r3, #1
 80090f0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80090f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80090f6:	3b09      	subs	r3, #9
 80090f8:	69fa      	ldr	r2, [r7, #28]
 80090fa:	409a      	lsls	r2, r3
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8009106:	e0ce      	b.n	80092a6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009108:	4b71      	ldr	r3, [pc, #452]	@ (80092d0 <USER_SPI_ioctl+0x2dc>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	f003 0304 	and.w	r3, r3, #4
 8009110:	2b00      	cmp	r3, #0
 8009112:	d031      	beq.n	8009178 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009114:	2100      	movs	r1, #0
 8009116:	208d      	movs	r0, #141	@ 0x8d
 8009118:	f7ff fd19 	bl	8008b4e <send_cmd>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	f040 80c3 	bne.w	80092aa <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009124:	20ff      	movs	r0, #255	@ 0xff
 8009126:	f7ff fc21 	bl	800896c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800912a:	f107 030c 	add.w	r3, r7, #12
 800912e:	2110      	movs	r1, #16
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff fcb1 	bl	8008a98 <rcvr_datablock>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 80b6 	beq.w	80092aa <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800913e:	2330      	movs	r3, #48	@ 0x30
 8009140:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8009144:	e007      	b.n	8009156 <USER_SPI_ioctl+0x162>
 8009146:	20ff      	movs	r0, #255	@ 0xff
 8009148:	f7ff fc10 	bl	800896c <xchg_spi>
 800914c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009150:	3b01      	subs	r3, #1
 8009152:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8009156:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1f3      	bne.n	8009146 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800915e:	7dbb      	ldrb	r3, [r7, #22]
 8009160:	091b      	lsrs	r3, r3, #4
 8009162:	b2db      	uxtb	r3, r3
 8009164:	461a      	mov	r2, r3
 8009166:	2310      	movs	r3, #16
 8009168:	fa03 f202 	lsl.w	r2, r3, r2
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009176:	e098      	b.n	80092aa <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009178:	2100      	movs	r1, #0
 800917a:	2009      	movs	r0, #9
 800917c:	f7ff fce7 	bl	8008b4e <send_cmd>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	f040 8091 	bne.w	80092aa <USER_SPI_ioctl+0x2b6>
 8009188:	f107 030c 	add.w	r3, r7, #12
 800918c:	2110      	movs	r1, #16
 800918e:	4618      	mov	r0, r3
 8009190:	f7ff fc82 	bl	8008a98 <rcvr_datablock>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 8087 	beq.w	80092aa <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800919c:	4b4c      	ldr	r3, [pc, #304]	@ (80092d0 <USER_SPI_ioctl+0x2dc>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d012      	beq.n	80091ce <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80091a8:	7dbb      	ldrb	r3, [r7, #22]
 80091aa:	005b      	lsls	r3, r3, #1
 80091ac:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80091b0:	7dfa      	ldrb	r2, [r7, #23]
 80091b2:	09d2      	lsrs	r2, r2, #7
 80091b4:	b2d2      	uxtb	r2, r2
 80091b6:	4413      	add	r3, r2
 80091b8:	1c5a      	adds	r2, r3, #1
 80091ba:	7e7b      	ldrb	r3, [r7, #25]
 80091bc:	099b      	lsrs	r3, r3, #6
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	3b01      	subs	r3, #1
 80091c2:	fa02 f303 	lsl.w	r3, r2, r3
 80091c6:	461a      	mov	r2, r3
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	e013      	b.n	80091f6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80091ce:	7dbb      	ldrb	r3, [r7, #22]
 80091d0:	109b      	asrs	r3, r3, #2
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	f003 031f 	and.w	r3, r3, #31
 80091d8:	3301      	adds	r3, #1
 80091da:	7dfa      	ldrb	r2, [r7, #23]
 80091dc:	00d2      	lsls	r2, r2, #3
 80091de:	f002 0218 	and.w	r2, r2, #24
 80091e2:	7df9      	ldrb	r1, [r7, #23]
 80091e4:	0949      	lsrs	r1, r1, #5
 80091e6:	b2c9      	uxtb	r1, r1
 80091e8:	440a      	add	r2, r1
 80091ea:	3201      	adds	r2, #1
 80091ec:	fb02 f303 	mul.w	r3, r2, r3
 80091f0:	461a      	mov	r2, r3
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80091fc:	e055      	b.n	80092aa <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80091fe:	4b34      	ldr	r3, [pc, #208]	@ (80092d0 <USER_SPI_ioctl+0x2dc>)
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	f003 0306 	and.w	r3, r3, #6
 8009206:	2b00      	cmp	r3, #0
 8009208:	d051      	beq.n	80092ae <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800920a:	f107 020c 	add.w	r2, r7, #12
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	210b      	movs	r1, #11
 8009212:	4618      	mov	r0, r3
 8009214:	f7ff feee 	bl	8008ff4 <USER_SPI_ioctl>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d149      	bne.n	80092b2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800921e:	7b3b      	ldrb	r3, [r7, #12]
 8009220:	099b      	lsrs	r3, r3, #6
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b00      	cmp	r3, #0
 8009226:	d104      	bne.n	8009232 <USER_SPI_ioctl+0x23e>
 8009228:	7dbb      	ldrb	r3, [r7, #22]
 800922a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800922e:	2b00      	cmp	r3, #0
 8009230:	d041      	beq.n	80092b6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	623b      	str	r3, [r7, #32]
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8009242:	4b23      	ldr	r3, [pc, #140]	@ (80092d0 <USER_SPI_ioctl+0x2dc>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	f003 0308 	and.w	r3, r3, #8
 800924a:	2b00      	cmp	r3, #0
 800924c:	d105      	bne.n	800925a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800924e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009250:	025b      	lsls	r3, r3, #9
 8009252:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009256:	025b      	lsls	r3, r3, #9
 8009258:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800925a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800925c:	2020      	movs	r0, #32
 800925e:	f7ff fc76 	bl	8008b4e <send_cmd>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d128      	bne.n	80092ba <USER_SPI_ioctl+0x2c6>
 8009268:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800926a:	2021      	movs	r0, #33	@ 0x21
 800926c:	f7ff fc6f 	bl	8008b4e <send_cmd>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d121      	bne.n	80092ba <USER_SPI_ioctl+0x2c6>
 8009276:	2100      	movs	r1, #0
 8009278:	2026      	movs	r0, #38	@ 0x26
 800927a:	f7ff fc68 	bl	8008b4e <send_cmd>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d11a      	bne.n	80092ba <USER_SPI_ioctl+0x2c6>
 8009284:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009288:	f7ff fbb6 	bl	80089f8 <wait_ready>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d013      	beq.n	80092ba <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009292:	2300      	movs	r3, #0
 8009294:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8009298:	e00f      	b.n	80092ba <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800929a:	2304      	movs	r3, #4
 800929c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80092a0:	e00c      	b.n	80092bc <USER_SPI_ioctl+0x2c8>
		break;
 80092a2:	bf00      	nop
 80092a4:	e00a      	b.n	80092bc <USER_SPI_ioctl+0x2c8>
		break;
 80092a6:	bf00      	nop
 80092a8:	e008      	b.n	80092bc <USER_SPI_ioctl+0x2c8>
		break;
 80092aa:	bf00      	nop
 80092ac:	e006      	b.n	80092bc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80092ae:	bf00      	nop
 80092b0:	e004      	b.n	80092bc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80092b2:	bf00      	nop
 80092b4:	e002      	b.n	80092bc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80092b6:	bf00      	nop
 80092b8:	e000      	b.n	80092bc <USER_SPI_ioctl+0x2c8>
		break;
 80092ba:	bf00      	nop
	}

	despiselect();
 80092bc:	f7ff fbc0 	bl	8008a40 <despiselect>

	return res;
 80092c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3730      	adds	r7, #48	@ 0x30
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	200400b8 	.word	0x200400b8
 80092d0:	2004078c 	.word	0x2004078c

080092d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	4603      	mov	r3, r0
 80092dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	4a08      	ldr	r2, [pc, #32]	@ (8009304 <disk_status+0x30>)
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	79fa      	ldrb	r2, [r7, #7]
 80092ec:	4905      	ldr	r1, [pc, #20]	@ (8009304 <disk_status+0x30>)
 80092ee:	440a      	add	r2, r1
 80092f0:	7a12      	ldrb	r2, [r2, #8]
 80092f2:	4610      	mov	r0, r2
 80092f4:	4798      	blx	r3
 80092f6:	4603      	mov	r3, r0
 80092f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	200407c0 	.word	0x200407c0

08009308 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	4603      	mov	r3, r0
 8009310:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009316:	79fb      	ldrb	r3, [r7, #7]
 8009318:	4a0d      	ldr	r2, [pc, #52]	@ (8009350 <disk_initialize+0x48>)
 800931a:	5cd3      	ldrb	r3, [r2, r3]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d111      	bne.n	8009344 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009320:	79fb      	ldrb	r3, [r7, #7]
 8009322:	4a0b      	ldr	r2, [pc, #44]	@ (8009350 <disk_initialize+0x48>)
 8009324:	2101      	movs	r1, #1
 8009326:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009328:	79fb      	ldrb	r3, [r7, #7]
 800932a:	4a09      	ldr	r2, [pc, #36]	@ (8009350 <disk_initialize+0x48>)
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	79fa      	ldrb	r2, [r7, #7]
 8009336:	4906      	ldr	r1, [pc, #24]	@ (8009350 <disk_initialize+0x48>)
 8009338:	440a      	add	r2, r1
 800933a:	7a12      	ldrb	r2, [r2, #8]
 800933c:	4610      	mov	r0, r2
 800933e:	4798      	blx	r3
 8009340:	4603      	mov	r3, r0
 8009342:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009344:	7bfb      	ldrb	r3, [r7, #15]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	200407c0 	.word	0x200407c0

08009354 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009354:	b590      	push	{r4, r7, lr}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	60b9      	str	r1, [r7, #8]
 800935c:	607a      	str	r2, [r7, #4]
 800935e:	603b      	str	r3, [r7, #0]
 8009360:	4603      	mov	r3, r0
 8009362:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	4a0a      	ldr	r2, [pc, #40]	@ (8009390 <disk_read+0x3c>)
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	689c      	ldr	r4, [r3, #8]
 8009370:	7bfb      	ldrb	r3, [r7, #15]
 8009372:	4a07      	ldr	r2, [pc, #28]	@ (8009390 <disk_read+0x3c>)
 8009374:	4413      	add	r3, r2
 8009376:	7a18      	ldrb	r0, [r3, #8]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	68b9      	ldr	r1, [r7, #8]
 800937e:	47a0      	blx	r4
 8009380:	4603      	mov	r3, r0
 8009382:	75fb      	strb	r3, [r7, #23]
  return res;
 8009384:	7dfb      	ldrb	r3, [r7, #23]
}
 8009386:	4618      	mov	r0, r3
 8009388:	371c      	adds	r7, #28
 800938a:	46bd      	mov	sp, r7
 800938c:	bd90      	pop	{r4, r7, pc}
 800938e:	bf00      	nop
 8009390:	200407c0 	.word	0x200407c0

08009394 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009394:	b590      	push	{r4, r7, lr}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	607a      	str	r2, [r7, #4]
 800939e:	603b      	str	r3, [r7, #0]
 80093a0:	4603      	mov	r3, r0
 80093a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
 80093a6:	4a0a      	ldr	r2, [pc, #40]	@ (80093d0 <disk_write+0x3c>)
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	68dc      	ldr	r4, [r3, #12]
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
 80093b2:	4a07      	ldr	r2, [pc, #28]	@ (80093d0 <disk_write+0x3c>)
 80093b4:	4413      	add	r3, r2
 80093b6:	7a18      	ldrb	r0, [r3, #8]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	68b9      	ldr	r1, [r7, #8]
 80093be:	47a0      	blx	r4
 80093c0:	4603      	mov	r3, r0
 80093c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80093c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	371c      	adds	r7, #28
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd90      	pop	{r4, r7, pc}
 80093ce:	bf00      	nop
 80093d0:	200407c0 	.word	0x200407c0

080093d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	603a      	str	r2, [r7, #0]
 80093de:	71fb      	strb	r3, [r7, #7]
 80093e0:	460b      	mov	r3, r1
 80093e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	4a09      	ldr	r2, [pc, #36]	@ (800940c <disk_ioctl+0x38>)
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	79fa      	ldrb	r2, [r7, #7]
 80093f2:	4906      	ldr	r1, [pc, #24]	@ (800940c <disk_ioctl+0x38>)
 80093f4:	440a      	add	r2, r1
 80093f6:	7a10      	ldrb	r0, [r2, #8]
 80093f8:	79b9      	ldrb	r1, [r7, #6]
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	4798      	blx	r3
 80093fe:	4603      	mov	r3, r0
 8009400:	73fb      	strb	r3, [r7, #15]
  return res;
 8009402:	7bfb      	ldrb	r3, [r7, #15]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	200407c0 	.word	0x200407c0

08009410 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	3301      	adds	r3, #1
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009420:	89fb      	ldrh	r3, [r7, #14]
 8009422:	021b      	lsls	r3, r3, #8
 8009424:	b21a      	sxth	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	b21b      	sxth	r3, r3
 800942c:	4313      	orrs	r3, r2
 800942e:	b21b      	sxth	r3, r3
 8009430:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009432:	89fb      	ldrh	r3, [r7, #14]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3303      	adds	r3, #3
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	021b      	lsls	r3, r3, #8
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	3202      	adds	r2, #2
 8009458:	7812      	ldrb	r2, [r2, #0]
 800945a:	4313      	orrs	r3, r2
 800945c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	021b      	lsls	r3, r3, #8
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	3201      	adds	r2, #1
 8009466:	7812      	ldrb	r2, [r2, #0]
 8009468:	4313      	orrs	r3, r2
 800946a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	021b      	lsls	r3, r3, #8
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	7812      	ldrb	r2, [r2, #0]
 8009474:	4313      	orrs	r3, r2
 8009476:	60fb      	str	r3, [r7, #12]
	return rv;
 8009478:	68fb      	ldr	r3, [r7, #12]
}
 800947a:	4618      	mov	r0, r3
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009486:	b480      	push	{r7}
 8009488:	b083      	sub	sp, #12
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	460b      	mov	r3, r1
 8009490:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	1c5a      	adds	r2, r3, #1
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	887a      	ldrh	r2, [r7, #2]
 800949a:	b2d2      	uxtb	r2, r2
 800949c:	701a      	strb	r2, [r3, #0]
 800949e:	887b      	ldrh	r3, [r7, #2]
 80094a0:	0a1b      	lsrs	r3, r3, #8
 80094a2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	607a      	str	r2, [r7, #4]
 80094aa:	887a      	ldrh	r2, [r7, #2]
 80094ac:	b2d2      	uxtb	r2, r2
 80094ae:	701a      	strb	r2, [r3, #0]
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	1c5a      	adds	r2, r3, #1
 80094ca:	607a      	str	r2, [r7, #4]
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	b2d2      	uxtb	r2, r2
 80094d0:	701a      	strb	r2, [r3, #0]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	0a1b      	lsrs	r3, r3, #8
 80094d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	607a      	str	r2, [r7, #4]
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	b2d2      	uxtb	r2, r2
 80094e2:	701a      	strb	r2, [r3, #0]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	0a1b      	lsrs	r3, r3, #8
 80094e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	607a      	str	r2, [r7, #4]
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	b2d2      	uxtb	r2, r2
 80094f4:	701a      	strb	r2, [r3, #0]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	0a1b      	lsrs	r3, r3, #8
 80094fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	607a      	str	r2, [r7, #4]
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	b2d2      	uxtb	r2, r2
 8009506:	701a      	strb	r2, [r3, #0]
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00d      	beq.n	800954a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	1c53      	adds	r3, r2, #1
 8009532:	613b      	str	r3, [r7, #16]
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	1c59      	adds	r1, r3, #1
 8009538:	6179      	str	r1, [r7, #20]
 800953a:	7812      	ldrb	r2, [r2, #0]
 800953c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	3b01      	subs	r3, #1
 8009542:	607b      	str	r3, [r7, #4]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1f1      	bne.n	800952e <mem_cpy+0x1a>
	}
}
 800954a:	bf00      	nop
 800954c:	371c      	adds	r7, #28
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009556:	b480      	push	{r7}
 8009558:	b087      	sub	sp, #28
 800955a:	af00      	add	r7, sp, #0
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	60b9      	str	r1, [r7, #8]
 8009560:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	1c5a      	adds	r2, r3, #1
 800956a:	617a      	str	r2, [r7, #20]
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	b2d2      	uxtb	r2, r2
 8009570:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	3b01      	subs	r3, #1
 8009576:	607b      	str	r3, [r7, #4]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1f3      	bne.n	8009566 <mem_set+0x10>
}
 800957e:	bf00      	nop
 8009580:	bf00      	nop
 8009582:	371c      	adds	r7, #28
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800958c:	b480      	push	{r7}
 800958e:	b089      	sub	sp, #36	@ 0x24
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	61fb      	str	r3, [r7, #28]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80095a0:	2300      	movs	r3, #0
 80095a2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	1c5a      	adds	r2, r3, #1
 80095a8:	61fa      	str	r2, [r7, #28]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	4619      	mov	r1, r3
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	1c5a      	adds	r2, r3, #1
 80095b2:	61ba      	str	r2, [r7, #24]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	1acb      	subs	r3, r1, r3
 80095b8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	3b01      	subs	r3, #1
 80095be:	607b      	str	r3, [r7, #4]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <mem_cmp+0x40>
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d0eb      	beq.n	80095a4 <mem_cmp+0x18>

	return r;
 80095cc:	697b      	ldr	r3, [r7, #20]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3724      	adds	r7, #36	@ 0x24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80095e4:	e002      	b.n	80095ec <chk_chr+0x12>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3301      	adds	r3, #1
 80095ea:	607b      	str	r3, [r7, #4]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d005      	beq.n	8009600 <chk_chr+0x26>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	461a      	mov	r2, r3
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d1f2      	bne.n	80095e6 <chk_chr+0xc>
	return *str;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	781b      	ldrb	r3, [r3, #0]
}
 8009604:	4618      	mov	r0, r3
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800961a:	2300      	movs	r3, #0
 800961c:	60bb      	str	r3, [r7, #8]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	60fb      	str	r3, [r7, #12]
 8009622:	e029      	b.n	8009678 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009624:	4a27      	ldr	r2, [pc, #156]	@ (80096c4 <chk_lock+0xb4>)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	011b      	lsls	r3, r3, #4
 800962a:	4413      	add	r3, r2
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d01d      	beq.n	800966e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009632:	4a24      	ldr	r2, [pc, #144]	@ (80096c4 <chk_lock+0xb4>)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	011b      	lsls	r3, r3, #4
 8009638:	4413      	add	r3, r2
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	429a      	cmp	r2, r3
 8009642:	d116      	bne.n	8009672 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009644:	4a1f      	ldr	r2, [pc, #124]	@ (80096c4 <chk_lock+0xb4>)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	4413      	add	r3, r2
 800964c:	3304      	adds	r3, #4
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009654:	429a      	cmp	r2, r3
 8009656:	d10c      	bne.n	8009672 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009658:	4a1a      	ldr	r2, [pc, #104]	@ (80096c4 <chk_lock+0xb4>)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	011b      	lsls	r3, r3, #4
 800965e:	4413      	add	r3, r2
 8009660:	3308      	adds	r3, #8
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009668:	429a      	cmp	r2, r3
 800966a:	d102      	bne.n	8009672 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800966c:	e007      	b.n	800967e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800966e:	2301      	movs	r3, #1
 8009670:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	3301      	adds	r3, #1
 8009676:	60fb      	str	r3, [r7, #12]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d9d2      	bls.n	8009624 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b02      	cmp	r3, #2
 8009682:	d109      	bne.n	8009698 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d102      	bne.n	8009690 <chk_lock+0x80>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2b02      	cmp	r3, #2
 800968e:	d101      	bne.n	8009694 <chk_lock+0x84>
 8009690:	2300      	movs	r3, #0
 8009692:	e010      	b.n	80096b6 <chk_lock+0xa6>
 8009694:	2312      	movs	r3, #18
 8009696:	e00e      	b.n	80096b6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d108      	bne.n	80096b0 <chk_lock+0xa0>
 800969e:	4a09      	ldr	r2, [pc, #36]	@ (80096c4 <chk_lock+0xb4>)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	011b      	lsls	r3, r3, #4
 80096a4:	4413      	add	r3, r2
 80096a6:	330c      	adds	r3, #12
 80096a8:	881b      	ldrh	r3, [r3, #0]
 80096aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096ae:	d101      	bne.n	80096b4 <chk_lock+0xa4>
 80096b0:	2310      	movs	r3, #16
 80096b2:	e000      	b.n	80096b6 <chk_lock+0xa6>
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	200407a0 	.word	0x200407a0

080096c8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80096ce:	2300      	movs	r3, #0
 80096d0:	607b      	str	r3, [r7, #4]
 80096d2:	e002      	b.n	80096da <enq_lock+0x12>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3301      	adds	r3, #1
 80096d8:	607b      	str	r3, [r7, #4]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d806      	bhi.n	80096ee <enq_lock+0x26>
 80096e0:	4a09      	ldr	r2, [pc, #36]	@ (8009708 <enq_lock+0x40>)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	011b      	lsls	r3, r3, #4
 80096e6:	4413      	add	r3, r2
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1f2      	bne.n	80096d4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	bf14      	ite	ne
 80096f4:	2301      	movne	r3, #1
 80096f6:	2300      	moveq	r3, #0
 80096f8:	b2db      	uxtb	r3, r3
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	200407a0 	.word	0x200407a0

0800970c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009716:	2300      	movs	r3, #0
 8009718:	60fb      	str	r3, [r7, #12]
 800971a:	e01f      	b.n	800975c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800971c:	4a41      	ldr	r2, [pc, #260]	@ (8009824 <inc_lock+0x118>)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	011b      	lsls	r3, r3, #4
 8009722:	4413      	add	r3, r2
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	429a      	cmp	r2, r3
 800972c:	d113      	bne.n	8009756 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800972e:	4a3d      	ldr	r2, [pc, #244]	@ (8009824 <inc_lock+0x118>)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	011b      	lsls	r3, r3, #4
 8009734:	4413      	add	r3, r2
 8009736:	3304      	adds	r3, #4
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800973e:	429a      	cmp	r2, r3
 8009740:	d109      	bne.n	8009756 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009742:	4a38      	ldr	r2, [pc, #224]	@ (8009824 <inc_lock+0x118>)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	011b      	lsls	r3, r3, #4
 8009748:	4413      	add	r3, r2
 800974a:	3308      	adds	r3, #8
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009752:	429a      	cmp	r2, r3
 8009754:	d006      	beq.n	8009764 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	3301      	adds	r3, #1
 800975a:	60fb      	str	r3, [r7, #12]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2b01      	cmp	r3, #1
 8009760:	d9dc      	bls.n	800971c <inc_lock+0x10>
 8009762:	e000      	b.n	8009766 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009764:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d132      	bne.n	80097d2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800976c:	2300      	movs	r3, #0
 800976e:	60fb      	str	r3, [r7, #12]
 8009770:	e002      	b.n	8009778 <inc_lock+0x6c>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	3301      	adds	r3, #1
 8009776:	60fb      	str	r3, [r7, #12]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d806      	bhi.n	800978c <inc_lock+0x80>
 800977e:	4a29      	ldr	r2, [pc, #164]	@ (8009824 <inc_lock+0x118>)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	011b      	lsls	r3, r3, #4
 8009784:	4413      	add	r3, r2
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1f2      	bne.n	8009772 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2b02      	cmp	r3, #2
 8009790:	d101      	bne.n	8009796 <inc_lock+0x8a>
 8009792:	2300      	movs	r3, #0
 8009794:	e040      	b.n	8009818 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	4922      	ldr	r1, [pc, #136]	@ (8009824 <inc_lock+0x118>)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	011b      	lsls	r3, r3, #4
 80097a0:	440b      	add	r3, r1
 80097a2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689a      	ldr	r2, [r3, #8]
 80097a8:	491e      	ldr	r1, [pc, #120]	@ (8009824 <inc_lock+0x118>)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	011b      	lsls	r3, r3, #4
 80097ae:	440b      	add	r3, r1
 80097b0:	3304      	adds	r3, #4
 80097b2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	695a      	ldr	r2, [r3, #20]
 80097b8:	491a      	ldr	r1, [pc, #104]	@ (8009824 <inc_lock+0x118>)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	011b      	lsls	r3, r3, #4
 80097be:	440b      	add	r3, r1
 80097c0:	3308      	adds	r3, #8
 80097c2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80097c4:	4a17      	ldr	r2, [pc, #92]	@ (8009824 <inc_lock+0x118>)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	011b      	lsls	r3, r3, #4
 80097ca:	4413      	add	r3, r2
 80097cc:	330c      	adds	r3, #12
 80097ce:	2200      	movs	r2, #0
 80097d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d009      	beq.n	80097ec <inc_lock+0xe0>
 80097d8:	4a12      	ldr	r2, [pc, #72]	@ (8009824 <inc_lock+0x118>)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	011b      	lsls	r3, r3, #4
 80097de:	4413      	add	r3, r2
 80097e0:	330c      	adds	r3, #12
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <inc_lock+0xe0>
 80097e8:	2300      	movs	r3, #0
 80097ea:	e015      	b.n	8009818 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d108      	bne.n	8009804 <inc_lock+0xf8>
 80097f2:	4a0c      	ldr	r2, [pc, #48]	@ (8009824 <inc_lock+0x118>)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	011b      	lsls	r3, r3, #4
 80097f8:	4413      	add	r3, r2
 80097fa:	330c      	adds	r3, #12
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	3301      	adds	r3, #1
 8009800:	b29a      	uxth	r2, r3
 8009802:	e001      	b.n	8009808 <inc_lock+0xfc>
 8009804:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009808:	4906      	ldr	r1, [pc, #24]	@ (8009824 <inc_lock+0x118>)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	011b      	lsls	r3, r3, #4
 800980e:	440b      	add	r3, r1
 8009810:	330c      	adds	r3, #12
 8009812:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	3301      	adds	r3, #1
}
 8009818:	4618      	mov	r0, r3
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	200407a0 	.word	0x200407a0

08009828 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3b01      	subs	r3, #1
 8009834:	607b      	str	r3, [r7, #4]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d825      	bhi.n	8009888 <dec_lock+0x60>
		n = Files[i].ctr;
 800983c:	4a17      	ldr	r2, [pc, #92]	@ (800989c <dec_lock+0x74>)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	011b      	lsls	r3, r3, #4
 8009842:	4413      	add	r3, r2
 8009844:	330c      	adds	r3, #12
 8009846:	881b      	ldrh	r3, [r3, #0]
 8009848:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800984a:	89fb      	ldrh	r3, [r7, #14]
 800984c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009850:	d101      	bne.n	8009856 <dec_lock+0x2e>
 8009852:	2300      	movs	r3, #0
 8009854:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009856:	89fb      	ldrh	r3, [r7, #14]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d002      	beq.n	8009862 <dec_lock+0x3a>
 800985c:	89fb      	ldrh	r3, [r7, #14]
 800985e:	3b01      	subs	r3, #1
 8009860:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009862:	4a0e      	ldr	r2, [pc, #56]	@ (800989c <dec_lock+0x74>)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	011b      	lsls	r3, r3, #4
 8009868:	4413      	add	r3, r2
 800986a:	330c      	adds	r3, #12
 800986c:	89fa      	ldrh	r2, [r7, #14]
 800986e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009870:	89fb      	ldrh	r3, [r7, #14]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d105      	bne.n	8009882 <dec_lock+0x5a>
 8009876:	4a09      	ldr	r2, [pc, #36]	@ (800989c <dec_lock+0x74>)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	011b      	lsls	r3, r3, #4
 800987c:	4413      	add	r3, r2
 800987e:	2200      	movs	r2, #0
 8009880:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	737b      	strb	r3, [r7, #13]
 8009886:	e001      	b.n	800988c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009888:	2302      	movs	r3, #2
 800988a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800988c:	7b7b      	ldrb	r3, [r7, #13]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	200407a0 	.word	0x200407a0

080098a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80098a8:	2300      	movs	r3, #0
 80098aa:	60fb      	str	r3, [r7, #12]
 80098ac:	e010      	b.n	80098d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80098ae:	4a0d      	ldr	r2, [pc, #52]	@ (80098e4 <clear_lock+0x44>)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	011b      	lsls	r3, r3, #4
 80098b4:	4413      	add	r3, r2
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d105      	bne.n	80098ca <clear_lock+0x2a>
 80098be:	4a09      	ldr	r2, [pc, #36]	@ (80098e4 <clear_lock+0x44>)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	011b      	lsls	r3, r3, #4
 80098c4:	4413      	add	r3, r2
 80098c6:	2200      	movs	r2, #0
 80098c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3301      	adds	r3, #1
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d9eb      	bls.n	80098ae <clear_lock+0xe>
	}
}
 80098d6:	bf00      	nop
 80098d8:	bf00      	nop
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	200407a0 	.word	0x200407a0

080098e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	78db      	ldrb	r3, [r3, #3]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d034      	beq.n	8009966 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009900:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	7858      	ldrb	r0, [r3, #1]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800990c:	2301      	movs	r3, #1
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	f7ff fd40 	bl	8009394 <disk_write>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d002      	beq.n	8009920 <sync_window+0x38>
			res = FR_DISK_ERR;
 800991a:	2301      	movs	r3, #1
 800991c:	73fb      	strb	r3, [r7, #15]
 800991e:	e022      	b.n	8009966 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	1ad2      	subs	r2, r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	429a      	cmp	r2, r3
 8009934:	d217      	bcs.n	8009966 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	789b      	ldrb	r3, [r3, #2]
 800993a:	613b      	str	r3, [r7, #16]
 800993c:	e010      	b.n	8009960 <sync_window+0x78>
					wsect += fs->fsize;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	4413      	add	r3, r2
 8009946:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	7858      	ldrb	r0, [r3, #1]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009952:	2301      	movs	r3, #1
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	f7ff fd1d 	bl	8009394 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	3b01      	subs	r3, #1
 800995e:	613b      	str	r3, [r7, #16]
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d8eb      	bhi.n	800993e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009966:	7bfb      	ldrb	r3, [r7, #15]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3718      	adds	r7, #24
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800997a:	2300      	movs	r3, #0
 800997c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	429a      	cmp	r2, r3
 8009986:	d01b      	beq.n	80099c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7ff ffad 	bl	80098e8 <sync_window>
 800998e:	4603      	mov	r3, r0
 8009990:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009992:	7bfb      	ldrb	r3, [r7, #15]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d113      	bne.n	80099c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	7858      	ldrb	r0, [r3, #1]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80099a2:	2301      	movs	r3, #1
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	f7ff fcd5 	bl	8009354 <disk_read>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d004      	beq.n	80099ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80099b0:	f04f 33ff 	mov.w	r3, #4294967295
 80099b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
	...

080099cc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7ff ff87 	bl	80098e8 <sync_window>
 80099da:	4603      	mov	r3, r0
 80099dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80099de:	7bfb      	ldrb	r3, [r7, #15]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d158      	bne.n	8009a96 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	2b03      	cmp	r3, #3
 80099ea:	d148      	bne.n	8009a7e <sync_fs+0xb2>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	791b      	ldrb	r3, [r3, #4]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d144      	bne.n	8009a7e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	3330      	adds	r3, #48	@ 0x30
 80099f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099fc:	2100      	movs	r1, #0
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7ff fda9 	bl	8009556 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	3330      	adds	r3, #48	@ 0x30
 8009a08:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009a0c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7ff fd38 	bl	8009486 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	3330      	adds	r3, #48	@ 0x30
 8009a1a:	4921      	ldr	r1, [pc, #132]	@ (8009aa0 <sync_fs+0xd4>)
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7ff fd4d 	bl	80094bc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3330      	adds	r3, #48	@ 0x30
 8009a26:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a2a:	491e      	ldr	r1, [pc, #120]	@ (8009aa4 <sync_fs+0xd8>)
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7ff fd45 	bl	80094bc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	3330      	adds	r3, #48	@ 0x30
 8009a36:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	4610      	mov	r0, r2
 8009a42:	f7ff fd3b 	bl	80094bc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	3330      	adds	r3, #48	@ 0x30
 8009a4a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	4619      	mov	r1, r3
 8009a54:	4610      	mov	r0, r2
 8009a56:	f7ff fd31 	bl	80094bc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	7858      	ldrb	r0, [r3, #1]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a72:	2301      	movs	r3, #1
 8009a74:	f7ff fc8e 	bl	8009394 <disk_write>
			fs->fsi_flag = 0;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	785b      	ldrb	r3, [r3, #1]
 8009a82:	2200      	movs	r2, #0
 8009a84:	2100      	movs	r1, #0
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff fca4 	bl	80093d4 <disk_ioctl>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <sync_fs+0xca>
 8009a92:	2301      	movs	r3, #1
 8009a94:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	41615252 	.word	0x41615252
 8009aa4:	61417272 	.word	0x61417272

08009aa8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	3b02      	subs	r3, #2
 8009ab6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	3b02      	subs	r3, #2
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d301      	bcc.n	8009ac8 <clust2sect+0x20>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	e008      	b.n	8009ada <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	895b      	ldrh	r3, [r3, #10]
 8009acc:	461a      	mov	r2, r3
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	fb03 f202 	mul.w	r2, r3, r2
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad8:	4413      	add	r3, r2
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b086      	sub	sp, #24
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d904      	bls.n	8009b06 <get_fat+0x20>
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d302      	bcc.n	8009b0c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009b06:	2301      	movs	r3, #1
 8009b08:	617b      	str	r3, [r7, #20]
 8009b0a:	e08e      	b.n	8009c2a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b10:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	2b03      	cmp	r3, #3
 8009b18:	d061      	beq.n	8009bde <get_fat+0xf8>
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	dc7b      	bgt.n	8009c16 <get_fat+0x130>
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d002      	beq.n	8009b28 <get_fat+0x42>
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d041      	beq.n	8009baa <get_fat+0xc4>
 8009b26:	e076      	b.n	8009c16 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	085b      	lsrs	r3, r3, #1
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	4413      	add	r3, r2
 8009b34:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	6a1a      	ldr	r2, [r3, #32]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	0a5b      	lsrs	r3, r3, #9
 8009b3e:	4413      	add	r3, r2
 8009b40:	4619      	mov	r1, r3
 8009b42:	6938      	ldr	r0, [r7, #16]
 8009b44:	f7ff ff14 	bl	8009970 <move_window>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d166      	bne.n	8009c1c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	1c5a      	adds	r2, r3, #1
 8009b52:	60fa      	str	r2, [r7, #12]
 8009b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009b60:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	6a1a      	ldr	r2, [r3, #32]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	0a5b      	lsrs	r3, r3, #9
 8009b6a:	4413      	add	r3, r2
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6938      	ldr	r0, [r7, #16]
 8009b70:	f7ff fefe 	bl	8009970 <move_window>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d152      	bne.n	8009c20 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b80:	693a      	ldr	r2, [r7, #16]
 8009b82:	4413      	add	r3, r2
 8009b84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009b88:	021b      	lsls	r3, r3, #8
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d002      	beq.n	8009ba0 <get_fat+0xba>
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	091b      	lsrs	r3, r3, #4
 8009b9e:	e002      	b.n	8009ba6 <get_fat+0xc0>
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ba6:	617b      	str	r3, [r7, #20]
			break;
 8009ba8:	e03f      	b.n	8009c2a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	6a1a      	ldr	r2, [r3, #32]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	0a1b      	lsrs	r3, r3, #8
 8009bb2:	4413      	add	r3, r2
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6938      	ldr	r0, [r7, #16]
 8009bb8:	f7ff feda 	bl	8009970 <move_window>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d130      	bne.n	8009c24 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009bd0:	4413      	add	r3, r2
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7ff fc1c 	bl	8009410 <ld_word>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	617b      	str	r3, [r7, #20]
			break;
 8009bdc:	e025      	b.n	8009c2a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	6a1a      	ldr	r2, [r3, #32]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	09db      	lsrs	r3, r3, #7
 8009be6:	4413      	add	r3, r2
 8009be8:	4619      	mov	r1, r3
 8009bea:	6938      	ldr	r0, [r7, #16]
 8009bec:	f7ff fec0 	bl	8009970 <move_window>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d118      	bne.n	8009c28 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009c04:	4413      	add	r3, r2
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7ff fc1a 	bl	8009440 <ld_dword>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009c12:	617b      	str	r3, [r7, #20]
			break;
 8009c14:	e009      	b.n	8009c2a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009c16:	2301      	movs	r3, #1
 8009c18:	617b      	str	r3, [r7, #20]
 8009c1a:	e006      	b.n	8009c2a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c1c:	bf00      	nop
 8009c1e:	e004      	b.n	8009c2a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c20:	bf00      	nop
 8009c22:	e002      	b.n	8009c2a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009c24:	bf00      	nop
 8009c26:	e000      	b.n	8009c2a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009c28:	bf00      	nop
		}
	}

	return val;
 8009c2a:	697b      	ldr	r3, [r7, #20]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3718      	adds	r7, #24
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009c34:	b590      	push	{r4, r7, lr}
 8009c36:	b089      	sub	sp, #36	@ 0x24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009c40:	2302      	movs	r3, #2
 8009c42:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	f240 80d9 	bls.w	8009dfe <put_fat+0x1ca>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	f080 80d3 	bcs.w	8009dfe <put_fat+0x1ca>
		switch (fs->fs_type) {
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	f000 8096 	beq.w	8009d8e <put_fat+0x15a>
 8009c62:	2b03      	cmp	r3, #3
 8009c64:	f300 80cb 	bgt.w	8009dfe <put_fat+0x1ca>
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d002      	beq.n	8009c72 <put_fat+0x3e>
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d06e      	beq.n	8009d4e <put_fat+0x11a>
 8009c70:	e0c5      	b.n	8009dfe <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	61bb      	str	r3, [r7, #24]
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	085b      	lsrs	r3, r3, #1
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6a1a      	ldr	r2, [r3, #32]
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	0a5b      	lsrs	r3, r3, #9
 8009c88:	4413      	add	r3, r2
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f7ff fe6f 	bl	8009970 <move_window>
 8009c92:	4603      	mov	r3, r0
 8009c94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009c96:	7ffb      	ldrb	r3, [r7, #31]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f040 80a9 	bne.w	8009df0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	1c59      	adds	r1, r3, #1
 8009ca8:	61b9      	str	r1, [r7, #24]
 8009caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cae:	4413      	add	r3, r2
 8009cb0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f003 0301 	and.w	r3, r3, #1
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00d      	beq.n	8009cd8 <put_fat+0xa4>
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	b25b      	sxtb	r3, r3
 8009cc2:	f003 030f 	and.w	r3, r3, #15
 8009cc6:	b25a      	sxtb	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	011b      	lsls	r3, r3, #4
 8009cce:	b25b      	sxtb	r3, r3
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	b25b      	sxtb	r3, r3
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	e001      	b.n	8009cdc <put_fat+0xa8>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6a1a      	ldr	r2, [r3, #32]
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	0a5b      	lsrs	r3, r3, #9
 8009cee:	4413      	add	r3, r2
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f7ff fe3c 	bl	8009970 <move_window>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009cfc:	7ffb      	ldrb	r3, [r7, #31]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d178      	bne.n	8009df4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d0e:	4413      	add	r3, r2
 8009d10:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d003      	beq.n	8009d24 <put_fat+0xf0>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	091b      	lsrs	r3, r3, #4
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	e00e      	b.n	8009d42 <put_fat+0x10e>
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	b25b      	sxtb	r3, r3
 8009d2a:	f023 030f 	bic.w	r3, r3, #15
 8009d2e:	b25a      	sxtb	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	0a1b      	lsrs	r3, r3, #8
 8009d34:	b25b      	sxtb	r3, r3
 8009d36:	f003 030f 	and.w	r3, r3, #15
 8009d3a:	b25b      	sxtb	r3, r3
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	b25b      	sxtb	r3, r3
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	70da      	strb	r2, [r3, #3]
			break;
 8009d4c:	e057      	b.n	8009dfe <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6a1a      	ldr	r2, [r3, #32]
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	0a1b      	lsrs	r3, r3, #8
 8009d56:	4413      	add	r3, r2
 8009d58:	4619      	mov	r1, r3
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f7ff fe08 	bl	8009970 <move_window>
 8009d60:	4603      	mov	r3, r0
 8009d62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009d64:	7ffb      	ldrb	r3, [r7, #31]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d146      	bne.n	8009df8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	005b      	lsls	r3, r3, #1
 8009d74:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009d78:	4413      	add	r3, r2
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	b292      	uxth	r2, r2
 8009d7e:	4611      	mov	r1, r2
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff fb80 	bl	8009486 <st_word>
			fs->wflag = 1;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	70da      	strb	r2, [r3, #3]
			break;
 8009d8c:	e037      	b.n	8009dfe <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6a1a      	ldr	r2, [r3, #32]
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	09db      	lsrs	r3, r3, #7
 8009d96:	4413      	add	r3, r2
 8009d98:	4619      	mov	r1, r3
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f7ff fde8 	bl	8009970 <move_window>
 8009da0:	4603      	mov	r3, r0
 8009da2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009da4:	7ffb      	ldrb	r3, [r7, #31]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d128      	bne.n	8009dfc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009dbe:	4413      	add	r3, r2
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff fb3d 	bl	8009440 <ld_dword>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009dcc:	4323      	orrs	r3, r4
 8009dce:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009dde:	4413      	add	r3, r2
 8009de0:	6879      	ldr	r1, [r7, #4]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7ff fb6a 	bl	80094bc <st_dword>
			fs->wflag = 1;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2201      	movs	r2, #1
 8009dec:	70da      	strb	r2, [r3, #3]
			break;
 8009dee:	e006      	b.n	8009dfe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009df0:	bf00      	nop
 8009df2:	e004      	b.n	8009dfe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009df4:	bf00      	nop
 8009df6:	e002      	b.n	8009dfe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009df8:	bf00      	nop
 8009dfa:	e000      	b.n	8009dfe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009dfc:	bf00      	nop
		}
	}
	return res;
 8009dfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3724      	adds	r7, #36	@ 0x24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd90      	pop	{r4, r7, pc}

08009e08 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b088      	sub	sp, #32
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d904      	bls.n	8009e2e <remove_chain+0x26>
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	695b      	ldr	r3, [r3, #20]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d301      	bcc.n	8009e32 <remove_chain+0x2a>
 8009e2e:	2302      	movs	r3, #2
 8009e30:	e04b      	b.n	8009eca <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00c      	beq.n	8009e52 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009e38:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3c:	6879      	ldr	r1, [r7, #4]
 8009e3e:	69b8      	ldr	r0, [r7, #24]
 8009e40:	f7ff fef8 	bl	8009c34 <put_fat>
 8009e44:	4603      	mov	r3, r0
 8009e46:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009e48:	7ffb      	ldrb	r3, [r7, #31]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <remove_chain+0x4a>
 8009e4e:	7ffb      	ldrb	r3, [r7, #31]
 8009e50:	e03b      	b.n	8009eca <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009e52:	68b9      	ldr	r1, [r7, #8]
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f7ff fe46 	bl	8009ae6 <get_fat>
 8009e5a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d031      	beq.n	8009ec6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d101      	bne.n	8009e6c <remove_chain+0x64>
 8009e68:	2302      	movs	r3, #2
 8009e6a:	e02e      	b.n	8009eca <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e72:	d101      	bne.n	8009e78 <remove_chain+0x70>
 8009e74:	2301      	movs	r3, #1
 8009e76:	e028      	b.n	8009eca <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009e78:	2200      	movs	r2, #0
 8009e7a:	68b9      	ldr	r1, [r7, #8]
 8009e7c:	69b8      	ldr	r0, [r7, #24]
 8009e7e:	f7ff fed9 	bl	8009c34 <put_fat>
 8009e82:	4603      	mov	r3, r0
 8009e84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009e86:	7ffb      	ldrb	r3, [r7, #31]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <remove_chain+0x88>
 8009e8c:	7ffb      	ldrb	r3, [r7, #31]
 8009e8e:	e01c      	b.n	8009eca <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	691a      	ldr	r2, [r3, #16]
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	3b02      	subs	r3, #2
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d20b      	bcs.n	8009eb6 <remove_chain+0xae>
			fs->free_clst++;
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	1c5a      	adds	r2, r3, #1
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	791b      	ldrb	r3, [r3, #4]
 8009eac:	f043 0301 	orr.w	r3, r3, #1
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d3c6      	bcc.n	8009e52 <remove_chain+0x4a>
 8009ec4:	e000      	b.n	8009ec8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009ec6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3720      	adds	r7, #32
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b088      	sub	sp, #32
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10d      	bne.n	8009f04 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d004      	beq.n	8009efe <create_chain+0x2c>
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	69ba      	ldr	r2, [r7, #24]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d31b      	bcc.n	8009f36 <create_chain+0x64>
 8009efe:	2301      	movs	r3, #1
 8009f00:	61bb      	str	r3, [r7, #24]
 8009f02:	e018      	b.n	8009f36 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f7ff fded 	bl	8009ae6 <get_fat>
 8009f0c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d801      	bhi.n	8009f18 <create_chain+0x46>
 8009f14:	2301      	movs	r3, #1
 8009f16:	e070      	b.n	8009ffa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f1e:	d101      	bne.n	8009f24 <create_chain+0x52>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	e06a      	b.n	8009ffa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d201      	bcs.n	8009f32 <create_chain+0x60>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	e063      	b.n	8009ffa <create_chain+0x128>
		scl = clst;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	69fa      	ldr	r2, [r7, #28]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d307      	bcc.n	8009f5a <create_chain+0x88>
				ncl = 2;
 8009f4a:	2302      	movs	r3, #2
 8009f4c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009f4e:	69fa      	ldr	r2, [r7, #28]
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d901      	bls.n	8009f5a <create_chain+0x88>
 8009f56:	2300      	movs	r3, #0
 8009f58:	e04f      	b.n	8009ffa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009f5a:	69f9      	ldr	r1, [r7, #28]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff fdc2 	bl	8009ae6 <get_fat>
 8009f62:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00e      	beq.n	8009f88 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d003      	beq.n	8009f78 <create_chain+0xa6>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f76:	d101      	bne.n	8009f7c <create_chain+0xaa>
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	e03e      	b.n	8009ffa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009f7c:	69fa      	ldr	r2, [r7, #28]
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d1da      	bne.n	8009f3a <create_chain+0x68>
 8009f84:	2300      	movs	r3, #0
 8009f86:	e038      	b.n	8009ffa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009f88:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f8e:	69f9      	ldr	r1, [r7, #28]
 8009f90:	6938      	ldr	r0, [r7, #16]
 8009f92:	f7ff fe4f 	bl	8009c34 <put_fat>
 8009f96:	4603      	mov	r3, r0
 8009f98:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d109      	bne.n	8009fb4 <create_chain+0xe2>
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d006      	beq.n	8009fb4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009fa6:	69fa      	ldr	r2, [r7, #28]
 8009fa8:	6839      	ldr	r1, [r7, #0]
 8009faa:	6938      	ldr	r0, [r7, #16]
 8009fac:	f7ff fe42 	bl	8009c34 <put_fat>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009fb4:	7dfb      	ldrb	r3, [r7, #23]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d116      	bne.n	8009fe8 <create_chain+0x116>
		fs->last_clst = ncl;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	69fa      	ldr	r2, [r7, #28]
 8009fbe:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	691a      	ldr	r2, [r3, #16]
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	3b02      	subs	r3, #2
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d804      	bhi.n	8009fd8 <create_chain+0x106>
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	1e5a      	subs	r2, r3, #1
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	791b      	ldrb	r3, [r3, #4]
 8009fdc:	f043 0301 	orr.w	r3, r3, #1
 8009fe0:	b2da      	uxtb	r2, r3
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	711a      	strb	r2, [r3, #4]
 8009fe6:	e007      	b.n	8009ff8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d102      	bne.n	8009ff4 <create_chain+0x122>
 8009fee:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff2:	e000      	b.n	8009ff6 <create_chain+0x124>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009ff8:	69fb      	ldr	r3, [r7, #28]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3720      	adds	r7, #32
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a002:	b480      	push	{r7}
 800a004:	b087      	sub	sp, #28
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a016:	3304      	adds	r3, #4
 800a018:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	0a5b      	lsrs	r3, r3, #9
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	8952      	ldrh	r2, [r2, #10]
 800a022:	fbb3 f3f2 	udiv	r3, r3, r2
 800a026:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	1d1a      	adds	r2, r3, #4
 800a02c:	613a      	str	r2, [r7, #16]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d101      	bne.n	800a03c <clmt_clust+0x3a>
 800a038:	2300      	movs	r3, #0
 800a03a:	e010      	b.n	800a05e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	429a      	cmp	r2, r3
 800a042:	d307      	bcc.n	800a054 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	617b      	str	r3, [r7, #20]
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	3304      	adds	r3, #4
 800a050:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a052:	e7e9      	b.n	800a028 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a054:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	4413      	add	r3, r2
}
 800a05e:	4618      	mov	r0, r3
 800a060:	371c      	adds	r7, #28
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b086      	sub	sp, #24
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a080:	d204      	bcs.n	800a08c <dir_sdi+0x22>
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	f003 031f 	and.w	r3, r3, #31
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d001      	beq.n	800a090 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a08c:	2302      	movs	r3, #2
 800a08e:	e063      	b.n	800a158 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d106      	bne.n	800a0b0 <dir_sdi+0x46>
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d902      	bls.n	800a0b0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ae:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10c      	bne.n	800a0d0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	095b      	lsrs	r3, r3, #5
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	8912      	ldrh	r2, [r2, #8]
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d301      	bcc.n	800a0c6 <dir_sdi+0x5c>
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	e048      	b.n	800a158 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	61da      	str	r2, [r3, #28]
 800a0ce:	e029      	b.n	800a124 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	895b      	ldrh	r3, [r3, #10]
 800a0d4:	025b      	lsls	r3, r3, #9
 800a0d6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a0d8:	e019      	b.n	800a10e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6979      	ldr	r1, [r7, #20]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7ff fd01 	bl	8009ae6 <get_fat>
 800a0e4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ec:	d101      	bne.n	800a0f2 <dir_sdi+0x88>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e032      	b.n	800a158 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d904      	bls.n	800a102 <dir_sdi+0x98>
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d301      	bcc.n	800a106 <dir_sdi+0x9c>
 800a102:	2302      	movs	r3, #2
 800a104:	e028      	b.n	800a158 <dir_sdi+0xee>
			ofs -= csz;
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	429a      	cmp	r2, r3
 800a114:	d2e1      	bcs.n	800a0da <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a116:	6979      	ldr	r1, [r7, #20]
 800a118:	6938      	ldr	r0, [r7, #16]
 800a11a:	f7ff fcc5 	bl	8009aa8 <clust2sect>
 800a11e:	4602      	mov	r2, r0
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	697a      	ldr	r2, [r7, #20]
 800a128:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	69db      	ldr	r3, [r3, #28]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d101      	bne.n	800a136 <dir_sdi+0xcc>
 800a132:	2302      	movs	r3, #2
 800a134:	e010      	b.n	800a158 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	69da      	ldr	r2, [r3, #28]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	0a5b      	lsrs	r3, r3, #9
 800a13e:	441a      	add	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a150:	441a      	add	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	695b      	ldr	r3, [r3, #20]
 800a174:	3320      	adds	r3, #32
 800a176:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	69db      	ldr	r3, [r3, #28]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d003      	beq.n	800a188 <dir_next+0x28>
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a186:	d301      	bcc.n	800a18c <dir_next+0x2c>
 800a188:	2304      	movs	r3, #4
 800a18a:	e0aa      	b.n	800a2e2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a192:	2b00      	cmp	r3, #0
 800a194:	f040 8098 	bne.w	800a2c8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	69db      	ldr	r3, [r3, #28]
 800a19c:	1c5a      	adds	r2, r3, #1
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	699b      	ldr	r3, [r3, #24]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10b      	bne.n	800a1c2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	095b      	lsrs	r3, r3, #5
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	8912      	ldrh	r2, [r2, #8]
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	f0c0 8088 	bcc.w	800a2c8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	61da      	str	r2, [r3, #28]
 800a1be:	2304      	movs	r3, #4
 800a1c0:	e08f      	b.n	800a2e2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	0a5b      	lsrs	r3, r3, #9
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	8952      	ldrh	r2, [r2, #10]
 800a1ca:	3a01      	subs	r2, #1
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d17a      	bne.n	800a2c8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	4619      	mov	r1, r3
 800a1da:	4610      	mov	r0, r2
 800a1dc:	f7ff fc83 	bl	8009ae6 <get_fat>
 800a1e0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d801      	bhi.n	800a1ec <dir_next+0x8c>
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	e07a      	b.n	800a2e2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f2:	d101      	bne.n	800a1f8 <dir_next+0x98>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e074      	b.n	800a2e2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d358      	bcc.n	800a2b4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d104      	bne.n	800a212 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	61da      	str	r2, [r3, #28]
 800a20e:	2304      	movs	r3, #4
 800a210:	e067      	b.n	800a2e2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	4619      	mov	r1, r3
 800a21a:	4610      	mov	r0, r2
 800a21c:	f7ff fe59 	bl	8009ed2 <create_chain>
 800a220:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <dir_next+0xcc>
 800a228:	2307      	movs	r3, #7
 800a22a:	e05a      	b.n	800a2e2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d101      	bne.n	800a236 <dir_next+0xd6>
 800a232:	2302      	movs	r3, #2
 800a234:	e055      	b.n	800a2e2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23c:	d101      	bne.n	800a242 <dir_next+0xe2>
 800a23e:	2301      	movs	r3, #1
 800a240:	e04f      	b.n	800a2e2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f7ff fb50 	bl	80098e8 <sync_window>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <dir_next+0xf2>
 800a24e:	2301      	movs	r3, #1
 800a250:	e047      	b.n	800a2e2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	3330      	adds	r3, #48	@ 0x30
 800a256:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a25a:	2100      	movs	r1, #0
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7ff f97a 	bl	8009556 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a262:	2300      	movs	r3, #0
 800a264:	613b      	str	r3, [r7, #16]
 800a266:	6979      	ldr	r1, [r7, #20]
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f7ff fc1d 	bl	8009aa8 <clust2sect>
 800a26e:	4602      	mov	r2, r0
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a274:	e012      	b.n	800a29c <dir_next+0x13c>
						fs->wflag = 1;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2201      	movs	r2, #1
 800a27a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f7ff fb33 	bl	80098e8 <sync_window>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <dir_next+0x12c>
 800a288:	2301      	movs	r3, #1
 800a28a:	e02a      	b.n	800a2e2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	3301      	adds	r3, #1
 800a290:	613b      	str	r3, [r7, #16]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a296:	1c5a      	adds	r2, r3, #1
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	895b      	ldrh	r3, [r3, #10]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d3e6      	bcc.n	800a276 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	1ad2      	subs	r2, r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a2ba:	6979      	ldr	r1, [r7, #20]
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f7ff fbf3 	bl	8009aa8 <clust2sect>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2da:	441a      	add	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3718      	adds	r7, #24
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b086      	sub	sp, #24
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff feb4 	bl	800a06a <dir_sdi>
 800a302:	4603      	mov	r3, r0
 800a304:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a306:	7dfb      	ldrb	r3, [r7, #23]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d12b      	bne.n	800a364 <dir_alloc+0x7a>
		n = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	69db      	ldr	r3, [r3, #28]
 800a314:	4619      	mov	r1, r3
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f7ff fb2a 	bl	8009970 <move_window>
 800a31c:	4603      	mov	r3, r0
 800a31e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a320:	7dfb      	ldrb	r3, [r7, #23]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d11d      	bne.n	800a362 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a1b      	ldr	r3, [r3, #32]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	2be5      	cmp	r3, #229	@ 0xe5
 800a32e:	d004      	beq.n	800a33a <dir_alloc+0x50>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a1b      	ldr	r3, [r3, #32]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d107      	bne.n	800a34a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	3301      	adds	r3, #1
 800a33e:	613b      	str	r3, [r7, #16]
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	429a      	cmp	r2, r3
 800a346:	d102      	bne.n	800a34e <dir_alloc+0x64>
 800a348:	e00c      	b.n	800a364 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a34a:	2300      	movs	r3, #0
 800a34c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a34e:	2101      	movs	r1, #1
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7ff ff05 	bl	800a160 <dir_next>
 800a356:	4603      	mov	r3, r0
 800a358:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a35a:	7dfb      	ldrb	r3, [r7, #23]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d0d7      	beq.n	800a310 <dir_alloc+0x26>
 800a360:	e000      	b.n	800a364 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a362:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a364:	7dfb      	ldrb	r3, [r7, #23]
 800a366:	2b04      	cmp	r3, #4
 800a368:	d101      	bne.n	800a36e <dir_alloc+0x84>
 800a36a:	2307      	movs	r3, #7
 800a36c:	75fb      	strb	r3, [r7, #23]
	return res;
 800a36e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	331a      	adds	r3, #26
 800a386:	4618      	mov	r0, r3
 800a388:	f7ff f842 	bl	8009410 <ld_word>
 800a38c:	4603      	mov	r3, r0
 800a38e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	2b03      	cmp	r3, #3
 800a396:	d109      	bne.n	800a3ac <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	3314      	adds	r3, #20
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7ff f837 	bl	8009410 <ld_word>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	041b      	lsls	r3, r3, #16
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b084      	sub	sp, #16
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	331a      	adds	r3, #26
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	b292      	uxth	r2, r2
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7ff f85a 	bl	8009486 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	2b03      	cmp	r3, #3
 800a3d8:	d109      	bne.n	800a3ee <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	f103 0214 	add.w	r2, r3, #20
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	0c1b      	lsrs	r3, r3, #16
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	4610      	mov	r0, r2
 800a3ea:	f7ff f84c 	bl	8009486 <st_word>
	}
}
 800a3ee:	bf00      	nop
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b086      	sub	sp, #24
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a404:	2100      	movs	r1, #0
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7ff fe2f 	bl	800a06a <dir_sdi>
 800a40c:	4603      	mov	r3, r0
 800a40e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a410:	7dfb      	ldrb	r3, [r7, #23]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <dir_find+0x24>
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	e03e      	b.n	800a498 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	4619      	mov	r1, r3
 800a420:	6938      	ldr	r0, [r7, #16]
 800a422:	f7ff faa5 	bl	8009970 <move_window>
 800a426:	4603      	mov	r3, r0
 800a428:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a42a:	7dfb      	ldrb	r3, [r7, #23]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d12f      	bne.n	800a490 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a438:	7bfb      	ldrb	r3, [r7, #15]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d102      	bne.n	800a444 <dir_find+0x4e>
 800a43e:	2304      	movs	r3, #4
 800a440:	75fb      	strb	r3, [r7, #23]
 800a442:	e028      	b.n	800a496 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a1b      	ldr	r3, [r3, #32]
 800a448:	330b      	adds	r3, #11
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a450:	b2da      	uxtb	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	330b      	adds	r3, #11
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	f003 0308 	and.w	r3, r3, #8
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10a      	bne.n	800a47c <dir_find+0x86>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a18      	ldr	r0, [r3, #32]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	3324      	adds	r3, #36	@ 0x24
 800a46e:	220b      	movs	r2, #11
 800a470:	4619      	mov	r1, r3
 800a472:	f7ff f88b 	bl	800958c <mem_cmp>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00b      	beq.n	800a494 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a47c:	2100      	movs	r1, #0
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7ff fe6e 	bl	800a160 <dir_next>
 800a484:	4603      	mov	r3, r0
 800a486:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a488:	7dfb      	ldrb	r3, [r7, #23]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d0c5      	beq.n	800a41a <dir_find+0x24>
 800a48e:	e002      	b.n	800a496 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a490:	bf00      	nop
 800a492:	e000      	b.n	800a496 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a494:	bf00      	nop

	return res;
 800a496:	7dfb      	ldrb	r3, [r7, #23]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3718      	adds	r7, #24
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a4ae:	2101      	movs	r1, #1
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f7ff ff1a 	bl	800a2ea <dir_alloc>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d11c      	bne.n	800a4fa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	69db      	ldr	r3, [r3, #28]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	68b8      	ldr	r0, [r7, #8]
 800a4c8:	f7ff fa52 	bl	8009970 <move_window>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a4d0:	7bfb      	ldrb	r3, [r7, #15]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d111      	bne.n	800a4fa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	2220      	movs	r2, #32
 800a4dc:	2100      	movs	r1, #0
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff f839 	bl	8009556 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a18      	ldr	r0, [r3, #32]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	3324      	adds	r3, #36	@ 0x24
 800a4ec:	220b      	movs	r2, #11
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	f7ff f810 	bl	8009514 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b088      	sub	sp, #32
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	60fb      	str	r3, [r7, #12]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	3324      	adds	r3, #36	@ 0x24
 800a518:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a51a:	220b      	movs	r2, #11
 800a51c:	2120      	movs	r1, #32
 800a51e:	68b8      	ldr	r0, [r7, #8]
 800a520:	f7ff f819 	bl	8009556 <mem_set>
	si = i = 0; ni = 8;
 800a524:	2300      	movs	r3, #0
 800a526:	613b      	str	r3, [r7, #16]
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	61fb      	str	r3, [r7, #28]
 800a52c:	2308      	movs	r3, #8
 800a52e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	61fa      	str	r2, [r7, #28]
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	4413      	add	r3, r2
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a53e:	7efb      	ldrb	r3, [r7, #27]
 800a540:	2b20      	cmp	r3, #32
 800a542:	d94e      	bls.n	800a5e2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a544:	7efb      	ldrb	r3, [r7, #27]
 800a546:	2b2f      	cmp	r3, #47	@ 0x2f
 800a548:	d006      	beq.n	800a558 <create_name+0x54>
 800a54a:	7efb      	ldrb	r3, [r7, #27]
 800a54c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a54e:	d110      	bne.n	800a572 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a550:	e002      	b.n	800a558 <create_name+0x54>
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	3301      	adds	r3, #1
 800a556:	61fb      	str	r3, [r7, #28]
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	4413      	add	r3, r2
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	2b2f      	cmp	r3, #47	@ 0x2f
 800a562:	d0f6      	beq.n	800a552 <create_name+0x4e>
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	4413      	add	r3, r2
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a56e:	d0f0      	beq.n	800a552 <create_name+0x4e>
			break;
 800a570:	e038      	b.n	800a5e4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a572:	7efb      	ldrb	r3, [r7, #27]
 800a574:	2b2e      	cmp	r3, #46	@ 0x2e
 800a576:	d003      	beq.n	800a580 <create_name+0x7c>
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d30c      	bcc.n	800a59a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	2b0b      	cmp	r3, #11
 800a584:	d002      	beq.n	800a58c <create_name+0x88>
 800a586:	7efb      	ldrb	r3, [r7, #27]
 800a588:	2b2e      	cmp	r3, #46	@ 0x2e
 800a58a:	d001      	beq.n	800a590 <create_name+0x8c>
 800a58c:	2306      	movs	r3, #6
 800a58e:	e044      	b.n	800a61a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a590:	2308      	movs	r3, #8
 800a592:	613b      	str	r3, [r7, #16]
 800a594:	230b      	movs	r3, #11
 800a596:	617b      	str	r3, [r7, #20]
			continue;
 800a598:	e022      	b.n	800a5e0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a59a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	da04      	bge.n	800a5ac <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a5a2:	7efb      	ldrb	r3, [r7, #27]
 800a5a4:	3b80      	subs	r3, #128	@ 0x80
 800a5a6:	4a1f      	ldr	r2, [pc, #124]	@ (800a624 <create_name+0x120>)
 800a5a8:	5cd3      	ldrb	r3, [r2, r3]
 800a5aa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a5ac:	7efb      	ldrb	r3, [r7, #27]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	481d      	ldr	r0, [pc, #116]	@ (800a628 <create_name+0x124>)
 800a5b2:	f7ff f812 	bl	80095da <chk_chr>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <create_name+0xbc>
 800a5bc:	2306      	movs	r3, #6
 800a5be:	e02c      	b.n	800a61a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a5c0:	7efb      	ldrb	r3, [r7, #27]
 800a5c2:	2b60      	cmp	r3, #96	@ 0x60
 800a5c4:	d905      	bls.n	800a5d2 <create_name+0xce>
 800a5c6:	7efb      	ldrb	r3, [r7, #27]
 800a5c8:	2b7a      	cmp	r3, #122	@ 0x7a
 800a5ca:	d802      	bhi.n	800a5d2 <create_name+0xce>
 800a5cc:	7efb      	ldrb	r3, [r7, #27]
 800a5ce:	3b20      	subs	r3, #32
 800a5d0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	1c5a      	adds	r2, r3, #1
 800a5d6:	613a      	str	r2, [r7, #16]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	4413      	add	r3, r2
 800a5dc:	7efa      	ldrb	r2, [r7, #27]
 800a5de:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a5e0:	e7a6      	b.n	800a530 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a5e2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	441a      	add	r2, r3
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <create_name+0xf4>
 800a5f4:	2306      	movs	r3, #6
 800a5f6:	e010      	b.n	800a61a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	2be5      	cmp	r3, #229	@ 0xe5
 800a5fe:	d102      	bne.n	800a606 <create_name+0x102>
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	2205      	movs	r2, #5
 800a604:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a606:	7efb      	ldrb	r3, [r7, #27]
 800a608:	2b20      	cmp	r3, #32
 800a60a:	d801      	bhi.n	800a610 <create_name+0x10c>
 800a60c:	2204      	movs	r2, #4
 800a60e:	e000      	b.n	800a612 <create_name+0x10e>
 800a610:	2200      	movs	r2, #0
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	330b      	adds	r3, #11
 800a616:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a618:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3720      	adds	r7, #32
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	08055854 	.word	0x08055854
 800a628:	0800ca78 	.word	0x0800ca78

0800a62c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b086      	sub	sp, #24
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a640:	e002      	b.n	800a648 <follow_path+0x1c>
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	3301      	adds	r3, #1
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	2b2f      	cmp	r3, #47	@ 0x2f
 800a64e:	d0f8      	beq.n	800a642 <follow_path+0x16>
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	2b5c      	cmp	r3, #92	@ 0x5c
 800a656:	d0f4      	beq.n	800a642 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	2200      	movs	r2, #0
 800a65c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	2b1f      	cmp	r3, #31
 800a664:	d80a      	bhi.n	800a67c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2280      	movs	r2, #128	@ 0x80
 800a66a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800a66e:	2100      	movs	r1, #0
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7ff fcfa 	bl	800a06a <dir_sdi>
 800a676:	4603      	mov	r3, r0
 800a678:	75fb      	strb	r3, [r7, #23]
 800a67a:	e043      	b.n	800a704 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a67c:	463b      	mov	r3, r7
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f7ff ff3f 	bl	800a504 <create_name>
 800a686:	4603      	mov	r3, r0
 800a688:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a68a:	7dfb      	ldrb	r3, [r7, #23]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d134      	bne.n	800a6fa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f7ff feb0 	bl	800a3f6 <dir_find>
 800a696:	4603      	mov	r3, r0
 800a698:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a6a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a6a2:	7dfb      	ldrb	r3, [r7, #23]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00a      	beq.n	800a6be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a6a8:	7dfb      	ldrb	r3, [r7, #23]
 800a6aa:	2b04      	cmp	r3, #4
 800a6ac:	d127      	bne.n	800a6fe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a6ae:	7afb      	ldrb	r3, [r7, #11]
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d122      	bne.n	800a6fe <follow_path+0xd2>
 800a6b8:	2305      	movs	r3, #5
 800a6ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a6bc:	e01f      	b.n	800a6fe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a6be:	7afb      	ldrb	r3, [r7, #11]
 800a6c0:	f003 0304 	and.w	r3, r3, #4
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d11c      	bne.n	800a702 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	799b      	ldrb	r3, [r3, #6]
 800a6cc:	f003 0310 	and.w	r3, r3, #16
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d102      	bne.n	800a6da <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a6d4:	2305      	movs	r3, #5
 800a6d6:	75fb      	strb	r3, [r7, #23]
 800a6d8:	e014      	b.n	800a704 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	695b      	ldr	r3, [r3, #20]
 800a6e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6e8:	4413      	add	r3, r2
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f7ff fe43 	bl	800a378 <ld_clust>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a6f8:	e7c0      	b.n	800a67c <follow_path+0x50>
			if (res != FR_OK) break;
 800a6fa:	bf00      	nop
 800a6fc:	e002      	b.n	800a704 <follow_path+0xd8>
				break;
 800a6fe:	bf00      	nop
 800a700:	e000      	b.n	800a704 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a702:	bf00      	nop
			}
		}
	}

	return res;
 800a704:	7dfb      	ldrb	r3, [r7, #23]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a70e:	b480      	push	{r7}
 800a710:	b087      	sub	sp, #28
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a716:	f04f 33ff 	mov.w	r3, #4294967295
 800a71a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d031      	beq.n	800a788 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	617b      	str	r3, [r7, #20]
 800a72a:	e002      	b.n	800a732 <get_ldnumber+0x24>
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	3301      	adds	r3, #1
 800a730:	617b      	str	r3, [r7, #20]
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	2b20      	cmp	r3, #32
 800a738:	d903      	bls.n	800a742 <get_ldnumber+0x34>
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	2b3a      	cmp	r3, #58	@ 0x3a
 800a740:	d1f4      	bne.n	800a72c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	2b3a      	cmp	r3, #58	@ 0x3a
 800a748:	d11c      	bne.n	800a784 <get_ldnumber+0x76>
			tp = *path;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	1c5a      	adds	r2, r3, #1
 800a754:	60fa      	str	r2, [r7, #12]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	3b30      	subs	r3, #48	@ 0x30
 800a75a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	2b09      	cmp	r3, #9
 800a760:	d80e      	bhi.n	800a780 <get_ldnumber+0x72>
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	429a      	cmp	r2, r3
 800a768:	d10a      	bne.n	800a780 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d107      	bne.n	800a780 <get_ldnumber+0x72>
					vol = (int)i;
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	3301      	adds	r3, #1
 800a778:	617b      	str	r3, [r7, #20]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	e002      	b.n	800a78a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a784:	2300      	movs	r3, #0
 800a786:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a788:	693b      	ldr	r3, [r7, #16]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	371c      	adds	r7, #28
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
	...

0800a798 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	70da      	strb	r2, [r3, #3]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7ff f8dc 	bl	8009970 <move_window>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <check_fs+0x2a>
 800a7be:	2304      	movs	r3, #4
 800a7c0:	e038      	b.n	800a834 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	3330      	adds	r3, #48	@ 0x30
 800a7c6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fe fe20 	bl	8009410 <ld_word>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d001      	beq.n	800a7e0 <check_fs+0x48>
 800a7dc:	2303      	movs	r3, #3
 800a7de:	e029      	b.n	800a834 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a7e6:	2be9      	cmp	r3, #233	@ 0xe9
 800a7e8:	d009      	beq.n	800a7fe <check_fs+0x66>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a7f0:	2beb      	cmp	r3, #235	@ 0xeb
 800a7f2:	d11e      	bne.n	800a832 <check_fs+0x9a>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a7fa:	2b90      	cmp	r3, #144	@ 0x90
 800a7fc:	d119      	bne.n	800a832 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	3330      	adds	r3, #48	@ 0x30
 800a802:	3336      	adds	r3, #54	@ 0x36
 800a804:	4618      	mov	r0, r3
 800a806:	f7fe fe1b 	bl	8009440 <ld_dword>
 800a80a:	4603      	mov	r3, r0
 800a80c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a810:	4a0a      	ldr	r2, [pc, #40]	@ (800a83c <check_fs+0xa4>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d101      	bne.n	800a81a <check_fs+0x82>
 800a816:	2300      	movs	r3, #0
 800a818:	e00c      	b.n	800a834 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	3330      	adds	r3, #48	@ 0x30
 800a81e:	3352      	adds	r3, #82	@ 0x52
 800a820:	4618      	mov	r0, r3
 800a822:	f7fe fe0d 	bl	8009440 <ld_dword>
 800a826:	4603      	mov	r3, r0
 800a828:	4a05      	ldr	r2, [pc, #20]	@ (800a840 <check_fs+0xa8>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d101      	bne.n	800a832 <check_fs+0x9a>
 800a82e:	2300      	movs	r3, #0
 800a830:	e000      	b.n	800a834 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a832:	2302      	movs	r3, #2
}
 800a834:	4618      	mov	r0, r3
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	00544146 	.word	0x00544146
 800a840:	33544146 	.word	0x33544146

0800a844 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b096      	sub	sp, #88	@ 0x58
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	4613      	mov	r3, r2
 800a850:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2200      	movs	r2, #0
 800a856:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	f7ff ff58 	bl	800a70e <get_ldnumber>
 800a85e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a862:	2b00      	cmp	r3, #0
 800a864:	da01      	bge.n	800a86a <find_volume+0x26>
 800a866:	230b      	movs	r3, #11
 800a868:	e22d      	b.n	800acc6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a86a:	4aa1      	ldr	r2, [pc, #644]	@ (800aaf0 <find_volume+0x2ac>)
 800a86c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a872:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a876:	2b00      	cmp	r3, #0
 800a878:	d101      	bne.n	800a87e <find_volume+0x3a>
 800a87a:	230c      	movs	r3, #12
 800a87c:	e223      	b.n	800acc6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a882:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a884:	79fb      	ldrb	r3, [r7, #7]
 800a886:	f023 0301 	bic.w	r3, r3, #1
 800a88a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d01a      	beq.n	800a8ca <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a896:	785b      	ldrb	r3, [r3, #1]
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fe fd1b 	bl	80092d4 <disk_status>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a8a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10c      	bne.n	800a8ca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a8b0:	79fb      	ldrb	r3, [r7, #7]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d007      	beq.n	800a8c6 <find_volume+0x82>
 800a8b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a8ba:	f003 0304 	and.w	r3, r3, #4
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d001      	beq.n	800a8c6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a8c2:	230a      	movs	r3, #10
 800a8c4:	e1ff      	b.n	800acc6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	e1fd      	b.n	800acc6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a8d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8d2:	b2da      	uxtb	r2, r3
 800a8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8da:	785b      	ldrb	r3, [r3, #1]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7fe fd13 	bl	8009308 <disk_initialize>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a8e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e1e6      	b.n	800acc6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a8f8:	79fb      	ldrb	r3, [r7, #7]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d007      	beq.n	800a90e <find_volume+0xca>
 800a8fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a902:	f003 0304 	and.w	r3, r3, #4
 800a906:	2b00      	cmp	r3, #0
 800a908:	d001      	beq.n	800a90e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a90a:	230a      	movs	r3, #10
 800a90c:	e1db      	b.n	800acc6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a90e:	2300      	movs	r3, #0
 800a910:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a912:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a914:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a916:	f7ff ff3f 	bl	800a798 <check_fs>
 800a91a:	4603      	mov	r3, r0
 800a91c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a920:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a924:	2b02      	cmp	r3, #2
 800a926:	d149      	bne.n	800a9bc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a928:	2300      	movs	r3, #0
 800a92a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a92c:	e01e      	b.n	800a96c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a930:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a936:	011b      	lsls	r3, r3, #4
 800a938:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a93c:	4413      	add	r3, r2
 800a93e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a942:	3304      	adds	r3, #4
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d006      	beq.n	800a958 <find_volume+0x114>
 800a94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94c:	3308      	adds	r3, #8
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fe fd76 	bl	8009440 <ld_dword>
 800a954:	4602      	mov	r2, r0
 800a956:	e000      	b.n	800a95a <find_volume+0x116>
 800a958:	2200      	movs	r2, #0
 800a95a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	3358      	adds	r3, #88	@ 0x58
 800a960:	443b      	add	r3, r7
 800a962:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a968:	3301      	adds	r3, #1
 800a96a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a96c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a96e:	2b03      	cmp	r3, #3
 800a970:	d9dd      	bls.n	800a92e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a972:	2300      	movs	r3, #0
 800a974:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <find_volume+0x13e>
 800a97c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a97e:	3b01      	subs	r3, #1
 800a980:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	3358      	adds	r3, #88	@ 0x58
 800a988:	443b      	add	r3, r7
 800a98a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a98e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a992:	2b00      	cmp	r3, #0
 800a994:	d005      	beq.n	800a9a2 <find_volume+0x15e>
 800a996:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a998:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a99a:	f7ff fefd 	bl	800a798 <check_fs>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	e000      	b.n	800a9a4 <find_volume+0x160>
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a9a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d905      	bls.n	800a9bc <find_volume+0x178>
 800a9b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9b8:	2b03      	cmp	r3, #3
 800a9ba:	d9e2      	bls.n	800a982 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a9bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a9c0:	2b04      	cmp	r3, #4
 800a9c2:	d101      	bne.n	800a9c8 <find_volume+0x184>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e17e      	b.n	800acc6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a9c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d901      	bls.n	800a9d4 <find_volume+0x190>
 800a9d0:	230d      	movs	r3, #13
 800a9d2:	e178      	b.n	800acc6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d6:	3330      	adds	r3, #48	@ 0x30
 800a9d8:	330b      	adds	r3, #11
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fe fd18 	bl	8009410 <ld_word>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9e6:	d001      	beq.n	800a9ec <find_volume+0x1a8>
 800a9e8:	230d      	movs	r3, #13
 800a9ea:	e16c      	b.n	800acc6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ee:	3330      	adds	r3, #48	@ 0x30
 800a9f0:	3316      	adds	r3, #22
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fe fd0c 	bl	8009410 <ld_word>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a9fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d106      	bne.n	800aa10 <find_volume+0x1cc>
 800aa02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa04:	3330      	adds	r3, #48	@ 0x30
 800aa06:	3324      	adds	r3, #36	@ 0x24
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fe fd19 	bl	8009440 <ld_dword>
 800aa0e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800aa10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa14:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800aa16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa18:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800aa1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800aa20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa22:	789b      	ldrb	r3, [r3, #2]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d005      	beq.n	800aa34 <find_volume+0x1f0>
 800aa28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2a:	789b      	ldrb	r3, [r3, #2]
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d001      	beq.n	800aa34 <find_volume+0x1f0>
 800aa30:	230d      	movs	r3, #13
 800aa32:	e148      	b.n	800acc6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800aa34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa36:	789b      	ldrb	r3, [r3, #2]
 800aa38:	461a      	mov	r2, r3
 800aa3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa3c:	fb02 f303 	mul.w	r3, r2, r3
 800aa40:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800aa42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa48:	461a      	mov	r2, r3
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa50:	895b      	ldrh	r3, [r3, #10]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d008      	beq.n	800aa68 <find_volume+0x224>
 800aa56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa58:	895b      	ldrh	r3, [r3, #10]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5e:	895b      	ldrh	r3, [r3, #10]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	4013      	ands	r3, r2
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <find_volume+0x228>
 800aa68:	230d      	movs	r3, #13
 800aa6a:	e12c      	b.n	800acc6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800aa6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6e:	3330      	adds	r3, #48	@ 0x30
 800aa70:	3311      	adds	r3, #17
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fe fccc 	bl	8009410 <ld_word>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa7e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800aa80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa82:	891b      	ldrh	r3, [r3, #8]
 800aa84:	f003 030f 	and.w	r3, r3, #15
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <find_volume+0x24e>
 800aa8e:	230d      	movs	r3, #13
 800aa90:	e119      	b.n	800acc6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800aa92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa94:	3330      	adds	r3, #48	@ 0x30
 800aa96:	3313      	adds	r3, #19
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fe fcb9 	bl	8009410 <ld_word>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800aaa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d106      	bne.n	800aab6 <find_volume+0x272>
 800aaa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaaa:	3330      	adds	r3, #48	@ 0x30
 800aaac:	3320      	adds	r3, #32
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fe fcc6 	bl	8009440 <ld_dword>
 800aab4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800aab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab8:	3330      	adds	r3, #48	@ 0x30
 800aaba:	330e      	adds	r3, #14
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fe fca7 	bl	8009410 <ld_word>
 800aac2:	4603      	mov	r3, r0
 800aac4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800aac6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d101      	bne.n	800aad0 <find_volume+0x28c>
 800aacc:	230d      	movs	r3, #13
 800aace:	e0fa      	b.n	800acc6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800aad0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800aad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aad4:	4413      	add	r3, r2
 800aad6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aad8:	8912      	ldrh	r2, [r2, #8]
 800aada:	0912      	lsrs	r2, r2, #4
 800aadc:	b292      	uxth	r2, r2
 800aade:	4413      	add	r3, r2
 800aae0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800aae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d204      	bcs.n	800aaf4 <find_volume+0x2b0>
 800aaea:	230d      	movs	r3, #13
 800aaec:	e0eb      	b.n	800acc6 <find_volume+0x482>
 800aaee:	bf00      	nop
 800aaf0:	20040798 	.word	0x20040798
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800aaf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aaf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aafc:	8952      	ldrh	r2, [r2, #10]
 800aafe:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab02:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ab04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <find_volume+0x2ca>
 800ab0a:	230d      	movs	r3, #13
 800ab0c:	e0db      	b.n	800acc6 <find_volume+0x482>
		fmt = FS_FAT32;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d802      	bhi.n	800ab24 <find_volume+0x2e0>
 800ab1e:	2302      	movs	r3, #2
 800ab20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ab24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab26:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d802      	bhi.n	800ab34 <find_volume+0x2f0>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ab34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab36:	1c9a      	adds	r2, r3, #2
 800ab38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ab40:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ab42:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ab44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab46:	441a      	add	r2, r3
 800ab48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800ab4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ab4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab50:	441a      	add	r2, r3
 800ab52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab54:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800ab56:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ab5a:	2b03      	cmp	r3, #3
 800ab5c:	d11e      	bne.n	800ab9c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ab5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab60:	3330      	adds	r3, #48	@ 0x30
 800ab62:	332a      	adds	r3, #42	@ 0x2a
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7fe fc53 	bl	8009410 <ld_word>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d001      	beq.n	800ab74 <find_volume+0x330>
 800ab70:	230d      	movs	r3, #13
 800ab72:	e0a8      	b.n	800acc6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ab74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab76:	891b      	ldrh	r3, [r3, #8]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d001      	beq.n	800ab80 <find_volume+0x33c>
 800ab7c:	230d      	movs	r3, #13
 800ab7e:	e0a2      	b.n	800acc6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ab80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab82:	3330      	adds	r3, #48	@ 0x30
 800ab84:	332c      	adds	r3, #44	@ 0x2c
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe fc5a 	bl	8009440 <ld_dword>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab90:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ab92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab9a:	e01f      	b.n	800abdc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ab9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab9e:	891b      	ldrh	r3, [r3, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <find_volume+0x364>
 800aba4:	230d      	movs	r3, #13
 800aba6:	e08e      	b.n	800acc6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800aba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abaa:	6a1a      	ldr	r2, [r3, #32]
 800abac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abae:	441a      	add	r2, r3
 800abb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800abb4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d103      	bne.n	800abc4 <find_volume+0x380>
 800abbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	005b      	lsls	r3, r3, #1
 800abc2:	e00a      	b.n	800abda <find_volume+0x396>
 800abc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc6:	695a      	ldr	r2, [r3, #20]
 800abc8:	4613      	mov	r3, r2
 800abca:	005b      	lsls	r3, r3, #1
 800abcc:	4413      	add	r3, r2
 800abce:	085a      	lsrs	r2, r3, #1
 800abd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd2:	695b      	ldr	r3, [r3, #20]
 800abd4:	f003 0301 	and.w	r3, r3, #1
 800abd8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800abda:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800abdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abde:	699a      	ldr	r2, [r3, #24]
 800abe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abe2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800abe6:	0a5b      	lsrs	r3, r3, #9
 800abe8:	429a      	cmp	r2, r3
 800abea:	d201      	bcs.n	800abf0 <find_volume+0x3ac>
 800abec:	230d      	movs	r3, #13
 800abee:	e06a      	b.n	800acc6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800abf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf2:	f04f 32ff 	mov.w	r2, #4294967295
 800abf6:	611a      	str	r2, [r3, #16]
 800abf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfa:	691a      	ldr	r2, [r3, #16]
 800abfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfe:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800ac00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac02:	2280      	movs	r2, #128	@ 0x80
 800ac04:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ac06:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d149      	bne.n	800aca2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ac0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac10:	3330      	adds	r3, #48	@ 0x30
 800ac12:	3330      	adds	r3, #48	@ 0x30
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fe fbfb 	bl	8009410 <ld_word>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d140      	bne.n	800aca2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ac20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac22:	3301      	adds	r3, #1
 800ac24:	4619      	mov	r1, r3
 800ac26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ac28:	f7fe fea2 	bl	8009970 <move_window>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d137      	bne.n	800aca2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ac32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac34:	2200      	movs	r2, #0
 800ac36:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ac38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3a:	3330      	adds	r3, #48	@ 0x30
 800ac3c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fe fbe5 	bl	8009410 <ld_word>
 800ac46:	4603      	mov	r3, r0
 800ac48:	461a      	mov	r2, r3
 800ac4a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d127      	bne.n	800aca2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ac52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac54:	3330      	adds	r3, #48	@ 0x30
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fe fbf2 	bl	8009440 <ld_dword>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	4a1c      	ldr	r2, [pc, #112]	@ (800acd0 <find_volume+0x48c>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d11e      	bne.n	800aca2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ac64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac66:	3330      	adds	r3, #48	@ 0x30
 800ac68:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fe fbe7 	bl	8009440 <ld_dword>
 800ac72:	4603      	mov	r3, r0
 800ac74:	4a17      	ldr	r2, [pc, #92]	@ (800acd4 <find_volume+0x490>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d113      	bne.n	800aca2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ac7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7c:	3330      	adds	r3, #48	@ 0x30
 800ac7e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7fe fbdc 	bl	8009440 <ld_dword>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac90:	3330      	adds	r3, #48	@ 0x30
 800ac92:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7fe fbd2 	bl	8009440 <ld_dword>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800aca8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800acaa:	4b0b      	ldr	r3, [pc, #44]	@ (800acd8 <find_volume+0x494>)
 800acac:	881b      	ldrh	r3, [r3, #0]
 800acae:	3301      	adds	r3, #1
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	4b09      	ldr	r3, [pc, #36]	@ (800acd8 <find_volume+0x494>)
 800acb4:	801a      	strh	r2, [r3, #0]
 800acb6:	4b08      	ldr	r3, [pc, #32]	@ (800acd8 <find_volume+0x494>)
 800acb8:	881a      	ldrh	r2, [r3, #0]
 800acba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acbc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800acbe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800acc0:	f7fe fdee 	bl	80098a0 <clear_lock>
#endif
	return FR_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3758      	adds	r7, #88	@ 0x58
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	41615252 	.word	0x41615252
 800acd4:	61417272 	.word	0x61417272
 800acd8:	2004079c 	.word	0x2004079c

0800acdc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ace6:	2309      	movs	r3, #9
 800ace8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d01c      	beq.n	800ad2a <validate+0x4e>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d018      	beq.n	800ad2a <validate+0x4e>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d013      	beq.n	800ad2a <validate+0x4e>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	889a      	ldrh	r2, [r3, #4]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	88db      	ldrh	r3, [r3, #6]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d10c      	bne.n	800ad2a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	785b      	ldrb	r3, [r3, #1]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fe fadc 	bl	80092d4 <disk_status>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d101      	bne.n	800ad2a <validate+0x4e>
			res = FR_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ad2a:	7bfb      	ldrb	r3, [r7, #15]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d102      	bne.n	800ad36 <validate+0x5a>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	e000      	b.n	800ad38 <validate+0x5c>
 800ad36:	2300      	movs	r3, #0
 800ad38:	683a      	ldr	r2, [r7, #0]
 800ad3a:	6013      	str	r3, [r2, #0]
	return res;
 800ad3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
	...

0800ad48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b088      	sub	sp, #32
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	4613      	mov	r3, r2
 800ad54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ad5a:	f107 0310 	add.w	r3, r7, #16
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff fcd5 	bl	800a70e <get_ldnumber>
 800ad64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	da01      	bge.n	800ad70 <f_mount+0x28>
 800ad6c:	230b      	movs	r3, #11
 800ad6e:	e02b      	b.n	800adc8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ad70:	4a17      	ldr	r2, [pc, #92]	@ (800add0 <f_mount+0x88>)
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d005      	beq.n	800ad8c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ad80:	69b8      	ldr	r0, [r7, #24]
 800ad82:	f7fe fd8d 	bl	80098a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d002      	beq.n	800ad98 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	490d      	ldr	r1, [pc, #52]	@ (800add0 <f_mount+0x88>)
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <f_mount+0x66>
 800ada8:	79fb      	ldrb	r3, [r7, #7]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d001      	beq.n	800adb2 <f_mount+0x6a>
 800adae:	2300      	movs	r3, #0
 800adb0:	e00a      	b.n	800adc8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800adb2:	f107 010c 	add.w	r1, r7, #12
 800adb6:	f107 0308 	add.w	r3, r7, #8
 800adba:	2200      	movs	r2, #0
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7ff fd41 	bl	800a844 <find_volume>
 800adc2:	4603      	mov	r3, r0
 800adc4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800adc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3720      	adds	r7, #32
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	20040798 	.word	0x20040798

0800add4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b098      	sub	sp, #96	@ 0x60
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	4613      	mov	r3, r2
 800ade0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <f_open+0x18>
 800ade8:	2309      	movs	r3, #9
 800adea:	e1a9      	b.n	800b140 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800adec:	79fb      	ldrb	r3, [r7, #7]
 800adee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800adf2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800adf4:	79fa      	ldrb	r2, [r7, #7]
 800adf6:	f107 0110 	add.w	r1, r7, #16
 800adfa:	f107 0308 	add.w	r3, r7, #8
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff fd20 	bl	800a844 <find_volume>
 800ae04:	4603      	mov	r3, r0
 800ae06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800ae0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f040 818d 	bne.w	800b12e <f_open+0x35a>
		dj.obj.fs = fs;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	f107 0314 	add.w	r3, r7, #20
 800ae1e:	4611      	mov	r1, r2
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7ff fc03 	bl	800a62c <follow_path>
 800ae26:	4603      	mov	r3, r0
 800ae28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ae2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d118      	bne.n	800ae66 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ae34:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae38:	b25b      	sxtb	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	da03      	bge.n	800ae46 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ae3e:	2306      	movs	r3, #6
 800ae40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ae44:	e00f      	b.n	800ae66 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ae46:	79fb      	ldrb	r3, [r7, #7]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	bf8c      	ite	hi
 800ae4c:	2301      	movhi	r3, #1
 800ae4e:	2300      	movls	r3, #0
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	461a      	mov	r2, r3
 800ae54:	f107 0314 	add.w	r3, r7, #20
 800ae58:	4611      	mov	r1, r2
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fe fbd8 	bl	8009610 <chk_lock>
 800ae60:	4603      	mov	r3, r0
 800ae62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ae66:	79fb      	ldrb	r3, [r7, #7]
 800ae68:	f003 031c 	and.w	r3, r3, #28
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d07f      	beq.n	800af70 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ae70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d017      	beq.n	800aea8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ae78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae7c:	2b04      	cmp	r3, #4
 800ae7e:	d10e      	bne.n	800ae9e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ae80:	f7fe fc22 	bl	80096c8 <enq_lock>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d006      	beq.n	800ae98 <f_open+0xc4>
 800ae8a:	f107 0314 	add.w	r3, r7, #20
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7ff fb06 	bl	800a4a0 <dir_register>
 800ae94:	4603      	mov	r3, r0
 800ae96:	e000      	b.n	800ae9a <f_open+0xc6>
 800ae98:	2312      	movs	r3, #18
 800ae9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ae9e:	79fb      	ldrb	r3, [r7, #7]
 800aea0:	f043 0308 	orr.w	r3, r3, #8
 800aea4:	71fb      	strb	r3, [r7, #7]
 800aea6:	e010      	b.n	800aeca <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800aea8:	7ebb      	ldrb	r3, [r7, #26]
 800aeaa:	f003 0311 	and.w	r3, r3, #17
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d003      	beq.n	800aeba <f_open+0xe6>
					res = FR_DENIED;
 800aeb2:	2307      	movs	r3, #7
 800aeb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800aeb8:	e007      	b.n	800aeca <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800aeba:	79fb      	ldrb	r3, [r7, #7]
 800aebc:	f003 0304 	and.w	r3, r3, #4
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <f_open+0xf6>
 800aec4:	2308      	movs	r3, #8
 800aec6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aeca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d168      	bne.n	800afa4 <f_open+0x1d0>
 800aed2:	79fb      	ldrb	r3, [r7, #7]
 800aed4:	f003 0308 	and.w	r3, r3, #8
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d063      	beq.n	800afa4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800aedc:	f7fd fcbe 	bl	800885c <get_fattime>
 800aee0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800aee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aee4:	330e      	adds	r3, #14
 800aee6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fe fae7 	bl	80094bc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800aeee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aef0:	3316      	adds	r3, #22
 800aef2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fe fae1 	bl	80094bc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800aefa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aefc:	330b      	adds	r3, #11
 800aefe:	2220      	movs	r2, #32
 800af00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af06:	4611      	mov	r1, r2
 800af08:	4618      	mov	r0, r3
 800af0a:	f7ff fa35 	bl	800a378 <ld_clust>
 800af0e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800af14:	2200      	movs	r2, #0
 800af16:	4618      	mov	r0, r3
 800af18:	f7ff fa4d 	bl	800a3b6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800af1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af1e:	331c      	adds	r3, #28
 800af20:	2100      	movs	r1, #0
 800af22:	4618      	mov	r0, r3
 800af24:	f7fe faca 	bl	80094bc <st_dword>
					fs->wflag = 1;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	2201      	movs	r2, #1
 800af2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800af2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af30:	2b00      	cmp	r3, #0
 800af32:	d037      	beq.n	800afa4 <f_open+0x1d0>
						dw = fs->winsect;
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af38:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800af3a:	f107 0314 	add.w	r3, r7, #20
 800af3e:	2200      	movs	r2, #0
 800af40:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800af42:	4618      	mov	r0, r3
 800af44:	f7fe ff60 	bl	8009e08 <remove_chain>
 800af48:	4603      	mov	r3, r0
 800af4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800af4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af52:	2b00      	cmp	r3, #0
 800af54:	d126      	bne.n	800afa4 <f_open+0x1d0>
							res = move_window(fs, dw);
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fe fd08 	bl	8009970 <move_window>
 800af60:	4603      	mov	r3, r0
 800af62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800af6a:	3a01      	subs	r2, #1
 800af6c:	60da      	str	r2, [r3, #12]
 800af6e:	e019      	b.n	800afa4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800af70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af74:	2b00      	cmp	r3, #0
 800af76:	d115      	bne.n	800afa4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800af78:	7ebb      	ldrb	r3, [r7, #26]
 800af7a:	f003 0310 	and.w	r3, r3, #16
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d003      	beq.n	800af8a <f_open+0x1b6>
					res = FR_NO_FILE;
 800af82:	2304      	movs	r3, #4
 800af84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800af88:	e00c      	b.n	800afa4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800af8a:	79fb      	ldrb	r3, [r7, #7]
 800af8c:	f003 0302 	and.w	r3, r3, #2
 800af90:	2b00      	cmp	r3, #0
 800af92:	d007      	beq.n	800afa4 <f_open+0x1d0>
 800af94:	7ebb      	ldrb	r3, [r7, #26]
 800af96:	f003 0301 	and.w	r3, r3, #1
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d002      	beq.n	800afa4 <f_open+0x1d0>
						res = FR_DENIED;
 800af9e:	2307      	movs	r3, #7
 800afa0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800afa4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d126      	bne.n	800affa <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800afac:	79fb      	ldrb	r3, [r7, #7]
 800afae:	f003 0308 	and.w	r3, r3, #8
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d003      	beq.n	800afbe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800afb6:	79fb      	ldrb	r3, [r7, #7]
 800afb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afbc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800afc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800afcc:	79fb      	ldrb	r3, [r7, #7]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	bf8c      	ite	hi
 800afd2:	2301      	movhi	r3, #1
 800afd4:	2300      	movls	r3, #0
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	461a      	mov	r2, r3
 800afda:	f107 0314 	add.w	r3, r7, #20
 800afde:	4611      	mov	r1, r2
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fe fb93 	bl	800970c <inc_lock>
 800afe6:	4602      	mov	r2, r0
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d102      	bne.n	800affa <f_open+0x226>
 800aff4:	2302      	movs	r3, #2
 800aff6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800affa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800affe:	2b00      	cmp	r3, #0
 800b000:	f040 8095 	bne.w	800b12e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b008:	4611      	mov	r1, r2
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7ff f9b4 	bl	800a378 <ld_clust>
 800b010:	4602      	mov	r2, r0
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b018:	331c      	adds	r3, #28
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe fa10 	bl	8009440 <ld_dword>
 800b020:	4602      	mov	r2, r0
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	88da      	ldrh	r2, [r3, #6]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	79fa      	ldrb	r2, [r7, #7]
 800b03e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2200      	movs	r2, #0
 800b050:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	3330      	adds	r3, #48	@ 0x30
 800b056:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b05a:	2100      	movs	r1, #0
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fe fa7a 	bl	8009556 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b062:	79fb      	ldrb	r3, [r7, #7]
 800b064:	f003 0320 	and.w	r3, r3, #32
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d060      	beq.n	800b12e <f_open+0x35a>
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d05c      	beq.n	800b12e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	68da      	ldr	r2, [r3, #12]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	895b      	ldrh	r3, [r3, #10]
 800b080:	025b      	lsls	r3, r3, #9
 800b082:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b090:	e016      	b.n	800b0c0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b096:	4618      	mov	r0, r3
 800b098:	f7fe fd25 	bl	8009ae6 <get_fat>
 800b09c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b09e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d802      	bhi.n	800b0aa <f_open+0x2d6>
 800b0a4:	2302      	movs	r3, #2
 800b0a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b0aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b0:	d102      	bne.n	800b0b8 <f_open+0x2e4>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b0b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b0ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	657b      	str	r3, [r7, #84]	@ 0x54
 800b0c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d103      	bne.n	800b0d0 <f_open+0x2fc>
 800b0c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b0ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d8e0      	bhi.n	800b092 <f_open+0x2be>
				}
				fp->clust = clst;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b0d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d127      	bne.n	800b12e <f_open+0x35a>
 800b0de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d022      	beq.n	800b12e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fe fcdb 	bl	8009aa8 <clust2sect>
 800b0f2:	6478      	str	r0, [r7, #68]	@ 0x44
 800b0f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d103      	bne.n	800b102 <f_open+0x32e>
						res = FR_INT_ERR;
 800b0fa:	2302      	movs	r3, #2
 800b0fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b100:	e015      	b.n	800b12e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b104:	0a5a      	lsrs	r2, r3, #9
 800b106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b108:	441a      	add	r2, r3
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	7858      	ldrb	r0, [r3, #1]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6a1a      	ldr	r2, [r3, #32]
 800b11c:	2301      	movs	r3, #1
 800b11e:	f7fe f919 	bl	8009354 <disk_read>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <f_open+0x35a>
 800b128:	2301      	movs	r3, #1
 800b12a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b12e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b132:	2b00      	cmp	r3, #0
 800b134:	d002      	beq.n	800b13c <f_open+0x368>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b13c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800b140:	4618      	mov	r0, r3
 800b142:	3760      	adds	r7, #96	@ 0x60
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b08c      	sub	sp, #48	@ 0x30
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	2200      	movs	r2, #0
 800b15e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f107 0210 	add.w	r2, r7, #16
 800b166:	4611      	mov	r1, r2
 800b168:	4618      	mov	r0, r3
 800b16a:	f7ff fdb7 	bl	800acdc <validate>
 800b16e:	4603      	mov	r3, r0
 800b170:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b174:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d107      	bne.n	800b18c <f_write+0x44>
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	7d5b      	ldrb	r3, [r3, #21]
 800b180:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b184:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d002      	beq.n	800b192 <f_write+0x4a>
 800b18c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b190:	e14b      	b.n	800b42a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	7d1b      	ldrb	r3, [r3, #20]
 800b196:	f003 0302 	and.w	r3, r3, #2
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d101      	bne.n	800b1a2 <f_write+0x5a>
 800b19e:	2307      	movs	r3, #7
 800b1a0:	e143      	b.n	800b42a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	699a      	ldr	r2, [r3, #24]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	441a      	add	r2, r3
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	699b      	ldr	r3, [r3, #24]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	f080 812d 	bcs.w	800b40e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	43db      	mvns	r3, r3
 800b1ba:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b1bc:	e127      	b.n	800b40e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	699b      	ldr	r3, [r3, #24]
 800b1c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f040 80e3 	bne.w	800b392 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	0a5b      	lsrs	r3, r3, #9
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	8952      	ldrh	r2, [r2, #10]
 800b1d6:	3a01      	subs	r2, #1
 800b1d8:	4013      	ands	r3, r2
 800b1da:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d143      	bne.n	800b26a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	699b      	ldr	r3, [r3, #24]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10c      	bne.n	800b204 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d11a      	bne.n	800b22c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fe fe69 	bl	8009ed2 <create_chain>
 800b200:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b202:	e013      	b.n	800b22c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d007      	beq.n	800b21c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	699b      	ldr	r3, [r3, #24]
 800b210:	4619      	mov	r1, r3
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f7fe fef5 	bl	800a002 <clmt_clust>
 800b218:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b21a:	e007      	b.n	800b22c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	4619      	mov	r1, r3
 800b224:	4610      	mov	r0, r2
 800b226:	f7fe fe54 	bl	8009ed2 <create_chain>
 800b22a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f000 80f2 	beq.w	800b418 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b236:	2b01      	cmp	r3, #1
 800b238:	d104      	bne.n	800b244 <f_write+0xfc>
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2202      	movs	r2, #2
 800b23e:	755a      	strb	r2, [r3, #21]
 800b240:	2302      	movs	r3, #2
 800b242:	e0f2      	b.n	800b42a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b24a:	d104      	bne.n	800b256 <f_write+0x10e>
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2201      	movs	r2, #1
 800b250:	755a      	strb	r2, [r3, #21]
 800b252:	2301      	movs	r3, #1
 800b254:	e0e9      	b.n	800b42a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b25a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d102      	bne.n	800b26a <f_write+0x122>
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b268:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	7d1b      	ldrb	r3, [r3, #20]
 800b26e:	b25b      	sxtb	r3, r3
 800b270:	2b00      	cmp	r3, #0
 800b272:	da18      	bge.n	800b2a6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	7858      	ldrb	r0, [r3, #1]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6a1a      	ldr	r2, [r3, #32]
 800b282:	2301      	movs	r3, #1
 800b284:	f7fe f886 	bl	8009394 <disk_write>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d004      	beq.n	800b298 <f_write+0x150>
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2201      	movs	r2, #1
 800b292:	755a      	strb	r2, [r3, #21]
 800b294:	2301      	movs	r3, #1
 800b296:	e0c8      	b.n	800b42a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	7d1b      	ldrb	r3, [r3, #20]
 800b29c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2a0:	b2da      	uxtb	r2, r3
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	69db      	ldr	r3, [r3, #28]
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	4610      	mov	r0, r2
 800b2b0:	f7fe fbfa 	bl	8009aa8 <clust2sect>
 800b2b4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d104      	bne.n	800b2c6 <f_write+0x17e>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2202      	movs	r2, #2
 800b2c0:	755a      	strb	r2, [r3, #21]
 800b2c2:	2302      	movs	r3, #2
 800b2c4:	e0b1      	b.n	800b42a <f_write+0x2e2>
			sect += csect;
 800b2c6:	697a      	ldr	r2, [r7, #20]
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	0a5b      	lsrs	r3, r3, #9
 800b2d2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b2d4:	6a3b      	ldr	r3, [r7, #32]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d03c      	beq.n	800b354 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b2da:	69ba      	ldr	r2, [r7, #24]
 800b2dc:	6a3b      	ldr	r3, [r7, #32]
 800b2de:	4413      	add	r3, r2
 800b2e0:	693a      	ldr	r2, [r7, #16]
 800b2e2:	8952      	ldrh	r2, [r2, #10]
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d905      	bls.n	800b2f4 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	895b      	ldrh	r3, [r3, #10]
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	7858      	ldrb	r0, [r3, #1]
 800b2f8:	6a3b      	ldr	r3, [r7, #32]
 800b2fa:	697a      	ldr	r2, [r7, #20]
 800b2fc:	69f9      	ldr	r1, [r7, #28]
 800b2fe:	f7fe f849 	bl	8009394 <disk_write>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d004      	beq.n	800b312 <f_write+0x1ca>
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2201      	movs	r2, #1
 800b30c:	755a      	strb	r2, [r3, #21]
 800b30e:	2301      	movs	r3, #1
 800b310:	e08b      	b.n	800b42a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6a1a      	ldr	r2, [r3, #32]
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	6a3a      	ldr	r2, [r7, #32]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d915      	bls.n	800b34c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6a1a      	ldr	r2, [r3, #32]
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	025b      	lsls	r3, r3, #9
 800b330:	69fa      	ldr	r2, [r7, #28]
 800b332:	4413      	add	r3, r2
 800b334:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b338:	4619      	mov	r1, r3
 800b33a:	f7fe f8eb 	bl	8009514 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	7d1b      	ldrb	r3, [r3, #20]
 800b342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b346:	b2da      	uxtb	r2, r3
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b34c:	6a3b      	ldr	r3, [r7, #32]
 800b34e:	025b      	lsls	r3, r3, #9
 800b350:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800b352:	e03f      	b.n	800b3d4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6a1b      	ldr	r3, [r3, #32]
 800b358:	697a      	ldr	r2, [r7, #20]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d016      	beq.n	800b38c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	699a      	ldr	r2, [r3, #24]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b366:	429a      	cmp	r2, r3
 800b368:	d210      	bcs.n	800b38c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	7858      	ldrb	r0, [r3, #1]
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b374:	2301      	movs	r3, #1
 800b376:	697a      	ldr	r2, [r7, #20]
 800b378:	f7fd ffec 	bl	8009354 <disk_read>
 800b37c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d004      	beq.n	800b38c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2201      	movs	r2, #1
 800b386:	755a      	strb	r2, [r3, #21]
 800b388:	2301      	movs	r3, #1
 800b38a:	e04e      	b.n	800b42a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b39a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b39e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b3a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d901      	bls.n	800b3ac <f_write+0x264>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	699b      	ldr	r3, [r3, #24]
 800b3b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ba:	4413      	add	r3, r2
 800b3bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3be:	69f9      	ldr	r1, [r7, #28]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7fe f8a7 	bl	8009514 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	7d1b      	ldrb	r3, [r3, #20]
 800b3ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b3d4:	69fa      	ldr	r2, [r7, #28]
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d8:	4413      	add	r3, r2
 800b3da:	61fb      	str	r3, [r7, #28]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	699a      	ldr	r2, [r3, #24]
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e2:	441a      	add	r2, r3
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	619a      	str	r2, [r3, #24]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	68da      	ldr	r2, [r3, #12]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	bf38      	it	cc
 800b3f4:	461a      	movcc	r2, r3
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	60da      	str	r2, [r3, #12]
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b400:	441a      	add	r2, r3
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	601a      	str	r2, [r3, #0]
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	f47f aed4 	bne.w	800b1be <f_write+0x76>
 800b416:	e000      	b.n	800b41a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b418:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	7d1b      	ldrb	r3, [r3, #20]
 800b41e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b422:	b2da      	uxtb	r2, r3
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3730      	adds	r7, #48	@ 0x30
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b086      	sub	sp, #24
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f107 0208 	add.w	r2, r7, #8
 800b440:	4611      	mov	r1, r2
 800b442:	4618      	mov	r0, r3
 800b444:	f7ff fc4a 	bl	800acdc <validate>
 800b448:	4603      	mov	r3, r0
 800b44a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b44c:	7dfb      	ldrb	r3, [r7, #23]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d168      	bne.n	800b524 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	7d1b      	ldrb	r3, [r3, #20]
 800b456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d062      	beq.n	800b524 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	7d1b      	ldrb	r3, [r3, #20]
 800b462:	b25b      	sxtb	r3, r3
 800b464:	2b00      	cmp	r3, #0
 800b466:	da15      	bge.n	800b494 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	7858      	ldrb	r0, [r3, #1]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a1a      	ldr	r2, [r3, #32]
 800b476:	2301      	movs	r3, #1
 800b478:	f7fd ff8c 	bl	8009394 <disk_write>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <f_sync+0x54>
 800b482:	2301      	movs	r3, #1
 800b484:	e04f      	b.n	800b526 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	7d1b      	ldrb	r3, [r3, #20]
 800b48a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b48e:	b2da      	uxtb	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b494:	f7fd f9e2 	bl	800885c <get_fattime>
 800b498:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	4610      	mov	r0, r2
 800b4a4:	f7fe fa64 	bl	8009970 <move_window>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b4ac:	7dfb      	ldrb	r3, [r7, #23]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d138      	bne.n	800b524 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	330b      	adds	r3, #11
 800b4bc:	781a      	ldrb	r2, [r3, #0]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	330b      	adds	r3, #11
 800b4c2:	f042 0220 	orr.w	r2, r2, #32
 800b4c6:	b2d2      	uxtb	r2, r2
 800b4c8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6818      	ldr	r0, [r3, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	68f9      	ldr	r1, [r7, #12]
 800b4d6:	f7fe ff6e 	bl	800a3b6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f103 021c 	add.w	r2, r3, #28
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4610      	mov	r0, r2
 800b4e8:	f7fd ffe8 	bl	80094bc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	3316      	adds	r3, #22
 800b4f0:	6939      	ldr	r1, [r7, #16]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fd ffe2 	bl	80094bc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3312      	adds	r3, #18
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fd ffc1 	bl	8009486 <st_word>
					fs->wflag = 1;
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	2201      	movs	r2, #1
 800b508:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fe fa5d 	bl	80099cc <sync_fs>
 800b512:	4603      	mov	r3, r0
 800b514:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	7d1b      	ldrb	r3, [r3, #20]
 800b51a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b51e:	b2da      	uxtb	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b524:	7dfb      	ldrb	r3, [r7, #23]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3718      	adds	r7, #24
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b084      	sub	sp, #16
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7ff ff7b 	bl	800b432 <f_sync>
 800b53c:	4603      	mov	r3, r0
 800b53e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b540:	7bfb      	ldrb	r3, [r7, #15]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d118      	bne.n	800b578 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f107 0208 	add.w	r2, r7, #8
 800b54c:	4611      	mov	r1, r2
 800b54e:	4618      	mov	r0, r3
 800b550:	f7ff fbc4 	bl	800acdc <validate>
 800b554:	4603      	mov	r3, r0
 800b556:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b558:	7bfb      	ldrb	r3, [r7, #15]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10c      	bne.n	800b578 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	4618      	mov	r0, r3
 800b564:	f7fe f960 	bl	8009828 <dec_lock>
 800b568:	4603      	mov	r3, r0
 800b56a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b56c:	7bfb      	ldrb	r3, [r7, #15]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d102      	bne.n	800b578 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b578:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
	...

0800b584 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b584:	b480      	push	{r7}
 800b586:	b087      	sub	sp, #28
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	4613      	mov	r3, r2
 800b590:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b592:	2301      	movs	r3, #1
 800b594:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b59a:	4b1f      	ldr	r3, [pc, #124]	@ (800b618 <FATFS_LinkDriverEx+0x94>)
 800b59c:	7a5b      	ldrb	r3, [r3, #9]
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d131      	bne.n	800b608 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b5a4:	4b1c      	ldr	r3, [pc, #112]	@ (800b618 <FATFS_LinkDriverEx+0x94>)
 800b5a6:	7a5b      	ldrb	r3, [r3, #9]
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	4b1a      	ldr	r3, [pc, #104]	@ (800b618 <FATFS_LinkDriverEx+0x94>)
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b5b2:	4b19      	ldr	r3, [pc, #100]	@ (800b618 <FATFS_LinkDriverEx+0x94>)
 800b5b4:	7a5b      	ldrb	r3, [r3, #9]
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	4a17      	ldr	r2, [pc, #92]	@ (800b618 <FATFS_LinkDriverEx+0x94>)
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	4413      	add	r3, r2
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b5c2:	4b15      	ldr	r3, [pc, #84]	@ (800b618 <FATFS_LinkDriverEx+0x94>)
 800b5c4:	7a5b      	ldrb	r3, [r3, #9]
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	4b13      	ldr	r3, [pc, #76]	@ (800b618 <FATFS_LinkDriverEx+0x94>)
 800b5cc:	4413      	add	r3, r2
 800b5ce:	79fa      	ldrb	r2, [r7, #7]
 800b5d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b5d2:	4b11      	ldr	r3, [pc, #68]	@ (800b618 <FATFS_LinkDriverEx+0x94>)
 800b5d4:	7a5b      	ldrb	r3, [r3, #9]
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	1c5a      	adds	r2, r3, #1
 800b5da:	b2d1      	uxtb	r1, r2
 800b5dc:	4a0e      	ldr	r2, [pc, #56]	@ (800b618 <FATFS_LinkDriverEx+0x94>)
 800b5de:	7251      	strb	r1, [r2, #9]
 800b5e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b5e2:	7dbb      	ldrb	r3, [r7, #22]
 800b5e4:	3330      	adds	r3, #48	@ 0x30
 800b5e6:	b2da      	uxtb	r2, r3
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	223a      	movs	r2, #58	@ 0x3a
 800b5f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	3302      	adds	r3, #2
 800b5f8:	222f      	movs	r2, #47	@ 0x2f
 800b5fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	3303      	adds	r3, #3
 800b600:	2200      	movs	r2, #0
 800b602:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b604:	2300      	movs	r3, #0
 800b606:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b608:	7dfb      	ldrb	r3, [r7, #23]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	371c      	adds	r7, #28
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	200407c0 	.word	0x200407c0

0800b61c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b626:	2200      	movs	r2, #0
 800b628:	6839      	ldr	r1, [r7, #0]
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7ff ffaa 	bl	800b584 <FATFS_LinkDriverEx>
 800b630:	4603      	mov	r3, r0
}
 800b632:	4618      	mov	r0, r3
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
	...

0800b63c <rand>:
 800b63c:	4b16      	ldr	r3, [pc, #88]	@ (800b698 <rand+0x5c>)
 800b63e:	b510      	push	{r4, lr}
 800b640:	681c      	ldr	r4, [r3, #0]
 800b642:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b644:	b9b3      	cbnz	r3, 800b674 <rand+0x38>
 800b646:	2018      	movs	r0, #24
 800b648:	f000 fa4e 	bl	800bae8 <malloc>
 800b64c:	4602      	mov	r2, r0
 800b64e:	6320      	str	r0, [r4, #48]	@ 0x30
 800b650:	b920      	cbnz	r0, 800b65c <rand+0x20>
 800b652:	4b12      	ldr	r3, [pc, #72]	@ (800b69c <rand+0x60>)
 800b654:	4812      	ldr	r0, [pc, #72]	@ (800b6a0 <rand+0x64>)
 800b656:	2152      	movs	r1, #82	@ 0x52
 800b658:	f000 f9de 	bl	800ba18 <__assert_func>
 800b65c:	4911      	ldr	r1, [pc, #68]	@ (800b6a4 <rand+0x68>)
 800b65e:	4b12      	ldr	r3, [pc, #72]	@ (800b6a8 <rand+0x6c>)
 800b660:	e9c0 1300 	strd	r1, r3, [r0]
 800b664:	4b11      	ldr	r3, [pc, #68]	@ (800b6ac <rand+0x70>)
 800b666:	6083      	str	r3, [r0, #8]
 800b668:	230b      	movs	r3, #11
 800b66a:	8183      	strh	r3, [r0, #12]
 800b66c:	2100      	movs	r1, #0
 800b66e:	2001      	movs	r0, #1
 800b670:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b674:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b676:	480e      	ldr	r0, [pc, #56]	@ (800b6b0 <rand+0x74>)
 800b678:	690b      	ldr	r3, [r1, #16]
 800b67a:	694c      	ldr	r4, [r1, #20]
 800b67c:	4a0d      	ldr	r2, [pc, #52]	@ (800b6b4 <rand+0x78>)
 800b67e:	4358      	muls	r0, r3
 800b680:	fb02 0004 	mla	r0, r2, r4, r0
 800b684:	fba3 3202 	umull	r3, r2, r3, r2
 800b688:	3301      	adds	r3, #1
 800b68a:	eb40 0002 	adc.w	r0, r0, r2
 800b68e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b692:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b696:	bd10      	pop	{r4, pc}
 800b698:	200400c8 	.word	0x200400c8
 800b69c:	080558d4 	.word	0x080558d4
 800b6a0:	080558eb 	.word	0x080558eb
 800b6a4:	abcd330e 	.word	0xabcd330e
 800b6a8:	e66d1234 	.word	0xe66d1234
 800b6ac:	0005deec 	.word	0x0005deec
 800b6b0:	5851f42d 	.word	0x5851f42d
 800b6b4:	4c957f2d 	.word	0x4c957f2d

0800b6b8 <std>:
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	b510      	push	{r4, lr}
 800b6bc:	4604      	mov	r4, r0
 800b6be:	e9c0 3300 	strd	r3, r3, [r0]
 800b6c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6c6:	6083      	str	r3, [r0, #8]
 800b6c8:	8181      	strh	r1, [r0, #12]
 800b6ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800b6cc:	81c2      	strh	r2, [r0, #14]
 800b6ce:	6183      	str	r3, [r0, #24]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	2208      	movs	r2, #8
 800b6d4:	305c      	adds	r0, #92	@ 0x5c
 800b6d6:	f000 f914 	bl	800b902 <memset>
 800b6da:	4b0d      	ldr	r3, [pc, #52]	@ (800b710 <std+0x58>)
 800b6dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800b6de:	4b0d      	ldr	r3, [pc, #52]	@ (800b714 <std+0x5c>)
 800b6e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b718 <std+0x60>)
 800b6e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b71c <std+0x64>)
 800b6e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b6ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b720 <std+0x68>)
 800b6ec:	6224      	str	r4, [r4, #32]
 800b6ee:	429c      	cmp	r4, r3
 800b6f0:	d006      	beq.n	800b700 <std+0x48>
 800b6f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b6f6:	4294      	cmp	r4, r2
 800b6f8:	d002      	beq.n	800b700 <std+0x48>
 800b6fa:	33d0      	adds	r3, #208	@ 0xd0
 800b6fc:	429c      	cmp	r4, r3
 800b6fe:	d105      	bne.n	800b70c <std+0x54>
 800b700:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b708:	f000 b982 	b.w	800ba10 <__retarget_lock_init_recursive>
 800b70c:	bd10      	pop	{r4, pc}
 800b70e:	bf00      	nop
 800b710:	0800b87d 	.word	0x0800b87d
 800b714:	0800b89f 	.word	0x0800b89f
 800b718:	0800b8d7 	.word	0x0800b8d7
 800b71c:	0800b8fb 	.word	0x0800b8fb
 800b720:	200407cc 	.word	0x200407cc

0800b724 <stdio_exit_handler>:
 800b724:	4a02      	ldr	r2, [pc, #8]	@ (800b730 <stdio_exit_handler+0xc>)
 800b726:	4903      	ldr	r1, [pc, #12]	@ (800b734 <stdio_exit_handler+0x10>)
 800b728:	4803      	ldr	r0, [pc, #12]	@ (800b738 <stdio_exit_handler+0x14>)
 800b72a:	f000 b869 	b.w	800b800 <_fwalk_sglue>
 800b72e:	bf00      	nop
 800b730:	200400bc 	.word	0x200400bc
 800b734:	0800c329 	.word	0x0800c329
 800b738:	200400cc 	.word	0x200400cc

0800b73c <cleanup_stdio>:
 800b73c:	6841      	ldr	r1, [r0, #4]
 800b73e:	4b0c      	ldr	r3, [pc, #48]	@ (800b770 <cleanup_stdio+0x34>)
 800b740:	4299      	cmp	r1, r3
 800b742:	b510      	push	{r4, lr}
 800b744:	4604      	mov	r4, r0
 800b746:	d001      	beq.n	800b74c <cleanup_stdio+0x10>
 800b748:	f000 fdee 	bl	800c328 <_fflush_r>
 800b74c:	68a1      	ldr	r1, [r4, #8]
 800b74e:	4b09      	ldr	r3, [pc, #36]	@ (800b774 <cleanup_stdio+0x38>)
 800b750:	4299      	cmp	r1, r3
 800b752:	d002      	beq.n	800b75a <cleanup_stdio+0x1e>
 800b754:	4620      	mov	r0, r4
 800b756:	f000 fde7 	bl	800c328 <_fflush_r>
 800b75a:	68e1      	ldr	r1, [r4, #12]
 800b75c:	4b06      	ldr	r3, [pc, #24]	@ (800b778 <cleanup_stdio+0x3c>)
 800b75e:	4299      	cmp	r1, r3
 800b760:	d004      	beq.n	800b76c <cleanup_stdio+0x30>
 800b762:	4620      	mov	r0, r4
 800b764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b768:	f000 bdde 	b.w	800c328 <_fflush_r>
 800b76c:	bd10      	pop	{r4, pc}
 800b76e:	bf00      	nop
 800b770:	200407cc 	.word	0x200407cc
 800b774:	20040834 	.word	0x20040834
 800b778:	2004089c 	.word	0x2004089c

0800b77c <global_stdio_init.part.0>:
 800b77c:	b510      	push	{r4, lr}
 800b77e:	4b0b      	ldr	r3, [pc, #44]	@ (800b7ac <global_stdio_init.part.0+0x30>)
 800b780:	4c0b      	ldr	r4, [pc, #44]	@ (800b7b0 <global_stdio_init.part.0+0x34>)
 800b782:	4a0c      	ldr	r2, [pc, #48]	@ (800b7b4 <global_stdio_init.part.0+0x38>)
 800b784:	601a      	str	r2, [r3, #0]
 800b786:	4620      	mov	r0, r4
 800b788:	2200      	movs	r2, #0
 800b78a:	2104      	movs	r1, #4
 800b78c:	f7ff ff94 	bl	800b6b8 <std>
 800b790:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b794:	2201      	movs	r2, #1
 800b796:	2109      	movs	r1, #9
 800b798:	f7ff ff8e 	bl	800b6b8 <std>
 800b79c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b7a0:	2202      	movs	r2, #2
 800b7a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7a6:	2112      	movs	r1, #18
 800b7a8:	f7ff bf86 	b.w	800b6b8 <std>
 800b7ac:	20040904 	.word	0x20040904
 800b7b0:	200407cc 	.word	0x200407cc
 800b7b4:	0800b725 	.word	0x0800b725

0800b7b8 <__sfp_lock_acquire>:
 800b7b8:	4801      	ldr	r0, [pc, #4]	@ (800b7c0 <__sfp_lock_acquire+0x8>)
 800b7ba:	f000 b92a 	b.w	800ba12 <__retarget_lock_acquire_recursive>
 800b7be:	bf00      	nop
 800b7c0:	2004090d 	.word	0x2004090d

0800b7c4 <__sfp_lock_release>:
 800b7c4:	4801      	ldr	r0, [pc, #4]	@ (800b7cc <__sfp_lock_release+0x8>)
 800b7c6:	f000 b925 	b.w	800ba14 <__retarget_lock_release_recursive>
 800b7ca:	bf00      	nop
 800b7cc:	2004090d 	.word	0x2004090d

0800b7d0 <__sinit>:
 800b7d0:	b510      	push	{r4, lr}
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	f7ff fff0 	bl	800b7b8 <__sfp_lock_acquire>
 800b7d8:	6a23      	ldr	r3, [r4, #32]
 800b7da:	b11b      	cbz	r3, 800b7e4 <__sinit+0x14>
 800b7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7e0:	f7ff bff0 	b.w	800b7c4 <__sfp_lock_release>
 800b7e4:	4b04      	ldr	r3, [pc, #16]	@ (800b7f8 <__sinit+0x28>)
 800b7e6:	6223      	str	r3, [r4, #32]
 800b7e8:	4b04      	ldr	r3, [pc, #16]	@ (800b7fc <__sinit+0x2c>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1f5      	bne.n	800b7dc <__sinit+0xc>
 800b7f0:	f7ff ffc4 	bl	800b77c <global_stdio_init.part.0>
 800b7f4:	e7f2      	b.n	800b7dc <__sinit+0xc>
 800b7f6:	bf00      	nop
 800b7f8:	0800b73d 	.word	0x0800b73d
 800b7fc:	20040904 	.word	0x20040904

0800b800 <_fwalk_sglue>:
 800b800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b804:	4607      	mov	r7, r0
 800b806:	4688      	mov	r8, r1
 800b808:	4614      	mov	r4, r2
 800b80a:	2600      	movs	r6, #0
 800b80c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b810:	f1b9 0901 	subs.w	r9, r9, #1
 800b814:	d505      	bpl.n	800b822 <_fwalk_sglue+0x22>
 800b816:	6824      	ldr	r4, [r4, #0]
 800b818:	2c00      	cmp	r4, #0
 800b81a:	d1f7      	bne.n	800b80c <_fwalk_sglue+0xc>
 800b81c:	4630      	mov	r0, r6
 800b81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b822:	89ab      	ldrh	r3, [r5, #12]
 800b824:	2b01      	cmp	r3, #1
 800b826:	d907      	bls.n	800b838 <_fwalk_sglue+0x38>
 800b828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b82c:	3301      	adds	r3, #1
 800b82e:	d003      	beq.n	800b838 <_fwalk_sglue+0x38>
 800b830:	4629      	mov	r1, r5
 800b832:	4638      	mov	r0, r7
 800b834:	47c0      	blx	r8
 800b836:	4306      	orrs	r6, r0
 800b838:	3568      	adds	r5, #104	@ 0x68
 800b83a:	e7e9      	b.n	800b810 <_fwalk_sglue+0x10>

0800b83c <siprintf>:
 800b83c:	b40e      	push	{r1, r2, r3}
 800b83e:	b500      	push	{lr}
 800b840:	b09c      	sub	sp, #112	@ 0x70
 800b842:	ab1d      	add	r3, sp, #116	@ 0x74
 800b844:	9002      	str	r0, [sp, #8]
 800b846:	9006      	str	r0, [sp, #24]
 800b848:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b84c:	4809      	ldr	r0, [pc, #36]	@ (800b874 <siprintf+0x38>)
 800b84e:	9107      	str	r1, [sp, #28]
 800b850:	9104      	str	r1, [sp, #16]
 800b852:	4909      	ldr	r1, [pc, #36]	@ (800b878 <siprintf+0x3c>)
 800b854:	f853 2b04 	ldr.w	r2, [r3], #4
 800b858:	9105      	str	r1, [sp, #20]
 800b85a:	6800      	ldr	r0, [r0, #0]
 800b85c:	9301      	str	r3, [sp, #4]
 800b85e:	a902      	add	r1, sp, #8
 800b860:	f000 fa54 	bl	800bd0c <_svfiprintf_r>
 800b864:	9b02      	ldr	r3, [sp, #8]
 800b866:	2200      	movs	r2, #0
 800b868:	701a      	strb	r2, [r3, #0]
 800b86a:	b01c      	add	sp, #112	@ 0x70
 800b86c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b870:	b003      	add	sp, #12
 800b872:	4770      	bx	lr
 800b874:	200400c8 	.word	0x200400c8
 800b878:	ffff0208 	.word	0xffff0208

0800b87c <__sread>:
 800b87c:	b510      	push	{r4, lr}
 800b87e:	460c      	mov	r4, r1
 800b880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b884:	f000 f876 	bl	800b974 <_read_r>
 800b888:	2800      	cmp	r0, #0
 800b88a:	bfab      	itete	ge
 800b88c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b88e:	89a3      	ldrhlt	r3, [r4, #12]
 800b890:	181b      	addge	r3, r3, r0
 800b892:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b896:	bfac      	ite	ge
 800b898:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b89a:	81a3      	strhlt	r3, [r4, #12]
 800b89c:	bd10      	pop	{r4, pc}

0800b89e <__swrite>:
 800b89e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a2:	461f      	mov	r7, r3
 800b8a4:	898b      	ldrh	r3, [r1, #12]
 800b8a6:	05db      	lsls	r3, r3, #23
 800b8a8:	4605      	mov	r5, r0
 800b8aa:	460c      	mov	r4, r1
 800b8ac:	4616      	mov	r6, r2
 800b8ae:	d505      	bpl.n	800b8bc <__swrite+0x1e>
 800b8b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f000 f84a 	bl	800b950 <_lseek_r>
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	4632      	mov	r2, r6
 800b8ca:	463b      	mov	r3, r7
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d2:	f000 b861 	b.w	800b998 <_write_r>

0800b8d6 <__sseek>:
 800b8d6:	b510      	push	{r4, lr}
 800b8d8:	460c      	mov	r4, r1
 800b8da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8de:	f000 f837 	bl	800b950 <_lseek_r>
 800b8e2:	1c43      	adds	r3, r0, #1
 800b8e4:	89a3      	ldrh	r3, [r4, #12]
 800b8e6:	bf15      	itete	ne
 800b8e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b8ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b8ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b8f2:	81a3      	strheq	r3, [r4, #12]
 800b8f4:	bf18      	it	ne
 800b8f6:	81a3      	strhne	r3, [r4, #12]
 800b8f8:	bd10      	pop	{r4, pc}

0800b8fa <__sclose>:
 800b8fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8fe:	f000 b817 	b.w	800b930 <_close_r>

0800b902 <memset>:
 800b902:	4402      	add	r2, r0
 800b904:	4603      	mov	r3, r0
 800b906:	4293      	cmp	r3, r2
 800b908:	d100      	bne.n	800b90c <memset+0xa>
 800b90a:	4770      	bx	lr
 800b90c:	f803 1b01 	strb.w	r1, [r3], #1
 800b910:	e7f9      	b.n	800b906 <memset+0x4>

0800b912 <strcat>:
 800b912:	b510      	push	{r4, lr}
 800b914:	4602      	mov	r2, r0
 800b916:	7814      	ldrb	r4, [r2, #0]
 800b918:	4613      	mov	r3, r2
 800b91a:	3201      	adds	r2, #1
 800b91c:	2c00      	cmp	r4, #0
 800b91e:	d1fa      	bne.n	800b916 <strcat+0x4>
 800b920:	3b01      	subs	r3, #1
 800b922:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b926:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b92a:	2a00      	cmp	r2, #0
 800b92c:	d1f9      	bne.n	800b922 <strcat+0x10>
 800b92e:	bd10      	pop	{r4, pc}

0800b930 <_close_r>:
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	4d06      	ldr	r5, [pc, #24]	@ (800b94c <_close_r+0x1c>)
 800b934:	2300      	movs	r3, #0
 800b936:	4604      	mov	r4, r0
 800b938:	4608      	mov	r0, r1
 800b93a:	602b      	str	r3, [r5, #0]
 800b93c:	f7f6 ff4c 	bl	80027d8 <_close>
 800b940:	1c43      	adds	r3, r0, #1
 800b942:	d102      	bne.n	800b94a <_close_r+0x1a>
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	b103      	cbz	r3, 800b94a <_close_r+0x1a>
 800b948:	6023      	str	r3, [r4, #0]
 800b94a:	bd38      	pop	{r3, r4, r5, pc}
 800b94c:	20040908 	.word	0x20040908

0800b950 <_lseek_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	4d07      	ldr	r5, [pc, #28]	@ (800b970 <_lseek_r+0x20>)
 800b954:	4604      	mov	r4, r0
 800b956:	4608      	mov	r0, r1
 800b958:	4611      	mov	r1, r2
 800b95a:	2200      	movs	r2, #0
 800b95c:	602a      	str	r2, [r5, #0]
 800b95e:	461a      	mov	r2, r3
 800b960:	f7f6 ff61 	bl	8002826 <_lseek>
 800b964:	1c43      	adds	r3, r0, #1
 800b966:	d102      	bne.n	800b96e <_lseek_r+0x1e>
 800b968:	682b      	ldr	r3, [r5, #0]
 800b96a:	b103      	cbz	r3, 800b96e <_lseek_r+0x1e>
 800b96c:	6023      	str	r3, [r4, #0]
 800b96e:	bd38      	pop	{r3, r4, r5, pc}
 800b970:	20040908 	.word	0x20040908

0800b974 <_read_r>:
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	4d07      	ldr	r5, [pc, #28]	@ (800b994 <_read_r+0x20>)
 800b978:	4604      	mov	r4, r0
 800b97a:	4608      	mov	r0, r1
 800b97c:	4611      	mov	r1, r2
 800b97e:	2200      	movs	r2, #0
 800b980:	602a      	str	r2, [r5, #0]
 800b982:	461a      	mov	r2, r3
 800b984:	f7f6 feef 	bl	8002766 <_read>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	d102      	bne.n	800b992 <_read_r+0x1e>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	b103      	cbz	r3, 800b992 <_read_r+0x1e>
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	20040908 	.word	0x20040908

0800b998 <_write_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	4d07      	ldr	r5, [pc, #28]	@ (800b9b8 <_write_r+0x20>)
 800b99c:	4604      	mov	r4, r0
 800b99e:	4608      	mov	r0, r1
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	602a      	str	r2, [r5, #0]
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	f7f6 fefa 	bl	80027a0 <_write>
 800b9ac:	1c43      	adds	r3, r0, #1
 800b9ae:	d102      	bne.n	800b9b6 <_write_r+0x1e>
 800b9b0:	682b      	ldr	r3, [r5, #0]
 800b9b2:	b103      	cbz	r3, 800b9b6 <_write_r+0x1e>
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	bd38      	pop	{r3, r4, r5, pc}
 800b9b8:	20040908 	.word	0x20040908

0800b9bc <__errno>:
 800b9bc:	4b01      	ldr	r3, [pc, #4]	@ (800b9c4 <__errno+0x8>)
 800b9be:	6818      	ldr	r0, [r3, #0]
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	200400c8 	.word	0x200400c8

0800b9c8 <__libc_init_array>:
 800b9c8:	b570      	push	{r4, r5, r6, lr}
 800b9ca:	4d0d      	ldr	r5, [pc, #52]	@ (800ba00 <__libc_init_array+0x38>)
 800b9cc:	4c0d      	ldr	r4, [pc, #52]	@ (800ba04 <__libc_init_array+0x3c>)
 800b9ce:	1b64      	subs	r4, r4, r5
 800b9d0:	10a4      	asrs	r4, r4, #2
 800b9d2:	2600      	movs	r6, #0
 800b9d4:	42a6      	cmp	r6, r4
 800b9d6:	d109      	bne.n	800b9ec <__libc_init_array+0x24>
 800b9d8:	4d0b      	ldr	r5, [pc, #44]	@ (800ba08 <__libc_init_array+0x40>)
 800b9da:	4c0c      	ldr	r4, [pc, #48]	@ (800ba0c <__libc_init_array+0x44>)
 800b9dc:	f000 fff0 	bl	800c9c0 <_init>
 800b9e0:	1b64      	subs	r4, r4, r5
 800b9e2:	10a4      	asrs	r4, r4, #2
 800b9e4:	2600      	movs	r6, #0
 800b9e6:	42a6      	cmp	r6, r4
 800b9e8:	d105      	bne.n	800b9f6 <__libc_init_array+0x2e>
 800b9ea:	bd70      	pop	{r4, r5, r6, pc}
 800b9ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9f0:	4798      	blx	r3
 800b9f2:	3601      	adds	r6, #1
 800b9f4:	e7ee      	b.n	800b9d4 <__libc_init_array+0xc>
 800b9f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9fa:	4798      	blx	r3
 800b9fc:	3601      	adds	r6, #1
 800b9fe:	e7f2      	b.n	800b9e6 <__libc_init_array+0x1e>
 800ba00:	080559bc 	.word	0x080559bc
 800ba04:	080559bc 	.word	0x080559bc
 800ba08:	080559bc 	.word	0x080559bc
 800ba0c:	080559c0 	.word	0x080559c0

0800ba10 <__retarget_lock_init_recursive>:
 800ba10:	4770      	bx	lr

0800ba12 <__retarget_lock_acquire_recursive>:
 800ba12:	4770      	bx	lr

0800ba14 <__retarget_lock_release_recursive>:
 800ba14:	4770      	bx	lr
	...

0800ba18 <__assert_func>:
 800ba18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba1a:	4614      	mov	r4, r2
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	4b09      	ldr	r3, [pc, #36]	@ (800ba44 <__assert_func+0x2c>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4605      	mov	r5, r0
 800ba24:	68d8      	ldr	r0, [r3, #12]
 800ba26:	b954      	cbnz	r4, 800ba3e <__assert_func+0x26>
 800ba28:	4b07      	ldr	r3, [pc, #28]	@ (800ba48 <__assert_func+0x30>)
 800ba2a:	461c      	mov	r4, r3
 800ba2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba30:	9100      	str	r1, [sp, #0]
 800ba32:	462b      	mov	r3, r5
 800ba34:	4905      	ldr	r1, [pc, #20]	@ (800ba4c <__assert_func+0x34>)
 800ba36:	f000 fc9f 	bl	800c378 <fiprintf>
 800ba3a:	f000 fce7 	bl	800c40c <abort>
 800ba3e:	4b04      	ldr	r3, [pc, #16]	@ (800ba50 <__assert_func+0x38>)
 800ba40:	e7f4      	b.n	800ba2c <__assert_func+0x14>
 800ba42:	bf00      	nop
 800ba44:	200400c8 	.word	0x200400c8
 800ba48:	0805597e 	.word	0x0805597e
 800ba4c:	08055950 	.word	0x08055950
 800ba50:	08055943 	.word	0x08055943

0800ba54 <_free_r>:
 800ba54:	b538      	push	{r3, r4, r5, lr}
 800ba56:	4605      	mov	r5, r0
 800ba58:	2900      	cmp	r1, #0
 800ba5a:	d041      	beq.n	800bae0 <_free_r+0x8c>
 800ba5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba60:	1f0c      	subs	r4, r1, #4
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	bfb8      	it	lt
 800ba66:	18e4      	addlt	r4, r4, r3
 800ba68:	f000 f8e8 	bl	800bc3c <__malloc_lock>
 800ba6c:	4a1d      	ldr	r2, [pc, #116]	@ (800bae4 <_free_r+0x90>)
 800ba6e:	6813      	ldr	r3, [r2, #0]
 800ba70:	b933      	cbnz	r3, 800ba80 <_free_r+0x2c>
 800ba72:	6063      	str	r3, [r4, #4]
 800ba74:	6014      	str	r4, [r2, #0]
 800ba76:	4628      	mov	r0, r5
 800ba78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba7c:	f000 b8e4 	b.w	800bc48 <__malloc_unlock>
 800ba80:	42a3      	cmp	r3, r4
 800ba82:	d908      	bls.n	800ba96 <_free_r+0x42>
 800ba84:	6820      	ldr	r0, [r4, #0]
 800ba86:	1821      	adds	r1, r4, r0
 800ba88:	428b      	cmp	r3, r1
 800ba8a:	bf01      	itttt	eq
 800ba8c:	6819      	ldreq	r1, [r3, #0]
 800ba8e:	685b      	ldreq	r3, [r3, #4]
 800ba90:	1809      	addeq	r1, r1, r0
 800ba92:	6021      	streq	r1, [r4, #0]
 800ba94:	e7ed      	b.n	800ba72 <_free_r+0x1e>
 800ba96:	461a      	mov	r2, r3
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	b10b      	cbz	r3, 800baa0 <_free_r+0x4c>
 800ba9c:	42a3      	cmp	r3, r4
 800ba9e:	d9fa      	bls.n	800ba96 <_free_r+0x42>
 800baa0:	6811      	ldr	r1, [r2, #0]
 800baa2:	1850      	adds	r0, r2, r1
 800baa4:	42a0      	cmp	r0, r4
 800baa6:	d10b      	bne.n	800bac0 <_free_r+0x6c>
 800baa8:	6820      	ldr	r0, [r4, #0]
 800baaa:	4401      	add	r1, r0
 800baac:	1850      	adds	r0, r2, r1
 800baae:	4283      	cmp	r3, r0
 800bab0:	6011      	str	r1, [r2, #0]
 800bab2:	d1e0      	bne.n	800ba76 <_free_r+0x22>
 800bab4:	6818      	ldr	r0, [r3, #0]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	6053      	str	r3, [r2, #4]
 800baba:	4408      	add	r0, r1
 800babc:	6010      	str	r0, [r2, #0]
 800babe:	e7da      	b.n	800ba76 <_free_r+0x22>
 800bac0:	d902      	bls.n	800bac8 <_free_r+0x74>
 800bac2:	230c      	movs	r3, #12
 800bac4:	602b      	str	r3, [r5, #0]
 800bac6:	e7d6      	b.n	800ba76 <_free_r+0x22>
 800bac8:	6820      	ldr	r0, [r4, #0]
 800baca:	1821      	adds	r1, r4, r0
 800bacc:	428b      	cmp	r3, r1
 800bace:	bf04      	itt	eq
 800bad0:	6819      	ldreq	r1, [r3, #0]
 800bad2:	685b      	ldreq	r3, [r3, #4]
 800bad4:	6063      	str	r3, [r4, #4]
 800bad6:	bf04      	itt	eq
 800bad8:	1809      	addeq	r1, r1, r0
 800bada:	6021      	streq	r1, [r4, #0]
 800badc:	6054      	str	r4, [r2, #4]
 800bade:	e7ca      	b.n	800ba76 <_free_r+0x22>
 800bae0:	bd38      	pop	{r3, r4, r5, pc}
 800bae2:	bf00      	nop
 800bae4:	20040914 	.word	0x20040914

0800bae8 <malloc>:
 800bae8:	4b02      	ldr	r3, [pc, #8]	@ (800baf4 <malloc+0xc>)
 800baea:	4601      	mov	r1, r0
 800baec:	6818      	ldr	r0, [r3, #0]
 800baee:	f000 b825 	b.w	800bb3c <_malloc_r>
 800baf2:	bf00      	nop
 800baf4:	200400c8 	.word	0x200400c8

0800baf8 <sbrk_aligned>:
 800baf8:	b570      	push	{r4, r5, r6, lr}
 800bafa:	4e0f      	ldr	r6, [pc, #60]	@ (800bb38 <sbrk_aligned+0x40>)
 800bafc:	460c      	mov	r4, r1
 800bafe:	6831      	ldr	r1, [r6, #0]
 800bb00:	4605      	mov	r5, r0
 800bb02:	b911      	cbnz	r1, 800bb0a <sbrk_aligned+0x12>
 800bb04:	f000 fc64 	bl	800c3d0 <_sbrk_r>
 800bb08:	6030      	str	r0, [r6, #0]
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	f000 fc5f 	bl	800c3d0 <_sbrk_r>
 800bb12:	1c43      	adds	r3, r0, #1
 800bb14:	d103      	bne.n	800bb1e <sbrk_aligned+0x26>
 800bb16:	f04f 34ff 	mov.w	r4, #4294967295
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	bd70      	pop	{r4, r5, r6, pc}
 800bb1e:	1cc4      	adds	r4, r0, #3
 800bb20:	f024 0403 	bic.w	r4, r4, #3
 800bb24:	42a0      	cmp	r0, r4
 800bb26:	d0f8      	beq.n	800bb1a <sbrk_aligned+0x22>
 800bb28:	1a21      	subs	r1, r4, r0
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	f000 fc50 	bl	800c3d0 <_sbrk_r>
 800bb30:	3001      	adds	r0, #1
 800bb32:	d1f2      	bne.n	800bb1a <sbrk_aligned+0x22>
 800bb34:	e7ef      	b.n	800bb16 <sbrk_aligned+0x1e>
 800bb36:	bf00      	nop
 800bb38:	20040910 	.word	0x20040910

0800bb3c <_malloc_r>:
 800bb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb40:	1ccd      	adds	r5, r1, #3
 800bb42:	f025 0503 	bic.w	r5, r5, #3
 800bb46:	3508      	adds	r5, #8
 800bb48:	2d0c      	cmp	r5, #12
 800bb4a:	bf38      	it	cc
 800bb4c:	250c      	movcc	r5, #12
 800bb4e:	2d00      	cmp	r5, #0
 800bb50:	4606      	mov	r6, r0
 800bb52:	db01      	blt.n	800bb58 <_malloc_r+0x1c>
 800bb54:	42a9      	cmp	r1, r5
 800bb56:	d904      	bls.n	800bb62 <_malloc_r+0x26>
 800bb58:	230c      	movs	r3, #12
 800bb5a:	6033      	str	r3, [r6, #0]
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc38 <_malloc_r+0xfc>
 800bb66:	f000 f869 	bl	800bc3c <__malloc_lock>
 800bb6a:	f8d8 3000 	ldr.w	r3, [r8]
 800bb6e:	461c      	mov	r4, r3
 800bb70:	bb44      	cbnz	r4, 800bbc4 <_malloc_r+0x88>
 800bb72:	4629      	mov	r1, r5
 800bb74:	4630      	mov	r0, r6
 800bb76:	f7ff ffbf 	bl	800baf8 <sbrk_aligned>
 800bb7a:	1c43      	adds	r3, r0, #1
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	d158      	bne.n	800bc32 <_malloc_r+0xf6>
 800bb80:	f8d8 4000 	ldr.w	r4, [r8]
 800bb84:	4627      	mov	r7, r4
 800bb86:	2f00      	cmp	r7, #0
 800bb88:	d143      	bne.n	800bc12 <_malloc_r+0xd6>
 800bb8a:	2c00      	cmp	r4, #0
 800bb8c:	d04b      	beq.n	800bc26 <_malloc_r+0xea>
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	4639      	mov	r1, r7
 800bb92:	4630      	mov	r0, r6
 800bb94:	eb04 0903 	add.w	r9, r4, r3
 800bb98:	f000 fc1a 	bl	800c3d0 <_sbrk_r>
 800bb9c:	4581      	cmp	r9, r0
 800bb9e:	d142      	bne.n	800bc26 <_malloc_r+0xea>
 800bba0:	6821      	ldr	r1, [r4, #0]
 800bba2:	1a6d      	subs	r5, r5, r1
 800bba4:	4629      	mov	r1, r5
 800bba6:	4630      	mov	r0, r6
 800bba8:	f7ff ffa6 	bl	800baf8 <sbrk_aligned>
 800bbac:	3001      	adds	r0, #1
 800bbae:	d03a      	beq.n	800bc26 <_malloc_r+0xea>
 800bbb0:	6823      	ldr	r3, [r4, #0]
 800bbb2:	442b      	add	r3, r5
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	f8d8 3000 	ldr.w	r3, [r8]
 800bbba:	685a      	ldr	r2, [r3, #4]
 800bbbc:	bb62      	cbnz	r2, 800bc18 <_malloc_r+0xdc>
 800bbbe:	f8c8 7000 	str.w	r7, [r8]
 800bbc2:	e00f      	b.n	800bbe4 <_malloc_r+0xa8>
 800bbc4:	6822      	ldr	r2, [r4, #0]
 800bbc6:	1b52      	subs	r2, r2, r5
 800bbc8:	d420      	bmi.n	800bc0c <_malloc_r+0xd0>
 800bbca:	2a0b      	cmp	r2, #11
 800bbcc:	d917      	bls.n	800bbfe <_malloc_r+0xc2>
 800bbce:	1961      	adds	r1, r4, r5
 800bbd0:	42a3      	cmp	r3, r4
 800bbd2:	6025      	str	r5, [r4, #0]
 800bbd4:	bf18      	it	ne
 800bbd6:	6059      	strne	r1, [r3, #4]
 800bbd8:	6863      	ldr	r3, [r4, #4]
 800bbda:	bf08      	it	eq
 800bbdc:	f8c8 1000 	streq.w	r1, [r8]
 800bbe0:	5162      	str	r2, [r4, r5]
 800bbe2:	604b      	str	r3, [r1, #4]
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f000 f82f 	bl	800bc48 <__malloc_unlock>
 800bbea:	f104 000b 	add.w	r0, r4, #11
 800bbee:	1d23      	adds	r3, r4, #4
 800bbf0:	f020 0007 	bic.w	r0, r0, #7
 800bbf4:	1ac2      	subs	r2, r0, r3
 800bbf6:	bf1c      	itt	ne
 800bbf8:	1a1b      	subne	r3, r3, r0
 800bbfa:	50a3      	strne	r3, [r4, r2]
 800bbfc:	e7af      	b.n	800bb5e <_malloc_r+0x22>
 800bbfe:	6862      	ldr	r2, [r4, #4]
 800bc00:	42a3      	cmp	r3, r4
 800bc02:	bf0c      	ite	eq
 800bc04:	f8c8 2000 	streq.w	r2, [r8]
 800bc08:	605a      	strne	r2, [r3, #4]
 800bc0a:	e7eb      	b.n	800bbe4 <_malloc_r+0xa8>
 800bc0c:	4623      	mov	r3, r4
 800bc0e:	6864      	ldr	r4, [r4, #4]
 800bc10:	e7ae      	b.n	800bb70 <_malloc_r+0x34>
 800bc12:	463c      	mov	r4, r7
 800bc14:	687f      	ldr	r7, [r7, #4]
 800bc16:	e7b6      	b.n	800bb86 <_malloc_r+0x4a>
 800bc18:	461a      	mov	r2, r3
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	42a3      	cmp	r3, r4
 800bc1e:	d1fb      	bne.n	800bc18 <_malloc_r+0xdc>
 800bc20:	2300      	movs	r3, #0
 800bc22:	6053      	str	r3, [r2, #4]
 800bc24:	e7de      	b.n	800bbe4 <_malloc_r+0xa8>
 800bc26:	230c      	movs	r3, #12
 800bc28:	6033      	str	r3, [r6, #0]
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	f000 f80c 	bl	800bc48 <__malloc_unlock>
 800bc30:	e794      	b.n	800bb5c <_malloc_r+0x20>
 800bc32:	6005      	str	r5, [r0, #0]
 800bc34:	e7d6      	b.n	800bbe4 <_malloc_r+0xa8>
 800bc36:	bf00      	nop
 800bc38:	20040914 	.word	0x20040914

0800bc3c <__malloc_lock>:
 800bc3c:	4801      	ldr	r0, [pc, #4]	@ (800bc44 <__malloc_lock+0x8>)
 800bc3e:	f7ff bee8 	b.w	800ba12 <__retarget_lock_acquire_recursive>
 800bc42:	bf00      	nop
 800bc44:	2004090c 	.word	0x2004090c

0800bc48 <__malloc_unlock>:
 800bc48:	4801      	ldr	r0, [pc, #4]	@ (800bc50 <__malloc_unlock+0x8>)
 800bc4a:	f7ff bee3 	b.w	800ba14 <__retarget_lock_release_recursive>
 800bc4e:	bf00      	nop
 800bc50:	2004090c 	.word	0x2004090c

0800bc54 <__ssputs_r>:
 800bc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc58:	688e      	ldr	r6, [r1, #8]
 800bc5a:	461f      	mov	r7, r3
 800bc5c:	42be      	cmp	r6, r7
 800bc5e:	680b      	ldr	r3, [r1, #0]
 800bc60:	4682      	mov	sl, r0
 800bc62:	460c      	mov	r4, r1
 800bc64:	4690      	mov	r8, r2
 800bc66:	d82d      	bhi.n	800bcc4 <__ssputs_r+0x70>
 800bc68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc70:	d026      	beq.n	800bcc0 <__ssputs_r+0x6c>
 800bc72:	6965      	ldr	r5, [r4, #20]
 800bc74:	6909      	ldr	r1, [r1, #16]
 800bc76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc7a:	eba3 0901 	sub.w	r9, r3, r1
 800bc7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc82:	1c7b      	adds	r3, r7, #1
 800bc84:	444b      	add	r3, r9
 800bc86:	106d      	asrs	r5, r5, #1
 800bc88:	429d      	cmp	r5, r3
 800bc8a:	bf38      	it	cc
 800bc8c:	461d      	movcc	r5, r3
 800bc8e:	0553      	lsls	r3, r2, #21
 800bc90:	d527      	bpl.n	800bce2 <__ssputs_r+0x8e>
 800bc92:	4629      	mov	r1, r5
 800bc94:	f7ff ff52 	bl	800bb3c <_malloc_r>
 800bc98:	4606      	mov	r6, r0
 800bc9a:	b360      	cbz	r0, 800bcf6 <__ssputs_r+0xa2>
 800bc9c:	6921      	ldr	r1, [r4, #16]
 800bc9e:	464a      	mov	r2, r9
 800bca0:	f000 fba6 	bl	800c3f0 <memcpy>
 800bca4:	89a3      	ldrh	r3, [r4, #12]
 800bca6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bcaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcae:	81a3      	strh	r3, [r4, #12]
 800bcb0:	6126      	str	r6, [r4, #16]
 800bcb2:	6165      	str	r5, [r4, #20]
 800bcb4:	444e      	add	r6, r9
 800bcb6:	eba5 0509 	sub.w	r5, r5, r9
 800bcba:	6026      	str	r6, [r4, #0]
 800bcbc:	60a5      	str	r5, [r4, #8]
 800bcbe:	463e      	mov	r6, r7
 800bcc0:	42be      	cmp	r6, r7
 800bcc2:	d900      	bls.n	800bcc6 <__ssputs_r+0x72>
 800bcc4:	463e      	mov	r6, r7
 800bcc6:	6820      	ldr	r0, [r4, #0]
 800bcc8:	4632      	mov	r2, r6
 800bcca:	4641      	mov	r1, r8
 800bccc:	f000 fb66 	bl	800c39c <memmove>
 800bcd0:	68a3      	ldr	r3, [r4, #8]
 800bcd2:	1b9b      	subs	r3, r3, r6
 800bcd4:	60a3      	str	r3, [r4, #8]
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	4433      	add	r3, r6
 800bcda:	6023      	str	r3, [r4, #0]
 800bcdc:	2000      	movs	r0, #0
 800bcde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bce2:	462a      	mov	r2, r5
 800bce4:	f000 fb99 	bl	800c41a <_realloc_r>
 800bce8:	4606      	mov	r6, r0
 800bcea:	2800      	cmp	r0, #0
 800bcec:	d1e0      	bne.n	800bcb0 <__ssputs_r+0x5c>
 800bcee:	6921      	ldr	r1, [r4, #16]
 800bcf0:	4650      	mov	r0, sl
 800bcf2:	f7ff feaf 	bl	800ba54 <_free_r>
 800bcf6:	230c      	movs	r3, #12
 800bcf8:	f8ca 3000 	str.w	r3, [sl]
 800bcfc:	89a3      	ldrh	r3, [r4, #12]
 800bcfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd02:	81a3      	strh	r3, [r4, #12]
 800bd04:	f04f 30ff 	mov.w	r0, #4294967295
 800bd08:	e7e9      	b.n	800bcde <__ssputs_r+0x8a>
	...

0800bd0c <_svfiprintf_r>:
 800bd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd10:	4698      	mov	r8, r3
 800bd12:	898b      	ldrh	r3, [r1, #12]
 800bd14:	061b      	lsls	r3, r3, #24
 800bd16:	b09d      	sub	sp, #116	@ 0x74
 800bd18:	4607      	mov	r7, r0
 800bd1a:	460d      	mov	r5, r1
 800bd1c:	4614      	mov	r4, r2
 800bd1e:	d510      	bpl.n	800bd42 <_svfiprintf_r+0x36>
 800bd20:	690b      	ldr	r3, [r1, #16]
 800bd22:	b973      	cbnz	r3, 800bd42 <_svfiprintf_r+0x36>
 800bd24:	2140      	movs	r1, #64	@ 0x40
 800bd26:	f7ff ff09 	bl	800bb3c <_malloc_r>
 800bd2a:	6028      	str	r0, [r5, #0]
 800bd2c:	6128      	str	r0, [r5, #16]
 800bd2e:	b930      	cbnz	r0, 800bd3e <_svfiprintf_r+0x32>
 800bd30:	230c      	movs	r3, #12
 800bd32:	603b      	str	r3, [r7, #0]
 800bd34:	f04f 30ff 	mov.w	r0, #4294967295
 800bd38:	b01d      	add	sp, #116	@ 0x74
 800bd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd3e:	2340      	movs	r3, #64	@ 0x40
 800bd40:	616b      	str	r3, [r5, #20]
 800bd42:	2300      	movs	r3, #0
 800bd44:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd46:	2320      	movs	r3, #32
 800bd48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd50:	2330      	movs	r3, #48	@ 0x30
 800bd52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bef0 <_svfiprintf_r+0x1e4>
 800bd56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd5a:	f04f 0901 	mov.w	r9, #1
 800bd5e:	4623      	mov	r3, r4
 800bd60:	469a      	mov	sl, r3
 800bd62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd66:	b10a      	cbz	r2, 800bd6c <_svfiprintf_r+0x60>
 800bd68:	2a25      	cmp	r2, #37	@ 0x25
 800bd6a:	d1f9      	bne.n	800bd60 <_svfiprintf_r+0x54>
 800bd6c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd70:	d00b      	beq.n	800bd8a <_svfiprintf_r+0x7e>
 800bd72:	465b      	mov	r3, fp
 800bd74:	4622      	mov	r2, r4
 800bd76:	4629      	mov	r1, r5
 800bd78:	4638      	mov	r0, r7
 800bd7a:	f7ff ff6b 	bl	800bc54 <__ssputs_r>
 800bd7e:	3001      	adds	r0, #1
 800bd80:	f000 80a7 	beq.w	800bed2 <_svfiprintf_r+0x1c6>
 800bd84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd86:	445a      	add	r2, fp
 800bd88:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd8a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 809f 	beq.w	800bed2 <_svfiprintf_r+0x1c6>
 800bd94:	2300      	movs	r3, #0
 800bd96:	f04f 32ff 	mov.w	r2, #4294967295
 800bd9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd9e:	f10a 0a01 	add.w	sl, sl, #1
 800bda2:	9304      	str	r3, [sp, #16]
 800bda4:	9307      	str	r3, [sp, #28]
 800bda6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdaa:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdac:	4654      	mov	r4, sl
 800bdae:	2205      	movs	r2, #5
 800bdb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb4:	484e      	ldr	r0, [pc, #312]	@ (800bef0 <_svfiprintf_r+0x1e4>)
 800bdb6:	f7f4 fa23 	bl	8000200 <memchr>
 800bdba:	9a04      	ldr	r2, [sp, #16]
 800bdbc:	b9d8      	cbnz	r0, 800bdf6 <_svfiprintf_r+0xea>
 800bdbe:	06d0      	lsls	r0, r2, #27
 800bdc0:	bf44      	itt	mi
 800bdc2:	2320      	movmi	r3, #32
 800bdc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdc8:	0711      	lsls	r1, r2, #28
 800bdca:	bf44      	itt	mi
 800bdcc:	232b      	movmi	r3, #43	@ 0x2b
 800bdce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdd2:	f89a 3000 	ldrb.w	r3, [sl]
 800bdd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdd8:	d015      	beq.n	800be06 <_svfiprintf_r+0xfa>
 800bdda:	9a07      	ldr	r2, [sp, #28]
 800bddc:	4654      	mov	r4, sl
 800bdde:	2000      	movs	r0, #0
 800bde0:	f04f 0c0a 	mov.w	ip, #10
 800bde4:	4621      	mov	r1, r4
 800bde6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdea:	3b30      	subs	r3, #48	@ 0x30
 800bdec:	2b09      	cmp	r3, #9
 800bdee:	d94b      	bls.n	800be88 <_svfiprintf_r+0x17c>
 800bdf0:	b1b0      	cbz	r0, 800be20 <_svfiprintf_r+0x114>
 800bdf2:	9207      	str	r2, [sp, #28]
 800bdf4:	e014      	b.n	800be20 <_svfiprintf_r+0x114>
 800bdf6:	eba0 0308 	sub.w	r3, r0, r8
 800bdfa:	fa09 f303 	lsl.w	r3, r9, r3
 800bdfe:	4313      	orrs	r3, r2
 800be00:	9304      	str	r3, [sp, #16]
 800be02:	46a2      	mov	sl, r4
 800be04:	e7d2      	b.n	800bdac <_svfiprintf_r+0xa0>
 800be06:	9b03      	ldr	r3, [sp, #12]
 800be08:	1d19      	adds	r1, r3, #4
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	9103      	str	r1, [sp, #12]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	bfbb      	ittet	lt
 800be12:	425b      	neglt	r3, r3
 800be14:	f042 0202 	orrlt.w	r2, r2, #2
 800be18:	9307      	strge	r3, [sp, #28]
 800be1a:	9307      	strlt	r3, [sp, #28]
 800be1c:	bfb8      	it	lt
 800be1e:	9204      	strlt	r2, [sp, #16]
 800be20:	7823      	ldrb	r3, [r4, #0]
 800be22:	2b2e      	cmp	r3, #46	@ 0x2e
 800be24:	d10a      	bne.n	800be3c <_svfiprintf_r+0x130>
 800be26:	7863      	ldrb	r3, [r4, #1]
 800be28:	2b2a      	cmp	r3, #42	@ 0x2a
 800be2a:	d132      	bne.n	800be92 <_svfiprintf_r+0x186>
 800be2c:	9b03      	ldr	r3, [sp, #12]
 800be2e:	1d1a      	adds	r2, r3, #4
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	9203      	str	r2, [sp, #12]
 800be34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be38:	3402      	adds	r4, #2
 800be3a:	9305      	str	r3, [sp, #20]
 800be3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bf00 <_svfiprintf_r+0x1f4>
 800be40:	7821      	ldrb	r1, [r4, #0]
 800be42:	2203      	movs	r2, #3
 800be44:	4650      	mov	r0, sl
 800be46:	f7f4 f9db 	bl	8000200 <memchr>
 800be4a:	b138      	cbz	r0, 800be5c <_svfiprintf_r+0x150>
 800be4c:	9b04      	ldr	r3, [sp, #16]
 800be4e:	eba0 000a 	sub.w	r0, r0, sl
 800be52:	2240      	movs	r2, #64	@ 0x40
 800be54:	4082      	lsls	r2, r0
 800be56:	4313      	orrs	r3, r2
 800be58:	3401      	adds	r4, #1
 800be5a:	9304      	str	r3, [sp, #16]
 800be5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be60:	4824      	ldr	r0, [pc, #144]	@ (800bef4 <_svfiprintf_r+0x1e8>)
 800be62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be66:	2206      	movs	r2, #6
 800be68:	f7f4 f9ca 	bl	8000200 <memchr>
 800be6c:	2800      	cmp	r0, #0
 800be6e:	d036      	beq.n	800bede <_svfiprintf_r+0x1d2>
 800be70:	4b21      	ldr	r3, [pc, #132]	@ (800bef8 <_svfiprintf_r+0x1ec>)
 800be72:	bb1b      	cbnz	r3, 800bebc <_svfiprintf_r+0x1b0>
 800be74:	9b03      	ldr	r3, [sp, #12]
 800be76:	3307      	adds	r3, #7
 800be78:	f023 0307 	bic.w	r3, r3, #7
 800be7c:	3308      	adds	r3, #8
 800be7e:	9303      	str	r3, [sp, #12]
 800be80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be82:	4433      	add	r3, r6
 800be84:	9309      	str	r3, [sp, #36]	@ 0x24
 800be86:	e76a      	b.n	800bd5e <_svfiprintf_r+0x52>
 800be88:	fb0c 3202 	mla	r2, ip, r2, r3
 800be8c:	460c      	mov	r4, r1
 800be8e:	2001      	movs	r0, #1
 800be90:	e7a8      	b.n	800bde4 <_svfiprintf_r+0xd8>
 800be92:	2300      	movs	r3, #0
 800be94:	3401      	adds	r4, #1
 800be96:	9305      	str	r3, [sp, #20]
 800be98:	4619      	mov	r1, r3
 800be9a:	f04f 0c0a 	mov.w	ip, #10
 800be9e:	4620      	mov	r0, r4
 800bea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bea4:	3a30      	subs	r2, #48	@ 0x30
 800bea6:	2a09      	cmp	r2, #9
 800bea8:	d903      	bls.n	800beb2 <_svfiprintf_r+0x1a6>
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d0c6      	beq.n	800be3c <_svfiprintf_r+0x130>
 800beae:	9105      	str	r1, [sp, #20]
 800beb0:	e7c4      	b.n	800be3c <_svfiprintf_r+0x130>
 800beb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800beb6:	4604      	mov	r4, r0
 800beb8:	2301      	movs	r3, #1
 800beba:	e7f0      	b.n	800be9e <_svfiprintf_r+0x192>
 800bebc:	ab03      	add	r3, sp, #12
 800bebe:	9300      	str	r3, [sp, #0]
 800bec0:	462a      	mov	r2, r5
 800bec2:	4b0e      	ldr	r3, [pc, #56]	@ (800befc <_svfiprintf_r+0x1f0>)
 800bec4:	a904      	add	r1, sp, #16
 800bec6:	4638      	mov	r0, r7
 800bec8:	f3af 8000 	nop.w
 800becc:	1c42      	adds	r2, r0, #1
 800bece:	4606      	mov	r6, r0
 800bed0:	d1d6      	bne.n	800be80 <_svfiprintf_r+0x174>
 800bed2:	89ab      	ldrh	r3, [r5, #12]
 800bed4:	065b      	lsls	r3, r3, #25
 800bed6:	f53f af2d 	bmi.w	800bd34 <_svfiprintf_r+0x28>
 800beda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bedc:	e72c      	b.n	800bd38 <_svfiprintf_r+0x2c>
 800bede:	ab03      	add	r3, sp, #12
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	462a      	mov	r2, r5
 800bee4:	4b05      	ldr	r3, [pc, #20]	@ (800befc <_svfiprintf_r+0x1f0>)
 800bee6:	a904      	add	r1, sp, #16
 800bee8:	4638      	mov	r0, r7
 800beea:	f000 f879 	bl	800bfe0 <_printf_i>
 800beee:	e7ed      	b.n	800becc <_svfiprintf_r+0x1c0>
 800bef0:	0805597f 	.word	0x0805597f
 800bef4:	08055989 	.word	0x08055989
 800bef8:	00000000 	.word	0x00000000
 800befc:	0800bc55 	.word	0x0800bc55
 800bf00:	08055985 	.word	0x08055985

0800bf04 <_printf_common>:
 800bf04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf08:	4616      	mov	r6, r2
 800bf0a:	4698      	mov	r8, r3
 800bf0c:	688a      	ldr	r2, [r1, #8]
 800bf0e:	690b      	ldr	r3, [r1, #16]
 800bf10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf14:	4293      	cmp	r3, r2
 800bf16:	bfb8      	it	lt
 800bf18:	4613      	movlt	r3, r2
 800bf1a:	6033      	str	r3, [r6, #0]
 800bf1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf20:	4607      	mov	r7, r0
 800bf22:	460c      	mov	r4, r1
 800bf24:	b10a      	cbz	r2, 800bf2a <_printf_common+0x26>
 800bf26:	3301      	adds	r3, #1
 800bf28:	6033      	str	r3, [r6, #0]
 800bf2a:	6823      	ldr	r3, [r4, #0]
 800bf2c:	0699      	lsls	r1, r3, #26
 800bf2e:	bf42      	ittt	mi
 800bf30:	6833      	ldrmi	r3, [r6, #0]
 800bf32:	3302      	addmi	r3, #2
 800bf34:	6033      	strmi	r3, [r6, #0]
 800bf36:	6825      	ldr	r5, [r4, #0]
 800bf38:	f015 0506 	ands.w	r5, r5, #6
 800bf3c:	d106      	bne.n	800bf4c <_printf_common+0x48>
 800bf3e:	f104 0a19 	add.w	sl, r4, #25
 800bf42:	68e3      	ldr	r3, [r4, #12]
 800bf44:	6832      	ldr	r2, [r6, #0]
 800bf46:	1a9b      	subs	r3, r3, r2
 800bf48:	42ab      	cmp	r3, r5
 800bf4a:	dc26      	bgt.n	800bf9a <_printf_common+0x96>
 800bf4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf50:	6822      	ldr	r2, [r4, #0]
 800bf52:	3b00      	subs	r3, #0
 800bf54:	bf18      	it	ne
 800bf56:	2301      	movne	r3, #1
 800bf58:	0692      	lsls	r2, r2, #26
 800bf5a:	d42b      	bmi.n	800bfb4 <_printf_common+0xb0>
 800bf5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf60:	4641      	mov	r1, r8
 800bf62:	4638      	mov	r0, r7
 800bf64:	47c8      	blx	r9
 800bf66:	3001      	adds	r0, #1
 800bf68:	d01e      	beq.n	800bfa8 <_printf_common+0xa4>
 800bf6a:	6823      	ldr	r3, [r4, #0]
 800bf6c:	6922      	ldr	r2, [r4, #16]
 800bf6e:	f003 0306 	and.w	r3, r3, #6
 800bf72:	2b04      	cmp	r3, #4
 800bf74:	bf02      	ittt	eq
 800bf76:	68e5      	ldreq	r5, [r4, #12]
 800bf78:	6833      	ldreq	r3, [r6, #0]
 800bf7a:	1aed      	subeq	r5, r5, r3
 800bf7c:	68a3      	ldr	r3, [r4, #8]
 800bf7e:	bf0c      	ite	eq
 800bf80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf84:	2500      	movne	r5, #0
 800bf86:	4293      	cmp	r3, r2
 800bf88:	bfc4      	itt	gt
 800bf8a:	1a9b      	subgt	r3, r3, r2
 800bf8c:	18ed      	addgt	r5, r5, r3
 800bf8e:	2600      	movs	r6, #0
 800bf90:	341a      	adds	r4, #26
 800bf92:	42b5      	cmp	r5, r6
 800bf94:	d11a      	bne.n	800bfcc <_printf_common+0xc8>
 800bf96:	2000      	movs	r0, #0
 800bf98:	e008      	b.n	800bfac <_printf_common+0xa8>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	4652      	mov	r2, sl
 800bf9e:	4641      	mov	r1, r8
 800bfa0:	4638      	mov	r0, r7
 800bfa2:	47c8      	blx	r9
 800bfa4:	3001      	adds	r0, #1
 800bfa6:	d103      	bne.n	800bfb0 <_printf_common+0xac>
 800bfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb0:	3501      	adds	r5, #1
 800bfb2:	e7c6      	b.n	800bf42 <_printf_common+0x3e>
 800bfb4:	18e1      	adds	r1, r4, r3
 800bfb6:	1c5a      	adds	r2, r3, #1
 800bfb8:	2030      	movs	r0, #48	@ 0x30
 800bfba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bfbe:	4422      	add	r2, r4
 800bfc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bfc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bfc8:	3302      	adds	r3, #2
 800bfca:	e7c7      	b.n	800bf5c <_printf_common+0x58>
 800bfcc:	2301      	movs	r3, #1
 800bfce:	4622      	mov	r2, r4
 800bfd0:	4641      	mov	r1, r8
 800bfd2:	4638      	mov	r0, r7
 800bfd4:	47c8      	blx	r9
 800bfd6:	3001      	adds	r0, #1
 800bfd8:	d0e6      	beq.n	800bfa8 <_printf_common+0xa4>
 800bfda:	3601      	adds	r6, #1
 800bfdc:	e7d9      	b.n	800bf92 <_printf_common+0x8e>
	...

0800bfe0 <_printf_i>:
 800bfe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe4:	7e0f      	ldrb	r7, [r1, #24]
 800bfe6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bfe8:	2f78      	cmp	r7, #120	@ 0x78
 800bfea:	4691      	mov	r9, r2
 800bfec:	4680      	mov	r8, r0
 800bfee:	460c      	mov	r4, r1
 800bff0:	469a      	mov	sl, r3
 800bff2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bff6:	d807      	bhi.n	800c008 <_printf_i+0x28>
 800bff8:	2f62      	cmp	r7, #98	@ 0x62
 800bffa:	d80a      	bhi.n	800c012 <_printf_i+0x32>
 800bffc:	2f00      	cmp	r7, #0
 800bffe:	f000 80d2 	beq.w	800c1a6 <_printf_i+0x1c6>
 800c002:	2f58      	cmp	r7, #88	@ 0x58
 800c004:	f000 80b9 	beq.w	800c17a <_printf_i+0x19a>
 800c008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c00c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c010:	e03a      	b.n	800c088 <_printf_i+0xa8>
 800c012:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c016:	2b15      	cmp	r3, #21
 800c018:	d8f6      	bhi.n	800c008 <_printf_i+0x28>
 800c01a:	a101      	add	r1, pc, #4	@ (adr r1, 800c020 <_printf_i+0x40>)
 800c01c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c020:	0800c079 	.word	0x0800c079
 800c024:	0800c08d 	.word	0x0800c08d
 800c028:	0800c009 	.word	0x0800c009
 800c02c:	0800c009 	.word	0x0800c009
 800c030:	0800c009 	.word	0x0800c009
 800c034:	0800c009 	.word	0x0800c009
 800c038:	0800c08d 	.word	0x0800c08d
 800c03c:	0800c009 	.word	0x0800c009
 800c040:	0800c009 	.word	0x0800c009
 800c044:	0800c009 	.word	0x0800c009
 800c048:	0800c009 	.word	0x0800c009
 800c04c:	0800c18d 	.word	0x0800c18d
 800c050:	0800c0b7 	.word	0x0800c0b7
 800c054:	0800c147 	.word	0x0800c147
 800c058:	0800c009 	.word	0x0800c009
 800c05c:	0800c009 	.word	0x0800c009
 800c060:	0800c1af 	.word	0x0800c1af
 800c064:	0800c009 	.word	0x0800c009
 800c068:	0800c0b7 	.word	0x0800c0b7
 800c06c:	0800c009 	.word	0x0800c009
 800c070:	0800c009 	.word	0x0800c009
 800c074:	0800c14f 	.word	0x0800c14f
 800c078:	6833      	ldr	r3, [r6, #0]
 800c07a:	1d1a      	adds	r2, r3, #4
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	6032      	str	r2, [r6, #0]
 800c080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c084:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c088:	2301      	movs	r3, #1
 800c08a:	e09d      	b.n	800c1c8 <_printf_i+0x1e8>
 800c08c:	6833      	ldr	r3, [r6, #0]
 800c08e:	6820      	ldr	r0, [r4, #0]
 800c090:	1d19      	adds	r1, r3, #4
 800c092:	6031      	str	r1, [r6, #0]
 800c094:	0606      	lsls	r6, r0, #24
 800c096:	d501      	bpl.n	800c09c <_printf_i+0xbc>
 800c098:	681d      	ldr	r5, [r3, #0]
 800c09a:	e003      	b.n	800c0a4 <_printf_i+0xc4>
 800c09c:	0645      	lsls	r5, r0, #25
 800c09e:	d5fb      	bpl.n	800c098 <_printf_i+0xb8>
 800c0a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c0a4:	2d00      	cmp	r5, #0
 800c0a6:	da03      	bge.n	800c0b0 <_printf_i+0xd0>
 800c0a8:	232d      	movs	r3, #45	@ 0x2d
 800c0aa:	426d      	negs	r5, r5
 800c0ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0b0:	4859      	ldr	r0, [pc, #356]	@ (800c218 <_printf_i+0x238>)
 800c0b2:	230a      	movs	r3, #10
 800c0b4:	e011      	b.n	800c0da <_printf_i+0xfa>
 800c0b6:	6821      	ldr	r1, [r4, #0]
 800c0b8:	6833      	ldr	r3, [r6, #0]
 800c0ba:	0608      	lsls	r0, r1, #24
 800c0bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0c0:	d402      	bmi.n	800c0c8 <_printf_i+0xe8>
 800c0c2:	0649      	lsls	r1, r1, #25
 800c0c4:	bf48      	it	mi
 800c0c6:	b2ad      	uxthmi	r5, r5
 800c0c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0ca:	4853      	ldr	r0, [pc, #332]	@ (800c218 <_printf_i+0x238>)
 800c0cc:	6033      	str	r3, [r6, #0]
 800c0ce:	bf14      	ite	ne
 800c0d0:	230a      	movne	r3, #10
 800c0d2:	2308      	moveq	r3, #8
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c0da:	6866      	ldr	r6, [r4, #4]
 800c0dc:	60a6      	str	r6, [r4, #8]
 800c0de:	2e00      	cmp	r6, #0
 800c0e0:	bfa2      	ittt	ge
 800c0e2:	6821      	ldrge	r1, [r4, #0]
 800c0e4:	f021 0104 	bicge.w	r1, r1, #4
 800c0e8:	6021      	strge	r1, [r4, #0]
 800c0ea:	b90d      	cbnz	r5, 800c0f0 <_printf_i+0x110>
 800c0ec:	2e00      	cmp	r6, #0
 800c0ee:	d04b      	beq.n	800c188 <_printf_i+0x1a8>
 800c0f0:	4616      	mov	r6, r2
 800c0f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0f6:	fb03 5711 	mls	r7, r3, r1, r5
 800c0fa:	5dc7      	ldrb	r7, [r0, r7]
 800c0fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c100:	462f      	mov	r7, r5
 800c102:	42bb      	cmp	r3, r7
 800c104:	460d      	mov	r5, r1
 800c106:	d9f4      	bls.n	800c0f2 <_printf_i+0x112>
 800c108:	2b08      	cmp	r3, #8
 800c10a:	d10b      	bne.n	800c124 <_printf_i+0x144>
 800c10c:	6823      	ldr	r3, [r4, #0]
 800c10e:	07df      	lsls	r7, r3, #31
 800c110:	d508      	bpl.n	800c124 <_printf_i+0x144>
 800c112:	6923      	ldr	r3, [r4, #16]
 800c114:	6861      	ldr	r1, [r4, #4]
 800c116:	4299      	cmp	r1, r3
 800c118:	bfde      	ittt	le
 800c11a:	2330      	movle	r3, #48	@ 0x30
 800c11c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c120:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c124:	1b92      	subs	r2, r2, r6
 800c126:	6122      	str	r2, [r4, #16]
 800c128:	f8cd a000 	str.w	sl, [sp]
 800c12c:	464b      	mov	r3, r9
 800c12e:	aa03      	add	r2, sp, #12
 800c130:	4621      	mov	r1, r4
 800c132:	4640      	mov	r0, r8
 800c134:	f7ff fee6 	bl	800bf04 <_printf_common>
 800c138:	3001      	adds	r0, #1
 800c13a:	d14a      	bne.n	800c1d2 <_printf_i+0x1f2>
 800c13c:	f04f 30ff 	mov.w	r0, #4294967295
 800c140:	b004      	add	sp, #16
 800c142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c146:	6823      	ldr	r3, [r4, #0]
 800c148:	f043 0320 	orr.w	r3, r3, #32
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	4833      	ldr	r0, [pc, #204]	@ (800c21c <_printf_i+0x23c>)
 800c150:	2778      	movs	r7, #120	@ 0x78
 800c152:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	6831      	ldr	r1, [r6, #0]
 800c15a:	061f      	lsls	r7, r3, #24
 800c15c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c160:	d402      	bmi.n	800c168 <_printf_i+0x188>
 800c162:	065f      	lsls	r7, r3, #25
 800c164:	bf48      	it	mi
 800c166:	b2ad      	uxthmi	r5, r5
 800c168:	6031      	str	r1, [r6, #0]
 800c16a:	07d9      	lsls	r1, r3, #31
 800c16c:	bf44      	itt	mi
 800c16e:	f043 0320 	orrmi.w	r3, r3, #32
 800c172:	6023      	strmi	r3, [r4, #0]
 800c174:	b11d      	cbz	r5, 800c17e <_printf_i+0x19e>
 800c176:	2310      	movs	r3, #16
 800c178:	e7ac      	b.n	800c0d4 <_printf_i+0xf4>
 800c17a:	4827      	ldr	r0, [pc, #156]	@ (800c218 <_printf_i+0x238>)
 800c17c:	e7e9      	b.n	800c152 <_printf_i+0x172>
 800c17e:	6823      	ldr	r3, [r4, #0]
 800c180:	f023 0320 	bic.w	r3, r3, #32
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	e7f6      	b.n	800c176 <_printf_i+0x196>
 800c188:	4616      	mov	r6, r2
 800c18a:	e7bd      	b.n	800c108 <_printf_i+0x128>
 800c18c:	6833      	ldr	r3, [r6, #0]
 800c18e:	6825      	ldr	r5, [r4, #0]
 800c190:	6961      	ldr	r1, [r4, #20]
 800c192:	1d18      	adds	r0, r3, #4
 800c194:	6030      	str	r0, [r6, #0]
 800c196:	062e      	lsls	r6, r5, #24
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	d501      	bpl.n	800c1a0 <_printf_i+0x1c0>
 800c19c:	6019      	str	r1, [r3, #0]
 800c19e:	e002      	b.n	800c1a6 <_printf_i+0x1c6>
 800c1a0:	0668      	lsls	r0, r5, #25
 800c1a2:	d5fb      	bpl.n	800c19c <_printf_i+0x1bc>
 800c1a4:	8019      	strh	r1, [r3, #0]
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	6123      	str	r3, [r4, #16]
 800c1aa:	4616      	mov	r6, r2
 800c1ac:	e7bc      	b.n	800c128 <_printf_i+0x148>
 800c1ae:	6833      	ldr	r3, [r6, #0]
 800c1b0:	1d1a      	adds	r2, r3, #4
 800c1b2:	6032      	str	r2, [r6, #0]
 800c1b4:	681e      	ldr	r6, [r3, #0]
 800c1b6:	6862      	ldr	r2, [r4, #4]
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	f7f4 f820 	bl	8000200 <memchr>
 800c1c0:	b108      	cbz	r0, 800c1c6 <_printf_i+0x1e6>
 800c1c2:	1b80      	subs	r0, r0, r6
 800c1c4:	6060      	str	r0, [r4, #4]
 800c1c6:	6863      	ldr	r3, [r4, #4]
 800c1c8:	6123      	str	r3, [r4, #16]
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1d0:	e7aa      	b.n	800c128 <_printf_i+0x148>
 800c1d2:	6923      	ldr	r3, [r4, #16]
 800c1d4:	4632      	mov	r2, r6
 800c1d6:	4649      	mov	r1, r9
 800c1d8:	4640      	mov	r0, r8
 800c1da:	47d0      	blx	sl
 800c1dc:	3001      	adds	r0, #1
 800c1de:	d0ad      	beq.n	800c13c <_printf_i+0x15c>
 800c1e0:	6823      	ldr	r3, [r4, #0]
 800c1e2:	079b      	lsls	r3, r3, #30
 800c1e4:	d413      	bmi.n	800c20e <_printf_i+0x22e>
 800c1e6:	68e0      	ldr	r0, [r4, #12]
 800c1e8:	9b03      	ldr	r3, [sp, #12]
 800c1ea:	4298      	cmp	r0, r3
 800c1ec:	bfb8      	it	lt
 800c1ee:	4618      	movlt	r0, r3
 800c1f0:	e7a6      	b.n	800c140 <_printf_i+0x160>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	4632      	mov	r2, r6
 800c1f6:	4649      	mov	r1, r9
 800c1f8:	4640      	mov	r0, r8
 800c1fa:	47d0      	blx	sl
 800c1fc:	3001      	adds	r0, #1
 800c1fe:	d09d      	beq.n	800c13c <_printf_i+0x15c>
 800c200:	3501      	adds	r5, #1
 800c202:	68e3      	ldr	r3, [r4, #12]
 800c204:	9903      	ldr	r1, [sp, #12]
 800c206:	1a5b      	subs	r3, r3, r1
 800c208:	42ab      	cmp	r3, r5
 800c20a:	dcf2      	bgt.n	800c1f2 <_printf_i+0x212>
 800c20c:	e7eb      	b.n	800c1e6 <_printf_i+0x206>
 800c20e:	2500      	movs	r5, #0
 800c210:	f104 0619 	add.w	r6, r4, #25
 800c214:	e7f5      	b.n	800c202 <_printf_i+0x222>
 800c216:	bf00      	nop
 800c218:	08055990 	.word	0x08055990
 800c21c:	080559a1 	.word	0x080559a1

0800c220 <__sflush_r>:
 800c220:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c228:	0716      	lsls	r6, r2, #28
 800c22a:	4605      	mov	r5, r0
 800c22c:	460c      	mov	r4, r1
 800c22e:	d454      	bmi.n	800c2da <__sflush_r+0xba>
 800c230:	684b      	ldr	r3, [r1, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	dc02      	bgt.n	800c23c <__sflush_r+0x1c>
 800c236:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c238:	2b00      	cmp	r3, #0
 800c23a:	dd48      	ble.n	800c2ce <__sflush_r+0xae>
 800c23c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c23e:	2e00      	cmp	r6, #0
 800c240:	d045      	beq.n	800c2ce <__sflush_r+0xae>
 800c242:	2300      	movs	r3, #0
 800c244:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c248:	682f      	ldr	r7, [r5, #0]
 800c24a:	6a21      	ldr	r1, [r4, #32]
 800c24c:	602b      	str	r3, [r5, #0]
 800c24e:	d030      	beq.n	800c2b2 <__sflush_r+0x92>
 800c250:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c252:	89a3      	ldrh	r3, [r4, #12]
 800c254:	0759      	lsls	r1, r3, #29
 800c256:	d505      	bpl.n	800c264 <__sflush_r+0x44>
 800c258:	6863      	ldr	r3, [r4, #4]
 800c25a:	1ad2      	subs	r2, r2, r3
 800c25c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c25e:	b10b      	cbz	r3, 800c264 <__sflush_r+0x44>
 800c260:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c262:	1ad2      	subs	r2, r2, r3
 800c264:	2300      	movs	r3, #0
 800c266:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c268:	6a21      	ldr	r1, [r4, #32]
 800c26a:	4628      	mov	r0, r5
 800c26c:	47b0      	blx	r6
 800c26e:	1c43      	adds	r3, r0, #1
 800c270:	89a3      	ldrh	r3, [r4, #12]
 800c272:	d106      	bne.n	800c282 <__sflush_r+0x62>
 800c274:	6829      	ldr	r1, [r5, #0]
 800c276:	291d      	cmp	r1, #29
 800c278:	d82b      	bhi.n	800c2d2 <__sflush_r+0xb2>
 800c27a:	4a2a      	ldr	r2, [pc, #168]	@ (800c324 <__sflush_r+0x104>)
 800c27c:	410a      	asrs	r2, r1
 800c27e:	07d6      	lsls	r6, r2, #31
 800c280:	d427      	bmi.n	800c2d2 <__sflush_r+0xb2>
 800c282:	2200      	movs	r2, #0
 800c284:	6062      	str	r2, [r4, #4]
 800c286:	04d9      	lsls	r1, r3, #19
 800c288:	6922      	ldr	r2, [r4, #16]
 800c28a:	6022      	str	r2, [r4, #0]
 800c28c:	d504      	bpl.n	800c298 <__sflush_r+0x78>
 800c28e:	1c42      	adds	r2, r0, #1
 800c290:	d101      	bne.n	800c296 <__sflush_r+0x76>
 800c292:	682b      	ldr	r3, [r5, #0]
 800c294:	b903      	cbnz	r3, 800c298 <__sflush_r+0x78>
 800c296:	6560      	str	r0, [r4, #84]	@ 0x54
 800c298:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c29a:	602f      	str	r7, [r5, #0]
 800c29c:	b1b9      	cbz	r1, 800c2ce <__sflush_r+0xae>
 800c29e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2a2:	4299      	cmp	r1, r3
 800c2a4:	d002      	beq.n	800c2ac <__sflush_r+0x8c>
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	f7ff fbd4 	bl	800ba54 <_free_r>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2b0:	e00d      	b.n	800c2ce <__sflush_r+0xae>
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	47b0      	blx	r6
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	1c50      	adds	r0, r2, #1
 800c2bc:	d1c9      	bne.n	800c252 <__sflush_r+0x32>
 800c2be:	682b      	ldr	r3, [r5, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d0c6      	beq.n	800c252 <__sflush_r+0x32>
 800c2c4:	2b1d      	cmp	r3, #29
 800c2c6:	d001      	beq.n	800c2cc <__sflush_r+0xac>
 800c2c8:	2b16      	cmp	r3, #22
 800c2ca:	d11e      	bne.n	800c30a <__sflush_r+0xea>
 800c2cc:	602f      	str	r7, [r5, #0]
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	e022      	b.n	800c318 <__sflush_r+0xf8>
 800c2d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2d6:	b21b      	sxth	r3, r3
 800c2d8:	e01b      	b.n	800c312 <__sflush_r+0xf2>
 800c2da:	690f      	ldr	r7, [r1, #16]
 800c2dc:	2f00      	cmp	r7, #0
 800c2de:	d0f6      	beq.n	800c2ce <__sflush_r+0xae>
 800c2e0:	0793      	lsls	r3, r2, #30
 800c2e2:	680e      	ldr	r6, [r1, #0]
 800c2e4:	bf08      	it	eq
 800c2e6:	694b      	ldreq	r3, [r1, #20]
 800c2e8:	600f      	str	r7, [r1, #0]
 800c2ea:	bf18      	it	ne
 800c2ec:	2300      	movne	r3, #0
 800c2ee:	eba6 0807 	sub.w	r8, r6, r7
 800c2f2:	608b      	str	r3, [r1, #8]
 800c2f4:	f1b8 0f00 	cmp.w	r8, #0
 800c2f8:	dde9      	ble.n	800c2ce <__sflush_r+0xae>
 800c2fa:	6a21      	ldr	r1, [r4, #32]
 800c2fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c2fe:	4643      	mov	r3, r8
 800c300:	463a      	mov	r2, r7
 800c302:	4628      	mov	r0, r5
 800c304:	47b0      	blx	r6
 800c306:	2800      	cmp	r0, #0
 800c308:	dc08      	bgt.n	800c31c <__sflush_r+0xfc>
 800c30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c30e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c312:	81a3      	strh	r3, [r4, #12]
 800c314:	f04f 30ff 	mov.w	r0, #4294967295
 800c318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c31c:	4407      	add	r7, r0
 800c31e:	eba8 0800 	sub.w	r8, r8, r0
 800c322:	e7e7      	b.n	800c2f4 <__sflush_r+0xd4>
 800c324:	dfbffffe 	.word	0xdfbffffe

0800c328 <_fflush_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	690b      	ldr	r3, [r1, #16]
 800c32c:	4605      	mov	r5, r0
 800c32e:	460c      	mov	r4, r1
 800c330:	b913      	cbnz	r3, 800c338 <_fflush_r+0x10>
 800c332:	2500      	movs	r5, #0
 800c334:	4628      	mov	r0, r5
 800c336:	bd38      	pop	{r3, r4, r5, pc}
 800c338:	b118      	cbz	r0, 800c342 <_fflush_r+0x1a>
 800c33a:	6a03      	ldr	r3, [r0, #32]
 800c33c:	b90b      	cbnz	r3, 800c342 <_fflush_r+0x1a>
 800c33e:	f7ff fa47 	bl	800b7d0 <__sinit>
 800c342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d0f3      	beq.n	800c332 <_fflush_r+0xa>
 800c34a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c34c:	07d0      	lsls	r0, r2, #31
 800c34e:	d404      	bmi.n	800c35a <_fflush_r+0x32>
 800c350:	0599      	lsls	r1, r3, #22
 800c352:	d402      	bmi.n	800c35a <_fflush_r+0x32>
 800c354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c356:	f7ff fb5c 	bl	800ba12 <__retarget_lock_acquire_recursive>
 800c35a:	4628      	mov	r0, r5
 800c35c:	4621      	mov	r1, r4
 800c35e:	f7ff ff5f 	bl	800c220 <__sflush_r>
 800c362:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c364:	07da      	lsls	r2, r3, #31
 800c366:	4605      	mov	r5, r0
 800c368:	d4e4      	bmi.n	800c334 <_fflush_r+0xc>
 800c36a:	89a3      	ldrh	r3, [r4, #12]
 800c36c:	059b      	lsls	r3, r3, #22
 800c36e:	d4e1      	bmi.n	800c334 <_fflush_r+0xc>
 800c370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c372:	f7ff fb4f 	bl	800ba14 <__retarget_lock_release_recursive>
 800c376:	e7dd      	b.n	800c334 <_fflush_r+0xc>

0800c378 <fiprintf>:
 800c378:	b40e      	push	{r1, r2, r3}
 800c37a:	b503      	push	{r0, r1, lr}
 800c37c:	4601      	mov	r1, r0
 800c37e:	ab03      	add	r3, sp, #12
 800c380:	4805      	ldr	r0, [pc, #20]	@ (800c398 <fiprintf+0x20>)
 800c382:	f853 2b04 	ldr.w	r2, [r3], #4
 800c386:	6800      	ldr	r0, [r0, #0]
 800c388:	9301      	str	r3, [sp, #4]
 800c38a:	f000 f89d 	bl	800c4c8 <_vfiprintf_r>
 800c38e:	b002      	add	sp, #8
 800c390:	f85d eb04 	ldr.w	lr, [sp], #4
 800c394:	b003      	add	sp, #12
 800c396:	4770      	bx	lr
 800c398:	200400c8 	.word	0x200400c8

0800c39c <memmove>:
 800c39c:	4288      	cmp	r0, r1
 800c39e:	b510      	push	{r4, lr}
 800c3a0:	eb01 0402 	add.w	r4, r1, r2
 800c3a4:	d902      	bls.n	800c3ac <memmove+0x10>
 800c3a6:	4284      	cmp	r4, r0
 800c3a8:	4623      	mov	r3, r4
 800c3aa:	d807      	bhi.n	800c3bc <memmove+0x20>
 800c3ac:	1e43      	subs	r3, r0, #1
 800c3ae:	42a1      	cmp	r1, r4
 800c3b0:	d008      	beq.n	800c3c4 <memmove+0x28>
 800c3b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3ba:	e7f8      	b.n	800c3ae <memmove+0x12>
 800c3bc:	4402      	add	r2, r0
 800c3be:	4601      	mov	r1, r0
 800c3c0:	428a      	cmp	r2, r1
 800c3c2:	d100      	bne.n	800c3c6 <memmove+0x2a>
 800c3c4:	bd10      	pop	{r4, pc}
 800c3c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3ce:	e7f7      	b.n	800c3c0 <memmove+0x24>

0800c3d0 <_sbrk_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	4d06      	ldr	r5, [pc, #24]	@ (800c3ec <_sbrk_r+0x1c>)
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	4608      	mov	r0, r1
 800c3da:	602b      	str	r3, [r5, #0]
 800c3dc:	f7f6 fa30 	bl	8002840 <_sbrk>
 800c3e0:	1c43      	adds	r3, r0, #1
 800c3e2:	d102      	bne.n	800c3ea <_sbrk_r+0x1a>
 800c3e4:	682b      	ldr	r3, [r5, #0]
 800c3e6:	b103      	cbz	r3, 800c3ea <_sbrk_r+0x1a>
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	bd38      	pop	{r3, r4, r5, pc}
 800c3ec:	20040908 	.word	0x20040908

0800c3f0 <memcpy>:
 800c3f0:	440a      	add	r2, r1
 800c3f2:	4291      	cmp	r1, r2
 800c3f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3f8:	d100      	bne.n	800c3fc <memcpy+0xc>
 800c3fa:	4770      	bx	lr
 800c3fc:	b510      	push	{r4, lr}
 800c3fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c402:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c406:	4291      	cmp	r1, r2
 800c408:	d1f9      	bne.n	800c3fe <memcpy+0xe>
 800c40a:	bd10      	pop	{r4, pc}

0800c40c <abort>:
 800c40c:	b508      	push	{r3, lr}
 800c40e:	2006      	movs	r0, #6
 800c410:	f000 fa2e 	bl	800c870 <raise>
 800c414:	2001      	movs	r0, #1
 800c416:	f7f6 f99b 	bl	8002750 <_exit>

0800c41a <_realloc_r>:
 800c41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c41e:	4680      	mov	r8, r0
 800c420:	4615      	mov	r5, r2
 800c422:	460c      	mov	r4, r1
 800c424:	b921      	cbnz	r1, 800c430 <_realloc_r+0x16>
 800c426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c42a:	4611      	mov	r1, r2
 800c42c:	f7ff bb86 	b.w	800bb3c <_malloc_r>
 800c430:	b92a      	cbnz	r2, 800c43e <_realloc_r+0x24>
 800c432:	f7ff fb0f 	bl	800ba54 <_free_r>
 800c436:	2400      	movs	r4, #0
 800c438:	4620      	mov	r0, r4
 800c43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c43e:	f000 fa33 	bl	800c8a8 <_malloc_usable_size_r>
 800c442:	4285      	cmp	r5, r0
 800c444:	4606      	mov	r6, r0
 800c446:	d802      	bhi.n	800c44e <_realloc_r+0x34>
 800c448:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c44c:	d8f4      	bhi.n	800c438 <_realloc_r+0x1e>
 800c44e:	4629      	mov	r1, r5
 800c450:	4640      	mov	r0, r8
 800c452:	f7ff fb73 	bl	800bb3c <_malloc_r>
 800c456:	4607      	mov	r7, r0
 800c458:	2800      	cmp	r0, #0
 800c45a:	d0ec      	beq.n	800c436 <_realloc_r+0x1c>
 800c45c:	42b5      	cmp	r5, r6
 800c45e:	462a      	mov	r2, r5
 800c460:	4621      	mov	r1, r4
 800c462:	bf28      	it	cs
 800c464:	4632      	movcs	r2, r6
 800c466:	f7ff ffc3 	bl	800c3f0 <memcpy>
 800c46a:	4621      	mov	r1, r4
 800c46c:	4640      	mov	r0, r8
 800c46e:	f7ff faf1 	bl	800ba54 <_free_r>
 800c472:	463c      	mov	r4, r7
 800c474:	e7e0      	b.n	800c438 <_realloc_r+0x1e>

0800c476 <__sfputc_r>:
 800c476:	6893      	ldr	r3, [r2, #8]
 800c478:	3b01      	subs	r3, #1
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	b410      	push	{r4}
 800c47e:	6093      	str	r3, [r2, #8]
 800c480:	da08      	bge.n	800c494 <__sfputc_r+0x1e>
 800c482:	6994      	ldr	r4, [r2, #24]
 800c484:	42a3      	cmp	r3, r4
 800c486:	db01      	blt.n	800c48c <__sfputc_r+0x16>
 800c488:	290a      	cmp	r1, #10
 800c48a:	d103      	bne.n	800c494 <__sfputc_r+0x1e>
 800c48c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c490:	f000 b932 	b.w	800c6f8 <__swbuf_r>
 800c494:	6813      	ldr	r3, [r2, #0]
 800c496:	1c58      	adds	r0, r3, #1
 800c498:	6010      	str	r0, [r2, #0]
 800c49a:	7019      	strb	r1, [r3, #0]
 800c49c:	4608      	mov	r0, r1
 800c49e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <__sfputs_r>:
 800c4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4a6:	4606      	mov	r6, r0
 800c4a8:	460f      	mov	r7, r1
 800c4aa:	4614      	mov	r4, r2
 800c4ac:	18d5      	adds	r5, r2, r3
 800c4ae:	42ac      	cmp	r4, r5
 800c4b0:	d101      	bne.n	800c4b6 <__sfputs_r+0x12>
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	e007      	b.n	800c4c6 <__sfputs_r+0x22>
 800c4b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ba:	463a      	mov	r2, r7
 800c4bc:	4630      	mov	r0, r6
 800c4be:	f7ff ffda 	bl	800c476 <__sfputc_r>
 800c4c2:	1c43      	adds	r3, r0, #1
 800c4c4:	d1f3      	bne.n	800c4ae <__sfputs_r+0xa>
 800c4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c4c8 <_vfiprintf_r>:
 800c4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4cc:	460d      	mov	r5, r1
 800c4ce:	b09d      	sub	sp, #116	@ 0x74
 800c4d0:	4614      	mov	r4, r2
 800c4d2:	4698      	mov	r8, r3
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	b118      	cbz	r0, 800c4e0 <_vfiprintf_r+0x18>
 800c4d8:	6a03      	ldr	r3, [r0, #32]
 800c4da:	b90b      	cbnz	r3, 800c4e0 <_vfiprintf_r+0x18>
 800c4dc:	f7ff f978 	bl	800b7d0 <__sinit>
 800c4e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4e2:	07d9      	lsls	r1, r3, #31
 800c4e4:	d405      	bmi.n	800c4f2 <_vfiprintf_r+0x2a>
 800c4e6:	89ab      	ldrh	r3, [r5, #12]
 800c4e8:	059a      	lsls	r2, r3, #22
 800c4ea:	d402      	bmi.n	800c4f2 <_vfiprintf_r+0x2a>
 800c4ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4ee:	f7ff fa90 	bl	800ba12 <__retarget_lock_acquire_recursive>
 800c4f2:	89ab      	ldrh	r3, [r5, #12]
 800c4f4:	071b      	lsls	r3, r3, #28
 800c4f6:	d501      	bpl.n	800c4fc <_vfiprintf_r+0x34>
 800c4f8:	692b      	ldr	r3, [r5, #16]
 800c4fa:	b99b      	cbnz	r3, 800c524 <_vfiprintf_r+0x5c>
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	4630      	mov	r0, r6
 800c500:	f000 f938 	bl	800c774 <__swsetup_r>
 800c504:	b170      	cbz	r0, 800c524 <_vfiprintf_r+0x5c>
 800c506:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c508:	07dc      	lsls	r4, r3, #31
 800c50a:	d504      	bpl.n	800c516 <_vfiprintf_r+0x4e>
 800c50c:	f04f 30ff 	mov.w	r0, #4294967295
 800c510:	b01d      	add	sp, #116	@ 0x74
 800c512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c516:	89ab      	ldrh	r3, [r5, #12]
 800c518:	0598      	lsls	r0, r3, #22
 800c51a:	d4f7      	bmi.n	800c50c <_vfiprintf_r+0x44>
 800c51c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c51e:	f7ff fa79 	bl	800ba14 <__retarget_lock_release_recursive>
 800c522:	e7f3      	b.n	800c50c <_vfiprintf_r+0x44>
 800c524:	2300      	movs	r3, #0
 800c526:	9309      	str	r3, [sp, #36]	@ 0x24
 800c528:	2320      	movs	r3, #32
 800c52a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c52e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c532:	2330      	movs	r3, #48	@ 0x30
 800c534:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c6e4 <_vfiprintf_r+0x21c>
 800c538:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c53c:	f04f 0901 	mov.w	r9, #1
 800c540:	4623      	mov	r3, r4
 800c542:	469a      	mov	sl, r3
 800c544:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c548:	b10a      	cbz	r2, 800c54e <_vfiprintf_r+0x86>
 800c54a:	2a25      	cmp	r2, #37	@ 0x25
 800c54c:	d1f9      	bne.n	800c542 <_vfiprintf_r+0x7a>
 800c54e:	ebba 0b04 	subs.w	fp, sl, r4
 800c552:	d00b      	beq.n	800c56c <_vfiprintf_r+0xa4>
 800c554:	465b      	mov	r3, fp
 800c556:	4622      	mov	r2, r4
 800c558:	4629      	mov	r1, r5
 800c55a:	4630      	mov	r0, r6
 800c55c:	f7ff ffa2 	bl	800c4a4 <__sfputs_r>
 800c560:	3001      	adds	r0, #1
 800c562:	f000 80a7 	beq.w	800c6b4 <_vfiprintf_r+0x1ec>
 800c566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c568:	445a      	add	r2, fp
 800c56a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c56c:	f89a 3000 	ldrb.w	r3, [sl]
 800c570:	2b00      	cmp	r3, #0
 800c572:	f000 809f 	beq.w	800c6b4 <_vfiprintf_r+0x1ec>
 800c576:	2300      	movs	r3, #0
 800c578:	f04f 32ff 	mov.w	r2, #4294967295
 800c57c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c580:	f10a 0a01 	add.w	sl, sl, #1
 800c584:	9304      	str	r3, [sp, #16]
 800c586:	9307      	str	r3, [sp, #28]
 800c588:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c58c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c58e:	4654      	mov	r4, sl
 800c590:	2205      	movs	r2, #5
 800c592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c596:	4853      	ldr	r0, [pc, #332]	@ (800c6e4 <_vfiprintf_r+0x21c>)
 800c598:	f7f3 fe32 	bl	8000200 <memchr>
 800c59c:	9a04      	ldr	r2, [sp, #16]
 800c59e:	b9d8      	cbnz	r0, 800c5d8 <_vfiprintf_r+0x110>
 800c5a0:	06d1      	lsls	r1, r2, #27
 800c5a2:	bf44      	itt	mi
 800c5a4:	2320      	movmi	r3, #32
 800c5a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5aa:	0713      	lsls	r3, r2, #28
 800c5ac:	bf44      	itt	mi
 800c5ae:	232b      	movmi	r3, #43	@ 0x2b
 800c5b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5ba:	d015      	beq.n	800c5e8 <_vfiprintf_r+0x120>
 800c5bc:	9a07      	ldr	r2, [sp, #28]
 800c5be:	4654      	mov	r4, sl
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	f04f 0c0a 	mov.w	ip, #10
 800c5c6:	4621      	mov	r1, r4
 800c5c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5cc:	3b30      	subs	r3, #48	@ 0x30
 800c5ce:	2b09      	cmp	r3, #9
 800c5d0:	d94b      	bls.n	800c66a <_vfiprintf_r+0x1a2>
 800c5d2:	b1b0      	cbz	r0, 800c602 <_vfiprintf_r+0x13a>
 800c5d4:	9207      	str	r2, [sp, #28]
 800c5d6:	e014      	b.n	800c602 <_vfiprintf_r+0x13a>
 800c5d8:	eba0 0308 	sub.w	r3, r0, r8
 800c5dc:	fa09 f303 	lsl.w	r3, r9, r3
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	9304      	str	r3, [sp, #16]
 800c5e4:	46a2      	mov	sl, r4
 800c5e6:	e7d2      	b.n	800c58e <_vfiprintf_r+0xc6>
 800c5e8:	9b03      	ldr	r3, [sp, #12]
 800c5ea:	1d19      	adds	r1, r3, #4
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	9103      	str	r1, [sp, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	bfbb      	ittet	lt
 800c5f4:	425b      	neglt	r3, r3
 800c5f6:	f042 0202 	orrlt.w	r2, r2, #2
 800c5fa:	9307      	strge	r3, [sp, #28]
 800c5fc:	9307      	strlt	r3, [sp, #28]
 800c5fe:	bfb8      	it	lt
 800c600:	9204      	strlt	r2, [sp, #16]
 800c602:	7823      	ldrb	r3, [r4, #0]
 800c604:	2b2e      	cmp	r3, #46	@ 0x2e
 800c606:	d10a      	bne.n	800c61e <_vfiprintf_r+0x156>
 800c608:	7863      	ldrb	r3, [r4, #1]
 800c60a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c60c:	d132      	bne.n	800c674 <_vfiprintf_r+0x1ac>
 800c60e:	9b03      	ldr	r3, [sp, #12]
 800c610:	1d1a      	adds	r2, r3, #4
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	9203      	str	r2, [sp, #12]
 800c616:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c61a:	3402      	adds	r4, #2
 800c61c:	9305      	str	r3, [sp, #20]
 800c61e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c6f4 <_vfiprintf_r+0x22c>
 800c622:	7821      	ldrb	r1, [r4, #0]
 800c624:	2203      	movs	r2, #3
 800c626:	4650      	mov	r0, sl
 800c628:	f7f3 fdea 	bl	8000200 <memchr>
 800c62c:	b138      	cbz	r0, 800c63e <_vfiprintf_r+0x176>
 800c62e:	9b04      	ldr	r3, [sp, #16]
 800c630:	eba0 000a 	sub.w	r0, r0, sl
 800c634:	2240      	movs	r2, #64	@ 0x40
 800c636:	4082      	lsls	r2, r0
 800c638:	4313      	orrs	r3, r2
 800c63a:	3401      	adds	r4, #1
 800c63c:	9304      	str	r3, [sp, #16]
 800c63e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c642:	4829      	ldr	r0, [pc, #164]	@ (800c6e8 <_vfiprintf_r+0x220>)
 800c644:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c648:	2206      	movs	r2, #6
 800c64a:	f7f3 fdd9 	bl	8000200 <memchr>
 800c64e:	2800      	cmp	r0, #0
 800c650:	d03f      	beq.n	800c6d2 <_vfiprintf_r+0x20a>
 800c652:	4b26      	ldr	r3, [pc, #152]	@ (800c6ec <_vfiprintf_r+0x224>)
 800c654:	bb1b      	cbnz	r3, 800c69e <_vfiprintf_r+0x1d6>
 800c656:	9b03      	ldr	r3, [sp, #12]
 800c658:	3307      	adds	r3, #7
 800c65a:	f023 0307 	bic.w	r3, r3, #7
 800c65e:	3308      	adds	r3, #8
 800c660:	9303      	str	r3, [sp, #12]
 800c662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c664:	443b      	add	r3, r7
 800c666:	9309      	str	r3, [sp, #36]	@ 0x24
 800c668:	e76a      	b.n	800c540 <_vfiprintf_r+0x78>
 800c66a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c66e:	460c      	mov	r4, r1
 800c670:	2001      	movs	r0, #1
 800c672:	e7a8      	b.n	800c5c6 <_vfiprintf_r+0xfe>
 800c674:	2300      	movs	r3, #0
 800c676:	3401      	adds	r4, #1
 800c678:	9305      	str	r3, [sp, #20]
 800c67a:	4619      	mov	r1, r3
 800c67c:	f04f 0c0a 	mov.w	ip, #10
 800c680:	4620      	mov	r0, r4
 800c682:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c686:	3a30      	subs	r2, #48	@ 0x30
 800c688:	2a09      	cmp	r2, #9
 800c68a:	d903      	bls.n	800c694 <_vfiprintf_r+0x1cc>
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d0c6      	beq.n	800c61e <_vfiprintf_r+0x156>
 800c690:	9105      	str	r1, [sp, #20]
 800c692:	e7c4      	b.n	800c61e <_vfiprintf_r+0x156>
 800c694:	fb0c 2101 	mla	r1, ip, r1, r2
 800c698:	4604      	mov	r4, r0
 800c69a:	2301      	movs	r3, #1
 800c69c:	e7f0      	b.n	800c680 <_vfiprintf_r+0x1b8>
 800c69e:	ab03      	add	r3, sp, #12
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	462a      	mov	r2, r5
 800c6a4:	4b12      	ldr	r3, [pc, #72]	@ (800c6f0 <_vfiprintf_r+0x228>)
 800c6a6:	a904      	add	r1, sp, #16
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	f3af 8000 	nop.w
 800c6ae:	4607      	mov	r7, r0
 800c6b0:	1c78      	adds	r0, r7, #1
 800c6b2:	d1d6      	bne.n	800c662 <_vfiprintf_r+0x19a>
 800c6b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6b6:	07d9      	lsls	r1, r3, #31
 800c6b8:	d405      	bmi.n	800c6c6 <_vfiprintf_r+0x1fe>
 800c6ba:	89ab      	ldrh	r3, [r5, #12]
 800c6bc:	059a      	lsls	r2, r3, #22
 800c6be:	d402      	bmi.n	800c6c6 <_vfiprintf_r+0x1fe>
 800c6c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6c2:	f7ff f9a7 	bl	800ba14 <__retarget_lock_release_recursive>
 800c6c6:	89ab      	ldrh	r3, [r5, #12]
 800c6c8:	065b      	lsls	r3, r3, #25
 800c6ca:	f53f af1f 	bmi.w	800c50c <_vfiprintf_r+0x44>
 800c6ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6d0:	e71e      	b.n	800c510 <_vfiprintf_r+0x48>
 800c6d2:	ab03      	add	r3, sp, #12
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	462a      	mov	r2, r5
 800c6d8:	4b05      	ldr	r3, [pc, #20]	@ (800c6f0 <_vfiprintf_r+0x228>)
 800c6da:	a904      	add	r1, sp, #16
 800c6dc:	4630      	mov	r0, r6
 800c6de:	f7ff fc7f 	bl	800bfe0 <_printf_i>
 800c6e2:	e7e4      	b.n	800c6ae <_vfiprintf_r+0x1e6>
 800c6e4:	0805597f 	.word	0x0805597f
 800c6e8:	08055989 	.word	0x08055989
 800c6ec:	00000000 	.word	0x00000000
 800c6f0:	0800c4a5 	.word	0x0800c4a5
 800c6f4:	08055985 	.word	0x08055985

0800c6f8 <__swbuf_r>:
 800c6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fa:	460e      	mov	r6, r1
 800c6fc:	4614      	mov	r4, r2
 800c6fe:	4605      	mov	r5, r0
 800c700:	b118      	cbz	r0, 800c70a <__swbuf_r+0x12>
 800c702:	6a03      	ldr	r3, [r0, #32]
 800c704:	b90b      	cbnz	r3, 800c70a <__swbuf_r+0x12>
 800c706:	f7ff f863 	bl	800b7d0 <__sinit>
 800c70a:	69a3      	ldr	r3, [r4, #24]
 800c70c:	60a3      	str	r3, [r4, #8]
 800c70e:	89a3      	ldrh	r3, [r4, #12]
 800c710:	071a      	lsls	r2, r3, #28
 800c712:	d501      	bpl.n	800c718 <__swbuf_r+0x20>
 800c714:	6923      	ldr	r3, [r4, #16]
 800c716:	b943      	cbnz	r3, 800c72a <__swbuf_r+0x32>
 800c718:	4621      	mov	r1, r4
 800c71a:	4628      	mov	r0, r5
 800c71c:	f000 f82a 	bl	800c774 <__swsetup_r>
 800c720:	b118      	cbz	r0, 800c72a <__swbuf_r+0x32>
 800c722:	f04f 37ff 	mov.w	r7, #4294967295
 800c726:	4638      	mov	r0, r7
 800c728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c72a:	6823      	ldr	r3, [r4, #0]
 800c72c:	6922      	ldr	r2, [r4, #16]
 800c72e:	1a98      	subs	r0, r3, r2
 800c730:	6963      	ldr	r3, [r4, #20]
 800c732:	b2f6      	uxtb	r6, r6
 800c734:	4283      	cmp	r3, r0
 800c736:	4637      	mov	r7, r6
 800c738:	dc05      	bgt.n	800c746 <__swbuf_r+0x4e>
 800c73a:	4621      	mov	r1, r4
 800c73c:	4628      	mov	r0, r5
 800c73e:	f7ff fdf3 	bl	800c328 <_fflush_r>
 800c742:	2800      	cmp	r0, #0
 800c744:	d1ed      	bne.n	800c722 <__swbuf_r+0x2a>
 800c746:	68a3      	ldr	r3, [r4, #8]
 800c748:	3b01      	subs	r3, #1
 800c74a:	60a3      	str	r3, [r4, #8]
 800c74c:	6823      	ldr	r3, [r4, #0]
 800c74e:	1c5a      	adds	r2, r3, #1
 800c750:	6022      	str	r2, [r4, #0]
 800c752:	701e      	strb	r6, [r3, #0]
 800c754:	6962      	ldr	r2, [r4, #20]
 800c756:	1c43      	adds	r3, r0, #1
 800c758:	429a      	cmp	r2, r3
 800c75a:	d004      	beq.n	800c766 <__swbuf_r+0x6e>
 800c75c:	89a3      	ldrh	r3, [r4, #12]
 800c75e:	07db      	lsls	r3, r3, #31
 800c760:	d5e1      	bpl.n	800c726 <__swbuf_r+0x2e>
 800c762:	2e0a      	cmp	r6, #10
 800c764:	d1df      	bne.n	800c726 <__swbuf_r+0x2e>
 800c766:	4621      	mov	r1, r4
 800c768:	4628      	mov	r0, r5
 800c76a:	f7ff fddd 	bl	800c328 <_fflush_r>
 800c76e:	2800      	cmp	r0, #0
 800c770:	d0d9      	beq.n	800c726 <__swbuf_r+0x2e>
 800c772:	e7d6      	b.n	800c722 <__swbuf_r+0x2a>

0800c774 <__swsetup_r>:
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	4b29      	ldr	r3, [pc, #164]	@ (800c81c <__swsetup_r+0xa8>)
 800c778:	4605      	mov	r5, r0
 800c77a:	6818      	ldr	r0, [r3, #0]
 800c77c:	460c      	mov	r4, r1
 800c77e:	b118      	cbz	r0, 800c788 <__swsetup_r+0x14>
 800c780:	6a03      	ldr	r3, [r0, #32]
 800c782:	b90b      	cbnz	r3, 800c788 <__swsetup_r+0x14>
 800c784:	f7ff f824 	bl	800b7d0 <__sinit>
 800c788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c78c:	0719      	lsls	r1, r3, #28
 800c78e:	d422      	bmi.n	800c7d6 <__swsetup_r+0x62>
 800c790:	06da      	lsls	r2, r3, #27
 800c792:	d407      	bmi.n	800c7a4 <__swsetup_r+0x30>
 800c794:	2209      	movs	r2, #9
 800c796:	602a      	str	r2, [r5, #0]
 800c798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c79c:	81a3      	strh	r3, [r4, #12]
 800c79e:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a2:	e033      	b.n	800c80c <__swsetup_r+0x98>
 800c7a4:	0758      	lsls	r0, r3, #29
 800c7a6:	d512      	bpl.n	800c7ce <__swsetup_r+0x5a>
 800c7a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c7aa:	b141      	cbz	r1, 800c7be <__swsetup_r+0x4a>
 800c7ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c7b0:	4299      	cmp	r1, r3
 800c7b2:	d002      	beq.n	800c7ba <__swsetup_r+0x46>
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	f7ff f94d 	bl	800ba54 <_free_r>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c7be:	89a3      	ldrh	r3, [r4, #12]
 800c7c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c7c4:	81a3      	strh	r3, [r4, #12]
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	6063      	str	r3, [r4, #4]
 800c7ca:	6923      	ldr	r3, [r4, #16]
 800c7cc:	6023      	str	r3, [r4, #0]
 800c7ce:	89a3      	ldrh	r3, [r4, #12]
 800c7d0:	f043 0308 	orr.w	r3, r3, #8
 800c7d4:	81a3      	strh	r3, [r4, #12]
 800c7d6:	6923      	ldr	r3, [r4, #16]
 800c7d8:	b94b      	cbnz	r3, 800c7ee <__swsetup_r+0x7a>
 800c7da:	89a3      	ldrh	r3, [r4, #12]
 800c7dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c7e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7e4:	d003      	beq.n	800c7ee <__swsetup_r+0x7a>
 800c7e6:	4621      	mov	r1, r4
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	f000 f88b 	bl	800c904 <__smakebuf_r>
 800c7ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7f2:	f013 0201 	ands.w	r2, r3, #1
 800c7f6:	d00a      	beq.n	800c80e <__swsetup_r+0x9a>
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	60a2      	str	r2, [r4, #8]
 800c7fc:	6962      	ldr	r2, [r4, #20]
 800c7fe:	4252      	negs	r2, r2
 800c800:	61a2      	str	r2, [r4, #24]
 800c802:	6922      	ldr	r2, [r4, #16]
 800c804:	b942      	cbnz	r2, 800c818 <__swsetup_r+0xa4>
 800c806:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c80a:	d1c5      	bne.n	800c798 <__swsetup_r+0x24>
 800c80c:	bd38      	pop	{r3, r4, r5, pc}
 800c80e:	0799      	lsls	r1, r3, #30
 800c810:	bf58      	it	pl
 800c812:	6962      	ldrpl	r2, [r4, #20]
 800c814:	60a2      	str	r2, [r4, #8]
 800c816:	e7f4      	b.n	800c802 <__swsetup_r+0x8e>
 800c818:	2000      	movs	r0, #0
 800c81a:	e7f7      	b.n	800c80c <__swsetup_r+0x98>
 800c81c:	200400c8 	.word	0x200400c8

0800c820 <_raise_r>:
 800c820:	291f      	cmp	r1, #31
 800c822:	b538      	push	{r3, r4, r5, lr}
 800c824:	4605      	mov	r5, r0
 800c826:	460c      	mov	r4, r1
 800c828:	d904      	bls.n	800c834 <_raise_r+0x14>
 800c82a:	2316      	movs	r3, #22
 800c82c:	6003      	str	r3, [r0, #0]
 800c82e:	f04f 30ff 	mov.w	r0, #4294967295
 800c832:	bd38      	pop	{r3, r4, r5, pc}
 800c834:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c836:	b112      	cbz	r2, 800c83e <_raise_r+0x1e>
 800c838:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c83c:	b94b      	cbnz	r3, 800c852 <_raise_r+0x32>
 800c83e:	4628      	mov	r0, r5
 800c840:	f000 f830 	bl	800c8a4 <_getpid_r>
 800c844:	4622      	mov	r2, r4
 800c846:	4601      	mov	r1, r0
 800c848:	4628      	mov	r0, r5
 800c84a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c84e:	f000 b817 	b.w	800c880 <_kill_r>
 800c852:	2b01      	cmp	r3, #1
 800c854:	d00a      	beq.n	800c86c <_raise_r+0x4c>
 800c856:	1c59      	adds	r1, r3, #1
 800c858:	d103      	bne.n	800c862 <_raise_r+0x42>
 800c85a:	2316      	movs	r3, #22
 800c85c:	6003      	str	r3, [r0, #0]
 800c85e:	2001      	movs	r0, #1
 800c860:	e7e7      	b.n	800c832 <_raise_r+0x12>
 800c862:	2100      	movs	r1, #0
 800c864:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c868:	4620      	mov	r0, r4
 800c86a:	4798      	blx	r3
 800c86c:	2000      	movs	r0, #0
 800c86e:	e7e0      	b.n	800c832 <_raise_r+0x12>

0800c870 <raise>:
 800c870:	4b02      	ldr	r3, [pc, #8]	@ (800c87c <raise+0xc>)
 800c872:	4601      	mov	r1, r0
 800c874:	6818      	ldr	r0, [r3, #0]
 800c876:	f7ff bfd3 	b.w	800c820 <_raise_r>
 800c87a:	bf00      	nop
 800c87c:	200400c8 	.word	0x200400c8

0800c880 <_kill_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	4d07      	ldr	r5, [pc, #28]	@ (800c8a0 <_kill_r+0x20>)
 800c884:	2300      	movs	r3, #0
 800c886:	4604      	mov	r4, r0
 800c888:	4608      	mov	r0, r1
 800c88a:	4611      	mov	r1, r2
 800c88c:	602b      	str	r3, [r5, #0]
 800c88e:	f7f5 ff4f 	bl	8002730 <_kill>
 800c892:	1c43      	adds	r3, r0, #1
 800c894:	d102      	bne.n	800c89c <_kill_r+0x1c>
 800c896:	682b      	ldr	r3, [r5, #0]
 800c898:	b103      	cbz	r3, 800c89c <_kill_r+0x1c>
 800c89a:	6023      	str	r3, [r4, #0]
 800c89c:	bd38      	pop	{r3, r4, r5, pc}
 800c89e:	bf00      	nop
 800c8a0:	20040908 	.word	0x20040908

0800c8a4 <_getpid_r>:
 800c8a4:	f7f5 bf3c 	b.w	8002720 <_getpid>

0800c8a8 <_malloc_usable_size_r>:
 800c8a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8ac:	1f18      	subs	r0, r3, #4
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	bfbc      	itt	lt
 800c8b2:	580b      	ldrlt	r3, [r1, r0]
 800c8b4:	18c0      	addlt	r0, r0, r3
 800c8b6:	4770      	bx	lr

0800c8b8 <__swhatbuf_r>:
 800c8b8:	b570      	push	{r4, r5, r6, lr}
 800c8ba:	460c      	mov	r4, r1
 800c8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8c0:	2900      	cmp	r1, #0
 800c8c2:	b096      	sub	sp, #88	@ 0x58
 800c8c4:	4615      	mov	r5, r2
 800c8c6:	461e      	mov	r6, r3
 800c8c8:	da0d      	bge.n	800c8e6 <__swhatbuf_r+0x2e>
 800c8ca:	89a3      	ldrh	r3, [r4, #12]
 800c8cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c8d0:	f04f 0100 	mov.w	r1, #0
 800c8d4:	bf14      	ite	ne
 800c8d6:	2340      	movne	r3, #64	@ 0x40
 800c8d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c8dc:	2000      	movs	r0, #0
 800c8de:	6031      	str	r1, [r6, #0]
 800c8e0:	602b      	str	r3, [r5, #0]
 800c8e2:	b016      	add	sp, #88	@ 0x58
 800c8e4:	bd70      	pop	{r4, r5, r6, pc}
 800c8e6:	466a      	mov	r2, sp
 800c8e8:	f000 f848 	bl	800c97c <_fstat_r>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	dbec      	blt.n	800c8ca <__swhatbuf_r+0x12>
 800c8f0:	9901      	ldr	r1, [sp, #4]
 800c8f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c8f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c8fa:	4259      	negs	r1, r3
 800c8fc:	4159      	adcs	r1, r3
 800c8fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c902:	e7eb      	b.n	800c8dc <__swhatbuf_r+0x24>

0800c904 <__smakebuf_r>:
 800c904:	898b      	ldrh	r3, [r1, #12]
 800c906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c908:	079d      	lsls	r5, r3, #30
 800c90a:	4606      	mov	r6, r0
 800c90c:	460c      	mov	r4, r1
 800c90e:	d507      	bpl.n	800c920 <__smakebuf_r+0x1c>
 800c910:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c914:	6023      	str	r3, [r4, #0]
 800c916:	6123      	str	r3, [r4, #16]
 800c918:	2301      	movs	r3, #1
 800c91a:	6163      	str	r3, [r4, #20]
 800c91c:	b003      	add	sp, #12
 800c91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c920:	ab01      	add	r3, sp, #4
 800c922:	466a      	mov	r2, sp
 800c924:	f7ff ffc8 	bl	800c8b8 <__swhatbuf_r>
 800c928:	9f00      	ldr	r7, [sp, #0]
 800c92a:	4605      	mov	r5, r0
 800c92c:	4639      	mov	r1, r7
 800c92e:	4630      	mov	r0, r6
 800c930:	f7ff f904 	bl	800bb3c <_malloc_r>
 800c934:	b948      	cbnz	r0, 800c94a <__smakebuf_r+0x46>
 800c936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c93a:	059a      	lsls	r2, r3, #22
 800c93c:	d4ee      	bmi.n	800c91c <__smakebuf_r+0x18>
 800c93e:	f023 0303 	bic.w	r3, r3, #3
 800c942:	f043 0302 	orr.w	r3, r3, #2
 800c946:	81a3      	strh	r3, [r4, #12]
 800c948:	e7e2      	b.n	800c910 <__smakebuf_r+0xc>
 800c94a:	89a3      	ldrh	r3, [r4, #12]
 800c94c:	6020      	str	r0, [r4, #0]
 800c94e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c952:	81a3      	strh	r3, [r4, #12]
 800c954:	9b01      	ldr	r3, [sp, #4]
 800c956:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c95a:	b15b      	cbz	r3, 800c974 <__smakebuf_r+0x70>
 800c95c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c960:	4630      	mov	r0, r6
 800c962:	f000 f81d 	bl	800c9a0 <_isatty_r>
 800c966:	b128      	cbz	r0, 800c974 <__smakebuf_r+0x70>
 800c968:	89a3      	ldrh	r3, [r4, #12]
 800c96a:	f023 0303 	bic.w	r3, r3, #3
 800c96e:	f043 0301 	orr.w	r3, r3, #1
 800c972:	81a3      	strh	r3, [r4, #12]
 800c974:	89a3      	ldrh	r3, [r4, #12]
 800c976:	431d      	orrs	r5, r3
 800c978:	81a5      	strh	r5, [r4, #12]
 800c97a:	e7cf      	b.n	800c91c <__smakebuf_r+0x18>

0800c97c <_fstat_r>:
 800c97c:	b538      	push	{r3, r4, r5, lr}
 800c97e:	4d07      	ldr	r5, [pc, #28]	@ (800c99c <_fstat_r+0x20>)
 800c980:	2300      	movs	r3, #0
 800c982:	4604      	mov	r4, r0
 800c984:	4608      	mov	r0, r1
 800c986:	4611      	mov	r1, r2
 800c988:	602b      	str	r3, [r5, #0]
 800c98a:	f7f5 ff31 	bl	80027f0 <_fstat>
 800c98e:	1c43      	adds	r3, r0, #1
 800c990:	d102      	bne.n	800c998 <_fstat_r+0x1c>
 800c992:	682b      	ldr	r3, [r5, #0]
 800c994:	b103      	cbz	r3, 800c998 <_fstat_r+0x1c>
 800c996:	6023      	str	r3, [r4, #0]
 800c998:	bd38      	pop	{r3, r4, r5, pc}
 800c99a:	bf00      	nop
 800c99c:	20040908 	.word	0x20040908

0800c9a0 <_isatty_r>:
 800c9a0:	b538      	push	{r3, r4, r5, lr}
 800c9a2:	4d06      	ldr	r5, [pc, #24]	@ (800c9bc <_isatty_r+0x1c>)
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	4608      	mov	r0, r1
 800c9aa:	602b      	str	r3, [r5, #0]
 800c9ac:	f7f5 ff30 	bl	8002810 <_isatty>
 800c9b0:	1c43      	adds	r3, r0, #1
 800c9b2:	d102      	bne.n	800c9ba <_isatty_r+0x1a>
 800c9b4:	682b      	ldr	r3, [r5, #0]
 800c9b6:	b103      	cbz	r3, 800c9ba <_isatty_r+0x1a>
 800c9b8:	6023      	str	r3, [r4, #0]
 800c9ba:	bd38      	pop	{r3, r4, r5, pc}
 800c9bc:	20040908 	.word	0x20040908

0800c9c0 <_init>:
 800c9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c2:	bf00      	nop
 800c9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9c6:	bc08      	pop	{r3}
 800c9c8:	469e      	mov	lr, r3
 800c9ca:	4770      	bx	lr

0800c9cc <_fini>:
 800c9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ce:	bf00      	nop
 800c9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9d2:	bc08      	pop	{r3}
 800c9d4:	469e      	mov	lr, r3
 800c9d6:	4770      	bx	lr
