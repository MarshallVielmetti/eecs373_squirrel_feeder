/*
 * integration.c
 *
 *  Created on: Dec 3, 2024
 *      Author: mvielmet
 */

#include "main.h"

#include "motor.h"
#include "load_cell.h"
#include "ir_sensor.h"
#include "camera_handler.h"
#include "lcd.h"

#include <stdint.h>
#include <stdbool.h>

extern TIM_HandleTypeDef IR_SENSOR_TIMER_HANDLE;
extern TIM_HandleTypeDef MAIN_TIMER_HANDLE;

typedef enum FeederStateType {
	WAITING_FOR_SQUIRREL, 	// Default system state -- polling IR sensor for a squirrel
	DETECTED_SQUIRREL,		// Squirrel candidate detected!
	DISPENSING,				// Dispense some food
	JUST_DISPENSED,			// Read pressure sensor after dispensing to determine if food was successfully dispensed
	COOLDOWN,				// Cooldown state to prevent food from being dispensed too rapidly
	OUT_OF_FOOD
} FeederState;


typedef struct Feeder {
	// Current state of the feeder
	FeederStateType state;

	// The number of squirrels fed
	uint32_t squirrel_count;

	// Whether or not the feeder is out of food
	bool out_of_food;
};

// DECLARATION OF FEEDER OBJECT
static Feeder feeder;


#define IR_DISTANCE_THRESHOLD 1.5 	// Threshold to determine IR sensor trigger - Need to confirm voltage vs. distance for IR sensor reading
#define PS_FOOD_THRESHOLD 5000		// Max weight (mg) of food on tray
#define COOLDOWN_ISR_ITERATIONS 20

uint8_t error_state = 0;	 		// Error catching for camera capture

extern int weight;
extern int squirrel_count;
extern bool out_of_food = false;	// Condition flag for when dispenser is jammed/out of food


void init_peripherals() {
	HAL_Delay(2500);

	camera_init();

	// shared between the IR sensor and pressure sensor
	HAL_TIM_Base_Start_IT(&IR_SENSOR_TIMER_HANDLE);

	ir_sensor_init();
	ps_init();
	lcd_init();

	FeederState = WAITING_FOR_SQUIRREL;

	// start main timer
	HAL_TIM_Base_Start_IT(&MAIN_TIMER_HANDLE);

}

static void waiting_for_squirrel_isr();
static void detected_squirrel_isr();
static void dispensing_isr();
static void just_dispensed_isr();
static void cooldown_isr();
static void out_of_food_isr();

// main program logic interrupt routine
void main_isr() {
	switch (feeder.state) {
	case WAITING_FOR_SQUIRREL:
		waiting_for_squirrel_isr();
		break;
	case DETECTED_SQUIRREL:
		detected_squirrel_isr();
		break;
	case DISPENSING:
		dispensing_isr();
		break;
	case JUST_DISPENSED:
		just_dispensed_isr();
		break;
	case COOLDOWN:
		cooldown_isr();
		break;
	case OUT_OF_FOOD:
		out_of_food_isr();
		break;
	}
}

static void waiting_for_squirrel_isr() {
	if(get_cur_distance_average() > IR_DISTANCE_THRESHOLD) {
		feeder.state = DETECTED_SQUIRREL;
	}
}

static void detected_squirrel_isr() {
	error_state = camera_take_photo();
	if(!error_state) {
		while(1){} // Should probably remove error-handling for demo
	}

	feeder.state = DISPENSING;
}

static uint32_t times_dispensed = 0;
static void dispensing_isr() {
	int dispense_count = 0;

	if (ps_get_reading() >= PS_FOOD_THRESHOLD) {
		// Must have dispensed enough food
		feeder.state = COOLDOWN;
	}

	if (times_dispensed >= 5) {
		// has dispensed 5 times on this iteration already
	}

	// Must need to con

	if (ps_get_reading() < PS_FOOD_THRESHOLD) {
		times_dispensed++;
		stepper_rotate_clockwise_steps(1);
	}


	if (times_dispensed > 5) {
		times_dispensed = 0;
		feeder.state = OUT_OF_FOOD;
	}

	while(ps_get_reading() < PS_FOOD_THRESHOLD) {
		stepper_rotate_clockwise_steps(1); // Could adjust function to use steps/partial rotations
		if(dispense_count > 5) {
			FeederState = OUT_OF_FOOD;
		}
	}
	FeederState = JUST_DISPENSED;
}

static void just_dispensed_isr() {

}


/*
 * Prevents the system from dispensing food over and over again
 */
static uint32_t cooldown_cur_iteration = 0;
static void cooldown_isr(void) {
	cooldown_cur_iteration += 1;

	if (cooldown_cur_iteration == COOLDOWN_ISR_ITERATIONS) {
		cooldown_cur_iteration = 0;
		FeederState = WAITING_FOR_SQUIRREL;
	}
}

static void out_of_food_isr() {	// We don't have a great way to determine when food is added back
	out_of_food = true;
	while(out_of_food) {
		stepper_rotate_clockwise_steps(5);
		HAL_DELAY(30000);
		if(ps_get_reading() > PS_FOOD_THRESHOLD){
			FeederState = WAITING_FOR_SQUIRREL;
		}
	}
}



//FeederStateType cooldown_isr(){}
void perform_startup_routine() {
	/*
	 * Spin motor a lil bit
	 */
	stepper_rotate_clockwise_steps(200);

	/*
	 * Test force sensor
	 */
	uint32_t ttl_weight = 0;
	for (uint8_t i = 0; i < 1; i++) {
		ttl_weight += weigh();
	}

	float avg_weight = ttl_weight / 4.0;

	/*
	 * Test the IR sensor
	 */
//	float ttl_distance = 0;
//	for (uint8_t i = 0; i < 15; i++) {
//		float dist = read_distance();
//		ttl_distance += read_distance();
//	}

//	float avg_distance = ttl_distance / 4.0;
}


void simple_IR_trigger() {
	while(1) {
		float ttl_distance = 0;
		for (uint8_t i = 0; i < 8; i++) {
			ttl_distance += read_distance();
		}
		float avg_distance = ttl_distance / 8.0;

		if (avg_distance < 3) {
			stepper_rotate_clockwise_steps(200);
			break;
		}
	}
}

void camera_test() {


	camera_take_photo();

//	while (camera_process() != 1);
}

// Should update variables to display right stuff





