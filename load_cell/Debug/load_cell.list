
load_cell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007740  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08007900  08007900  00008900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ce0  08007ce0  000091e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007ce0  08007ce0  00008ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ce8  08007ce8  000091e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ce8  08007ce8  00008ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cec  08007cec  00008cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20040000  08007cf0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200401e0  08007ed0  000091e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20040434  08007ed0  00009434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dc8  00000000  00000000  00009210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f1  00000000  00000000  0001afd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0001d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cad  00000000  00000000  0001e308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aec0  00000000  00000000  0001efb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001339e  00000000  00000000  00049e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109740  00000000  00000000  0005d213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166953  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005458  00000000  00000000  00166998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0016bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200401e0 	.word	0x200401e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080078e8 	.word	0x080078e8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200401e4 	.word	0x200401e4
 80001fc:	080078e8 	.word	0x080078e8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <microDelay>:
float knownOriginal = 1;  // in milli gram
float knownHX711 = 1;
int weight;

void microDelay(uint16_t delay)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000ed2:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <microDelay+0x30>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8000eda:	bf00      	nop
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <microDelay+0x30>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d3f9      	bcc.n	8000edc <microDelay+0x14>
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20040290 	.word	0x20040290

08000efc <getHX711>:

int32_t getHX711(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 8000f06:	f000 fe85 	bl	8001c14 <HAL_GetTick>
 8000f0a:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8000f0c:	e008      	b.n	8000f20 <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 8000f0e:	f000 fe81 	bl	8001c14 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2bc8      	cmp	r3, #200	@ 0xc8
 8000f1a:	d901      	bls.n	8000f20 <getHX711+0x24>
      return 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e04b      	b.n	8000fb8 <getHX711+0xbc>
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8000f20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f24:	4826      	ldr	r0, [pc, #152]	@ (8000fc0 <getHX711+0xc4>)
 8000f26:	f001 f91d 	bl	8002164 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d0ee      	beq.n	8000f0e <getHX711+0x12>
  }
  for(int8_t len=0; len<24 ; len++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	72fb      	strb	r3, [r7, #11]
 8000f34:	e025      	b.n	8000f82 <getHX711+0x86>
  {
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f3c:	4820      	ldr	r0, [pc, #128]	@ (8000fc0 <getHX711+0xc4>)
 8000f3e:	f001 f929 	bl	8002194 <HAL_GPIO_WritePin>
    microDelay(1);
 8000f42:	2001      	movs	r0, #1
 8000f44:	f7ff ffc0 	bl	8000ec8 <microDelay>
    data = data << 1;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f54:	481a      	ldr	r0, [pc, #104]	@ (8000fc0 <getHX711+0xc4>)
 8000f56:	f001 f91d 	bl	8002194 <HAL_GPIO_WritePin>
    microDelay(1);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f7ff ffb4 	bl	8000ec8 <microDelay>
    if(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8000f60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f64:	4816      	ldr	r0, [pc, #88]	@ (8000fc0 <getHX711+0xc4>)
 8000f66:	f001 f8fd 	bl	8002164 <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d102      	bne.n	8000f76 <getHX711+0x7a>
      data ++;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3301      	adds	r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 8000f76:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	72fb      	strb	r3, [r7, #11]
 8000f82:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f86:	2b17      	cmp	r3, #23
 8000f88:	ddd5      	ble.n	8000f36 <getHX711+0x3a>
  }
  data = data ^ 0x800000;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8000f90:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f98:	4809      	ldr	r0, [pc, #36]	@ (8000fc0 <getHX711+0xc4>)
 8000f9a:	f001 f8fb 	bl	8002194 <HAL_GPIO_WritePin>
  microDelay(1);
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f7ff ff92 	bl	8000ec8 <microDelay>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000faa:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <getHX711+0xc4>)
 8000fac:	f001 f8f2 	bl	8002194 <HAL_GPIO_WritePin>
  microDelay(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f7ff ff89 	bl	8000ec8 <microDelay>
  return data;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	48000400 	.word	0x48000400

08000fc4 <weigh>:

int weigh()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
  int32_t  total = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  int32_t  samples = 50;
 8000fce:	2332      	movs	r3, #50	@ 0x32
 8000fd0:	60fb      	str	r3, [r7, #12]
  int milligram;
  float coefficient;
  for(uint16_t i=0 ; i<samples ; i++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	827b      	strh	r3, [r7, #18]
 8000fd6:	e008      	b.n	8000fea <weigh+0x26>
  {
      total += getHX711();
 8000fd8:	f7ff ff90 	bl	8000efc <getHX711>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	617b      	str	r3, [r7, #20]
  for(uint16_t i=0 ; i<samples ; i++)
 8000fe4:	8a7b      	ldrh	r3, [r7, #18]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	827b      	strh	r3, [r7, #18]
 8000fea:	8a7b      	ldrh	r3, [r7, #18]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	dcf2      	bgt.n	8000fd8 <weigh+0x14>
  }
  int32_t average = (int32_t)(total / samples);
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ffa:	60bb      	str	r3, [r7, #8]
  coefficient = knownOriginal / knownHX711;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <weigh+0x78>)
 8000ffe:	edd3 6a00 	vldr	s13, [r3]
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <weigh+0x7c>)
 8001004:	ed93 7a00 	vldr	s14, [r3]
 8001008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800100c:	edc7 7a01 	vstr	s15, [r7, #4]
  milligram = (int)(average-tare)*coefficient;
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <weigh+0x80>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001020:	edd7 7a01 	vldr	s15, [r7, #4]
 8001024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102c:	ee17 3a90 	vmov	r3, s15
 8001030:	603b      	str	r3, [r7, #0]
  return milligram;
 8001032:	683b      	ldr	r3, [r7, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20040004 	.word	0x20040004
 8001040:	20040008 	.word	0x20040008
 8001044:	20040000 	.word	0x20040000

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104c:	f000 fd79 	bl	8001b42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001050:	f000 f82c 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001054:	f000 f916 	bl	8001284 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001058:	f000 f87a 	bl	8001150 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800105c:	f000 f8c4 	bl	80011e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001060:	480f      	ldr	r0, [pc, #60]	@ (80010a0 <main+0x58>)
 8001062:	f002 fdcb 	bl	8003bfc <HAL_TIM_Base_Start>
   HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800106c:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <main+0x5c>)
 800106e:	f001 f891 	bl	8002194 <HAL_GPIO_WritePin>
   HAL_Delay(10);
 8001072:	200a      	movs	r0, #10
 8001074:	f000 fdda 	bl	8001c2c <HAL_Delay>
   HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800107e:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <main+0x5c>)
 8001080:	f001 f888 	bl	8002194 <HAL_GPIO_WritePin>
   HAL_Delay(10);
 8001084:	200a      	movs	r0, #10
 8001086:	f000 fdd1 	bl	8001c2c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  weight = weigh(); // in milligram
 800108a:	f7ff ff9b 	bl	8000fc4 <weigh>
 800108e:	4603      	mov	r3, r0
 8001090:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <main+0x60>)
 8001092:	6013      	str	r3, [r2, #0]
	  weight = 1;
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <main+0x60>)
 8001096:	2201      	movs	r2, #1
 8001098:	601a      	str	r2, [r3, #0]
	  weight = weigh(); // in milligram
 800109a:	bf00      	nop
 800109c:	e7f5      	b.n	800108a <main+0x42>
 800109e:	bf00      	nop
 80010a0:	20040290 	.word	0x20040290
 80010a4:	48000400 	.word	0x48000400
 80010a8:	200402dc 	.word	0x200402dc

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b096      	sub	sp, #88	@ 0x58
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2244      	movs	r2, #68	@ 0x44
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f004 fcf1 	bl	8005aa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	463b      	mov	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010d2:	f001 f897 	bl	8002204 <HAL_PWREx_ControlVoltageScaling>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010dc:	f000 fb16 	bl	800170c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010e0:	2310      	movs	r3, #16
 80010e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010ec:	2360      	movs	r3, #96	@ 0x60
 80010ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f0:	2302      	movs	r3, #2
 80010f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010f4:	2301      	movs	r3, #1
 80010f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 80010fc:	2324      	movs	r3, #36	@ 0x24
 80010fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001100:	2302      	movs	r3, #2
 8001102:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001104:	2302      	movs	r3, #2
 8001106:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001108:	2302      	movs	r3, #2
 800110a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4618      	mov	r0, r3
 8001112:	f001 f92b 	bl	800236c <HAL_RCC_OscConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800111c:	f000 faf6 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001120:	230f      	movs	r3, #15
 8001122:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001124:	2303      	movs	r3, #3
 8001126:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	2103      	movs	r1, #3
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fd31 	bl	8002ba0 <HAL_RCC_ClockConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001144:	f000 fae2 	bl	800170c <Error_Handler>
  }
}
 8001148:	bf00      	nop
 800114a:	3758      	adds	r7, #88	@ 0x58
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001154:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <MX_LPUART1_UART_Init+0x90>)
 8001156:	4a23      	ldr	r2, [pc, #140]	@ (80011e4 <MX_LPUART1_UART_Init+0x94>)
 8001158:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800115a:	4b21      	ldr	r3, [pc, #132]	@ (80011e0 <MX_LPUART1_UART_Init+0x90>)
 800115c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001160:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <MX_LPUART1_UART_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <MX_LPUART1_UART_Init+0x90>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <MX_LPUART1_UART_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_LPUART1_UART_Init+0x90>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <MX_LPUART1_UART_Init+0x90>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <MX_LPUART1_UART_Init+0x90>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001186:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <MX_LPUART1_UART_Init+0x90>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118c:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <MX_LPUART1_UART_Init+0x90>)
 800118e:	2200      	movs	r2, #0
 8001190:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001192:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <MX_LPUART1_UART_Init+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001198:	4811      	ldr	r0, [pc, #68]	@ (80011e0 <MX_LPUART1_UART_Init+0x90>)
 800119a:	f003 f829 	bl	80041f0 <HAL_UART_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80011a4:	f000 fab2 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a8:	2100      	movs	r1, #0
 80011aa:	480d      	ldr	r0, [pc, #52]	@ (80011e0 <MX_LPUART1_UART_Init+0x90>)
 80011ac:	f003 fe52 	bl	8004e54 <HAL_UARTEx_SetTxFifoThreshold>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011b6:	f000 faa9 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ba:	2100      	movs	r1, #0
 80011bc:	4808      	ldr	r0, [pc, #32]	@ (80011e0 <MX_LPUART1_UART_Init+0x90>)
 80011be:	f003 fe87 	bl	8004ed0 <HAL_UARTEx_SetRxFifoThreshold>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011c8:	f000 faa0 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011cc:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <MX_LPUART1_UART_Init+0x90>)
 80011ce:	f003 fe08 	bl	8004de2 <HAL_UARTEx_DisableFifoMode>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011d8:	f000 fa98 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200401fc 	.word	0x200401fc
 80011e4:	40008000 	.word	0x40008000

080011e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001206:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <MX_TIM2_Init+0x98>)
 8001208:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800120c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <MX_TIM2_Init+0x98>)
 8001210:	2247      	movs	r2, #71	@ 0x47
 8001212:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <MX_TIM2_Init+0x98>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800121a:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <MX_TIM2_Init+0x98>)
 800121c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001220:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001222:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <MX_TIM2_Init+0x98>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001228:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <MX_TIM2_Init+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800122e:	4814      	ldr	r0, [pc, #80]	@ (8001280 <MX_TIM2_Init+0x98>)
 8001230:	f002 fc8c 	bl	8003b4c <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800123a:	f000 fa67 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001242:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	4619      	mov	r1, r3
 800124a:	480d      	ldr	r0, [pc, #52]	@ (8001280 <MX_TIM2_Init+0x98>)
 800124c:	f002 fd3e 	bl	8003ccc <HAL_TIM_ConfigClockSource>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001256:	f000 fa59 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4619      	mov	r1, r3
 8001266:	4806      	ldr	r0, [pc, #24]	@ (8001280 <MX_TIM2_Init+0x98>)
 8001268:	f002 ff3a 	bl	80040e0 <HAL_TIMEx_MasterConfigSynchronization>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001272:	f000 fa4b 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20040290 	.word	0x20040290

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08e      	sub	sp, #56	@ 0x38
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800129a:	4bb2      	ldr	r3, [pc, #712]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	4ab1      	ldr	r2, [pc, #708]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 80012a0:	f043 0310 	orr.w	r3, r3, #16
 80012a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a6:	4baf      	ldr	r3, [pc, #700]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	623b      	str	r3, [r7, #32]
 80012b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	4bac      	ldr	r3, [pc, #688]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	4aab      	ldr	r2, [pc, #684]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012be:	4ba9      	ldr	r3, [pc, #676]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ca:	4ba6      	ldr	r3, [pc, #664]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ce:	4aa5      	ldr	r2, [pc, #660]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 80012d0:	f043 0320 	orr.w	r3, r3, #32
 80012d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d6:	4ba3      	ldr	r3, [pc, #652]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012da:	f003 0320 	and.w	r3, r3, #32
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e2:	4ba0      	ldr	r3, [pc, #640]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	4a9f      	ldr	r2, [pc, #636]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 80012e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ee:	4b9d      	ldr	r3, [pc, #628]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b9a      	ldr	r3, [pc, #616]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	4a99      	ldr	r2, [pc, #612]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001306:	4b97      	ldr	r3, [pc, #604]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	4b94      	ldr	r3, [pc, #592]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	4a93      	ldr	r2, [pc, #588]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131e:	4b91      	ldr	r3, [pc, #580]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132a:	4b8e      	ldr	r3, [pc, #568]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	4a8d      	ldr	r2, [pc, #564]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001336:	4b8b      	ldr	r3, [pc, #556]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001342:	4b88      	ldr	r3, [pc, #544]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	4a87      	ldr	r2, [pc, #540]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 8001348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800134c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134e:	4b85      	ldr	r3, [pc, #532]	@ (8001564 <MX_GPIO_Init+0x2e0>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800135a:	f000 fff7 	bl	800234c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001364:	4880      	ldr	r0, [pc, #512]	@ (8001568 <MX_GPIO_Init+0x2e4>)
 8001366:	f000 ff15 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800136a:	230c      	movs	r3, #12
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800137a:	230d      	movs	r3, #13
 800137c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	4879      	ldr	r0, [pc, #484]	@ (800156c <MX_GPIO_Init+0x2e8>)
 8001386:	f000 fd5b 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800138a:	2307      	movs	r3, #7
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138e:	2312      	movs	r3, #18
 8001390:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800139a:	2304      	movs	r3, #4
 800139c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800139e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	4872      	ldr	r0, [pc, #456]	@ (8001570 <MX_GPIO_Init+0x2ec>)
 80013a6:	f000 fd4b 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013aa:	2380      	movs	r3, #128	@ 0x80
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80013ba:	230d      	movs	r3, #13
 80013bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	486a      	ldr	r0, [pc, #424]	@ (8001570 <MX_GPIO_Init+0x2ec>)
 80013c6:	f000 fd3b 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80013ca:	233f      	movs	r3, #63	@ 0x3f
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013ce:	230b      	movs	r3, #11
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013da:	4619      	mov	r1, r3
 80013dc:	4865      	ldr	r0, [pc, #404]	@ (8001574 <MX_GPIO_Init+0x2f0>)
 80013de:	f000 fd2f 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80013e2:	230a      	movs	r3, #10
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013e6:	230b      	movs	r3, #11
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f8:	f000 fd22 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013fc:	23f0      	movs	r3, #240	@ 0xf0
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800140c:	2305      	movs	r3, #5
 800140e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001414:	4619      	mov	r1, r3
 8001416:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800141a:	f000 fd11 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800141e:	2301      	movs	r3, #1
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800142e:	2302      	movs	r3, #2
 8001430:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	484b      	ldr	r0, [pc, #300]	@ (8001568 <MX_GPIO_Init+0x2e4>)
 800143a:	f000 fd01 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800143e:	2302      	movs	r3, #2
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001442:	230b      	movs	r3, #11
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144e:	4619      	mov	r1, r3
 8001450:	4845      	ldr	r0, [pc, #276]	@ (8001568 <MX_GPIO_Init+0x2e4>)
 8001452:	f000 fcf5 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001456:	2344      	movs	r3, #68	@ 0x44
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145a:	2303      	movs	r3, #3
 800145c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	483f      	ldr	r0, [pc, #252]	@ (8001568 <MX_GPIO_Init+0x2e4>)
 800146a:	f000 fce9 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800146e:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001480:	2301      	movs	r3, #1
 8001482:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	4838      	ldr	r0, [pc, #224]	@ (800156c <MX_GPIO_Init+0x2e8>)
 800148c:	f000 fcd8 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001490:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80014a2:	2303      	movs	r3, #3
 80014a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	482f      	ldr	r0, [pc, #188]	@ (800156c <MX_GPIO_Init+0x2e8>)
 80014ae:	f000 fcc7 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80014b2:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80014c4:	230d      	movs	r3, #13
 80014c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014cc:	4619      	mov	r1, r3
 80014ce:	4826      	ldr	r0, [pc, #152]	@ (8001568 <MX_GPIO_Init+0x2e4>)
 80014d0:	f000 fcb6 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80014e6:	230e      	movs	r3, #14
 80014e8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ee:	4619      	mov	r1, r3
 80014f0:	481d      	ldr	r0, [pc, #116]	@ (8001568 <MX_GPIO_Init+0x2e4>)
 80014f2:	f000 fca5 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001508:	2307      	movs	r3, #7
 800150a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001510:	4619      	mov	r1, r3
 8001512:	4819      	ldr	r0, [pc, #100]	@ (8001578 <MX_GPIO_Init+0x2f4>)
 8001514:	f000 fc94 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001518:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800152a:	2302      	movs	r3, #2
 800152c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	4810      	ldr	r0, [pc, #64]	@ (8001578 <MX_GPIO_Init+0x2f4>)
 8001536:	f000 fc83 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800153a:	2340      	movs	r3, #64	@ 0x40
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800154a:	230d      	movs	r3, #13
 800154c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001552:	4619      	mov	r1, r3
 8001554:	4807      	ldr	r0, [pc, #28]	@ (8001574 <MX_GPIO_Init+0x2f0>)
 8001556:	f000 fc73 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	e00c      	b.n	800157c <MX_GPIO_Init+0x2f8>
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000
 8001568:	48000400 	.word	0x48000400
 800156c:	48001000 	.word	0x48001000
 8001570:	48001400 	.word	0x48001400
 8001574:	48000800 	.word	0x48000800
 8001578:	48000c00 	.word	0x48000c00
 800157c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001586:	2302      	movs	r3, #2
 8001588:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158e:	4619      	mov	r1, r3
 8001590:	4851      	ldr	r0, [pc, #324]	@ (80016d8 <MX_GPIO_Init+0x454>)
 8001592:	f000 fc55 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001596:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015a8:	230c      	movs	r3, #12
 80015aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b0:	4619      	mov	r1, r3
 80015b2:	4849      	ldr	r0, [pc, #292]	@ (80016d8 <MX_GPIO_Init+0x454>)
 80015b4:	f000 fc44 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80015b8:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015ca:	230a      	movs	r3, #10
 80015cc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d2:	4619      	mov	r1, r3
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d8:	f000 fc32 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ee:	4619      	mov	r1, r3
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f4:	f000 fc24 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015f8:	2301      	movs	r3, #1
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001608:	2309      	movs	r3, #9
 800160a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001610:	4619      	mov	r1, r3
 8001612:	4832      	ldr	r0, [pc, #200]	@ (80016dc <MX_GPIO_Init+0x458>)
 8001614:	f000 fc14 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001618:	2304      	movs	r3, #4
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001628:	230c      	movs	r3, #12
 800162a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	482a      	ldr	r0, [pc, #168]	@ (80016dc <MX_GPIO_Init+0x458>)
 8001634:	f000 fc04 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001638:	2378      	movs	r3, #120	@ 0x78
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001648:	2307      	movs	r3, #7
 800164a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	4822      	ldr	r0, [pc, #136]	@ (80016dc <MX_GPIO_Init+0x458>)
 8001654:	f000 fbf4 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001658:	2338      	movs	r3, #56	@ 0x38
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001668:	2306      	movs	r3, #6
 800166a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001670:	4619      	mov	r1, r3
 8001672:	481b      	ldr	r0, [pc, #108]	@ (80016e0 <MX_GPIO_Init+0x45c>)
 8001674:	f000 fbe4 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001678:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167e:	2300      	movs	r3, #0
 8001680:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800168a:	4619      	mov	r1, r3
 800168c:	4814      	ldr	r0, [pc, #80]	@ (80016e0 <MX_GPIO_Init+0x45c>)
 800168e:	f000 fbd7 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001692:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a8:	4619      	mov	r1, r3
 80016aa:	480d      	ldr	r0, [pc, #52]	@ (80016e0 <MX_GPIO_Init+0x45c>)
 80016ac:	f000 fbc8 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016b0:	2301      	movs	r3, #1
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016c0:	2302      	movs	r3, #2
 80016c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c8:	4619      	mov	r1, r3
 80016ca:	4806      	ldr	r0, [pc, #24]	@ (80016e4 <MX_GPIO_Init+0x460>)
 80016cc:	f000 fbb8 	bl	8001e40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d0:	bf00      	nop
 80016d2:	3738      	adds	r7, #56	@ 0x38
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	48000800 	.word	0x48000800
 80016dc:	48000c00 	.word	0x48000c00
 80016e0:	48000400 	.word	0x48000400
 80016e4:	48001000 	.word	0x48001000

080016e8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80016f0:	1d39      	adds	r1, r7, #4
 80016f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016f6:	2201      	movs	r2, #1
 80016f8:	4803      	ldr	r0, [pc, #12]	@ (8001708 <__io_putchar+0x20>)
 80016fa:	f002 fdc9 	bl	8004290 <HAL_UART_Transmit>
  return ch;
 80016fe:	687b      	ldr	r3, [r7, #4]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200401fc 	.word	0x200401fc

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <Error_Handler+0x8>

08001718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <HAL_MspInit+0x44>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001722:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <HAL_MspInit+0x44>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6613      	str	r3, [r2, #96]	@ 0x60
 800172a:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <HAL_MspInit+0x44>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_MspInit+0x44>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173a:	4a08      	ldr	r2, [pc, #32]	@ (800175c <HAL_MspInit+0x44>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001740:	6593      	str	r3, [r2, #88]	@ 0x58
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_MspInit+0x44>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b0ae      	sub	sp, #184	@ 0xb8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	2294      	movs	r2, #148	@ 0x94
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f004 f98e 	bl	8005aa2 <memset>
  if(huart->Instance==LPUART1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a22      	ldr	r2, [pc, #136]	@ (8001814 <HAL_UART_MspInit+0xb4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d13d      	bne.n	800180c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001790:	2320      	movs	r3, #32
 8001792:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001794:	2300      	movs	r3, #0
 8001796:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	4618      	mov	r0, r3
 800179e:	f001 fcbd 	bl	800311c <HAL_RCCEx_PeriphCLKConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017a8:	f7ff ffb0 	bl	800170c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80017ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <HAL_UART_MspInit+0xb8>)
 80017ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b0:	4a19      	ldr	r2, [pc, #100]	@ (8001818 <HAL_UART_MspInit+0xb8>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80017b8:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <HAL_UART_MspInit+0xb8>)
 80017ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017c4:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <HAL_UART_MspInit+0xb8>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c8:	4a13      	ldr	r2, [pc, #76]	@ (8001818 <HAL_UART_MspInit+0xb8>)
 80017ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <HAL_UART_MspInit+0xb8>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80017dc:	f000 fdb6 	bl	800234c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80017e0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80017e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80017fa:	2308      	movs	r3, #8
 80017fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001800:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001804:	4619      	mov	r1, r3
 8001806:	4805      	ldr	r0, [pc, #20]	@ (800181c <HAL_UART_MspInit+0xbc>)
 8001808:	f000 fb1a 	bl	8001e40 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800180c:	bf00      	nop
 800180e:	37b8      	adds	r7, #184	@ 0xb8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40008000 	.word	0x40008000
 8001818:	40021000 	.word	0x40021000
 800181c:	48001800 	.word	0x48001800

08001820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001840:	d145      	bne.n	80018ce <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001842:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <HAL_TIM_Base_MspInit+0xb8>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001846:	4a24      	ldr	r2, [pc, #144]	@ (80018d8 <HAL_TIM_Base_MspInit+0xb8>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6593      	str	r3, [r2, #88]	@ 0x58
 800184e:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <HAL_TIM_Base_MspInit+0xb8>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <HAL_TIM_Base_MspInit+0xb8>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	4a1e      	ldr	r2, [pc, #120]	@ (80018d8 <HAL_TIM_Base_MspInit+0xb8>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001866:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <HAL_TIM_Base_MspInit+0xb8>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <HAL_TIM_Base_MspInit+0xb8>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	4a18      	ldr	r2, [pc, #96]	@ (80018d8 <HAL_TIM_Base_MspInit+0xb8>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187e:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <HAL_TIM_Base_MspInit+0xb8>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800188a:	2301      	movs	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800189a:	2301      	movs	r3, #1
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a8:	f000 faca 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018be:	2301      	movs	r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4804      	ldr	r0, [pc, #16]	@ (80018dc <HAL_TIM_Base_MspInit+0xbc>)
 80018ca:	f000 fab9 	bl	8001e40 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	@ 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000
 80018dc:	48000400 	.word	0x48000400

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <NMI_Handler+0x4>

080018e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <HardFault_Handler+0x4>

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <MemManage_Handler+0x4>

080018f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <UsageFault_Handler+0x4>

08001908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001936:	f000 f959 	bl	8001bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}

0800193e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  return 1;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_kill>:

int _kill(int pid, int sig)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001958:	f004 f8f6 	bl	8005b48 <__errno>
 800195c:	4603      	mov	r3, r0
 800195e:	2216      	movs	r2, #22
 8001960:	601a      	str	r2, [r3, #0]
  return -1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_exit>:

void _exit (int status)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001976:	f04f 31ff 	mov.w	r1, #4294967295
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffe7 	bl	800194e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <_exit+0x12>

08001984 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e00a      	b.n	80019ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001996:	f3af 8000 	nop.w
 800199a:	4601      	mov	r1, r0
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	60ba      	str	r2, [r7, #8]
 80019a2:	b2ca      	uxtb	r2, r1
 80019a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbf0      	blt.n	8001996 <_read+0x12>
  }

  return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e009      	b.n	80019e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	60ba      	str	r2, [r7, #8]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fe85 	bl	80016e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbf1      	blt.n	80019d0 <_write+0x12>
  }
  return len;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_close>:

int _close(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_isatty>:

int _isatty(int file)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a68:	4a14      	ldr	r2, [pc, #80]	@ (8001abc <_sbrk+0x5c>)
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <_sbrk+0x60>)
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a74:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <_sbrk+0x64>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	@ (8001ac8 <_sbrk+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d207      	bcs.n	8001aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a90:	f004 f85a 	bl	8005b48 <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	220c      	movs	r2, #12
 8001a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	e009      	b.n	8001ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a05      	ldr	r2, [pc, #20]	@ (8001ac4 <_sbrk+0x64>)
 8001ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200a0000 	.word	0x200a0000
 8001ac0:	00000400 	.word	0x00000400
 8001ac4:	200402e0 	.word	0x200402e0
 8001ac8:	20040438 	.word	0x20040438

08001acc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <SystemInit+0x20>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad6:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <SystemInit+0x20>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001af4:	f7ff ffea 	bl	8001acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af8:	480c      	ldr	r0, [pc, #48]	@ (8001b2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001afa:	490d      	ldr	r1, [pc, #52]	@ (8001b30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001afc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <LoopForever+0xe>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b00:	e002      	b.n	8001b08 <LoopCopyDataInit>

08001b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b06:	3304      	adds	r3, #4

08001b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b0c:	d3f9      	bcc.n	8001b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b10:	4c0a      	ldr	r4, [pc, #40]	@ (8001b3c <LoopForever+0x16>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b14:	e001      	b.n	8001b1a <LoopFillZerobss>

08001b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b18:	3204      	adds	r2, #4

08001b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b1c:	d3fb      	bcc.n	8001b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f004 f819 	bl	8005b54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b22:	f7ff fa91 	bl	8001048 <main>

08001b26 <LoopForever>:

LoopForever:
    b LoopForever
 8001b26:	e7fe      	b.n	8001b26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b28:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001b2c:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001b30:	200401e0 	.word	0x200401e0
  ldr r2, =_sidata
 8001b34:	08007cf0 	.word	0x08007cf0
  ldr r2, =_sbss
 8001b38:	200401e0 	.word	0x200401e0
  ldr r4, =_ebss
 8001b3c:	20040434 	.word	0x20040434

08001b40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC1_IRQHandler>

08001b42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	f000 f943 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b52:	2000      	movs	r0, #0
 8001b54:	f000 f80e 	bl	8001b74 <HAL_InitTick>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	71fb      	strb	r3, [r7, #7]
 8001b62:	e001      	b.n	8001b68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b64:	f7ff fdd8 	bl	8001718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b68:	79fb      	ldrb	r3, [r7, #7]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b80:	4b17      	ldr	r3, [pc, #92]	@ (8001be0 <HAL_InitTick+0x6c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d023      	beq.n	8001bd0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b88:	4b16      	ldr	r3, [pc, #88]	@ (8001be4 <HAL_InitTick+0x70>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <HAL_InitTick+0x6c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f941 	bl	8001e26 <HAL_SYSTICK_Config>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10f      	bne.n	8001bca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b0f      	cmp	r3, #15
 8001bae:	d809      	bhi.n	8001bc4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f000 f919 	bl	8001dee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <HAL_InitTick+0x74>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e007      	b.n	8001bd4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	e004      	b.n	8001bd4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	73fb      	strb	r3, [r7, #15]
 8001bce:	e001      	b.n	8001bd4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20040014 	.word	0x20040014
 8001be4:	2004000c 	.word	0x2004000c
 8001be8:	20040010 	.word	0x20040010

08001bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_IncTick+0x20>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_IncTick+0x24>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a04      	ldr	r2, [pc, #16]	@ (8001c10 <HAL_IncTick+0x24>)
 8001bfe:	6013      	str	r3, [r2, #0]
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20040014 	.word	0x20040014
 8001c10:	200402e4 	.word	0x200402e4

08001c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return uwTick;
 8001c18:	4b03      	ldr	r3, [pc, #12]	@ (8001c28 <HAL_GetTick+0x14>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	200402e4 	.word	0x200402e4

08001c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c34:	f7ff ffee 	bl	8001c14 <HAL_GetTick>
 8001c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c44:	d005      	beq.n	8001c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c46:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <HAL_Delay+0x44>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c52:	bf00      	nop
 8001c54:	f7ff ffde 	bl	8001c14 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d8f7      	bhi.n	8001c54 <HAL_Delay+0x28>
  {
  }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20040014 	.word	0x20040014

08001c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c84:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca6:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60d3      	str	r3, [r2, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 0307 	and.w	r3, r3, #7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	@ (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	@ (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	@ 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
         );
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	@ 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da4:	d301      	bcc.n	8001daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00f      	b.n	8001dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001daa:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <SysTick_Config+0x40>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db2:	210f      	movs	r1, #15
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f7ff ff8e 	bl	8001cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dbc:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <SysTick_Config+0x40>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc2:	4b04      	ldr	r3, [pc, #16]	@ (8001dd4 <SysTick_Config+0x40>)
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	e000e010 	.word	0xe000e010

08001dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ff47 	bl	8001c74 <__NVIC_SetPriorityGrouping>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e00:	f7ff ff5c 	bl	8001cbc <__NVIC_GetPriorityGrouping>
 8001e04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7ff ff8e 	bl	8001d2c <NVIC_EncodePriority>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff5d 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ffb0 	bl	8001d94 <SysTick_Config>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	e166      	b.n	800211e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2101      	movs	r1, #1
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8158 	beq.w	8002118 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d005      	beq.n	8001e80 <HAL_GPIO_Init+0x40>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d130      	bne.n	8001ee2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	091b      	lsrs	r3, r3, #4
 8001ecc:	f003 0201 	and.w	r2, r3, #1
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d017      	beq.n	8001f1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d123      	bne.n	8001f72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	08da      	lsrs	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3208      	adds	r2, #8
 8001f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	220f      	movs	r2, #15
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	08da      	lsrs	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3208      	adds	r2, #8
 8001f6c:	6939      	ldr	r1, [r7, #16]
 8001f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0203 	and.w	r2, r3, #3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80b2 	beq.w	8002118 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb4:	4b61      	ldr	r3, [pc, #388]	@ (800213c <HAL_GPIO_Init+0x2fc>)
 8001fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb8:	4a60      	ldr	r2, [pc, #384]	@ (800213c <HAL_GPIO_Init+0x2fc>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fc0:	4b5e      	ldr	r3, [pc, #376]	@ (800213c <HAL_GPIO_Init+0x2fc>)
 8001fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fcc:	4a5c      	ldr	r2, [pc, #368]	@ (8002140 <HAL_GPIO_Init+0x300>)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ff6:	d02b      	beq.n	8002050 <HAL_GPIO_Init+0x210>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a52      	ldr	r2, [pc, #328]	@ (8002144 <HAL_GPIO_Init+0x304>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d025      	beq.n	800204c <HAL_GPIO_Init+0x20c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a51      	ldr	r2, [pc, #324]	@ (8002148 <HAL_GPIO_Init+0x308>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d01f      	beq.n	8002048 <HAL_GPIO_Init+0x208>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a50      	ldr	r2, [pc, #320]	@ (800214c <HAL_GPIO_Init+0x30c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d019      	beq.n	8002044 <HAL_GPIO_Init+0x204>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a4f      	ldr	r2, [pc, #316]	@ (8002150 <HAL_GPIO_Init+0x310>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d013      	beq.n	8002040 <HAL_GPIO_Init+0x200>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a4e      	ldr	r2, [pc, #312]	@ (8002154 <HAL_GPIO_Init+0x314>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d00d      	beq.n	800203c <HAL_GPIO_Init+0x1fc>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a4d      	ldr	r2, [pc, #308]	@ (8002158 <HAL_GPIO_Init+0x318>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d007      	beq.n	8002038 <HAL_GPIO_Init+0x1f8>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a4c      	ldr	r2, [pc, #304]	@ (800215c <HAL_GPIO_Init+0x31c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d101      	bne.n	8002034 <HAL_GPIO_Init+0x1f4>
 8002030:	2307      	movs	r3, #7
 8002032:	e00e      	b.n	8002052 <HAL_GPIO_Init+0x212>
 8002034:	2308      	movs	r3, #8
 8002036:	e00c      	b.n	8002052 <HAL_GPIO_Init+0x212>
 8002038:	2306      	movs	r3, #6
 800203a:	e00a      	b.n	8002052 <HAL_GPIO_Init+0x212>
 800203c:	2305      	movs	r3, #5
 800203e:	e008      	b.n	8002052 <HAL_GPIO_Init+0x212>
 8002040:	2304      	movs	r3, #4
 8002042:	e006      	b.n	8002052 <HAL_GPIO_Init+0x212>
 8002044:	2303      	movs	r3, #3
 8002046:	e004      	b.n	8002052 <HAL_GPIO_Init+0x212>
 8002048:	2302      	movs	r3, #2
 800204a:	e002      	b.n	8002052 <HAL_GPIO_Init+0x212>
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <HAL_GPIO_Init+0x212>
 8002050:	2300      	movs	r3, #0
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	f002 0203 	and.w	r2, r2, #3
 8002058:	0092      	lsls	r2, r2, #2
 800205a:	4093      	lsls	r3, r2
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002062:	4937      	ldr	r1, [pc, #220]	@ (8002140 <HAL_GPIO_Init+0x300>)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002070:	4b3b      	ldr	r3, [pc, #236]	@ (8002160 <HAL_GPIO_Init+0x320>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002094:	4a32      	ldr	r2, [pc, #200]	@ (8002160 <HAL_GPIO_Init+0x320>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800209a:	4b31      	ldr	r3, [pc, #196]	@ (8002160 <HAL_GPIO_Init+0x320>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020be:	4a28      	ldr	r2, [pc, #160]	@ (8002160 <HAL_GPIO_Init+0x320>)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020c4:	4b26      	ldr	r3, [pc, #152]	@ (8002160 <HAL_GPIO_Init+0x320>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002160 <HAL_GPIO_Init+0x320>)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <HAL_GPIO_Init+0x320>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002112:	4a13      	ldr	r2, [pc, #76]	@ (8002160 <HAL_GPIO_Init+0x320>)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3301      	adds	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	f47f ae91 	bne.w	8001e50 <HAL_GPIO_Init+0x10>
  }
}
 800212e:	bf00      	nop
 8002130:	bf00      	nop
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40021000 	.word	0x40021000
 8002140:	40010000 	.word	0x40010000
 8002144:	48000400 	.word	0x48000400
 8002148:	48000800 	.word	0x48000800
 800214c:	48000c00 	.word	0x48000c00
 8002150:	48001000 	.word	0x48001000
 8002154:	48001400 	.word	0x48001400
 8002158:	48001800 	.word	0x48001800
 800215c:	48001c00 	.word	0x48001c00
 8002160:	40010400 	.word	0x40010400

08002164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	887b      	ldrh	r3, [r7, #2]
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e001      	b.n	8002186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
 80021a0:	4613      	mov	r3, r2
 80021a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a4:	787b      	ldrb	r3, [r7, #1]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021b0:	e002      	b.n	80021b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002200 <HAL_PWREx_GetVoltageRange+0x3c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d4:	d102      	bne.n	80021dc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80021d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021da:	e00b      	b.n	80021f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80021dc:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <HAL_PWREx_GetVoltageRange+0x3c>)
 80021de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ea:	d102      	bne.n	80021f2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80021ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021f0:	e000      	b.n	80021f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80021f2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40007000 	.word	0x40007000

08002204 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d141      	bne.n	8002296 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002212:	4b4b      	ldr	r3, [pc, #300]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800221a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800221e:	d131      	bne.n	8002284 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002220:	4b47      	ldr	r3, [pc, #284]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002226:	4a46      	ldr	r2, [pc, #280]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800222c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002230:	4b43      	ldr	r3, [pc, #268]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002238:	4a41      	ldr	r2, [pc, #260]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800223e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002240:	4b40      	ldr	r3, [pc, #256]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2232      	movs	r2, #50	@ 0x32
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	4a3f      	ldr	r2, [pc, #252]	@ (8002348 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	0c9b      	lsrs	r3, r3, #18
 8002252:	3301      	adds	r3, #1
 8002254:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002256:	e002      	b.n	800225e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3b01      	subs	r3, #1
 800225c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800225e:	4b38      	ldr	r3, [pc, #224]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800226a:	d102      	bne.n	8002272 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f2      	bne.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002272:	4b33      	ldr	r3, [pc, #204]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800227e:	d158      	bne.n	8002332 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e057      	b.n	8002334 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002284:	4b2e      	ldr	r3, [pc, #184]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800228a:	4a2d      	ldr	r2, [pc, #180]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002290:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002294:	e04d      	b.n	8002332 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800229c:	d141      	bne.n	8002322 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800229e:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022aa:	d131      	bne.n	8002310 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022ac:	4b24      	ldr	r3, [pc, #144]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022b2:	4a23      	ldr	r2, [pc, #140]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022bc:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2232      	movs	r2, #50	@ 0x32
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002348 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	0c9b      	lsrs	r3, r3, #18
 80022de:	3301      	adds	r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e2:	e002      	b.n	80022ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ea:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f6:	d102      	bne.n	80022fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f2      	bne.n	80022e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022fe:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800230a:	d112      	bne.n	8002332 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e011      	b.n	8002334 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002316:	4a0a      	ldr	r2, [pc, #40]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800231c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002320:	e007      	b.n	8002332 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002322:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800232a:	4a05      	ldr	r2, [pc, #20]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002330:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40007000 	.word	0x40007000
 8002344:	2004000c 	.word	0x2004000c
 8002348:	431bde83 	.word	0x431bde83

0800234c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002350:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4a04      	ldr	r2, [pc, #16]	@ (8002368 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002356:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800235a:	6053      	str	r3, [r2, #4]
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40007000 	.word	0x40007000

0800236c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	f000 bc08 	b.w	8002b90 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002380:	4b96      	ldr	r3, [pc, #600]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800238a:	4b94      	ldr	r3, [pc, #592]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80e4 	beq.w	800256a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <HAL_RCC_OscConfig+0x4c>
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b0c      	cmp	r3, #12
 80023ac:	f040 808b 	bne.w	80024c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	f040 8087 	bne.w	80024c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023b8:	4b88      	ldr	r3, [pc, #544]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_OscConfig+0x64>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e3df      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1a      	ldr	r2, [r3, #32]
 80023d4:	4b81      	ldr	r3, [pc, #516]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d004      	beq.n	80023ea <HAL_RCC_OscConfig+0x7e>
 80023e0:	4b7e      	ldr	r3, [pc, #504]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023e8:	e005      	b.n	80023f6 <HAL_RCC_OscConfig+0x8a>
 80023ea:	4b7c      	ldr	r3, [pc, #496]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80023ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d223      	bcs.n	8002442 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fdcc 	bl	8002f9c <RCC_SetFlashLatencyFromMSIRange>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e3c0      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800240e:	4b73      	ldr	r3, [pc, #460]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a72      	ldr	r2, [pc, #456]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002414:	f043 0308 	orr.w	r3, r3, #8
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b70      	ldr	r3, [pc, #448]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	496d      	ldr	r1, [pc, #436]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800242c:	4b6b      	ldr	r3, [pc, #428]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	4968      	ldr	r1, [pc, #416]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
 8002440:	e025      	b.n	800248e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002442:	4b66      	ldr	r3, [pc, #408]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a65      	ldr	r2, [pc, #404]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002448:	f043 0308 	orr.w	r3, r3, #8
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b63      	ldr	r3, [pc, #396]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4960      	ldr	r1, [pc, #384]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002460:	4b5e      	ldr	r3, [pc, #376]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	495b      	ldr	r1, [pc, #364]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fd8c 	bl	8002f9c <RCC_SetFlashLatencyFromMSIRange>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e380      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800248e:	f000 fcc1 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8002492:	4602      	mov	r2, r0
 8002494:	4b51      	ldr	r3, [pc, #324]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	4950      	ldr	r1, [pc, #320]	@ (80025e0 <HAL_RCC_OscConfig+0x274>)
 80024a0:	5ccb      	ldrb	r3, [r1, r3]
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	fa22 f303 	lsr.w	r3, r2, r3
 80024aa:	4a4e      	ldr	r2, [pc, #312]	@ (80025e4 <HAL_RCC_OscConfig+0x278>)
 80024ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024ae:	4b4e      	ldr	r3, [pc, #312]	@ (80025e8 <HAL_RCC_OscConfig+0x27c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fb5e 	bl	8001b74 <HAL_InitTick>
 80024b8:	4603      	mov	r3, r0
 80024ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d052      	beq.n	8002568 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	e364      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d032      	beq.n	8002534 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024ce:	4b43      	ldr	r3, [pc, #268]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a42      	ldr	r2, [pc, #264]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024da:	f7ff fb9b 	bl	8001c14 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024e2:	f7ff fb97 	bl	8001c14 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e34d      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024f4:	4b39      	ldr	r3, [pc, #228]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002500:	4b36      	ldr	r3, [pc, #216]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a35      	ldr	r2, [pc, #212]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002506:	f043 0308 	orr.w	r3, r3, #8
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b33      	ldr	r3, [pc, #204]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4930      	ldr	r1, [pc, #192]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800251e:	4b2f      	ldr	r3, [pc, #188]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	492b      	ldr	r1, [pc, #172]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
 8002532:	e01a      	b.n	800256a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002534:	4b29      	ldr	r3, [pc, #164]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a28      	ldr	r2, [pc, #160]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002540:	f7ff fb68 	bl	8001c14 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002548:	f7ff fb64 	bl	8001c14 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e31a      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800255a:	4b20      	ldr	r3, [pc, #128]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x1dc>
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002568:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d073      	beq.n	800265e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2b08      	cmp	r3, #8
 800257a:	d005      	beq.n	8002588 <HAL_RCC_OscConfig+0x21c>
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2b0c      	cmp	r3, #12
 8002580:	d10e      	bne.n	80025a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d10b      	bne.n	80025a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d063      	beq.n	800265c <HAL_RCC_OscConfig+0x2f0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d15f      	bne.n	800265c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e2f7      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a8:	d106      	bne.n	80025b8 <HAL_RCC_OscConfig+0x24c>
 80025aa:	4b0c      	ldr	r3, [pc, #48]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a0b      	ldr	r2, [pc, #44]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e025      	b.n	8002604 <HAL_RCC_OscConfig+0x298>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025c0:	d114      	bne.n	80025ec <HAL_RCC_OscConfig+0x280>
 80025c2:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a05      	ldr	r2, [pc, #20]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80025c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b03      	ldr	r3, [pc, #12]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a02      	ldr	r2, [pc, #8]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e013      	b.n	8002604 <HAL_RCC_OscConfig+0x298>
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08007900 	.word	0x08007900
 80025e4:	2004000c 	.word	0x2004000c
 80025e8:	20040010 	.word	0x20040010
 80025ec:	4ba0      	ldr	r3, [pc, #640]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a9f      	ldr	r2, [pc, #636]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80025f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b9d      	ldr	r3, [pc, #628]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a9c      	ldr	r2, [pc, #624]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80025fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d013      	beq.n	8002634 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7ff fb02 	bl	8001c14 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002614:	f7ff fafe 	bl	8001c14 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	@ 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e2b4      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002626:	4b92      	ldr	r3, [pc, #584]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x2a8>
 8002632:	e014      	b.n	800265e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7ff faee 	bl	8001c14 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800263c:	f7ff faea 	bl	8001c14 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	@ 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e2a0      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800264e:	4b88      	ldr	r3, [pc, #544]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x2d0>
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d060      	beq.n	800272c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b04      	cmp	r3, #4
 800266e:	d005      	beq.n	800267c <HAL_RCC_OscConfig+0x310>
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2b0c      	cmp	r3, #12
 8002674:	d119      	bne.n	80026aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d116      	bne.n	80026aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800267c:	4b7c      	ldr	r3, [pc, #496]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_OscConfig+0x328>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e27d      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002694:	4b76      	ldr	r3, [pc, #472]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	061b      	lsls	r3, r3, #24
 80026a2:	4973      	ldr	r1, [pc, #460]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a8:	e040      	b.n	800272c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d023      	beq.n	80026fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80026b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7ff faa9 	bl	8001c14 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c6:	f7ff faa5 	bl	8001c14 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e25b      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d8:	4b65      	ldr	r3, [pc, #404]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e4:	4b62      	ldr	r3, [pc, #392]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	495f      	ldr	r1, [pc, #380]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
 80026f8:	e018      	b.n	800272c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002700:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7ff fa85 	bl	8001c14 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270e:	f7ff fa81 	bl	8001c14 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e237      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002720:	4b53      	ldr	r3, [pc, #332]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d03c      	beq.n	80027b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01c      	beq.n	800277a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002740:	4b4b      	ldr	r3, [pc, #300]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002746:	4a4a      	ldr	r2, [pc, #296]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7ff fa60 	bl	8001c14 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002758:	f7ff fa5c 	bl	8001c14 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e212      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800276a:	4b41      	ldr	r3, [pc, #260]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 800276c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ef      	beq.n	8002758 <HAL_RCC_OscConfig+0x3ec>
 8002778:	e01b      	b.n	80027b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800277a:	4b3d      	ldr	r3, [pc, #244]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 800277c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002780:	4a3b      	ldr	r2, [pc, #236]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278a:	f7ff fa43 	bl	8001c14 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002792:	f7ff fa3f 	bl	8001c14 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e1f5      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a4:	4b32      	ldr	r3, [pc, #200]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80027a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1ef      	bne.n	8002792 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80a6 	beq.w	800290c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c0:	2300      	movs	r3, #0
 80027c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10d      	bne.n	80027ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d0:	4b27      	ldr	r3, [pc, #156]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d4:	4a26      	ldr	r2, [pc, #152]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80027d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027da:	6593      	str	r3, [r2, #88]	@ 0x58
 80027dc:	4b24      	ldr	r3, [pc, #144]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e8:	2301      	movs	r3, #1
 80027ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ec:	4b21      	ldr	r3, [pc, #132]	@ (8002874 <HAL_RCC_OscConfig+0x508>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d118      	bne.n	800282a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <HAL_RCC_OscConfig+0x508>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002874 <HAL_RCC_OscConfig+0x508>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002802:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002804:	f7ff fa06 	bl	8001c14 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280c:	f7ff fa02 	bl	8001c14 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e1b8      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <HAL_RCC_OscConfig+0x508>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d108      	bne.n	8002844 <HAL_RCC_OscConfig+0x4d8>
 8002832:	4b0f      	ldr	r3, [pc, #60]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002838:	4a0d      	ldr	r2, [pc, #52]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002842:	e029      	b.n	8002898 <HAL_RCC_OscConfig+0x52c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b05      	cmp	r3, #5
 800284a:	d115      	bne.n	8002878 <HAL_RCC_OscConfig+0x50c>
 800284c:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002852:	4a07      	ldr	r2, [pc, #28]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800285c:	4b04      	ldr	r3, [pc, #16]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002862:	4a03      	ldr	r2, [pc, #12]	@ (8002870 <HAL_RCC_OscConfig+0x504>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800286c:	e014      	b.n	8002898 <HAL_RCC_OscConfig+0x52c>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	40007000 	.word	0x40007000
 8002878:	4b9d      	ldr	r3, [pc, #628]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287e:	4a9c      	ldr	r2, [pc, #624]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002888:	4b99      	ldr	r3, [pc, #612]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288e:	4a98      	ldr	r2, [pc, #608]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002890:	f023 0304 	bic.w	r3, r3, #4
 8002894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d016      	beq.n	80028ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7ff f9b8 	bl	8001c14 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a6:	e00a      	b.n	80028be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a8:	f7ff f9b4 	bl	8001c14 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e168      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028be:	4b8c      	ldr	r3, [pc, #560]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0ed      	beq.n	80028a8 <HAL_RCC_OscConfig+0x53c>
 80028cc:	e015      	b.n	80028fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ce:	f7ff f9a1 	bl	8001c14 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7ff f99d 	bl	8001c14 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e151      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028ec:	4b80      	ldr	r3, [pc, #512]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1ed      	bne.n	80028d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028fa:	7ffb      	ldrb	r3, [r7, #31]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d105      	bne.n	800290c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002900:	4b7b      	ldr	r3, [pc, #492]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002904:	4a7a      	ldr	r2, [pc, #488]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002906:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800290a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d03c      	beq.n	8002992 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01c      	beq.n	800295a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002920:	4b73      	ldr	r3, [pc, #460]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002922:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002926:	4a72      	ldr	r2, [pc, #456]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7ff f970 	bl	8001c14 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002938:	f7ff f96c 	bl	8001c14 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e122      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800294a:	4b69      	ldr	r3, [pc, #420]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 800294c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ef      	beq.n	8002938 <HAL_RCC_OscConfig+0x5cc>
 8002958:	e01b      	b.n	8002992 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800295a:	4b65      	ldr	r3, [pc, #404]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 800295c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002960:	4a63      	ldr	r2, [pc, #396]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296a:	f7ff f953 	bl	8001c14 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002972:	f7ff f94f 	bl	8001c14 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e105      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002984:	4b5a      	ldr	r3, [pc, #360]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002986:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1ef      	bne.n	8002972 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 80f9 	beq.w	8002b8e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	f040 80cf 	bne.w	8002b44 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029a6:	4b52      	ldr	r3, [pc, #328]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f003 0203 	and.w	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d12c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c4:	3b01      	subs	r3, #1
 80029c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d123      	bne.n	8002a14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d11b      	bne.n	8002a14 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d113      	bne.n	8002a14 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	3b01      	subs	r3, #1
 80029fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d109      	bne.n	8002a14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	085b      	lsrs	r3, r3, #1
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d071      	beq.n	8002af8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b0c      	cmp	r3, #12
 8002a18:	d068      	beq.n	8002aec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a1a:	4b35      	ldr	r3, [pc, #212]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d105      	bne.n	8002a32 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a26:	4b32      	ldr	r3, [pc, #200]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e0ac      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a36:	4b2e      	ldr	r3, [pc, #184]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002a3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a40:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a42:	f7ff f8e7 	bl	8001c14 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7ff f8e3 	bl	8001c14 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e099      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a5c:	4b24      	ldr	r3, [pc, #144]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f0      	bne.n	8002a4a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a68:	4b21      	ldr	r3, [pc, #132]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	4b21      	ldr	r3, [pc, #132]	@ (8002af4 <HAL_RCC_OscConfig+0x788>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a78:	3a01      	subs	r2, #1
 8002a7a:	0112      	lsls	r2, r2, #4
 8002a7c:	4311      	orrs	r1, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a82:	0212      	lsls	r2, r2, #8
 8002a84:	4311      	orrs	r1, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a8a:	0852      	lsrs	r2, r2, #1
 8002a8c:	3a01      	subs	r2, #1
 8002a8e:	0552      	lsls	r2, r2, #21
 8002a90:	4311      	orrs	r1, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a96:	0852      	lsrs	r2, r2, #1
 8002a98:	3a01      	subs	r2, #1
 8002a9a:	0652      	lsls	r2, r2, #25
 8002a9c:	4311      	orrs	r1, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002aa2:	06d2      	lsls	r2, r2, #27
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	4912      	ldr	r1, [pc, #72]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002aac:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ab6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a0c      	ldr	r2, [pc, #48]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ac4:	f7ff f8a6 	bl	8001c14 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7ff f8a2 	bl	8001c14 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e058      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ade:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <HAL_RCC_OscConfig+0x784>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aea:	e050      	b.n	8002b8e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e04f      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
 8002af0:	40021000 	.word	0x40021000
 8002af4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af8:	4b27      	ldr	r3, [pc, #156]	@ (8002b98 <HAL_RCC_OscConfig+0x82c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d144      	bne.n	8002b8e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b04:	4b24      	ldr	r3, [pc, #144]	@ (8002b98 <HAL_RCC_OscConfig+0x82c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a23      	ldr	r2, [pc, #140]	@ (8002b98 <HAL_RCC_OscConfig+0x82c>)
 8002b0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b10:	4b21      	ldr	r3, [pc, #132]	@ (8002b98 <HAL_RCC_OscConfig+0x82c>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a20      	ldr	r2, [pc, #128]	@ (8002b98 <HAL_RCC_OscConfig+0x82c>)
 8002b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b1c:	f7ff f87a 	bl	8001c14 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b24:	f7ff f876 	bl	8001c14 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e02c      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b36:	4b18      	ldr	r3, [pc, #96]	@ (8002b98 <HAL_RCC_OscConfig+0x82c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x7b8>
 8002b42:	e024      	b.n	8002b8e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d01f      	beq.n	8002b8a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4a:	4b13      	ldr	r3, [pc, #76]	@ (8002b98 <HAL_RCC_OscConfig+0x82c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a12      	ldr	r2, [pc, #72]	@ (8002b98 <HAL_RCC_OscConfig+0x82c>)
 8002b50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7ff f85d 	bl	8001c14 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5e:	f7ff f859 	bl	8001c14 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e00f      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b70:	4b09      	ldr	r3, [pc, #36]	@ (8002b98 <HAL_RCC_OscConfig+0x82c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f0      	bne.n	8002b5e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b7c:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <HAL_RCC_OscConfig+0x82c>)
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	4905      	ldr	r1, [pc, #20]	@ (8002b98 <HAL_RCC_OscConfig+0x82c>)
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <HAL_RCC_OscConfig+0x830>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	60cb      	str	r3, [r1, #12]
 8002b88:	e001      	b.n	8002b8e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	feeefffc 	.word	0xfeeefffc

08002ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e11d      	b.n	8002df4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b90      	ldr	r3, [pc, #576]	@ (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d910      	bls.n	8002be8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b8d      	ldr	r3, [pc, #564]	@ (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 020f 	bic.w	r2, r3, #15
 8002bce:	498b      	ldr	r1, [pc, #556]	@ (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b89      	ldr	r3, [pc, #548]	@ (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e105      	b.n	8002df4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d010      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	4b81      	ldr	r3, [pc, #516]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d908      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c04:	4b7e      	ldr	r3, [pc, #504]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	497b      	ldr	r1, [pc, #492]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d079      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d11e      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2a:	4b75      	ldr	r3, [pc, #468]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0dc      	b.n	8002df4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002c3a:	f000 fa09 	bl	8003050 <RCC_GetSysClockFreqFromPLLSource>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4a70      	ldr	r2, [pc, #448]	@ (8002e04 <HAL_RCC_ClockConfig+0x264>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d946      	bls.n	8002cd4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c46:	4b6e      	ldr	r3, [pc, #440]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d140      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c52:	4b6b      	ldr	r3, [pc, #428]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c5a:	4a69      	ldr	r2, [pc, #420]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c62:	2380      	movs	r3, #128	@ 0x80
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	e035      	b.n	8002cd4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c70:	4b63      	ldr	r3, [pc, #396]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d115      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0b9      	b.n	8002df4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c88:	4b5d      	ldr	r3, [pc, #372]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0ad      	b.n	8002df4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c98:	4b59      	ldr	r3, [pc, #356]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0a5      	b.n	8002df4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002ca8:	f000 f8b4 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8002cac:	4603      	mov	r3, r0
 8002cae:	4a55      	ldr	r2, [pc, #340]	@ (8002e04 <HAL_RCC_ClockConfig+0x264>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d90f      	bls.n	8002cd4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002cb4:	4b52      	ldr	r3, [pc, #328]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cc0:	4b4f      	ldr	r3, [pc, #316]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cc8:	4a4d      	ldr	r2, [pc, #308]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cce:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cd0:	2380      	movs	r3, #128	@ 0x80
 8002cd2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cd4:	4b4a      	ldr	r3, [pc, #296]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 0203 	bic.w	r2, r3, #3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4947      	ldr	r1, [pc, #284]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce6:	f7fe ff95 	bl	8001c14 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cec:	e00a      	b.n	8002d04 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cee:	f7fe ff91 	bl	8001c14 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e077      	b.n	8002df4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d04:	4b3e      	ldr	r3, [pc, #248]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 020c 	and.w	r2, r3, #12
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d1eb      	bne.n	8002cee <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b80      	cmp	r3, #128	@ 0x80
 8002d1a:	d105      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d1c:	4b38      	ldr	r3, [pc, #224]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a37      	ldr	r2, [pc, #220]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002d22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d26:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d010      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	4b31      	ldr	r3, [pc, #196]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d208      	bcs.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d44:	4b2e      	ldr	r3, [pc, #184]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	492b      	ldr	r1, [pc, #172]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d56:	4b29      	ldr	r3, [pc, #164]	@ (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d210      	bcs.n	8002d86 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d64:	4b25      	ldr	r3, [pc, #148]	@ (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 020f 	bic.w	r2, r3, #15
 8002d6c:	4923      	ldr	r1, [pc, #140]	@ (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d74:	4b21      	ldr	r3, [pc, #132]	@ (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d001      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e036      	b.n	8002df4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d92:	4b1b      	ldr	r3, [pc, #108]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	4918      	ldr	r1, [pc, #96]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d009      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002db0:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4910      	ldr	r1, [pc, #64]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dc4:	f000 f826 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b0d      	ldr	r3, [pc, #52]	@ (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	490c      	ldr	r1, [pc, #48]	@ (8002e08 <HAL_RCC_ClockConfig+0x268>)
 8002dd6:	5ccb      	ldrb	r3, [r1, r3]
 8002dd8:	f003 031f 	and.w	r3, r3, #31
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8002de0:	4a0a      	ldr	r2, [pc, #40]	@ (8002e0c <HAL_RCC_ClockConfig+0x26c>)
 8002de2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002de4:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <HAL_RCC_ClockConfig+0x270>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe fec3 	bl	8001b74 <HAL_InitTick>
 8002dee:	4603      	mov	r3, r0
 8002df0:	73fb      	strb	r3, [r7, #15]

  return status;
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40022000 	.word	0x40022000
 8002e00:	40021000 	.word	0x40021000
 8002e04:	04c4b400 	.word	0x04c4b400
 8002e08:	08007900 	.word	0x08007900
 8002e0c:	2004000c 	.word	0x2004000c
 8002e10:	20040010 	.word	0x20040010

08002e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	@ 0x24
 8002e18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e22:	4b3e      	ldr	r3, [pc, #248]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x34>
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	2b0c      	cmp	r3, #12
 8002e40:	d121      	bne.n	8002e86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d11e      	bne.n	8002e86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e48:	4b34      	ldr	r3, [pc, #208]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e54:	4b31      	ldr	r3, [pc, #196]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	e005      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e64:	4b2d      	ldr	r3, [pc, #180]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e70:	4a2b      	ldr	r2, [pc, #172]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10d      	bne.n	8002e9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e84:	e00a      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d102      	bne.n	8002e92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e8c:	4b25      	ldr	r3, [pc, #148]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e8e:	61bb      	str	r3, [r7, #24]
 8002e90:	e004      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e98:	4b23      	ldr	r3, [pc, #140]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b0c      	cmp	r3, #12
 8002ea0:	d134      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d003      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0xa6>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d003      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xac>
 8002eb8:	e005      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002eba:	4b1a      	ldr	r3, [pc, #104]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ebc:	617b      	str	r3, [r7, #20]
      break;
 8002ebe:	e005      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ec0:	4b19      	ldr	r3, [pc, #100]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ec2:	617b      	str	r3, [r7, #20]
      break;
 8002ec4:	e002      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	617b      	str	r3, [r7, #20]
      break;
 8002eca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ecc:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eda:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	fb03 f202 	mul.w	r2, r3, r2
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	0e5b      	lsrs	r3, r3, #25
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	3301      	adds	r3, #1
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f0c:	69bb      	ldr	r3, [r7, #24]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	@ 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	08007918 	.word	0x08007918
 8002f24:	00f42400 	.word	0x00f42400
 8002f28:	007a1200 	.word	0x007a1200

08002f2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f30:	4b03      	ldr	r3, [pc, #12]	@ (8002f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f32:	681b      	ldr	r3, [r3, #0]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	2004000c 	.word	0x2004000c

08002f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f48:	f7ff fff0 	bl	8002f2c <HAL_RCC_GetHCLKFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	4904      	ldr	r1, [pc, #16]	@ (8002f6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f5a:	5ccb      	ldrb	r3, [r1, r3]
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	08007910 	.word	0x08007910

08002f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f74:	f7ff ffda 	bl	8002f2c <HAL_RCC_GetHCLKFreq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	0adb      	lsrs	r3, r3, #11
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	4904      	ldr	r1, [pc, #16]	@ (8002f98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f86:	5ccb      	ldrb	r3, [r1, r3]
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	08007910 	.word	0x08007910

08002f9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fa8:	4b27      	ldr	r3, [pc, #156]	@ (8003048 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fb4:	f7ff f906 	bl	80021c4 <HAL_PWREx_GetVoltageRange>
 8002fb8:	6178      	str	r0, [r7, #20]
 8002fba:	e014      	b.n	8002fe6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fbc:	4b22      	ldr	r3, [pc, #136]	@ (8003048 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc0:	4a21      	ldr	r2, [pc, #132]	@ (8003048 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8003048 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fd4:	f7ff f8f6 	bl	80021c4 <HAL_PWREx_GetVoltageRange>
 8002fd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fda:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fde:	4a1a      	ldr	r2, [pc, #104]	@ (8003048 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fe4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fec:	d10b      	bne.n	8003006 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b80      	cmp	r3, #128	@ 0x80
 8002ff2:	d913      	bls.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ff8:	d902      	bls.n	8003000 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	e00d      	b.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003000:	2301      	movs	r3, #1
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	e00a      	b.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b7f      	cmp	r3, #127	@ 0x7f
 800300a:	d902      	bls.n	8003012 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800300c:	2302      	movs	r3, #2
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	e004      	b.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b70      	cmp	r3, #112	@ 0x70
 8003016:	d101      	bne.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003018:	2301      	movs	r3, #1
 800301a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800301c:	4b0b      	ldr	r3, [pc, #44]	@ (800304c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 020f 	bic.w	r2, r3, #15
 8003024:	4909      	ldr	r1, [pc, #36]	@ (800304c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800302c:	4b07      	ldr	r3, [pc, #28]	@ (800304c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	429a      	cmp	r2, r3
 8003038:	d001      	beq.n	800303e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	40022000 	.word	0x40022000

08003050 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003056:	4b2d      	ldr	r3, [pc, #180]	@ (800310c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d00b      	beq.n	800307e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d825      	bhi.n	80030b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d008      	beq.n	8003084 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d11f      	bne.n	80030b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003078:	4b25      	ldr	r3, [pc, #148]	@ (8003110 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800307a:	613b      	str	r3, [r7, #16]
    break;
 800307c:	e01f      	b.n	80030be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800307e:	4b25      	ldr	r3, [pc, #148]	@ (8003114 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003080:	613b      	str	r3, [r7, #16]
    break;
 8003082:	e01c      	b.n	80030be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003084:	4b21      	ldr	r3, [pc, #132]	@ (800310c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d107      	bne.n	80030a0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003090:	4b1e      	ldr	r3, [pc, #120]	@ (800310c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	e005      	b.n	80030ac <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030a0:	4b1a      	ldr	r3, [pc, #104]	@ (800310c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80030ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003118 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b4:	613b      	str	r3, [r7, #16]
    break;
 80030b6:	e002      	b.n	80030be <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
    break;
 80030bc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030be:	4b13      	ldr	r3, [pc, #76]	@ (800310c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	3301      	adds	r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030cc:	4b0f      	ldr	r3, [pc, #60]	@ (800310c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	fb03 f202 	mul.w	r2, r3, r2
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030e4:	4b09      	ldr	r3, [pc, #36]	@ (800310c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	0e5b      	lsrs	r3, r3, #25
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	3301      	adds	r3, #1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80030fe:	683b      	ldr	r3, [r7, #0]
}
 8003100:	4618      	mov	r0, r3
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	40021000 	.word	0x40021000
 8003110:	00f42400 	.word	0x00f42400
 8003114:	007a1200 	.word	0x007a1200
 8003118:	08007918 	.word	0x08007918

0800311c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003124:	2300      	movs	r3, #0
 8003126:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003128:	2300      	movs	r3, #0
 800312a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003134:	2b00      	cmp	r3, #0
 8003136:	d040      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800313c:	2b80      	cmp	r3, #128	@ 0x80
 800313e:	d02a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003140:	2b80      	cmp	r3, #128	@ 0x80
 8003142:	d825      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003144:	2b60      	cmp	r3, #96	@ 0x60
 8003146:	d026      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003148:	2b60      	cmp	r3, #96	@ 0x60
 800314a:	d821      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800314c:	2b40      	cmp	r3, #64	@ 0x40
 800314e:	d006      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003150:	2b40      	cmp	r3, #64	@ 0x40
 8003152:	d81d      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d009      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003158:	2b20      	cmp	r3, #32
 800315a:	d010      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800315c:	e018      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800315e:	4b89      	ldr	r3, [pc, #548]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	4a88      	ldr	r2, [pc, #544]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003168:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800316a:	e015      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3304      	adds	r3, #4
 8003170:	2100      	movs	r1, #0
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fb02 	bl	800377c <RCCEx_PLLSAI1_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800317c:	e00c      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3320      	adds	r3, #32
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fbed 	bl	8003964 <RCCEx_PLLSAI2_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800318e:	e003      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	74fb      	strb	r3, [r7, #19]
      break;
 8003194:	e000      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10b      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800319e:	4b79      	ldr	r3, [pc, #484]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031a4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ac:	4975      	ldr	r1, [pc, #468]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80031b4:	e001      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b6:	7cfb      	ldrb	r3, [r7, #19]
 80031b8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d047      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ce:	d030      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80031d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d4:	d82a      	bhi.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80031d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031da:	d02a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80031dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031e0:	d824      	bhi.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80031e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031e6:	d008      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xde>
 80031e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031ec:	d81e      	bhi.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80031f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031f6:	d010      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80031f8:	e018      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031fa:	4b62      	ldr	r3, [pc, #392]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	4a61      	ldr	r2, [pc, #388]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003204:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003206:	e015      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fab4 	bl	800377c <RCCEx_PLLSAI1_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003218:	e00c      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3320      	adds	r3, #32
 800321e:	2100      	movs	r1, #0
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fb9f 	bl	8003964 <RCCEx_PLLSAI2_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800322a:	e003      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	74fb      	strb	r3, [r7, #19]
      break;
 8003230:	e000      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10b      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800323a:	4b52      	ldr	r3, [pc, #328]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800323c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003240:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003248:	494e      	ldr	r1, [pc, #312]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003250:	e001      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003252:	7cfb      	ldrb	r3, [r7, #19]
 8003254:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 809f 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003264:	2300      	movs	r3, #0
 8003266:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003268:	4b46      	ldr	r3, [pc, #280]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003278:	2300      	movs	r3, #0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00d      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	4b41      	ldr	r3, [pc, #260]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003282:	4a40      	ldr	r2, [pc, #256]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003288:	6593      	str	r3, [r2, #88]	@ 0x58
 800328a:	4b3e      	ldr	r3, [pc, #248]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800328c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003296:	2301      	movs	r3, #1
 8003298:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800329a:	4b3b      	ldr	r3, [pc, #236]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a3a      	ldr	r2, [pc, #232]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032a6:	f7fe fcb5 	bl	8001c14 <HAL_GetTick>
 80032aa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032ac:	e009      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ae:	f7fe fcb1 	bl	8001c14 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d902      	bls.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	74fb      	strb	r3, [r7, #19]
        break;
 80032c0:	e005      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032c2:	4b31      	ldr	r3, [pc, #196]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ef      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80032ce:	7cfb      	ldrb	r3, [r7, #19]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d15b      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032de:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01f      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d019      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032f2:	4b24      	ldr	r3, [pc, #144]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032fe:	4b21      	ldr	r3, [pc, #132]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003304:	4a1f      	ldr	r2, [pc, #124]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800330a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800330e:	4b1d      	ldr	r3, [pc, #116]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003314:	4a1b      	ldr	r2, [pc, #108]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800331a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800331e:	4a19      	ldr	r2, [pc, #100]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d016      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe fc70 	bl	8001c14 <HAL_GetTick>
 8003334:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003336:	e00b      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003338:	f7fe fc6c 	bl	8001c14 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d902      	bls.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	74fb      	strb	r3, [r7, #19]
            break;
 800334e:	e006      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003350:	4b0c      	ldr	r3, [pc, #48]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ec      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10c      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003364:	4b07      	ldr	r3, [pc, #28]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800336a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003374:	4903      	ldr	r1, [pc, #12]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800337c:	e008      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	74bb      	strb	r3, [r7, #18]
 8003382:	e005      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003384:	40021000 	.word	0x40021000
 8003388:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338c:	7cfb      	ldrb	r3, [r7, #19]
 800338e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003390:	7c7b      	ldrb	r3, [r7, #17]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d105      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003396:	4ba0      	ldr	r3, [pc, #640]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339a:	4a9f      	ldr	r2, [pc, #636]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800339c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ae:	4b9a      	ldr	r3, [pc, #616]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b4:	f023 0203 	bic.w	r2, r3, #3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033bc:	4996      	ldr	r1, [pc, #600]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033d0:	4b91      	ldr	r3, [pc, #580]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d6:	f023 020c 	bic.w	r2, r3, #12
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	498e      	ldr	r1, [pc, #568]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033f2:	4b89      	ldr	r3, [pc, #548]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003400:	4985      	ldr	r1, [pc, #532]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003414:	4b80      	ldr	r3, [pc, #512]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003422:	497d      	ldr	r1, [pc, #500]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003436:	4b78      	ldr	r3, [pc, #480]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003444:	4974      	ldr	r1, [pc, #464]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003458:	4b6f      	ldr	r3, [pc, #444]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003466:	496c      	ldr	r1, [pc, #432]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800347a:	4b67      	ldr	r3, [pc, #412]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003480:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003488:	4963      	ldr	r1, [pc, #396]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800349c:	4b5e      	ldr	r3, [pc, #376]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034aa:	495b      	ldr	r1, [pc, #364]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034be:	4b56      	ldr	r3, [pc, #344]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034cc:	4952      	ldr	r1, [pc, #328]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034e0:	4b4d      	ldr	r3, [pc, #308]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ee:	494a      	ldr	r1, [pc, #296]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003502:	4b45      	ldr	r3, [pc, #276]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003508:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003510:	4941      	ldr	r1, [pc, #260]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003524:	4b3c      	ldr	r3, [pc, #240]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003526:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800352a:	f023 0203 	bic.w	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003532:	4939      	ldr	r1, [pc, #228]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d028      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003546:	4b34      	ldr	r3, [pc, #208]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003554:	4930      	ldr	r1, [pc, #192]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003560:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003564:	d106      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003566:	4b2c      	ldr	r3, [pc, #176]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	4a2b      	ldr	r2, [pc, #172]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800356c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003570:	60d3      	str	r3, [r2, #12]
 8003572:	e011      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003578:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800357c:	d10c      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3304      	adds	r3, #4
 8003582:	2101      	movs	r1, #1
 8003584:	4618      	mov	r0, r3
 8003586:	f000 f8f9 	bl	800377c <RCCEx_PLLSAI1_Config>
 800358a:	4603      	mov	r3, r0
 800358c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800358e:	7cfb      	ldrb	r3, [r7, #19]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d04d      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035ac:	d108      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80035ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035b4:	4a18      	ldr	r2, [pc, #96]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035ba:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80035be:	e012      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80035c0:	4b15      	ldr	r3, [pc, #84]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035c6:	4a14      	ldr	r2, [pc, #80]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035cc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80035d0:	4b11      	ldr	r3, [pc, #68]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035de:	490e      	ldr	r1, [pc, #56]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035ee:	d106      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f0:	4b09      	ldr	r3, [pc, #36]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4a08      	ldr	r2, [pc, #32]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035fa:	60d3      	str	r3, [r2, #12]
 80035fc:	e020      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003602:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003606:	d109      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003608:	4b03      	ldr	r3, [pc, #12]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4a02      	ldr	r2, [pc, #8]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003612:	60d3      	str	r3, [r2, #12]
 8003614:	e014      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003620:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003624:	d10c      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3304      	adds	r3, #4
 800362a:	2101      	movs	r1, #1
 800362c:	4618      	mov	r0, r3
 800362e:	f000 f8a5 	bl	800377c <RCCEx_PLLSAI1_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d028      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800364c:	4b4a      	ldr	r3, [pc, #296]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003652:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800365a:	4947      	ldr	r1, [pc, #284]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003666:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800366a:	d106      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800366c:	4b42      	ldr	r3, [pc, #264]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a41      	ldr	r2, [pc, #260]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003672:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003676:	60d3      	str	r3, [r2, #12]
 8003678:	e011      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800367e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003682:	d10c      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	2101      	movs	r1, #1
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f876 	bl	800377c <RCCEx_PLLSAI1_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800369a:	7cfb      	ldrb	r3, [r7, #19]
 800369c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d01e      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036aa:	4b33      	ldr	r3, [pc, #204]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036ba:	492f      	ldr	r1, [pc, #188]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	2102      	movs	r1, #2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f851 	bl	800377c <RCCEx_PLLSAI1_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036de:	7cfb      	ldrb	r3, [r7, #19]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00b      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036f4:	4b20      	ldr	r3, [pc, #128]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036fa:	f023 0204 	bic.w	r2, r3, #4
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003704:	491c      	ldr	r1, [pc, #112]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003718:	4b17      	ldr	r3, [pc, #92]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800371e:	f023 0218 	bic.w	r2, r3, #24
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003728:	4913      	ldr	r1, [pc, #76]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d017      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800373c:	4b0e      	ldr	r3, [pc, #56]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800373e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003742:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800374c:	490a      	ldr	r1, [pc, #40]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800375a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800375e:	d105      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003760:	4b05      	ldr	r3, [pc, #20]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4a04      	ldr	r2, [pc, #16]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800376a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800376c:	7cbb      	ldrb	r3, [r7, #18]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000

0800377c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800378a:	4b72      	ldr	r3, [pc, #456]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00e      	beq.n	80037b4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003796:	4b6f      	ldr	r3, [pc, #444]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0203 	and.w	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d103      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
       ||
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d142      	bne.n	8003834 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
 80037b2:	e03f      	b.n	8003834 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d018      	beq.n	80037ee <RCCEx_PLLSAI1_Config+0x72>
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d825      	bhi.n	800380c <RCCEx_PLLSAI1_Config+0x90>
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d002      	beq.n	80037ca <RCCEx_PLLSAI1_Config+0x4e>
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d009      	beq.n	80037dc <RCCEx_PLLSAI1_Config+0x60>
 80037c8:	e020      	b.n	800380c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037ca:	4b62      	ldr	r3, [pc, #392]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d11d      	bne.n	8003812 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037da:	e01a      	b.n	8003812 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037dc:	4b5d      	ldr	r3, [pc, #372]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d116      	bne.n	8003816 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ec:	e013      	b.n	8003816 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037ee:	4b59      	ldr	r3, [pc, #356]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10f      	bne.n	800381a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037fa:	4b56      	ldr	r3, [pc, #344]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800380a:	e006      	b.n	800381a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
      break;
 8003810:	e004      	b.n	800381c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003812:	bf00      	nop
 8003814:	e002      	b.n	800381c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003816:	bf00      	nop
 8003818:	e000      	b.n	800381c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800381a:	bf00      	nop
    }

    if(status == HAL_OK)
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003822:	4b4c      	ldr	r3, [pc, #304]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f023 0203 	bic.w	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4949      	ldr	r1, [pc, #292]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003830:	4313      	orrs	r3, r2
 8003832:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 8086 	bne.w	8003948 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800383c:	4b45      	ldr	r3, [pc, #276]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a44      	ldr	r2, [pc, #272]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003842:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003846:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003848:	f7fe f9e4 	bl	8001c14 <HAL_GetTick>
 800384c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800384e:	e009      	b.n	8003864 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003850:	f7fe f9e0 	bl	8001c14 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d902      	bls.n	8003864 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	73fb      	strb	r3, [r7, #15]
        break;
 8003862:	e005      	b.n	8003870 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003864:	4b3b      	ldr	r3, [pc, #236]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1ef      	bne.n	8003850 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d168      	bne.n	8003948 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d113      	bne.n	80038a4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800387c:	4b35      	ldr	r3, [pc, #212]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	4b35      	ldr	r3, [pc, #212]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003882:	4013      	ands	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6892      	ldr	r2, [r2, #8]
 8003888:	0211      	lsls	r1, r2, #8
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68d2      	ldr	r2, [r2, #12]
 800388e:	06d2      	lsls	r2, r2, #27
 8003890:	4311      	orrs	r1, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6852      	ldr	r2, [r2, #4]
 8003896:	3a01      	subs	r2, #1
 8003898:	0112      	lsls	r2, r2, #4
 800389a:	430a      	orrs	r2, r1
 800389c:	492d      	ldr	r1, [pc, #180]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	610b      	str	r3, [r1, #16]
 80038a2:	e02d      	b.n	8003900 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d115      	bne.n	80038d6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	4b2b      	ldr	r3, [pc, #172]	@ (800395c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6892      	ldr	r2, [r2, #8]
 80038b6:	0211      	lsls	r1, r2, #8
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6912      	ldr	r2, [r2, #16]
 80038bc:	0852      	lsrs	r2, r2, #1
 80038be:	3a01      	subs	r2, #1
 80038c0:	0552      	lsls	r2, r2, #21
 80038c2:	4311      	orrs	r1, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6852      	ldr	r2, [r2, #4]
 80038c8:	3a01      	subs	r2, #1
 80038ca:	0112      	lsls	r2, r2, #4
 80038cc:	430a      	orrs	r2, r1
 80038ce:	4921      	ldr	r1, [pc, #132]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	610b      	str	r3, [r1, #16]
 80038d4:	e014      	b.n	8003900 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	4b21      	ldr	r3, [pc, #132]	@ (8003960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038dc:	4013      	ands	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6892      	ldr	r2, [r2, #8]
 80038e2:	0211      	lsls	r1, r2, #8
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6952      	ldr	r2, [r2, #20]
 80038e8:	0852      	lsrs	r2, r2, #1
 80038ea:	3a01      	subs	r2, #1
 80038ec:	0652      	lsls	r2, r2, #25
 80038ee:	4311      	orrs	r1, r2
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6852      	ldr	r2, [r2, #4]
 80038f4:	3a01      	subs	r2, #1
 80038f6:	0112      	lsls	r2, r2, #4
 80038f8:	430a      	orrs	r2, r1
 80038fa:	4916      	ldr	r1, [pc, #88]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003900:	4b14      	ldr	r3, [pc, #80]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a13      	ldr	r2, [pc, #76]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003906:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800390a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fe f982 	bl	8001c14 <HAL_GetTick>
 8003910:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003912:	e009      	b.n	8003928 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003914:	f7fe f97e 	bl	8001c14 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d902      	bls.n	8003928 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	73fb      	strb	r3, [r7, #15]
          break;
 8003926:	e005      	b.n	8003934 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003928:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ef      	beq.n	8003914 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	4904      	ldr	r1, [pc, #16]	@ (8003954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003944:	4313      	orrs	r3, r2
 8003946:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
 8003958:	07ff800f 	.word	0x07ff800f
 800395c:	ff9f800f 	.word	0xff9f800f
 8003960:	f9ff800f 	.word	0xf9ff800f

08003964 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003972:	4b72      	ldr	r3, [pc, #456]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00e      	beq.n	800399c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800397e:	4b6f      	ldr	r3, [pc, #444]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0203 	and.w	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d103      	bne.n	8003996 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
       ||
 8003992:	2b00      	cmp	r3, #0
 8003994:	d142      	bne.n	8003a1c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
 800399a:	e03f      	b.n	8003a1c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d018      	beq.n	80039d6 <RCCEx_PLLSAI2_Config+0x72>
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d825      	bhi.n	80039f4 <RCCEx_PLLSAI2_Config+0x90>
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d002      	beq.n	80039b2 <RCCEx_PLLSAI2_Config+0x4e>
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d009      	beq.n	80039c4 <RCCEx_PLLSAI2_Config+0x60>
 80039b0:	e020      	b.n	80039f4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039b2:	4b62      	ldr	r3, [pc, #392]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d11d      	bne.n	80039fa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c2:	e01a      	b.n	80039fa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039c4:	4b5d      	ldr	r3, [pc, #372]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d116      	bne.n	80039fe <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d4:	e013      	b.n	80039fe <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039d6:	4b59      	ldr	r3, [pc, #356]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10f      	bne.n	8003a02 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039e2:	4b56      	ldr	r3, [pc, #344]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039f2:	e006      	b.n	8003a02 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
      break;
 80039f8:	e004      	b.n	8003a04 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80039fa:	bf00      	nop
 80039fc:	e002      	b.n	8003a04 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80039fe:	bf00      	nop
 8003a00:	e000      	b.n	8003a04 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003a02:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d108      	bne.n	8003a1c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f023 0203 	bic.w	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4949      	ldr	r1, [pc, #292]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f040 8086 	bne.w	8003b30 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a24:	4b45      	ldr	r3, [pc, #276]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a44      	ldr	r2, [pc, #272]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a30:	f7fe f8f0 	bl	8001c14 <HAL_GetTick>
 8003a34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a36:	e009      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a38:	f7fe f8ec 	bl	8001c14 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d902      	bls.n	8003a4c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	73fb      	strb	r3, [r7, #15]
        break;
 8003a4a:	e005      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ef      	bne.n	8003a38 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d168      	bne.n	8003b30 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d113      	bne.n	8003a8c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a64:	4b35      	ldr	r3, [pc, #212]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	4b35      	ldr	r3, [pc, #212]	@ (8003b40 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6892      	ldr	r2, [r2, #8]
 8003a70:	0211      	lsls	r1, r2, #8
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68d2      	ldr	r2, [r2, #12]
 8003a76:	06d2      	lsls	r2, r2, #27
 8003a78:	4311      	orrs	r1, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6852      	ldr	r2, [r2, #4]
 8003a7e:	3a01      	subs	r2, #1
 8003a80:	0112      	lsls	r2, r2, #4
 8003a82:	430a      	orrs	r2, r1
 8003a84:	492d      	ldr	r1, [pc, #180]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	614b      	str	r3, [r1, #20]
 8003a8a:	e02d      	b.n	8003ae8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d115      	bne.n	8003abe <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a92:	4b2a      	ldr	r3, [pc, #168]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a94:	695a      	ldr	r2, [r3, #20]
 8003a96:	4b2b      	ldr	r3, [pc, #172]	@ (8003b44 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6892      	ldr	r2, [r2, #8]
 8003a9e:	0211      	lsls	r1, r2, #8
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6912      	ldr	r2, [r2, #16]
 8003aa4:	0852      	lsrs	r2, r2, #1
 8003aa6:	3a01      	subs	r2, #1
 8003aa8:	0552      	lsls	r2, r2, #21
 8003aaa:	4311      	orrs	r1, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6852      	ldr	r2, [r2, #4]
 8003ab0:	3a01      	subs	r2, #1
 8003ab2:	0112      	lsls	r2, r2, #4
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	4921      	ldr	r1, [pc, #132]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	614b      	str	r3, [r1, #20]
 8003abc:	e014      	b.n	8003ae8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003abe:	4b1f      	ldr	r3, [pc, #124]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	4b21      	ldr	r3, [pc, #132]	@ (8003b48 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6892      	ldr	r2, [r2, #8]
 8003aca:	0211      	lsls	r1, r2, #8
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6952      	ldr	r2, [r2, #20]
 8003ad0:	0852      	lsrs	r2, r2, #1
 8003ad2:	3a01      	subs	r2, #1
 8003ad4:	0652      	lsls	r2, r2, #25
 8003ad6:	4311      	orrs	r1, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6852      	ldr	r2, [r2, #4]
 8003adc:	3a01      	subs	r2, #1
 8003ade:	0112      	lsls	r2, r2, #4
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	4916      	ldr	r1, [pc, #88]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ae8:	4b14      	ldr	r3, [pc, #80]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a13      	ldr	r2, [pc, #76]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fe f88e 	bl	8001c14 <HAL_GetTick>
 8003af8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003afa:	e009      	b.n	8003b10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003afc:	f7fe f88a 	bl	8001c14 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d902      	bls.n	8003b10 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b0e:	e005      	b.n	8003b1c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b10:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ef      	beq.n	8003afc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b22:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	4904      	ldr	r1, [pc, #16]	@ (8003b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	07ff800f 	.word	0x07ff800f
 8003b44:	ff9f800f 	.word	0xff9f800f
 8003b48:	f9ff800f 	.word	0xf9ff800f

08003b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e049      	b.n	8003bf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd fe54 	bl	8001820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	f000 f968 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d001      	beq.n	8003c14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e047      	b.n	8003ca4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a23      	ldr	r2, [pc, #140]	@ (8003cb0 <HAL_TIM_Base_Start+0xb4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01d      	beq.n	8003c62 <HAL_TIM_Base_Start+0x66>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c2e:	d018      	beq.n	8003c62 <HAL_TIM_Base_Start+0x66>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb4 <HAL_TIM_Base_Start+0xb8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <HAL_TIM_Base_Start+0x66>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb8 <HAL_TIM_Base_Start+0xbc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00e      	beq.n	8003c62 <HAL_TIM_Base_Start+0x66>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1c      	ldr	r2, [pc, #112]	@ (8003cbc <HAL_TIM_Base_Start+0xc0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <HAL_TIM_Base_Start+0x66>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc0 <HAL_TIM_Base_Start+0xc4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_TIM_Base_Start+0x66>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a19      	ldr	r2, [pc, #100]	@ (8003cc4 <HAL_TIM_Base_Start+0xc8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d115      	bne.n	8003c8e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	4b17      	ldr	r3, [pc, #92]	@ (8003cc8 <HAL_TIM_Base_Start+0xcc>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b06      	cmp	r3, #6
 8003c72:	d015      	beq.n	8003ca0 <HAL_TIM_Base_Start+0xa4>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c7a:	d011      	beq.n	8003ca0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c8c:	e008      	b.n	8003ca0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0201 	orr.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e000      	b.n	8003ca2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	40000400 	.word	0x40000400
 8003cb8:	40000800 	.word	0x40000800
 8003cbc:	40000c00 	.word	0x40000c00
 8003cc0:	40013400 	.word	0x40013400
 8003cc4:	40014000 	.word	0x40014000
 8003cc8:	00010007 	.word	0x00010007

08003ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e0b6      	b.n	8003e56 <HAL_TIM_ConfigClockSource+0x18a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d24:	d03e      	beq.n	8003da4 <HAL_TIM_ConfigClockSource+0xd8>
 8003d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d2a:	f200 8087 	bhi.w	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d32:	f000 8086 	beq.w	8003e42 <HAL_TIM_ConfigClockSource+0x176>
 8003d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d3a:	d87f      	bhi.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d3c:	2b70      	cmp	r3, #112	@ 0x70
 8003d3e:	d01a      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0xaa>
 8003d40:	2b70      	cmp	r3, #112	@ 0x70
 8003d42:	d87b      	bhi.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d44:	2b60      	cmp	r3, #96	@ 0x60
 8003d46:	d050      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x11e>
 8003d48:	2b60      	cmp	r3, #96	@ 0x60
 8003d4a:	d877      	bhi.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d4c:	2b50      	cmp	r3, #80	@ 0x50
 8003d4e:	d03c      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0xfe>
 8003d50:	2b50      	cmp	r3, #80	@ 0x50
 8003d52:	d873      	bhi.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d54:	2b40      	cmp	r3, #64	@ 0x40
 8003d56:	d058      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0x13e>
 8003d58:	2b40      	cmp	r3, #64	@ 0x40
 8003d5a:	d86f      	bhi.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d5c:	2b30      	cmp	r3, #48	@ 0x30
 8003d5e:	d064      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0x15e>
 8003d60:	2b30      	cmp	r3, #48	@ 0x30
 8003d62:	d86b      	bhi.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d060      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0x15e>
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d867      	bhi.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d05c      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0x15e>
 8003d70:	2b10      	cmp	r3, #16
 8003d72:	d05a      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0x15e>
 8003d74:	e062      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d86:	f000 f98b 	bl	80040a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	609a      	str	r2, [r3, #8]
      break;
 8003da2:	e04f      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003db4:	f000 f974 	bl	80040a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dc6:	609a      	str	r2, [r3, #8]
      break;
 8003dc8:	e03c      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f000 f8e8 	bl	8003fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2150      	movs	r1, #80	@ 0x50
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f941 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003de8:	e02c      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003df6:	461a      	mov	r2, r3
 8003df8:	f000 f907 	bl	800400a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2160      	movs	r1, #96	@ 0x60
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 f931 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003e08:	e01c      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e16:	461a      	mov	r2, r3
 8003e18:	f000 f8c8 	bl	8003fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2140      	movs	r1, #64	@ 0x40
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 f921 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003e28:	e00c      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4619      	mov	r1, r3
 8003e34:	4610      	mov	r0, r2
 8003e36:	f000 f918 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003e3a:	e003      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e40:	e000      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a46      	ldr	r2, [pc, #280]	@ (8003f8c <TIM_Base_SetConfig+0x12c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d013      	beq.n	8003ea0 <TIM_Base_SetConfig+0x40>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7e:	d00f      	beq.n	8003ea0 <TIM_Base_SetConfig+0x40>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a43      	ldr	r2, [pc, #268]	@ (8003f90 <TIM_Base_SetConfig+0x130>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00b      	beq.n	8003ea0 <TIM_Base_SetConfig+0x40>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a42      	ldr	r2, [pc, #264]	@ (8003f94 <TIM_Base_SetConfig+0x134>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d007      	beq.n	8003ea0 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a41      	ldr	r2, [pc, #260]	@ (8003f98 <TIM_Base_SetConfig+0x138>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d003      	beq.n	8003ea0 <TIM_Base_SetConfig+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a40      	ldr	r2, [pc, #256]	@ (8003f9c <TIM_Base_SetConfig+0x13c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d108      	bne.n	8003eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a35      	ldr	r2, [pc, #212]	@ (8003f8c <TIM_Base_SetConfig+0x12c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01f      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec0:	d01b      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a32      	ldr	r2, [pc, #200]	@ (8003f90 <TIM_Base_SetConfig+0x130>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d017      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a31      	ldr	r2, [pc, #196]	@ (8003f94 <TIM_Base_SetConfig+0x134>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d013      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a30      	ldr	r2, [pc, #192]	@ (8003f98 <TIM_Base_SetConfig+0x138>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00f      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2f      	ldr	r2, [pc, #188]	@ (8003f9c <TIM_Base_SetConfig+0x13c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00b      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa0 <TIM_Base_SetConfig+0x140>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d007      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa4 <TIM_Base_SetConfig+0x144>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa8 <TIM_Base_SetConfig+0x148>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d108      	bne.n	8003f0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a16      	ldr	r2, [pc, #88]	@ (8003f8c <TIM_Base_SetConfig+0x12c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0xf8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a18      	ldr	r2, [pc, #96]	@ (8003f9c <TIM_Base_SetConfig+0x13c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0xf8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a17      	ldr	r2, [pc, #92]	@ (8003fa0 <TIM_Base_SetConfig+0x140>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0xf8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a16      	ldr	r2, [pc, #88]	@ (8003fa4 <TIM_Base_SetConfig+0x144>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0xf8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a15      	ldr	r2, [pc, #84]	@ (8003fa8 <TIM_Base_SetConfig+0x148>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d103      	bne.n	8003f60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d105      	bne.n	8003f7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f023 0201 	bic.w	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	611a      	str	r2, [r3, #16]
  }
}
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800
 8003f98:	40000c00 	.word	0x40000c00
 8003f9c:	40013400 	.word	0x40013400
 8003fa0:	40014000 	.word	0x40014000
 8003fa4:	40014400 	.word	0x40014400
 8003fa8:	40014800 	.word	0x40014800

08003fac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f023 0201 	bic.w	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f023 030a 	bic.w	r3, r3, #10
 8003fe8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400a:	b480      	push	{r7}
 800400c:	b087      	sub	sp, #28
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f023 0210 	bic.w	r2, r3, #16
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004034:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	031b      	lsls	r3, r3, #12
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004046:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004080:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	f043 0307 	orr.w	r3, r3, #7
 800408c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	021a      	lsls	r2, r3, #8
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	609a      	str	r2, [r3, #8]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e068      	b.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a2e      	ldr	r2, [pc, #184]	@ (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a2d      	ldr	r2, [pc, #180]	@ (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d108      	bne.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004132:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004144:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a1e      	ldr	r2, [pc, #120]	@ (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d01d      	beq.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800416a:	d018      	beq.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a1b      	ldr	r2, [pc, #108]	@ (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d013      	beq.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a1a      	ldr	r2, [pc, #104]	@ (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d00e      	beq.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a18      	ldr	r2, [pc, #96]	@ (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d009      	beq.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a13      	ldr	r2, [pc, #76]	@ (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d004      	beq.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a14      	ldr	r2, [pc, #80]	@ (80041ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d10c      	bne.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40012c00 	.word	0x40012c00
 80041dc:	40013400 	.word	0x40013400
 80041e0:	40000400 	.word	0x40000400
 80041e4:	40000800 	.word	0x40000800
 80041e8:	40000c00 	.word	0x40000c00
 80041ec:	40014000 	.word	0x40014000

080041f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e042      	b.n	8004288 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004208:	2b00      	cmp	r3, #0
 800420a:	d106      	bne.n	800421a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fd faa3 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2224      	movs	r2, #36	@ 0x24
 800421e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fbb2 	bl	80049a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f8b3 	bl	80043ac <UART_SetConfig>
 8004246:	4603      	mov	r3, r0
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e01b      	b.n	8004288 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800425e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800426e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fc31 	bl	8004ae8 <UART_CheckIdleState>
 8004286:	4603      	mov	r3, r0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	@ 0x28
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	d17b      	bne.n	80043a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_UART_Transmit+0x26>
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e074      	b.n	80043a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2221      	movs	r2, #33	@ 0x21
 80042c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ca:	f7fd fca3 	bl	8001c14 <HAL_GetTick>
 80042ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	88fa      	ldrh	r2, [r7, #6]
 80042d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	88fa      	ldrh	r2, [r7, #6]
 80042dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e8:	d108      	bne.n	80042fc <HAL_UART_Transmit+0x6c>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d104      	bne.n	80042fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	61bb      	str	r3, [r7, #24]
 80042fa:	e003      	b.n	8004304 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004300:	2300      	movs	r3, #0
 8004302:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004304:	e030      	b.n	8004368 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2200      	movs	r2, #0
 800430e:	2180      	movs	r1, #128	@ 0x80
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fc93 	bl	8004c3c <UART_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e03d      	b.n	80043a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10b      	bne.n	8004346 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	881a      	ldrh	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800433a:	b292      	uxth	r2, r2
 800433c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	3302      	adds	r3, #2
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	e007      	b.n	8004356 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	781a      	ldrb	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	3301      	adds	r3, #1
 8004354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1c8      	bne.n	8004306 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2200      	movs	r2, #0
 800437c:	2140      	movs	r1, #64	@ 0x40
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 fc5c 	bl	8004c3c <UART_WaitOnFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e006      	b.n	80043a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
  }
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3720      	adds	r7, #32
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b0:	b08c      	sub	sp, #48	@ 0x30
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	431a      	orrs	r2, r3
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4baa      	ldr	r3, [pc, #680]	@ (8004684 <UART_SetConfig+0x2d8>)
 80043dc:	4013      	ands	r3, r2
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a9f      	ldr	r2, [pc, #636]	@ (8004688 <UART_SetConfig+0x2dc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004414:	4313      	orrs	r3, r2
 8004416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004422:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800442c:	430b      	orrs	r3, r1
 800442e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004436:	f023 010f 	bic.w	r1, r3, #15
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a90      	ldr	r2, [pc, #576]	@ (800468c <UART_SetConfig+0x2e0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d125      	bne.n	800449c <UART_SetConfig+0xf0>
 8004450:	4b8f      	ldr	r3, [pc, #572]	@ (8004690 <UART_SetConfig+0x2e4>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b03      	cmp	r3, #3
 800445c:	d81a      	bhi.n	8004494 <UART_SetConfig+0xe8>
 800445e:	a201      	add	r2, pc, #4	@ (adr r2, 8004464 <UART_SetConfig+0xb8>)
 8004460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004464:	08004475 	.word	0x08004475
 8004468:	08004485 	.word	0x08004485
 800446c:	0800447d 	.word	0x0800447d
 8004470:	0800448d 	.word	0x0800448d
 8004474:	2301      	movs	r3, #1
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800447a:	e116      	b.n	80046aa <UART_SetConfig+0x2fe>
 800447c:	2302      	movs	r3, #2
 800447e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004482:	e112      	b.n	80046aa <UART_SetConfig+0x2fe>
 8004484:	2304      	movs	r3, #4
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448a:	e10e      	b.n	80046aa <UART_SetConfig+0x2fe>
 800448c:	2308      	movs	r3, #8
 800448e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004492:	e10a      	b.n	80046aa <UART_SetConfig+0x2fe>
 8004494:	2310      	movs	r3, #16
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800449a:	e106      	b.n	80046aa <UART_SetConfig+0x2fe>
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a7c      	ldr	r2, [pc, #496]	@ (8004694 <UART_SetConfig+0x2e8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d138      	bne.n	8004518 <UART_SetConfig+0x16c>
 80044a6:	4b7a      	ldr	r3, [pc, #488]	@ (8004690 <UART_SetConfig+0x2e4>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ac:	f003 030c 	and.w	r3, r3, #12
 80044b0:	2b0c      	cmp	r3, #12
 80044b2:	d82d      	bhi.n	8004510 <UART_SetConfig+0x164>
 80044b4:	a201      	add	r2, pc, #4	@ (adr r2, 80044bc <UART_SetConfig+0x110>)
 80044b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ba:	bf00      	nop
 80044bc:	080044f1 	.word	0x080044f1
 80044c0:	08004511 	.word	0x08004511
 80044c4:	08004511 	.word	0x08004511
 80044c8:	08004511 	.word	0x08004511
 80044cc:	08004501 	.word	0x08004501
 80044d0:	08004511 	.word	0x08004511
 80044d4:	08004511 	.word	0x08004511
 80044d8:	08004511 	.word	0x08004511
 80044dc:	080044f9 	.word	0x080044f9
 80044e0:	08004511 	.word	0x08004511
 80044e4:	08004511 	.word	0x08004511
 80044e8:	08004511 	.word	0x08004511
 80044ec:	08004509 	.word	0x08004509
 80044f0:	2300      	movs	r3, #0
 80044f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f6:	e0d8      	b.n	80046aa <UART_SetConfig+0x2fe>
 80044f8:	2302      	movs	r3, #2
 80044fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044fe:	e0d4      	b.n	80046aa <UART_SetConfig+0x2fe>
 8004500:	2304      	movs	r3, #4
 8004502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004506:	e0d0      	b.n	80046aa <UART_SetConfig+0x2fe>
 8004508:	2308      	movs	r3, #8
 800450a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800450e:	e0cc      	b.n	80046aa <UART_SetConfig+0x2fe>
 8004510:	2310      	movs	r3, #16
 8004512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004516:	e0c8      	b.n	80046aa <UART_SetConfig+0x2fe>
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a5e      	ldr	r2, [pc, #376]	@ (8004698 <UART_SetConfig+0x2ec>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d125      	bne.n	800456e <UART_SetConfig+0x1c2>
 8004522:	4b5b      	ldr	r3, [pc, #364]	@ (8004690 <UART_SetConfig+0x2e4>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004528:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800452c:	2b30      	cmp	r3, #48	@ 0x30
 800452e:	d016      	beq.n	800455e <UART_SetConfig+0x1b2>
 8004530:	2b30      	cmp	r3, #48	@ 0x30
 8004532:	d818      	bhi.n	8004566 <UART_SetConfig+0x1ba>
 8004534:	2b20      	cmp	r3, #32
 8004536:	d00a      	beq.n	800454e <UART_SetConfig+0x1a2>
 8004538:	2b20      	cmp	r3, #32
 800453a:	d814      	bhi.n	8004566 <UART_SetConfig+0x1ba>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <UART_SetConfig+0x19a>
 8004540:	2b10      	cmp	r3, #16
 8004542:	d008      	beq.n	8004556 <UART_SetConfig+0x1aa>
 8004544:	e00f      	b.n	8004566 <UART_SetConfig+0x1ba>
 8004546:	2300      	movs	r3, #0
 8004548:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800454c:	e0ad      	b.n	80046aa <UART_SetConfig+0x2fe>
 800454e:	2302      	movs	r3, #2
 8004550:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004554:	e0a9      	b.n	80046aa <UART_SetConfig+0x2fe>
 8004556:	2304      	movs	r3, #4
 8004558:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800455c:	e0a5      	b.n	80046aa <UART_SetConfig+0x2fe>
 800455e:	2308      	movs	r3, #8
 8004560:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004564:	e0a1      	b.n	80046aa <UART_SetConfig+0x2fe>
 8004566:	2310      	movs	r3, #16
 8004568:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800456c:	e09d      	b.n	80046aa <UART_SetConfig+0x2fe>
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a4a      	ldr	r2, [pc, #296]	@ (800469c <UART_SetConfig+0x2f0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d125      	bne.n	80045c4 <UART_SetConfig+0x218>
 8004578:	4b45      	ldr	r3, [pc, #276]	@ (8004690 <UART_SetConfig+0x2e4>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004582:	2bc0      	cmp	r3, #192	@ 0xc0
 8004584:	d016      	beq.n	80045b4 <UART_SetConfig+0x208>
 8004586:	2bc0      	cmp	r3, #192	@ 0xc0
 8004588:	d818      	bhi.n	80045bc <UART_SetConfig+0x210>
 800458a:	2b80      	cmp	r3, #128	@ 0x80
 800458c:	d00a      	beq.n	80045a4 <UART_SetConfig+0x1f8>
 800458e:	2b80      	cmp	r3, #128	@ 0x80
 8004590:	d814      	bhi.n	80045bc <UART_SetConfig+0x210>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <UART_SetConfig+0x1f0>
 8004596:	2b40      	cmp	r3, #64	@ 0x40
 8004598:	d008      	beq.n	80045ac <UART_SetConfig+0x200>
 800459a:	e00f      	b.n	80045bc <UART_SetConfig+0x210>
 800459c:	2300      	movs	r3, #0
 800459e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045a2:	e082      	b.n	80046aa <UART_SetConfig+0x2fe>
 80045a4:	2302      	movs	r3, #2
 80045a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045aa:	e07e      	b.n	80046aa <UART_SetConfig+0x2fe>
 80045ac:	2304      	movs	r3, #4
 80045ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045b2:	e07a      	b.n	80046aa <UART_SetConfig+0x2fe>
 80045b4:	2308      	movs	r3, #8
 80045b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ba:	e076      	b.n	80046aa <UART_SetConfig+0x2fe>
 80045bc:	2310      	movs	r3, #16
 80045be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045c2:	e072      	b.n	80046aa <UART_SetConfig+0x2fe>
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a35      	ldr	r2, [pc, #212]	@ (80046a0 <UART_SetConfig+0x2f4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d12a      	bne.n	8004624 <UART_SetConfig+0x278>
 80045ce:	4b30      	ldr	r3, [pc, #192]	@ (8004690 <UART_SetConfig+0x2e4>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045dc:	d01a      	beq.n	8004614 <UART_SetConfig+0x268>
 80045de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045e2:	d81b      	bhi.n	800461c <UART_SetConfig+0x270>
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e8:	d00c      	beq.n	8004604 <UART_SetConfig+0x258>
 80045ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ee:	d815      	bhi.n	800461c <UART_SetConfig+0x270>
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <UART_SetConfig+0x250>
 80045f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045f8:	d008      	beq.n	800460c <UART_SetConfig+0x260>
 80045fa:	e00f      	b.n	800461c <UART_SetConfig+0x270>
 80045fc:	2300      	movs	r3, #0
 80045fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004602:	e052      	b.n	80046aa <UART_SetConfig+0x2fe>
 8004604:	2302      	movs	r3, #2
 8004606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800460a:	e04e      	b.n	80046aa <UART_SetConfig+0x2fe>
 800460c:	2304      	movs	r3, #4
 800460e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004612:	e04a      	b.n	80046aa <UART_SetConfig+0x2fe>
 8004614:	2308      	movs	r3, #8
 8004616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800461a:	e046      	b.n	80046aa <UART_SetConfig+0x2fe>
 800461c:	2310      	movs	r3, #16
 800461e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004622:	e042      	b.n	80046aa <UART_SetConfig+0x2fe>
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a17      	ldr	r2, [pc, #92]	@ (8004688 <UART_SetConfig+0x2dc>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d13a      	bne.n	80046a4 <UART_SetConfig+0x2f8>
 800462e:	4b18      	ldr	r3, [pc, #96]	@ (8004690 <UART_SetConfig+0x2e4>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004634:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004638:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800463c:	d01a      	beq.n	8004674 <UART_SetConfig+0x2c8>
 800463e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004642:	d81b      	bhi.n	800467c <UART_SetConfig+0x2d0>
 8004644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004648:	d00c      	beq.n	8004664 <UART_SetConfig+0x2b8>
 800464a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800464e:	d815      	bhi.n	800467c <UART_SetConfig+0x2d0>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <UART_SetConfig+0x2b0>
 8004654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004658:	d008      	beq.n	800466c <UART_SetConfig+0x2c0>
 800465a:	e00f      	b.n	800467c <UART_SetConfig+0x2d0>
 800465c:	2300      	movs	r3, #0
 800465e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004662:	e022      	b.n	80046aa <UART_SetConfig+0x2fe>
 8004664:	2302      	movs	r3, #2
 8004666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800466a:	e01e      	b.n	80046aa <UART_SetConfig+0x2fe>
 800466c:	2304      	movs	r3, #4
 800466e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004672:	e01a      	b.n	80046aa <UART_SetConfig+0x2fe>
 8004674:	2308      	movs	r3, #8
 8004676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800467a:	e016      	b.n	80046aa <UART_SetConfig+0x2fe>
 800467c:	2310      	movs	r3, #16
 800467e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004682:	e012      	b.n	80046aa <UART_SetConfig+0x2fe>
 8004684:	cfff69f3 	.word	0xcfff69f3
 8004688:	40008000 	.word	0x40008000
 800468c:	40013800 	.word	0x40013800
 8004690:	40021000 	.word	0x40021000
 8004694:	40004400 	.word	0x40004400
 8004698:	40004800 	.word	0x40004800
 800469c:	40004c00 	.word	0x40004c00
 80046a0:	40005000 	.word	0x40005000
 80046a4:	2310      	movs	r3, #16
 80046a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4aae      	ldr	r2, [pc, #696]	@ (8004968 <UART_SetConfig+0x5bc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	f040 8097 	bne.w	80047e4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d823      	bhi.n	8004706 <UART_SetConfig+0x35a>
 80046be:	a201      	add	r2, pc, #4	@ (adr r2, 80046c4 <UART_SetConfig+0x318>)
 80046c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c4:	080046e9 	.word	0x080046e9
 80046c8:	08004707 	.word	0x08004707
 80046cc:	080046f1 	.word	0x080046f1
 80046d0:	08004707 	.word	0x08004707
 80046d4:	080046f7 	.word	0x080046f7
 80046d8:	08004707 	.word	0x08004707
 80046dc:	08004707 	.word	0x08004707
 80046e0:	08004707 	.word	0x08004707
 80046e4:	080046ff 	.word	0x080046ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e8:	f7fe fc2c 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 80046ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046ee:	e010      	b.n	8004712 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f0:	4b9e      	ldr	r3, [pc, #632]	@ (800496c <UART_SetConfig+0x5c0>)
 80046f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046f4:	e00d      	b.n	8004712 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046f6:	f7fe fb8d 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 80046fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046fc:	e009      	b.n	8004712 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004702:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004704:	e005      	b.n	8004712 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004710:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 8130 	beq.w	800497a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471e:	4a94      	ldr	r2, [pc, #592]	@ (8004970 <UART_SetConfig+0x5c4>)
 8004720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004724:	461a      	mov	r2, r3
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	fbb3 f3f2 	udiv	r3, r3, r2
 800472c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	4413      	add	r3, r2
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	429a      	cmp	r2, r3
 800473c:	d305      	bcc.n	800474a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	429a      	cmp	r2, r3
 8004748:	d903      	bls.n	8004752 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004750:	e113      	b.n	800497a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	2200      	movs	r2, #0
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	60fa      	str	r2, [r7, #12]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	4a84      	ldr	r2, [pc, #528]	@ (8004970 <UART_SetConfig+0x5c4>)
 8004760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004764:	b29b      	uxth	r3, r3
 8004766:	2200      	movs	r2, #0
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004770:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004774:	f7fc fa30 	bl	8000bd8 <__aeabi_uldivmod>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4610      	mov	r0, r2
 800477e:	4619      	mov	r1, r3
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	020b      	lsls	r3, r1, #8
 800478a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800478e:	0202      	lsls	r2, r0, #8
 8004790:	6979      	ldr	r1, [r7, #20]
 8004792:	6849      	ldr	r1, [r1, #4]
 8004794:	0849      	lsrs	r1, r1, #1
 8004796:	2000      	movs	r0, #0
 8004798:	460c      	mov	r4, r1
 800479a:	4605      	mov	r5, r0
 800479c:	eb12 0804 	adds.w	r8, r2, r4
 80047a0:	eb43 0905 	adc.w	r9, r3, r5
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	469a      	mov	sl, r3
 80047ac:	4693      	mov	fp, r2
 80047ae:	4652      	mov	r2, sl
 80047b0:	465b      	mov	r3, fp
 80047b2:	4640      	mov	r0, r8
 80047b4:	4649      	mov	r1, r9
 80047b6:	f7fc fa0f 	bl	8000bd8 <__aeabi_uldivmod>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4613      	mov	r3, r2
 80047c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047c8:	d308      	bcc.n	80047dc <UART_SetConfig+0x430>
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047d0:	d204      	bcs.n	80047dc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6a3a      	ldr	r2, [r7, #32]
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	e0ce      	b.n	800497a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80047e2:	e0ca      	b.n	800497a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ec:	d166      	bne.n	80048bc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80047ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d827      	bhi.n	8004846 <UART_SetConfig+0x49a>
 80047f6:	a201      	add	r2, pc, #4	@ (adr r2, 80047fc <UART_SetConfig+0x450>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	08004821 	.word	0x08004821
 8004800:	08004829 	.word	0x08004829
 8004804:	08004831 	.word	0x08004831
 8004808:	08004847 	.word	0x08004847
 800480c:	08004837 	.word	0x08004837
 8004810:	08004847 	.word	0x08004847
 8004814:	08004847 	.word	0x08004847
 8004818:	08004847 	.word	0x08004847
 800481c:	0800483f 	.word	0x0800483f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004820:	f7fe fb90 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 8004824:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004826:	e014      	b.n	8004852 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004828:	f7fe fba2 	bl	8002f70 <HAL_RCC_GetPCLK2Freq>
 800482c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800482e:	e010      	b.n	8004852 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004830:	4b4e      	ldr	r3, [pc, #312]	@ (800496c <UART_SetConfig+0x5c0>)
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004834:	e00d      	b.n	8004852 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004836:	f7fe faed 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 800483a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800483c:	e009      	b.n	8004852 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004842:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004844:	e005      	b.n	8004852 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004850:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8090 	beq.w	800497a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485e:	4a44      	ldr	r2, [pc, #272]	@ (8004970 <UART_SetConfig+0x5c4>)
 8004860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004864:	461a      	mov	r2, r3
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	fbb3 f3f2 	udiv	r3, r3, r2
 800486c:	005a      	lsls	r2, r3, #1
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	441a      	add	r2, r3
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	fbb2 f3f3 	udiv	r3, r2, r3
 800487e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	2b0f      	cmp	r3, #15
 8004884:	d916      	bls.n	80048b4 <UART_SetConfig+0x508>
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800488c:	d212      	bcs.n	80048b4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	b29b      	uxth	r3, r3
 8004892:	f023 030f 	bic.w	r3, r3, #15
 8004896:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	b29b      	uxth	r3, r3
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	8bfb      	ldrh	r3, [r7, #30]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	8bfa      	ldrh	r2, [r7, #30]
 80048b0:	60da      	str	r2, [r3, #12]
 80048b2:	e062      	b.n	800497a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80048ba:	e05e      	b.n	800497a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d828      	bhi.n	8004916 <UART_SetConfig+0x56a>
 80048c4:	a201      	add	r2, pc, #4	@ (adr r2, 80048cc <UART_SetConfig+0x520>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	080048f9 	.word	0x080048f9
 80048d4:	08004901 	.word	0x08004901
 80048d8:	08004917 	.word	0x08004917
 80048dc:	08004907 	.word	0x08004907
 80048e0:	08004917 	.word	0x08004917
 80048e4:	08004917 	.word	0x08004917
 80048e8:	08004917 	.word	0x08004917
 80048ec:	0800490f 	.word	0x0800490f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f0:	f7fe fb28 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 80048f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048f6:	e014      	b.n	8004922 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048f8:	f7fe fb3a 	bl	8002f70 <HAL_RCC_GetPCLK2Freq>
 80048fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048fe:	e010      	b.n	8004922 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004900:	4b1a      	ldr	r3, [pc, #104]	@ (800496c <UART_SetConfig+0x5c0>)
 8004902:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004904:	e00d      	b.n	8004922 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004906:	f7fe fa85 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 800490a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800490c:	e009      	b.n	8004922 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004912:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004914:	e005      	b.n	8004922 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004920:	bf00      	nop
    }

    if (pclk != 0U)
 8004922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004924:	2b00      	cmp	r3, #0
 8004926:	d028      	beq.n	800497a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492c:	4a10      	ldr	r2, [pc, #64]	@ (8004970 <UART_SetConfig+0x5c4>)
 800492e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004932:	461a      	mov	r2, r3
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	fbb3 f2f2 	udiv	r2, r3, r2
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	441a      	add	r2, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	2b0f      	cmp	r3, #15
 8004950:	d910      	bls.n	8004974 <UART_SetConfig+0x5c8>
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004958:	d20c      	bcs.n	8004974 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	b29a      	uxth	r2, r3
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60da      	str	r2, [r3, #12]
 8004964:	e009      	b.n	800497a <UART_SetConfig+0x5ce>
 8004966:	bf00      	nop
 8004968:	40008000 	.word	0x40008000
 800496c:	00f42400 	.word	0x00f42400
 8004970:	08007948 	.word	0x08007948
      }
      else
      {
        ret = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2201      	movs	r2, #1
 800497e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2201      	movs	r2, #1
 8004986:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2200      	movs	r2, #0
 800498e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004996:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800499a:	4618      	mov	r0, r3
 800499c:	3730      	adds	r7, #48	@ 0x30
 800499e:	46bd      	mov	sp, r7
 80049a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080049a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01a      	beq.n	8004aba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aa2:	d10a      	bne.n	8004aba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]
  }
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b098      	sub	sp, #96	@ 0x60
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004af8:	f7fd f88c 	bl	8001c14 <HAL_GetTick>
 8004afc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d12f      	bne.n	8004b6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b14:	2200      	movs	r2, #0
 8004b16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f88e 	bl	8004c3c <UART_WaitOnFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d022      	beq.n	8004b6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e6      	bne.n	8004b26 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e063      	b.n	8004c34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d149      	bne.n	8004c0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b82:	2200      	movs	r2, #0
 8004b84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f857 	bl	8004c3c <UART_WaitOnFlagUntilTimeout>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d03c      	beq.n	8004c0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e6      	bne.n	8004b94 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3308      	adds	r3, #8
 8004bcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3308      	adds	r3, #8
 8004be4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004be6:	61fa      	str	r2, [r7, #28]
 8004be8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	69b9      	ldr	r1, [r7, #24]
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	617b      	str	r3, [r7, #20]
   return(result);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1e5      	bne.n	8004bc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e012      	b.n	8004c34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3758      	adds	r7, #88	@ 0x58
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c4c:	e04f      	b.n	8004cee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d04b      	beq.n	8004cee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c56:	f7fc ffdd 	bl	8001c14 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d302      	bcc.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e04e      	b.n	8004d0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d037      	beq.n	8004cee <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b80      	cmp	r3, #128	@ 0x80
 8004c82:	d034      	beq.n	8004cee <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b40      	cmp	r3, #64	@ 0x40
 8004c88:	d031      	beq.n	8004cee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d110      	bne.n	8004cba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2208      	movs	r2, #8
 8004c9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 f838 	bl	8004d16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2208      	movs	r2, #8
 8004caa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e029      	b.n	8004d0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cc8:	d111      	bne.n	8004cee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f81e 	bl	8004d16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e00f      	b.n	8004d0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69da      	ldr	r2, [r3, #28]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	bf0c      	ite	eq
 8004cfe:	2301      	moveq	r3, #1
 8004d00:	2300      	movne	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	79fb      	ldrb	r3, [r7, #7]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d0a0      	beq.n	8004c4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b095      	sub	sp, #84	@ 0x54
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d44:	e841 2300 	strex	r3, r2, [r1]
 8004d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1e6      	bne.n	8004d1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3308      	adds	r3, #8
 8004d56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3308      	adds	r3, #8
 8004d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e3      	bne.n	8004d50 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d118      	bne.n	8004dc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	e853 3f00 	ldrex	r3, [r3]
 8004d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f023 0310 	bic.w	r3, r3, #16
 8004da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db2:	6979      	ldr	r1, [r7, #20]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	e841 2300 	strex	r3, r2, [r1]
 8004dba:	613b      	str	r3, [r7, #16]
   return(result);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1e6      	bne.n	8004d90 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004dd6:	bf00      	nop
 8004dd8:	3754      	adds	r7, #84	@ 0x54
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b085      	sub	sp, #20
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_UARTEx_DisableFifoMode+0x16>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e027      	b.n	8004e48 <HAL_UARTEx_DisableFifoMode+0x66>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2224      	movs	r2, #36	@ 0x24
 8004e04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0201 	bic.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004e26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e02d      	b.n	8004ec8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2224      	movs	r2, #36	@ 0x24
 8004e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0201 	bic.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f84f 	bl	8004f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e02d      	b.n	8004f44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2224      	movs	r2, #36	@ 0x24
 8004ef4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0201 	bic.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f811 	bl	8004f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d108      	bne.n	8004f6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f6c:	e031      	b.n	8004fd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f6e:	2308      	movs	r3, #8
 8004f70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f72:	2308      	movs	r3, #8
 8004f74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	0e5b      	lsrs	r3, r3, #25
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	0f5b      	lsrs	r3, r3, #29
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f96:	7bbb      	ldrb	r3, [r7, #14]
 8004f98:	7b3a      	ldrb	r2, [r7, #12]
 8004f9a:	4911      	ldr	r1, [pc, #68]	@ (8004fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8004f9c:	5c8a      	ldrb	r2, [r1, r2]
 8004f9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004fa2:	7b3a      	ldrb	r2, [r7, #12]
 8004fa4:	490f      	ldr	r1, [pc, #60]	@ (8004fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8004fa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	7b7a      	ldrb	r2, [r7, #13]
 8004fb8:	4909      	ldr	r1, [pc, #36]	@ (8004fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8004fba:	5c8a      	ldrb	r2, [r1, r2]
 8004fbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fc0:	7b7a      	ldrb	r2, [r7, #13]
 8004fc2:	4908      	ldr	r1, [pc, #32]	@ (8004fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8004fc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	08007960 	.word	0x08007960
 8004fe4:	08007968 	.word	0x08007968

08004fe8 <__cvt>:
 8004fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fec:	ec57 6b10 	vmov	r6, r7, d0
 8004ff0:	2f00      	cmp	r7, #0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	463b      	mov	r3, r7
 8004ff8:	bfbb      	ittet	lt
 8004ffa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004ffe:	461f      	movlt	r7, r3
 8005000:	2300      	movge	r3, #0
 8005002:	232d      	movlt	r3, #45	@ 0x2d
 8005004:	700b      	strb	r3, [r1, #0]
 8005006:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005008:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800500c:	4691      	mov	r9, r2
 800500e:	f023 0820 	bic.w	r8, r3, #32
 8005012:	bfbc      	itt	lt
 8005014:	4632      	movlt	r2, r6
 8005016:	4616      	movlt	r6, r2
 8005018:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800501c:	d005      	beq.n	800502a <__cvt+0x42>
 800501e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005022:	d100      	bne.n	8005026 <__cvt+0x3e>
 8005024:	3401      	adds	r4, #1
 8005026:	2102      	movs	r1, #2
 8005028:	e000      	b.n	800502c <__cvt+0x44>
 800502a:	2103      	movs	r1, #3
 800502c:	ab03      	add	r3, sp, #12
 800502e:	9301      	str	r3, [sp, #4]
 8005030:	ab02      	add	r3, sp, #8
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	ec47 6b10 	vmov	d0, r6, r7
 8005038:	4653      	mov	r3, sl
 800503a:	4622      	mov	r2, r4
 800503c:	f000 fe3c 	bl	8005cb8 <_dtoa_r>
 8005040:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005044:	4605      	mov	r5, r0
 8005046:	d119      	bne.n	800507c <__cvt+0x94>
 8005048:	f019 0f01 	tst.w	r9, #1
 800504c:	d00e      	beq.n	800506c <__cvt+0x84>
 800504e:	eb00 0904 	add.w	r9, r0, r4
 8005052:	2200      	movs	r2, #0
 8005054:	2300      	movs	r3, #0
 8005056:	4630      	mov	r0, r6
 8005058:	4639      	mov	r1, r7
 800505a:	f7fb fd4d 	bl	8000af8 <__aeabi_dcmpeq>
 800505e:	b108      	cbz	r0, 8005064 <__cvt+0x7c>
 8005060:	f8cd 900c 	str.w	r9, [sp, #12]
 8005064:	2230      	movs	r2, #48	@ 0x30
 8005066:	9b03      	ldr	r3, [sp, #12]
 8005068:	454b      	cmp	r3, r9
 800506a:	d31e      	bcc.n	80050aa <__cvt+0xc2>
 800506c:	9b03      	ldr	r3, [sp, #12]
 800506e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005070:	1b5b      	subs	r3, r3, r5
 8005072:	4628      	mov	r0, r5
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	b004      	add	sp, #16
 8005078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005080:	eb00 0904 	add.w	r9, r0, r4
 8005084:	d1e5      	bne.n	8005052 <__cvt+0x6a>
 8005086:	7803      	ldrb	r3, [r0, #0]
 8005088:	2b30      	cmp	r3, #48	@ 0x30
 800508a:	d10a      	bne.n	80050a2 <__cvt+0xba>
 800508c:	2200      	movs	r2, #0
 800508e:	2300      	movs	r3, #0
 8005090:	4630      	mov	r0, r6
 8005092:	4639      	mov	r1, r7
 8005094:	f7fb fd30 	bl	8000af8 <__aeabi_dcmpeq>
 8005098:	b918      	cbnz	r0, 80050a2 <__cvt+0xba>
 800509a:	f1c4 0401 	rsb	r4, r4, #1
 800509e:	f8ca 4000 	str.w	r4, [sl]
 80050a2:	f8da 3000 	ldr.w	r3, [sl]
 80050a6:	4499      	add	r9, r3
 80050a8:	e7d3      	b.n	8005052 <__cvt+0x6a>
 80050aa:	1c59      	adds	r1, r3, #1
 80050ac:	9103      	str	r1, [sp, #12]
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	e7d9      	b.n	8005066 <__cvt+0x7e>

080050b2 <__exponent>:
 80050b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050b4:	2900      	cmp	r1, #0
 80050b6:	bfba      	itte	lt
 80050b8:	4249      	neglt	r1, r1
 80050ba:	232d      	movlt	r3, #45	@ 0x2d
 80050bc:	232b      	movge	r3, #43	@ 0x2b
 80050be:	2909      	cmp	r1, #9
 80050c0:	7002      	strb	r2, [r0, #0]
 80050c2:	7043      	strb	r3, [r0, #1]
 80050c4:	dd29      	ble.n	800511a <__exponent+0x68>
 80050c6:	f10d 0307 	add.w	r3, sp, #7
 80050ca:	461d      	mov	r5, r3
 80050cc:	270a      	movs	r7, #10
 80050ce:	461a      	mov	r2, r3
 80050d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80050d4:	fb07 1416 	mls	r4, r7, r6, r1
 80050d8:	3430      	adds	r4, #48	@ 0x30
 80050da:	f802 4c01 	strb.w	r4, [r2, #-1]
 80050de:	460c      	mov	r4, r1
 80050e0:	2c63      	cmp	r4, #99	@ 0x63
 80050e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80050e6:	4631      	mov	r1, r6
 80050e8:	dcf1      	bgt.n	80050ce <__exponent+0x1c>
 80050ea:	3130      	adds	r1, #48	@ 0x30
 80050ec:	1e94      	subs	r4, r2, #2
 80050ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80050f2:	1c41      	adds	r1, r0, #1
 80050f4:	4623      	mov	r3, r4
 80050f6:	42ab      	cmp	r3, r5
 80050f8:	d30a      	bcc.n	8005110 <__exponent+0x5e>
 80050fa:	f10d 0309 	add.w	r3, sp, #9
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	42ac      	cmp	r4, r5
 8005102:	bf88      	it	hi
 8005104:	2300      	movhi	r3, #0
 8005106:	3302      	adds	r3, #2
 8005108:	4403      	add	r3, r0
 800510a:	1a18      	subs	r0, r3, r0
 800510c:	b003      	add	sp, #12
 800510e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005110:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005114:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005118:	e7ed      	b.n	80050f6 <__exponent+0x44>
 800511a:	2330      	movs	r3, #48	@ 0x30
 800511c:	3130      	adds	r1, #48	@ 0x30
 800511e:	7083      	strb	r3, [r0, #2]
 8005120:	70c1      	strb	r1, [r0, #3]
 8005122:	1d03      	adds	r3, r0, #4
 8005124:	e7f1      	b.n	800510a <__exponent+0x58>
	...

08005128 <_printf_float>:
 8005128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512c:	b08d      	sub	sp, #52	@ 0x34
 800512e:	460c      	mov	r4, r1
 8005130:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005134:	4616      	mov	r6, r2
 8005136:	461f      	mov	r7, r3
 8005138:	4605      	mov	r5, r0
 800513a:	f000 fcbb 	bl	8005ab4 <_localeconv_r>
 800513e:	6803      	ldr	r3, [r0, #0]
 8005140:	9304      	str	r3, [sp, #16]
 8005142:	4618      	mov	r0, r3
 8005144:	f7fb f8ac 	bl	80002a0 <strlen>
 8005148:	2300      	movs	r3, #0
 800514a:	930a      	str	r3, [sp, #40]	@ 0x28
 800514c:	f8d8 3000 	ldr.w	r3, [r8]
 8005150:	9005      	str	r0, [sp, #20]
 8005152:	3307      	adds	r3, #7
 8005154:	f023 0307 	bic.w	r3, r3, #7
 8005158:	f103 0208 	add.w	r2, r3, #8
 800515c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005160:	f8d4 b000 	ldr.w	fp, [r4]
 8005164:	f8c8 2000 	str.w	r2, [r8]
 8005168:	e9d3 8900 	ldrd	r8, r9, [r3]
 800516c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005170:	9307      	str	r3, [sp, #28]
 8005172:	f8cd 8018 	str.w	r8, [sp, #24]
 8005176:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800517a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800517e:	4b9c      	ldr	r3, [pc, #624]	@ (80053f0 <_printf_float+0x2c8>)
 8005180:	f04f 32ff 	mov.w	r2, #4294967295
 8005184:	f7fb fcea 	bl	8000b5c <__aeabi_dcmpun>
 8005188:	bb70      	cbnz	r0, 80051e8 <_printf_float+0xc0>
 800518a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800518e:	4b98      	ldr	r3, [pc, #608]	@ (80053f0 <_printf_float+0x2c8>)
 8005190:	f04f 32ff 	mov.w	r2, #4294967295
 8005194:	f7fb fcc4 	bl	8000b20 <__aeabi_dcmple>
 8005198:	bb30      	cbnz	r0, 80051e8 <_printf_float+0xc0>
 800519a:	2200      	movs	r2, #0
 800519c:	2300      	movs	r3, #0
 800519e:	4640      	mov	r0, r8
 80051a0:	4649      	mov	r1, r9
 80051a2:	f7fb fcb3 	bl	8000b0c <__aeabi_dcmplt>
 80051a6:	b110      	cbz	r0, 80051ae <_printf_float+0x86>
 80051a8:	232d      	movs	r3, #45	@ 0x2d
 80051aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051ae:	4a91      	ldr	r2, [pc, #580]	@ (80053f4 <_printf_float+0x2cc>)
 80051b0:	4b91      	ldr	r3, [pc, #580]	@ (80053f8 <_printf_float+0x2d0>)
 80051b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80051b6:	bf94      	ite	ls
 80051b8:	4690      	movls	r8, r2
 80051ba:	4698      	movhi	r8, r3
 80051bc:	2303      	movs	r3, #3
 80051be:	6123      	str	r3, [r4, #16]
 80051c0:	f02b 0304 	bic.w	r3, fp, #4
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	f04f 0900 	mov.w	r9, #0
 80051ca:	9700      	str	r7, [sp, #0]
 80051cc:	4633      	mov	r3, r6
 80051ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80051d0:	4621      	mov	r1, r4
 80051d2:	4628      	mov	r0, r5
 80051d4:	f000 f9d2 	bl	800557c <_printf_common>
 80051d8:	3001      	adds	r0, #1
 80051da:	f040 808d 	bne.w	80052f8 <_printf_float+0x1d0>
 80051de:	f04f 30ff 	mov.w	r0, #4294967295
 80051e2:	b00d      	add	sp, #52	@ 0x34
 80051e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e8:	4642      	mov	r2, r8
 80051ea:	464b      	mov	r3, r9
 80051ec:	4640      	mov	r0, r8
 80051ee:	4649      	mov	r1, r9
 80051f0:	f7fb fcb4 	bl	8000b5c <__aeabi_dcmpun>
 80051f4:	b140      	cbz	r0, 8005208 <_printf_float+0xe0>
 80051f6:	464b      	mov	r3, r9
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bfbc      	itt	lt
 80051fc:	232d      	movlt	r3, #45	@ 0x2d
 80051fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005202:	4a7e      	ldr	r2, [pc, #504]	@ (80053fc <_printf_float+0x2d4>)
 8005204:	4b7e      	ldr	r3, [pc, #504]	@ (8005400 <_printf_float+0x2d8>)
 8005206:	e7d4      	b.n	80051b2 <_printf_float+0x8a>
 8005208:	6863      	ldr	r3, [r4, #4]
 800520a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800520e:	9206      	str	r2, [sp, #24]
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	d13b      	bne.n	800528c <_printf_float+0x164>
 8005214:	2306      	movs	r3, #6
 8005216:	6063      	str	r3, [r4, #4]
 8005218:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800521c:	2300      	movs	r3, #0
 800521e:	6022      	str	r2, [r4, #0]
 8005220:	9303      	str	r3, [sp, #12]
 8005222:	ab0a      	add	r3, sp, #40	@ 0x28
 8005224:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005228:	ab09      	add	r3, sp, #36	@ 0x24
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	6861      	ldr	r1, [r4, #4]
 800522e:	ec49 8b10 	vmov	d0, r8, r9
 8005232:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005236:	4628      	mov	r0, r5
 8005238:	f7ff fed6 	bl	8004fe8 <__cvt>
 800523c:	9b06      	ldr	r3, [sp, #24]
 800523e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005240:	2b47      	cmp	r3, #71	@ 0x47
 8005242:	4680      	mov	r8, r0
 8005244:	d129      	bne.n	800529a <_printf_float+0x172>
 8005246:	1cc8      	adds	r0, r1, #3
 8005248:	db02      	blt.n	8005250 <_printf_float+0x128>
 800524a:	6863      	ldr	r3, [r4, #4]
 800524c:	4299      	cmp	r1, r3
 800524e:	dd41      	ble.n	80052d4 <_printf_float+0x1ac>
 8005250:	f1aa 0a02 	sub.w	sl, sl, #2
 8005254:	fa5f fa8a 	uxtb.w	sl, sl
 8005258:	3901      	subs	r1, #1
 800525a:	4652      	mov	r2, sl
 800525c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005260:	9109      	str	r1, [sp, #36]	@ 0x24
 8005262:	f7ff ff26 	bl	80050b2 <__exponent>
 8005266:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005268:	1813      	adds	r3, r2, r0
 800526a:	2a01      	cmp	r2, #1
 800526c:	4681      	mov	r9, r0
 800526e:	6123      	str	r3, [r4, #16]
 8005270:	dc02      	bgt.n	8005278 <_printf_float+0x150>
 8005272:	6822      	ldr	r2, [r4, #0]
 8005274:	07d2      	lsls	r2, r2, #31
 8005276:	d501      	bpl.n	800527c <_printf_float+0x154>
 8005278:	3301      	adds	r3, #1
 800527a:	6123      	str	r3, [r4, #16]
 800527c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0a2      	beq.n	80051ca <_printf_float+0xa2>
 8005284:	232d      	movs	r3, #45	@ 0x2d
 8005286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800528a:	e79e      	b.n	80051ca <_printf_float+0xa2>
 800528c:	9a06      	ldr	r2, [sp, #24]
 800528e:	2a47      	cmp	r2, #71	@ 0x47
 8005290:	d1c2      	bne.n	8005218 <_printf_float+0xf0>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1c0      	bne.n	8005218 <_printf_float+0xf0>
 8005296:	2301      	movs	r3, #1
 8005298:	e7bd      	b.n	8005216 <_printf_float+0xee>
 800529a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800529e:	d9db      	bls.n	8005258 <_printf_float+0x130>
 80052a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80052a4:	d118      	bne.n	80052d8 <_printf_float+0x1b0>
 80052a6:	2900      	cmp	r1, #0
 80052a8:	6863      	ldr	r3, [r4, #4]
 80052aa:	dd0b      	ble.n	80052c4 <_printf_float+0x19c>
 80052ac:	6121      	str	r1, [r4, #16]
 80052ae:	b913      	cbnz	r3, 80052b6 <_printf_float+0x18e>
 80052b0:	6822      	ldr	r2, [r4, #0]
 80052b2:	07d0      	lsls	r0, r2, #31
 80052b4:	d502      	bpl.n	80052bc <_printf_float+0x194>
 80052b6:	3301      	adds	r3, #1
 80052b8:	440b      	add	r3, r1
 80052ba:	6123      	str	r3, [r4, #16]
 80052bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80052be:	f04f 0900 	mov.w	r9, #0
 80052c2:	e7db      	b.n	800527c <_printf_float+0x154>
 80052c4:	b913      	cbnz	r3, 80052cc <_printf_float+0x1a4>
 80052c6:	6822      	ldr	r2, [r4, #0]
 80052c8:	07d2      	lsls	r2, r2, #31
 80052ca:	d501      	bpl.n	80052d0 <_printf_float+0x1a8>
 80052cc:	3302      	adds	r3, #2
 80052ce:	e7f4      	b.n	80052ba <_printf_float+0x192>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e7f2      	b.n	80052ba <_printf_float+0x192>
 80052d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80052d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052da:	4299      	cmp	r1, r3
 80052dc:	db05      	blt.n	80052ea <_printf_float+0x1c2>
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	6121      	str	r1, [r4, #16]
 80052e2:	07d8      	lsls	r0, r3, #31
 80052e4:	d5ea      	bpl.n	80052bc <_printf_float+0x194>
 80052e6:	1c4b      	adds	r3, r1, #1
 80052e8:	e7e7      	b.n	80052ba <_printf_float+0x192>
 80052ea:	2900      	cmp	r1, #0
 80052ec:	bfd4      	ite	le
 80052ee:	f1c1 0202 	rsble	r2, r1, #2
 80052f2:	2201      	movgt	r2, #1
 80052f4:	4413      	add	r3, r2
 80052f6:	e7e0      	b.n	80052ba <_printf_float+0x192>
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	055a      	lsls	r2, r3, #21
 80052fc:	d407      	bmi.n	800530e <_printf_float+0x1e6>
 80052fe:	6923      	ldr	r3, [r4, #16]
 8005300:	4642      	mov	r2, r8
 8005302:	4631      	mov	r1, r6
 8005304:	4628      	mov	r0, r5
 8005306:	47b8      	blx	r7
 8005308:	3001      	adds	r0, #1
 800530a:	d12b      	bne.n	8005364 <_printf_float+0x23c>
 800530c:	e767      	b.n	80051de <_printf_float+0xb6>
 800530e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005312:	f240 80dd 	bls.w	80054d0 <_printf_float+0x3a8>
 8005316:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800531a:	2200      	movs	r2, #0
 800531c:	2300      	movs	r3, #0
 800531e:	f7fb fbeb 	bl	8000af8 <__aeabi_dcmpeq>
 8005322:	2800      	cmp	r0, #0
 8005324:	d033      	beq.n	800538e <_printf_float+0x266>
 8005326:	4a37      	ldr	r2, [pc, #220]	@ (8005404 <_printf_float+0x2dc>)
 8005328:	2301      	movs	r3, #1
 800532a:	4631      	mov	r1, r6
 800532c:	4628      	mov	r0, r5
 800532e:	47b8      	blx	r7
 8005330:	3001      	adds	r0, #1
 8005332:	f43f af54 	beq.w	80051de <_printf_float+0xb6>
 8005336:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800533a:	4543      	cmp	r3, r8
 800533c:	db02      	blt.n	8005344 <_printf_float+0x21c>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	07d8      	lsls	r0, r3, #31
 8005342:	d50f      	bpl.n	8005364 <_printf_float+0x23c>
 8005344:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005348:	4631      	mov	r1, r6
 800534a:	4628      	mov	r0, r5
 800534c:	47b8      	blx	r7
 800534e:	3001      	adds	r0, #1
 8005350:	f43f af45 	beq.w	80051de <_printf_float+0xb6>
 8005354:	f04f 0900 	mov.w	r9, #0
 8005358:	f108 38ff 	add.w	r8, r8, #4294967295
 800535c:	f104 0a1a 	add.w	sl, r4, #26
 8005360:	45c8      	cmp	r8, r9
 8005362:	dc09      	bgt.n	8005378 <_printf_float+0x250>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	079b      	lsls	r3, r3, #30
 8005368:	f100 8103 	bmi.w	8005572 <_printf_float+0x44a>
 800536c:	68e0      	ldr	r0, [r4, #12]
 800536e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005370:	4298      	cmp	r0, r3
 8005372:	bfb8      	it	lt
 8005374:	4618      	movlt	r0, r3
 8005376:	e734      	b.n	80051e2 <_printf_float+0xba>
 8005378:	2301      	movs	r3, #1
 800537a:	4652      	mov	r2, sl
 800537c:	4631      	mov	r1, r6
 800537e:	4628      	mov	r0, r5
 8005380:	47b8      	blx	r7
 8005382:	3001      	adds	r0, #1
 8005384:	f43f af2b 	beq.w	80051de <_printf_float+0xb6>
 8005388:	f109 0901 	add.w	r9, r9, #1
 800538c:	e7e8      	b.n	8005360 <_printf_float+0x238>
 800538e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005390:	2b00      	cmp	r3, #0
 8005392:	dc39      	bgt.n	8005408 <_printf_float+0x2e0>
 8005394:	4a1b      	ldr	r2, [pc, #108]	@ (8005404 <_printf_float+0x2dc>)
 8005396:	2301      	movs	r3, #1
 8005398:	4631      	mov	r1, r6
 800539a:	4628      	mov	r0, r5
 800539c:	47b8      	blx	r7
 800539e:	3001      	adds	r0, #1
 80053a0:	f43f af1d 	beq.w	80051de <_printf_float+0xb6>
 80053a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80053a8:	ea59 0303 	orrs.w	r3, r9, r3
 80053ac:	d102      	bne.n	80053b4 <_printf_float+0x28c>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	07d9      	lsls	r1, r3, #31
 80053b2:	d5d7      	bpl.n	8005364 <_printf_float+0x23c>
 80053b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053b8:	4631      	mov	r1, r6
 80053ba:	4628      	mov	r0, r5
 80053bc:	47b8      	blx	r7
 80053be:	3001      	adds	r0, #1
 80053c0:	f43f af0d 	beq.w	80051de <_printf_float+0xb6>
 80053c4:	f04f 0a00 	mov.w	sl, #0
 80053c8:	f104 0b1a 	add.w	fp, r4, #26
 80053cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ce:	425b      	negs	r3, r3
 80053d0:	4553      	cmp	r3, sl
 80053d2:	dc01      	bgt.n	80053d8 <_printf_float+0x2b0>
 80053d4:	464b      	mov	r3, r9
 80053d6:	e793      	b.n	8005300 <_printf_float+0x1d8>
 80053d8:	2301      	movs	r3, #1
 80053da:	465a      	mov	r2, fp
 80053dc:	4631      	mov	r1, r6
 80053de:	4628      	mov	r0, r5
 80053e0:	47b8      	blx	r7
 80053e2:	3001      	adds	r0, #1
 80053e4:	f43f aefb 	beq.w	80051de <_printf_float+0xb6>
 80053e8:	f10a 0a01 	add.w	sl, sl, #1
 80053ec:	e7ee      	b.n	80053cc <_printf_float+0x2a4>
 80053ee:	bf00      	nop
 80053f0:	7fefffff 	.word	0x7fefffff
 80053f4:	08007970 	.word	0x08007970
 80053f8:	08007974 	.word	0x08007974
 80053fc:	08007978 	.word	0x08007978
 8005400:	0800797c 	.word	0x0800797c
 8005404:	08007980 	.word	0x08007980
 8005408:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800540a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800540e:	4553      	cmp	r3, sl
 8005410:	bfa8      	it	ge
 8005412:	4653      	movge	r3, sl
 8005414:	2b00      	cmp	r3, #0
 8005416:	4699      	mov	r9, r3
 8005418:	dc36      	bgt.n	8005488 <_printf_float+0x360>
 800541a:	f04f 0b00 	mov.w	fp, #0
 800541e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005422:	f104 021a 	add.w	r2, r4, #26
 8005426:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005428:	9306      	str	r3, [sp, #24]
 800542a:	eba3 0309 	sub.w	r3, r3, r9
 800542e:	455b      	cmp	r3, fp
 8005430:	dc31      	bgt.n	8005496 <_printf_float+0x36e>
 8005432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005434:	459a      	cmp	sl, r3
 8005436:	dc3a      	bgt.n	80054ae <_printf_float+0x386>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	07da      	lsls	r2, r3, #31
 800543c:	d437      	bmi.n	80054ae <_printf_float+0x386>
 800543e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005440:	ebaa 0903 	sub.w	r9, sl, r3
 8005444:	9b06      	ldr	r3, [sp, #24]
 8005446:	ebaa 0303 	sub.w	r3, sl, r3
 800544a:	4599      	cmp	r9, r3
 800544c:	bfa8      	it	ge
 800544e:	4699      	movge	r9, r3
 8005450:	f1b9 0f00 	cmp.w	r9, #0
 8005454:	dc33      	bgt.n	80054be <_printf_float+0x396>
 8005456:	f04f 0800 	mov.w	r8, #0
 800545a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800545e:	f104 0b1a 	add.w	fp, r4, #26
 8005462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005464:	ebaa 0303 	sub.w	r3, sl, r3
 8005468:	eba3 0309 	sub.w	r3, r3, r9
 800546c:	4543      	cmp	r3, r8
 800546e:	f77f af79 	ble.w	8005364 <_printf_float+0x23c>
 8005472:	2301      	movs	r3, #1
 8005474:	465a      	mov	r2, fp
 8005476:	4631      	mov	r1, r6
 8005478:	4628      	mov	r0, r5
 800547a:	47b8      	blx	r7
 800547c:	3001      	adds	r0, #1
 800547e:	f43f aeae 	beq.w	80051de <_printf_float+0xb6>
 8005482:	f108 0801 	add.w	r8, r8, #1
 8005486:	e7ec      	b.n	8005462 <_printf_float+0x33a>
 8005488:	4642      	mov	r2, r8
 800548a:	4631      	mov	r1, r6
 800548c:	4628      	mov	r0, r5
 800548e:	47b8      	blx	r7
 8005490:	3001      	adds	r0, #1
 8005492:	d1c2      	bne.n	800541a <_printf_float+0x2f2>
 8005494:	e6a3      	b.n	80051de <_printf_float+0xb6>
 8005496:	2301      	movs	r3, #1
 8005498:	4631      	mov	r1, r6
 800549a:	4628      	mov	r0, r5
 800549c:	9206      	str	r2, [sp, #24]
 800549e:	47b8      	blx	r7
 80054a0:	3001      	adds	r0, #1
 80054a2:	f43f ae9c 	beq.w	80051de <_printf_float+0xb6>
 80054a6:	9a06      	ldr	r2, [sp, #24]
 80054a8:	f10b 0b01 	add.w	fp, fp, #1
 80054ac:	e7bb      	b.n	8005426 <_printf_float+0x2fe>
 80054ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054b2:	4631      	mov	r1, r6
 80054b4:	4628      	mov	r0, r5
 80054b6:	47b8      	blx	r7
 80054b8:	3001      	adds	r0, #1
 80054ba:	d1c0      	bne.n	800543e <_printf_float+0x316>
 80054bc:	e68f      	b.n	80051de <_printf_float+0xb6>
 80054be:	9a06      	ldr	r2, [sp, #24]
 80054c0:	464b      	mov	r3, r9
 80054c2:	4442      	add	r2, r8
 80054c4:	4631      	mov	r1, r6
 80054c6:	4628      	mov	r0, r5
 80054c8:	47b8      	blx	r7
 80054ca:	3001      	adds	r0, #1
 80054cc:	d1c3      	bne.n	8005456 <_printf_float+0x32e>
 80054ce:	e686      	b.n	80051de <_printf_float+0xb6>
 80054d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80054d4:	f1ba 0f01 	cmp.w	sl, #1
 80054d8:	dc01      	bgt.n	80054de <_printf_float+0x3b6>
 80054da:	07db      	lsls	r3, r3, #31
 80054dc:	d536      	bpl.n	800554c <_printf_float+0x424>
 80054de:	2301      	movs	r3, #1
 80054e0:	4642      	mov	r2, r8
 80054e2:	4631      	mov	r1, r6
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b8      	blx	r7
 80054e8:	3001      	adds	r0, #1
 80054ea:	f43f ae78 	beq.w	80051de <_printf_float+0xb6>
 80054ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054f2:	4631      	mov	r1, r6
 80054f4:	4628      	mov	r0, r5
 80054f6:	47b8      	blx	r7
 80054f8:	3001      	adds	r0, #1
 80054fa:	f43f ae70 	beq.w	80051de <_printf_float+0xb6>
 80054fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005502:	2200      	movs	r2, #0
 8005504:	2300      	movs	r3, #0
 8005506:	f10a 3aff 	add.w	sl, sl, #4294967295
 800550a:	f7fb faf5 	bl	8000af8 <__aeabi_dcmpeq>
 800550e:	b9c0      	cbnz	r0, 8005542 <_printf_float+0x41a>
 8005510:	4653      	mov	r3, sl
 8005512:	f108 0201 	add.w	r2, r8, #1
 8005516:	4631      	mov	r1, r6
 8005518:	4628      	mov	r0, r5
 800551a:	47b8      	blx	r7
 800551c:	3001      	adds	r0, #1
 800551e:	d10c      	bne.n	800553a <_printf_float+0x412>
 8005520:	e65d      	b.n	80051de <_printf_float+0xb6>
 8005522:	2301      	movs	r3, #1
 8005524:	465a      	mov	r2, fp
 8005526:	4631      	mov	r1, r6
 8005528:	4628      	mov	r0, r5
 800552a:	47b8      	blx	r7
 800552c:	3001      	adds	r0, #1
 800552e:	f43f ae56 	beq.w	80051de <_printf_float+0xb6>
 8005532:	f108 0801 	add.w	r8, r8, #1
 8005536:	45d0      	cmp	r8, sl
 8005538:	dbf3      	blt.n	8005522 <_printf_float+0x3fa>
 800553a:	464b      	mov	r3, r9
 800553c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005540:	e6df      	b.n	8005302 <_printf_float+0x1da>
 8005542:	f04f 0800 	mov.w	r8, #0
 8005546:	f104 0b1a 	add.w	fp, r4, #26
 800554a:	e7f4      	b.n	8005536 <_printf_float+0x40e>
 800554c:	2301      	movs	r3, #1
 800554e:	4642      	mov	r2, r8
 8005550:	e7e1      	b.n	8005516 <_printf_float+0x3ee>
 8005552:	2301      	movs	r3, #1
 8005554:	464a      	mov	r2, r9
 8005556:	4631      	mov	r1, r6
 8005558:	4628      	mov	r0, r5
 800555a:	47b8      	blx	r7
 800555c:	3001      	adds	r0, #1
 800555e:	f43f ae3e 	beq.w	80051de <_printf_float+0xb6>
 8005562:	f108 0801 	add.w	r8, r8, #1
 8005566:	68e3      	ldr	r3, [r4, #12]
 8005568:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800556a:	1a5b      	subs	r3, r3, r1
 800556c:	4543      	cmp	r3, r8
 800556e:	dcf0      	bgt.n	8005552 <_printf_float+0x42a>
 8005570:	e6fc      	b.n	800536c <_printf_float+0x244>
 8005572:	f04f 0800 	mov.w	r8, #0
 8005576:	f104 0919 	add.w	r9, r4, #25
 800557a:	e7f4      	b.n	8005566 <_printf_float+0x43e>

0800557c <_printf_common>:
 800557c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005580:	4616      	mov	r6, r2
 8005582:	4698      	mov	r8, r3
 8005584:	688a      	ldr	r2, [r1, #8]
 8005586:	690b      	ldr	r3, [r1, #16]
 8005588:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800558c:	4293      	cmp	r3, r2
 800558e:	bfb8      	it	lt
 8005590:	4613      	movlt	r3, r2
 8005592:	6033      	str	r3, [r6, #0]
 8005594:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005598:	4607      	mov	r7, r0
 800559a:	460c      	mov	r4, r1
 800559c:	b10a      	cbz	r2, 80055a2 <_printf_common+0x26>
 800559e:	3301      	adds	r3, #1
 80055a0:	6033      	str	r3, [r6, #0]
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	0699      	lsls	r1, r3, #26
 80055a6:	bf42      	ittt	mi
 80055a8:	6833      	ldrmi	r3, [r6, #0]
 80055aa:	3302      	addmi	r3, #2
 80055ac:	6033      	strmi	r3, [r6, #0]
 80055ae:	6825      	ldr	r5, [r4, #0]
 80055b0:	f015 0506 	ands.w	r5, r5, #6
 80055b4:	d106      	bne.n	80055c4 <_printf_common+0x48>
 80055b6:	f104 0a19 	add.w	sl, r4, #25
 80055ba:	68e3      	ldr	r3, [r4, #12]
 80055bc:	6832      	ldr	r2, [r6, #0]
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	42ab      	cmp	r3, r5
 80055c2:	dc26      	bgt.n	8005612 <_printf_common+0x96>
 80055c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055c8:	6822      	ldr	r2, [r4, #0]
 80055ca:	3b00      	subs	r3, #0
 80055cc:	bf18      	it	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	0692      	lsls	r2, r2, #26
 80055d2:	d42b      	bmi.n	800562c <_printf_common+0xb0>
 80055d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055d8:	4641      	mov	r1, r8
 80055da:	4638      	mov	r0, r7
 80055dc:	47c8      	blx	r9
 80055de:	3001      	adds	r0, #1
 80055e0:	d01e      	beq.n	8005620 <_printf_common+0xa4>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	6922      	ldr	r2, [r4, #16]
 80055e6:	f003 0306 	and.w	r3, r3, #6
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	bf02      	ittt	eq
 80055ee:	68e5      	ldreq	r5, [r4, #12]
 80055f0:	6833      	ldreq	r3, [r6, #0]
 80055f2:	1aed      	subeq	r5, r5, r3
 80055f4:	68a3      	ldr	r3, [r4, #8]
 80055f6:	bf0c      	ite	eq
 80055f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055fc:	2500      	movne	r5, #0
 80055fe:	4293      	cmp	r3, r2
 8005600:	bfc4      	itt	gt
 8005602:	1a9b      	subgt	r3, r3, r2
 8005604:	18ed      	addgt	r5, r5, r3
 8005606:	2600      	movs	r6, #0
 8005608:	341a      	adds	r4, #26
 800560a:	42b5      	cmp	r5, r6
 800560c:	d11a      	bne.n	8005644 <_printf_common+0xc8>
 800560e:	2000      	movs	r0, #0
 8005610:	e008      	b.n	8005624 <_printf_common+0xa8>
 8005612:	2301      	movs	r3, #1
 8005614:	4652      	mov	r2, sl
 8005616:	4641      	mov	r1, r8
 8005618:	4638      	mov	r0, r7
 800561a:	47c8      	blx	r9
 800561c:	3001      	adds	r0, #1
 800561e:	d103      	bne.n	8005628 <_printf_common+0xac>
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005628:	3501      	adds	r5, #1
 800562a:	e7c6      	b.n	80055ba <_printf_common+0x3e>
 800562c:	18e1      	adds	r1, r4, r3
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	2030      	movs	r0, #48	@ 0x30
 8005632:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005636:	4422      	add	r2, r4
 8005638:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800563c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005640:	3302      	adds	r3, #2
 8005642:	e7c7      	b.n	80055d4 <_printf_common+0x58>
 8005644:	2301      	movs	r3, #1
 8005646:	4622      	mov	r2, r4
 8005648:	4641      	mov	r1, r8
 800564a:	4638      	mov	r0, r7
 800564c:	47c8      	blx	r9
 800564e:	3001      	adds	r0, #1
 8005650:	d0e6      	beq.n	8005620 <_printf_common+0xa4>
 8005652:	3601      	adds	r6, #1
 8005654:	e7d9      	b.n	800560a <_printf_common+0x8e>
	...

08005658 <_printf_i>:
 8005658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800565c:	7e0f      	ldrb	r7, [r1, #24]
 800565e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005660:	2f78      	cmp	r7, #120	@ 0x78
 8005662:	4691      	mov	r9, r2
 8005664:	4680      	mov	r8, r0
 8005666:	460c      	mov	r4, r1
 8005668:	469a      	mov	sl, r3
 800566a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800566e:	d807      	bhi.n	8005680 <_printf_i+0x28>
 8005670:	2f62      	cmp	r7, #98	@ 0x62
 8005672:	d80a      	bhi.n	800568a <_printf_i+0x32>
 8005674:	2f00      	cmp	r7, #0
 8005676:	f000 80d2 	beq.w	800581e <_printf_i+0x1c6>
 800567a:	2f58      	cmp	r7, #88	@ 0x58
 800567c:	f000 80b9 	beq.w	80057f2 <_printf_i+0x19a>
 8005680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005684:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005688:	e03a      	b.n	8005700 <_printf_i+0xa8>
 800568a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800568e:	2b15      	cmp	r3, #21
 8005690:	d8f6      	bhi.n	8005680 <_printf_i+0x28>
 8005692:	a101      	add	r1, pc, #4	@ (adr r1, 8005698 <_printf_i+0x40>)
 8005694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005698:	080056f1 	.word	0x080056f1
 800569c:	08005705 	.word	0x08005705
 80056a0:	08005681 	.word	0x08005681
 80056a4:	08005681 	.word	0x08005681
 80056a8:	08005681 	.word	0x08005681
 80056ac:	08005681 	.word	0x08005681
 80056b0:	08005705 	.word	0x08005705
 80056b4:	08005681 	.word	0x08005681
 80056b8:	08005681 	.word	0x08005681
 80056bc:	08005681 	.word	0x08005681
 80056c0:	08005681 	.word	0x08005681
 80056c4:	08005805 	.word	0x08005805
 80056c8:	0800572f 	.word	0x0800572f
 80056cc:	080057bf 	.word	0x080057bf
 80056d0:	08005681 	.word	0x08005681
 80056d4:	08005681 	.word	0x08005681
 80056d8:	08005827 	.word	0x08005827
 80056dc:	08005681 	.word	0x08005681
 80056e0:	0800572f 	.word	0x0800572f
 80056e4:	08005681 	.word	0x08005681
 80056e8:	08005681 	.word	0x08005681
 80056ec:	080057c7 	.word	0x080057c7
 80056f0:	6833      	ldr	r3, [r6, #0]
 80056f2:	1d1a      	adds	r2, r3, #4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6032      	str	r2, [r6, #0]
 80056f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005700:	2301      	movs	r3, #1
 8005702:	e09d      	b.n	8005840 <_printf_i+0x1e8>
 8005704:	6833      	ldr	r3, [r6, #0]
 8005706:	6820      	ldr	r0, [r4, #0]
 8005708:	1d19      	adds	r1, r3, #4
 800570a:	6031      	str	r1, [r6, #0]
 800570c:	0606      	lsls	r6, r0, #24
 800570e:	d501      	bpl.n	8005714 <_printf_i+0xbc>
 8005710:	681d      	ldr	r5, [r3, #0]
 8005712:	e003      	b.n	800571c <_printf_i+0xc4>
 8005714:	0645      	lsls	r5, r0, #25
 8005716:	d5fb      	bpl.n	8005710 <_printf_i+0xb8>
 8005718:	f9b3 5000 	ldrsh.w	r5, [r3]
 800571c:	2d00      	cmp	r5, #0
 800571e:	da03      	bge.n	8005728 <_printf_i+0xd0>
 8005720:	232d      	movs	r3, #45	@ 0x2d
 8005722:	426d      	negs	r5, r5
 8005724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005728:	4859      	ldr	r0, [pc, #356]	@ (8005890 <_printf_i+0x238>)
 800572a:	230a      	movs	r3, #10
 800572c:	e011      	b.n	8005752 <_printf_i+0xfa>
 800572e:	6821      	ldr	r1, [r4, #0]
 8005730:	6833      	ldr	r3, [r6, #0]
 8005732:	0608      	lsls	r0, r1, #24
 8005734:	f853 5b04 	ldr.w	r5, [r3], #4
 8005738:	d402      	bmi.n	8005740 <_printf_i+0xe8>
 800573a:	0649      	lsls	r1, r1, #25
 800573c:	bf48      	it	mi
 800573e:	b2ad      	uxthmi	r5, r5
 8005740:	2f6f      	cmp	r7, #111	@ 0x6f
 8005742:	4853      	ldr	r0, [pc, #332]	@ (8005890 <_printf_i+0x238>)
 8005744:	6033      	str	r3, [r6, #0]
 8005746:	bf14      	ite	ne
 8005748:	230a      	movne	r3, #10
 800574a:	2308      	moveq	r3, #8
 800574c:	2100      	movs	r1, #0
 800574e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005752:	6866      	ldr	r6, [r4, #4]
 8005754:	60a6      	str	r6, [r4, #8]
 8005756:	2e00      	cmp	r6, #0
 8005758:	bfa2      	ittt	ge
 800575a:	6821      	ldrge	r1, [r4, #0]
 800575c:	f021 0104 	bicge.w	r1, r1, #4
 8005760:	6021      	strge	r1, [r4, #0]
 8005762:	b90d      	cbnz	r5, 8005768 <_printf_i+0x110>
 8005764:	2e00      	cmp	r6, #0
 8005766:	d04b      	beq.n	8005800 <_printf_i+0x1a8>
 8005768:	4616      	mov	r6, r2
 800576a:	fbb5 f1f3 	udiv	r1, r5, r3
 800576e:	fb03 5711 	mls	r7, r3, r1, r5
 8005772:	5dc7      	ldrb	r7, [r0, r7]
 8005774:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005778:	462f      	mov	r7, r5
 800577a:	42bb      	cmp	r3, r7
 800577c:	460d      	mov	r5, r1
 800577e:	d9f4      	bls.n	800576a <_printf_i+0x112>
 8005780:	2b08      	cmp	r3, #8
 8005782:	d10b      	bne.n	800579c <_printf_i+0x144>
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	07df      	lsls	r7, r3, #31
 8005788:	d508      	bpl.n	800579c <_printf_i+0x144>
 800578a:	6923      	ldr	r3, [r4, #16]
 800578c:	6861      	ldr	r1, [r4, #4]
 800578e:	4299      	cmp	r1, r3
 8005790:	bfde      	ittt	le
 8005792:	2330      	movle	r3, #48	@ 0x30
 8005794:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005798:	f106 36ff 	addle.w	r6, r6, #4294967295
 800579c:	1b92      	subs	r2, r2, r6
 800579e:	6122      	str	r2, [r4, #16]
 80057a0:	f8cd a000 	str.w	sl, [sp]
 80057a4:	464b      	mov	r3, r9
 80057a6:	aa03      	add	r2, sp, #12
 80057a8:	4621      	mov	r1, r4
 80057aa:	4640      	mov	r0, r8
 80057ac:	f7ff fee6 	bl	800557c <_printf_common>
 80057b0:	3001      	adds	r0, #1
 80057b2:	d14a      	bne.n	800584a <_printf_i+0x1f2>
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295
 80057b8:	b004      	add	sp, #16
 80057ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	f043 0320 	orr.w	r3, r3, #32
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	4833      	ldr	r0, [pc, #204]	@ (8005894 <_printf_i+0x23c>)
 80057c8:	2778      	movs	r7, #120	@ 0x78
 80057ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	6831      	ldr	r1, [r6, #0]
 80057d2:	061f      	lsls	r7, r3, #24
 80057d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80057d8:	d402      	bmi.n	80057e0 <_printf_i+0x188>
 80057da:	065f      	lsls	r7, r3, #25
 80057dc:	bf48      	it	mi
 80057de:	b2ad      	uxthmi	r5, r5
 80057e0:	6031      	str	r1, [r6, #0]
 80057e2:	07d9      	lsls	r1, r3, #31
 80057e4:	bf44      	itt	mi
 80057e6:	f043 0320 	orrmi.w	r3, r3, #32
 80057ea:	6023      	strmi	r3, [r4, #0]
 80057ec:	b11d      	cbz	r5, 80057f6 <_printf_i+0x19e>
 80057ee:	2310      	movs	r3, #16
 80057f0:	e7ac      	b.n	800574c <_printf_i+0xf4>
 80057f2:	4827      	ldr	r0, [pc, #156]	@ (8005890 <_printf_i+0x238>)
 80057f4:	e7e9      	b.n	80057ca <_printf_i+0x172>
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	f023 0320 	bic.w	r3, r3, #32
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	e7f6      	b.n	80057ee <_printf_i+0x196>
 8005800:	4616      	mov	r6, r2
 8005802:	e7bd      	b.n	8005780 <_printf_i+0x128>
 8005804:	6833      	ldr	r3, [r6, #0]
 8005806:	6825      	ldr	r5, [r4, #0]
 8005808:	6961      	ldr	r1, [r4, #20]
 800580a:	1d18      	adds	r0, r3, #4
 800580c:	6030      	str	r0, [r6, #0]
 800580e:	062e      	lsls	r6, r5, #24
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	d501      	bpl.n	8005818 <_printf_i+0x1c0>
 8005814:	6019      	str	r1, [r3, #0]
 8005816:	e002      	b.n	800581e <_printf_i+0x1c6>
 8005818:	0668      	lsls	r0, r5, #25
 800581a:	d5fb      	bpl.n	8005814 <_printf_i+0x1bc>
 800581c:	8019      	strh	r1, [r3, #0]
 800581e:	2300      	movs	r3, #0
 8005820:	6123      	str	r3, [r4, #16]
 8005822:	4616      	mov	r6, r2
 8005824:	e7bc      	b.n	80057a0 <_printf_i+0x148>
 8005826:	6833      	ldr	r3, [r6, #0]
 8005828:	1d1a      	adds	r2, r3, #4
 800582a:	6032      	str	r2, [r6, #0]
 800582c:	681e      	ldr	r6, [r3, #0]
 800582e:	6862      	ldr	r2, [r4, #4]
 8005830:	2100      	movs	r1, #0
 8005832:	4630      	mov	r0, r6
 8005834:	f7fa fce4 	bl	8000200 <memchr>
 8005838:	b108      	cbz	r0, 800583e <_printf_i+0x1e6>
 800583a:	1b80      	subs	r0, r0, r6
 800583c:	6060      	str	r0, [r4, #4]
 800583e:	6863      	ldr	r3, [r4, #4]
 8005840:	6123      	str	r3, [r4, #16]
 8005842:	2300      	movs	r3, #0
 8005844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005848:	e7aa      	b.n	80057a0 <_printf_i+0x148>
 800584a:	6923      	ldr	r3, [r4, #16]
 800584c:	4632      	mov	r2, r6
 800584e:	4649      	mov	r1, r9
 8005850:	4640      	mov	r0, r8
 8005852:	47d0      	blx	sl
 8005854:	3001      	adds	r0, #1
 8005856:	d0ad      	beq.n	80057b4 <_printf_i+0x15c>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	079b      	lsls	r3, r3, #30
 800585c:	d413      	bmi.n	8005886 <_printf_i+0x22e>
 800585e:	68e0      	ldr	r0, [r4, #12]
 8005860:	9b03      	ldr	r3, [sp, #12]
 8005862:	4298      	cmp	r0, r3
 8005864:	bfb8      	it	lt
 8005866:	4618      	movlt	r0, r3
 8005868:	e7a6      	b.n	80057b8 <_printf_i+0x160>
 800586a:	2301      	movs	r3, #1
 800586c:	4632      	mov	r2, r6
 800586e:	4649      	mov	r1, r9
 8005870:	4640      	mov	r0, r8
 8005872:	47d0      	blx	sl
 8005874:	3001      	adds	r0, #1
 8005876:	d09d      	beq.n	80057b4 <_printf_i+0x15c>
 8005878:	3501      	adds	r5, #1
 800587a:	68e3      	ldr	r3, [r4, #12]
 800587c:	9903      	ldr	r1, [sp, #12]
 800587e:	1a5b      	subs	r3, r3, r1
 8005880:	42ab      	cmp	r3, r5
 8005882:	dcf2      	bgt.n	800586a <_printf_i+0x212>
 8005884:	e7eb      	b.n	800585e <_printf_i+0x206>
 8005886:	2500      	movs	r5, #0
 8005888:	f104 0619 	add.w	r6, r4, #25
 800588c:	e7f5      	b.n	800587a <_printf_i+0x222>
 800588e:	bf00      	nop
 8005890:	08007982 	.word	0x08007982
 8005894:	08007993 	.word	0x08007993

08005898 <std>:
 8005898:	2300      	movs	r3, #0
 800589a:	b510      	push	{r4, lr}
 800589c:	4604      	mov	r4, r0
 800589e:	e9c0 3300 	strd	r3, r3, [r0]
 80058a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058a6:	6083      	str	r3, [r0, #8]
 80058a8:	8181      	strh	r1, [r0, #12]
 80058aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80058ac:	81c2      	strh	r2, [r0, #14]
 80058ae:	6183      	str	r3, [r0, #24]
 80058b0:	4619      	mov	r1, r3
 80058b2:	2208      	movs	r2, #8
 80058b4:	305c      	adds	r0, #92	@ 0x5c
 80058b6:	f000 f8f4 	bl	8005aa2 <memset>
 80058ba:	4b0d      	ldr	r3, [pc, #52]	@ (80058f0 <std+0x58>)
 80058bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80058be:	4b0d      	ldr	r3, [pc, #52]	@ (80058f4 <std+0x5c>)
 80058c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058c2:	4b0d      	ldr	r3, [pc, #52]	@ (80058f8 <std+0x60>)
 80058c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058c6:	4b0d      	ldr	r3, [pc, #52]	@ (80058fc <std+0x64>)
 80058c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80058ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005900 <std+0x68>)
 80058cc:	6224      	str	r4, [r4, #32]
 80058ce:	429c      	cmp	r4, r3
 80058d0:	d006      	beq.n	80058e0 <std+0x48>
 80058d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058d6:	4294      	cmp	r4, r2
 80058d8:	d002      	beq.n	80058e0 <std+0x48>
 80058da:	33d0      	adds	r3, #208	@ 0xd0
 80058dc:	429c      	cmp	r4, r3
 80058de:	d105      	bne.n	80058ec <std+0x54>
 80058e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e8:	f000 b958 	b.w	8005b9c <__retarget_lock_init_recursive>
 80058ec:	bd10      	pop	{r4, pc}
 80058ee:	bf00      	nop
 80058f0:	08005a1d 	.word	0x08005a1d
 80058f4:	08005a3f 	.word	0x08005a3f
 80058f8:	08005a77 	.word	0x08005a77
 80058fc:	08005a9b 	.word	0x08005a9b
 8005900:	200402e8 	.word	0x200402e8

08005904 <stdio_exit_handler>:
 8005904:	4a02      	ldr	r2, [pc, #8]	@ (8005910 <stdio_exit_handler+0xc>)
 8005906:	4903      	ldr	r1, [pc, #12]	@ (8005914 <stdio_exit_handler+0x10>)
 8005908:	4803      	ldr	r0, [pc, #12]	@ (8005918 <stdio_exit_handler+0x14>)
 800590a:	f000 b869 	b.w	80059e0 <_fwalk_sglue>
 800590e:	bf00      	nop
 8005910:	20040018 	.word	0x20040018
 8005914:	0800724d 	.word	0x0800724d
 8005918:	20040028 	.word	0x20040028

0800591c <cleanup_stdio>:
 800591c:	6841      	ldr	r1, [r0, #4]
 800591e:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <cleanup_stdio+0x34>)
 8005920:	4299      	cmp	r1, r3
 8005922:	b510      	push	{r4, lr}
 8005924:	4604      	mov	r4, r0
 8005926:	d001      	beq.n	800592c <cleanup_stdio+0x10>
 8005928:	f001 fc90 	bl	800724c <_fflush_r>
 800592c:	68a1      	ldr	r1, [r4, #8]
 800592e:	4b09      	ldr	r3, [pc, #36]	@ (8005954 <cleanup_stdio+0x38>)
 8005930:	4299      	cmp	r1, r3
 8005932:	d002      	beq.n	800593a <cleanup_stdio+0x1e>
 8005934:	4620      	mov	r0, r4
 8005936:	f001 fc89 	bl	800724c <_fflush_r>
 800593a:	68e1      	ldr	r1, [r4, #12]
 800593c:	4b06      	ldr	r3, [pc, #24]	@ (8005958 <cleanup_stdio+0x3c>)
 800593e:	4299      	cmp	r1, r3
 8005940:	d004      	beq.n	800594c <cleanup_stdio+0x30>
 8005942:	4620      	mov	r0, r4
 8005944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005948:	f001 bc80 	b.w	800724c <_fflush_r>
 800594c:	bd10      	pop	{r4, pc}
 800594e:	bf00      	nop
 8005950:	200402e8 	.word	0x200402e8
 8005954:	20040350 	.word	0x20040350
 8005958:	200403b8 	.word	0x200403b8

0800595c <global_stdio_init.part.0>:
 800595c:	b510      	push	{r4, lr}
 800595e:	4b0b      	ldr	r3, [pc, #44]	@ (800598c <global_stdio_init.part.0+0x30>)
 8005960:	4c0b      	ldr	r4, [pc, #44]	@ (8005990 <global_stdio_init.part.0+0x34>)
 8005962:	4a0c      	ldr	r2, [pc, #48]	@ (8005994 <global_stdio_init.part.0+0x38>)
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	4620      	mov	r0, r4
 8005968:	2200      	movs	r2, #0
 800596a:	2104      	movs	r1, #4
 800596c:	f7ff ff94 	bl	8005898 <std>
 8005970:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005974:	2201      	movs	r2, #1
 8005976:	2109      	movs	r1, #9
 8005978:	f7ff ff8e 	bl	8005898 <std>
 800597c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005980:	2202      	movs	r2, #2
 8005982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005986:	2112      	movs	r1, #18
 8005988:	f7ff bf86 	b.w	8005898 <std>
 800598c:	20040420 	.word	0x20040420
 8005990:	200402e8 	.word	0x200402e8
 8005994:	08005905 	.word	0x08005905

08005998 <__sfp_lock_acquire>:
 8005998:	4801      	ldr	r0, [pc, #4]	@ (80059a0 <__sfp_lock_acquire+0x8>)
 800599a:	f000 b900 	b.w	8005b9e <__retarget_lock_acquire_recursive>
 800599e:	bf00      	nop
 80059a0:	20040429 	.word	0x20040429

080059a4 <__sfp_lock_release>:
 80059a4:	4801      	ldr	r0, [pc, #4]	@ (80059ac <__sfp_lock_release+0x8>)
 80059a6:	f000 b8fb 	b.w	8005ba0 <__retarget_lock_release_recursive>
 80059aa:	bf00      	nop
 80059ac:	20040429 	.word	0x20040429

080059b0 <__sinit>:
 80059b0:	b510      	push	{r4, lr}
 80059b2:	4604      	mov	r4, r0
 80059b4:	f7ff fff0 	bl	8005998 <__sfp_lock_acquire>
 80059b8:	6a23      	ldr	r3, [r4, #32]
 80059ba:	b11b      	cbz	r3, 80059c4 <__sinit+0x14>
 80059bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c0:	f7ff bff0 	b.w	80059a4 <__sfp_lock_release>
 80059c4:	4b04      	ldr	r3, [pc, #16]	@ (80059d8 <__sinit+0x28>)
 80059c6:	6223      	str	r3, [r4, #32]
 80059c8:	4b04      	ldr	r3, [pc, #16]	@ (80059dc <__sinit+0x2c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f5      	bne.n	80059bc <__sinit+0xc>
 80059d0:	f7ff ffc4 	bl	800595c <global_stdio_init.part.0>
 80059d4:	e7f2      	b.n	80059bc <__sinit+0xc>
 80059d6:	bf00      	nop
 80059d8:	0800591d 	.word	0x0800591d
 80059dc:	20040420 	.word	0x20040420

080059e0 <_fwalk_sglue>:
 80059e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e4:	4607      	mov	r7, r0
 80059e6:	4688      	mov	r8, r1
 80059e8:	4614      	mov	r4, r2
 80059ea:	2600      	movs	r6, #0
 80059ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059f0:	f1b9 0901 	subs.w	r9, r9, #1
 80059f4:	d505      	bpl.n	8005a02 <_fwalk_sglue+0x22>
 80059f6:	6824      	ldr	r4, [r4, #0]
 80059f8:	2c00      	cmp	r4, #0
 80059fa:	d1f7      	bne.n	80059ec <_fwalk_sglue+0xc>
 80059fc:	4630      	mov	r0, r6
 80059fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a02:	89ab      	ldrh	r3, [r5, #12]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d907      	bls.n	8005a18 <_fwalk_sglue+0x38>
 8005a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	d003      	beq.n	8005a18 <_fwalk_sglue+0x38>
 8005a10:	4629      	mov	r1, r5
 8005a12:	4638      	mov	r0, r7
 8005a14:	47c0      	blx	r8
 8005a16:	4306      	orrs	r6, r0
 8005a18:	3568      	adds	r5, #104	@ 0x68
 8005a1a:	e7e9      	b.n	80059f0 <_fwalk_sglue+0x10>

08005a1c <__sread>:
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	460c      	mov	r4, r1
 8005a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a24:	f000 f86c 	bl	8005b00 <_read_r>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	bfab      	itete	ge
 8005a2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a30:	181b      	addge	r3, r3, r0
 8005a32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a36:	bfac      	ite	ge
 8005a38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a3a:	81a3      	strhlt	r3, [r4, #12]
 8005a3c:	bd10      	pop	{r4, pc}

08005a3e <__swrite>:
 8005a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a42:	461f      	mov	r7, r3
 8005a44:	898b      	ldrh	r3, [r1, #12]
 8005a46:	05db      	lsls	r3, r3, #23
 8005a48:	4605      	mov	r5, r0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	4616      	mov	r6, r2
 8005a4e:	d505      	bpl.n	8005a5c <__swrite+0x1e>
 8005a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a54:	2302      	movs	r3, #2
 8005a56:	2200      	movs	r2, #0
 8005a58:	f000 f840 	bl	8005adc <_lseek_r>
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a66:	81a3      	strh	r3, [r4, #12]
 8005a68:	4632      	mov	r2, r6
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a72:	f000 b857 	b.w	8005b24 <_write_r>

08005a76 <__sseek>:
 8005a76:	b510      	push	{r4, lr}
 8005a78:	460c      	mov	r4, r1
 8005a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7e:	f000 f82d 	bl	8005adc <_lseek_r>
 8005a82:	1c43      	adds	r3, r0, #1
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	bf15      	itete	ne
 8005a88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a92:	81a3      	strheq	r3, [r4, #12]
 8005a94:	bf18      	it	ne
 8005a96:	81a3      	strhne	r3, [r4, #12]
 8005a98:	bd10      	pop	{r4, pc}

08005a9a <__sclose>:
 8005a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9e:	f000 b80d 	b.w	8005abc <_close_r>

08005aa2 <memset>:
 8005aa2:	4402      	add	r2, r0
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d100      	bne.n	8005aac <memset+0xa>
 8005aaa:	4770      	bx	lr
 8005aac:	f803 1b01 	strb.w	r1, [r3], #1
 8005ab0:	e7f9      	b.n	8005aa6 <memset+0x4>
	...

08005ab4 <_localeconv_r>:
 8005ab4:	4800      	ldr	r0, [pc, #0]	@ (8005ab8 <_localeconv_r+0x4>)
 8005ab6:	4770      	bx	lr
 8005ab8:	20040164 	.word	0x20040164

08005abc <_close_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4d06      	ldr	r5, [pc, #24]	@ (8005ad8 <_close_r+0x1c>)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	602b      	str	r3, [r5, #0]
 8005ac8:	f7fb ff95 	bl	80019f6 <_close>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_close_r+0x1a>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_close_r+0x1a>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	20040424 	.word	0x20040424

08005adc <_lseek_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d07      	ldr	r5, [pc, #28]	@ (8005afc <_lseek_r+0x20>)
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	4608      	mov	r0, r1
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	602a      	str	r2, [r5, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f7fb ffaa 	bl	8001a44 <_lseek>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_lseek_r+0x1e>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_lseek_r+0x1e>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	20040424 	.word	0x20040424

08005b00 <_read_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d07      	ldr	r5, [pc, #28]	@ (8005b20 <_read_r+0x20>)
 8005b04:	4604      	mov	r4, r0
 8005b06:	4608      	mov	r0, r1
 8005b08:	4611      	mov	r1, r2
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	602a      	str	r2, [r5, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f7fb ff38 	bl	8001984 <_read>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	d102      	bne.n	8005b1e <_read_r+0x1e>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	b103      	cbz	r3, 8005b1e <_read_r+0x1e>
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	20040424 	.word	0x20040424

08005b24 <_write_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	4d07      	ldr	r5, [pc, #28]	@ (8005b44 <_write_r+0x20>)
 8005b28:	4604      	mov	r4, r0
 8005b2a:	4608      	mov	r0, r1
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	2200      	movs	r2, #0
 8005b30:	602a      	str	r2, [r5, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	f7fb ff43 	bl	80019be <_write>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_write_r+0x1e>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_write_r+0x1e>
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	20040424 	.word	0x20040424

08005b48 <__errno>:
 8005b48:	4b01      	ldr	r3, [pc, #4]	@ (8005b50 <__errno+0x8>)
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	20040024 	.word	0x20040024

08005b54 <__libc_init_array>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	4d0d      	ldr	r5, [pc, #52]	@ (8005b8c <__libc_init_array+0x38>)
 8005b58:	4c0d      	ldr	r4, [pc, #52]	@ (8005b90 <__libc_init_array+0x3c>)
 8005b5a:	1b64      	subs	r4, r4, r5
 8005b5c:	10a4      	asrs	r4, r4, #2
 8005b5e:	2600      	movs	r6, #0
 8005b60:	42a6      	cmp	r6, r4
 8005b62:	d109      	bne.n	8005b78 <__libc_init_array+0x24>
 8005b64:	4d0b      	ldr	r5, [pc, #44]	@ (8005b94 <__libc_init_array+0x40>)
 8005b66:	4c0c      	ldr	r4, [pc, #48]	@ (8005b98 <__libc_init_array+0x44>)
 8005b68:	f001 febe 	bl	80078e8 <_init>
 8005b6c:	1b64      	subs	r4, r4, r5
 8005b6e:	10a4      	asrs	r4, r4, #2
 8005b70:	2600      	movs	r6, #0
 8005b72:	42a6      	cmp	r6, r4
 8005b74:	d105      	bne.n	8005b82 <__libc_init_array+0x2e>
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7c:	4798      	blx	r3
 8005b7e:	3601      	adds	r6, #1
 8005b80:	e7ee      	b.n	8005b60 <__libc_init_array+0xc>
 8005b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b86:	4798      	blx	r3
 8005b88:	3601      	adds	r6, #1
 8005b8a:	e7f2      	b.n	8005b72 <__libc_init_array+0x1e>
 8005b8c:	08007ce8 	.word	0x08007ce8
 8005b90:	08007ce8 	.word	0x08007ce8
 8005b94:	08007ce8 	.word	0x08007ce8
 8005b98:	08007cec 	.word	0x08007cec

08005b9c <__retarget_lock_init_recursive>:
 8005b9c:	4770      	bx	lr

08005b9e <__retarget_lock_acquire_recursive>:
 8005b9e:	4770      	bx	lr

08005ba0 <__retarget_lock_release_recursive>:
 8005ba0:	4770      	bx	lr

08005ba2 <quorem>:
 8005ba2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba6:	6903      	ldr	r3, [r0, #16]
 8005ba8:	690c      	ldr	r4, [r1, #16]
 8005baa:	42a3      	cmp	r3, r4
 8005bac:	4607      	mov	r7, r0
 8005bae:	db7e      	blt.n	8005cae <quorem+0x10c>
 8005bb0:	3c01      	subs	r4, #1
 8005bb2:	f101 0814 	add.w	r8, r1, #20
 8005bb6:	00a3      	lsls	r3, r4, #2
 8005bb8:	f100 0514 	add.w	r5, r0, #20
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bc2:	9301      	str	r3, [sp, #4]
 8005bc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bd8:	d32e      	bcc.n	8005c38 <quorem+0x96>
 8005bda:	f04f 0a00 	mov.w	sl, #0
 8005bde:	46c4      	mov	ip, r8
 8005be0:	46ae      	mov	lr, r5
 8005be2:	46d3      	mov	fp, sl
 8005be4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005be8:	b298      	uxth	r0, r3
 8005bea:	fb06 a000 	mla	r0, r6, r0, sl
 8005bee:	0c02      	lsrs	r2, r0, #16
 8005bf0:	0c1b      	lsrs	r3, r3, #16
 8005bf2:	fb06 2303 	mla	r3, r6, r3, r2
 8005bf6:	f8de 2000 	ldr.w	r2, [lr]
 8005bfa:	b280      	uxth	r0, r0
 8005bfc:	b292      	uxth	r2, r2
 8005bfe:	1a12      	subs	r2, r2, r0
 8005c00:	445a      	add	r2, fp
 8005c02:	f8de 0000 	ldr.w	r0, [lr]
 8005c06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005c10:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005c14:	b292      	uxth	r2, r2
 8005c16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005c1a:	45e1      	cmp	r9, ip
 8005c1c:	f84e 2b04 	str.w	r2, [lr], #4
 8005c20:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005c24:	d2de      	bcs.n	8005be4 <quorem+0x42>
 8005c26:	9b00      	ldr	r3, [sp, #0]
 8005c28:	58eb      	ldr	r3, [r5, r3]
 8005c2a:	b92b      	cbnz	r3, 8005c38 <quorem+0x96>
 8005c2c:	9b01      	ldr	r3, [sp, #4]
 8005c2e:	3b04      	subs	r3, #4
 8005c30:	429d      	cmp	r5, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	d32f      	bcc.n	8005c96 <quorem+0xf4>
 8005c36:	613c      	str	r4, [r7, #16]
 8005c38:	4638      	mov	r0, r7
 8005c3a:	f001 f97b 	bl	8006f34 <__mcmp>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	db25      	blt.n	8005c8e <quorem+0xec>
 8005c42:	4629      	mov	r1, r5
 8005c44:	2000      	movs	r0, #0
 8005c46:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c4a:	f8d1 c000 	ldr.w	ip, [r1]
 8005c4e:	fa1f fe82 	uxth.w	lr, r2
 8005c52:	fa1f f38c 	uxth.w	r3, ip
 8005c56:	eba3 030e 	sub.w	r3, r3, lr
 8005c5a:	4403      	add	r3, r0
 8005c5c:	0c12      	lsrs	r2, r2, #16
 8005c5e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005c62:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c6c:	45c1      	cmp	r9, r8
 8005c6e:	f841 3b04 	str.w	r3, [r1], #4
 8005c72:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c76:	d2e6      	bcs.n	8005c46 <quorem+0xa4>
 8005c78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c80:	b922      	cbnz	r2, 8005c8c <quorem+0xea>
 8005c82:	3b04      	subs	r3, #4
 8005c84:	429d      	cmp	r5, r3
 8005c86:	461a      	mov	r2, r3
 8005c88:	d30b      	bcc.n	8005ca2 <quorem+0x100>
 8005c8a:	613c      	str	r4, [r7, #16]
 8005c8c:	3601      	adds	r6, #1
 8005c8e:	4630      	mov	r0, r6
 8005c90:	b003      	add	sp, #12
 8005c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	3b04      	subs	r3, #4
 8005c9a:	2a00      	cmp	r2, #0
 8005c9c:	d1cb      	bne.n	8005c36 <quorem+0x94>
 8005c9e:	3c01      	subs	r4, #1
 8005ca0:	e7c6      	b.n	8005c30 <quorem+0x8e>
 8005ca2:	6812      	ldr	r2, [r2, #0]
 8005ca4:	3b04      	subs	r3, #4
 8005ca6:	2a00      	cmp	r2, #0
 8005ca8:	d1ef      	bne.n	8005c8a <quorem+0xe8>
 8005caa:	3c01      	subs	r4, #1
 8005cac:	e7ea      	b.n	8005c84 <quorem+0xe2>
 8005cae:	2000      	movs	r0, #0
 8005cb0:	e7ee      	b.n	8005c90 <quorem+0xee>
 8005cb2:	0000      	movs	r0, r0
 8005cb4:	0000      	movs	r0, r0
	...

08005cb8 <_dtoa_r>:
 8005cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	69c7      	ldr	r7, [r0, #28]
 8005cbe:	b099      	sub	sp, #100	@ 0x64
 8005cc0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005cc4:	ec55 4b10 	vmov	r4, r5, d0
 8005cc8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005cca:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ccc:	4683      	mov	fp, r0
 8005cce:	920e      	str	r2, [sp, #56]	@ 0x38
 8005cd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005cd2:	b97f      	cbnz	r7, 8005cf4 <_dtoa_r+0x3c>
 8005cd4:	2010      	movs	r0, #16
 8005cd6:	f000 fdfd 	bl	80068d4 <malloc>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	f8cb 001c 	str.w	r0, [fp, #28]
 8005ce0:	b920      	cbnz	r0, 8005cec <_dtoa_r+0x34>
 8005ce2:	4ba7      	ldr	r3, [pc, #668]	@ (8005f80 <_dtoa_r+0x2c8>)
 8005ce4:	21ef      	movs	r1, #239	@ 0xef
 8005ce6:	48a7      	ldr	r0, [pc, #668]	@ (8005f84 <_dtoa_r+0x2cc>)
 8005ce8:	f001 faf6 	bl	80072d8 <__assert_func>
 8005cec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005cf0:	6007      	str	r7, [r0, #0]
 8005cf2:	60c7      	str	r7, [r0, #12]
 8005cf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005cf8:	6819      	ldr	r1, [r3, #0]
 8005cfa:	b159      	cbz	r1, 8005d14 <_dtoa_r+0x5c>
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	604a      	str	r2, [r1, #4]
 8005d00:	2301      	movs	r3, #1
 8005d02:	4093      	lsls	r3, r2
 8005d04:	608b      	str	r3, [r1, #8]
 8005d06:	4658      	mov	r0, fp
 8005d08:	f000 feda 	bl	8006ac0 <_Bfree>
 8005d0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	1e2b      	subs	r3, r5, #0
 8005d16:	bfb9      	ittee	lt
 8005d18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005d1c:	9303      	strlt	r3, [sp, #12]
 8005d1e:	2300      	movge	r3, #0
 8005d20:	6033      	strge	r3, [r6, #0]
 8005d22:	9f03      	ldr	r7, [sp, #12]
 8005d24:	4b98      	ldr	r3, [pc, #608]	@ (8005f88 <_dtoa_r+0x2d0>)
 8005d26:	bfbc      	itt	lt
 8005d28:	2201      	movlt	r2, #1
 8005d2a:	6032      	strlt	r2, [r6, #0]
 8005d2c:	43bb      	bics	r3, r7
 8005d2e:	d112      	bne.n	8005d56 <_dtoa_r+0x9e>
 8005d30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005d32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d3c:	4323      	orrs	r3, r4
 8005d3e:	f000 854d 	beq.w	80067dc <_dtoa_r+0xb24>
 8005d42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005d44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005f9c <_dtoa_r+0x2e4>
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 854f 	beq.w	80067ec <_dtoa_r+0xb34>
 8005d4e:	f10a 0303 	add.w	r3, sl, #3
 8005d52:	f000 bd49 	b.w	80067e8 <_dtoa_r+0xb30>
 8005d56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	ec51 0b17 	vmov	r0, r1, d7
 8005d60:	2300      	movs	r3, #0
 8005d62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005d66:	f7fa fec7 	bl	8000af8 <__aeabi_dcmpeq>
 8005d6a:	4680      	mov	r8, r0
 8005d6c:	b158      	cbz	r0, 8005d86 <_dtoa_r+0xce>
 8005d6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005d70:	2301      	movs	r3, #1
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005d76:	b113      	cbz	r3, 8005d7e <_dtoa_r+0xc6>
 8005d78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005d7a:	4b84      	ldr	r3, [pc, #528]	@ (8005f8c <_dtoa_r+0x2d4>)
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005fa0 <_dtoa_r+0x2e8>
 8005d82:	f000 bd33 	b.w	80067ec <_dtoa_r+0xb34>
 8005d86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005d8a:	aa16      	add	r2, sp, #88	@ 0x58
 8005d8c:	a917      	add	r1, sp, #92	@ 0x5c
 8005d8e:	4658      	mov	r0, fp
 8005d90:	f001 f980 	bl	8007094 <__d2b>
 8005d94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005d98:	4681      	mov	r9, r0
 8005d9a:	2e00      	cmp	r6, #0
 8005d9c:	d077      	beq.n	8005e8e <_dtoa_r+0x1d6>
 8005d9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005da0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005da8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005db0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005db4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005db8:	4619      	mov	r1, r3
 8005dba:	2200      	movs	r2, #0
 8005dbc:	4b74      	ldr	r3, [pc, #464]	@ (8005f90 <_dtoa_r+0x2d8>)
 8005dbe:	f7fa fa7b 	bl	80002b8 <__aeabi_dsub>
 8005dc2:	a369      	add	r3, pc, #420	@ (adr r3, 8005f68 <_dtoa_r+0x2b0>)
 8005dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc8:	f7fa fc2e 	bl	8000628 <__aeabi_dmul>
 8005dcc:	a368      	add	r3, pc, #416	@ (adr r3, 8005f70 <_dtoa_r+0x2b8>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f7fa fa73 	bl	80002bc <__adddf3>
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	4630      	mov	r0, r6
 8005dda:	460d      	mov	r5, r1
 8005ddc:	f7fa fbba 	bl	8000554 <__aeabi_i2d>
 8005de0:	a365      	add	r3, pc, #404	@ (adr r3, 8005f78 <_dtoa_r+0x2c0>)
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f7fa fc1f 	bl	8000628 <__aeabi_dmul>
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	4620      	mov	r0, r4
 8005df0:	4629      	mov	r1, r5
 8005df2:	f7fa fa63 	bl	80002bc <__adddf3>
 8005df6:	4604      	mov	r4, r0
 8005df8:	460d      	mov	r5, r1
 8005dfa:	f7fa fec5 	bl	8000b88 <__aeabi_d2iz>
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4607      	mov	r7, r0
 8005e02:	2300      	movs	r3, #0
 8005e04:	4620      	mov	r0, r4
 8005e06:	4629      	mov	r1, r5
 8005e08:	f7fa fe80 	bl	8000b0c <__aeabi_dcmplt>
 8005e0c:	b140      	cbz	r0, 8005e20 <_dtoa_r+0x168>
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f7fa fba0 	bl	8000554 <__aeabi_i2d>
 8005e14:	4622      	mov	r2, r4
 8005e16:	462b      	mov	r3, r5
 8005e18:	f7fa fe6e 	bl	8000af8 <__aeabi_dcmpeq>
 8005e1c:	b900      	cbnz	r0, 8005e20 <_dtoa_r+0x168>
 8005e1e:	3f01      	subs	r7, #1
 8005e20:	2f16      	cmp	r7, #22
 8005e22:	d851      	bhi.n	8005ec8 <_dtoa_r+0x210>
 8005e24:	4b5b      	ldr	r3, [pc, #364]	@ (8005f94 <_dtoa_r+0x2dc>)
 8005e26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e32:	f7fa fe6b 	bl	8000b0c <__aeabi_dcmplt>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d048      	beq.n	8005ecc <_dtoa_r+0x214>
 8005e3a:	3f01      	subs	r7, #1
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005e40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005e42:	1b9b      	subs	r3, r3, r6
 8005e44:	1e5a      	subs	r2, r3, #1
 8005e46:	bf44      	itt	mi
 8005e48:	f1c3 0801 	rsbmi	r8, r3, #1
 8005e4c:	2300      	movmi	r3, #0
 8005e4e:	9208      	str	r2, [sp, #32]
 8005e50:	bf54      	ite	pl
 8005e52:	f04f 0800 	movpl.w	r8, #0
 8005e56:	9308      	strmi	r3, [sp, #32]
 8005e58:	2f00      	cmp	r7, #0
 8005e5a:	db39      	blt.n	8005ed0 <_dtoa_r+0x218>
 8005e5c:	9b08      	ldr	r3, [sp, #32]
 8005e5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005e60:	443b      	add	r3, r7
 8005e62:	9308      	str	r3, [sp, #32]
 8005e64:	2300      	movs	r3, #0
 8005e66:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e6a:	2b09      	cmp	r3, #9
 8005e6c:	d864      	bhi.n	8005f38 <_dtoa_r+0x280>
 8005e6e:	2b05      	cmp	r3, #5
 8005e70:	bfc4      	itt	gt
 8005e72:	3b04      	subgt	r3, #4
 8005e74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e78:	f1a3 0302 	sub.w	r3, r3, #2
 8005e7c:	bfcc      	ite	gt
 8005e7e:	2400      	movgt	r4, #0
 8005e80:	2401      	movle	r4, #1
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d863      	bhi.n	8005f4e <_dtoa_r+0x296>
 8005e86:	e8df f003 	tbb	[pc, r3]
 8005e8a:	372a      	.short	0x372a
 8005e8c:	5535      	.short	0x5535
 8005e8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005e92:	441e      	add	r6, r3
 8005e94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	bfc1      	itttt	gt
 8005e9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005ea0:	409f      	lslgt	r7, r3
 8005ea2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005ea6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005eaa:	bfd6      	itet	le
 8005eac:	f1c3 0320 	rsble	r3, r3, #32
 8005eb0:	ea47 0003 	orrgt.w	r0, r7, r3
 8005eb4:	fa04 f003 	lslle.w	r0, r4, r3
 8005eb8:	f7fa fb3c 	bl	8000534 <__aeabi_ui2d>
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005ec2:	3e01      	subs	r6, #1
 8005ec4:	9214      	str	r2, [sp, #80]	@ 0x50
 8005ec6:	e777      	b.n	8005db8 <_dtoa_r+0x100>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e7b8      	b.n	8005e3e <_dtoa_r+0x186>
 8005ecc:	9012      	str	r0, [sp, #72]	@ 0x48
 8005ece:	e7b7      	b.n	8005e40 <_dtoa_r+0x188>
 8005ed0:	427b      	negs	r3, r7
 8005ed2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	eba8 0807 	sub.w	r8, r8, r7
 8005eda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005edc:	e7c4      	b.n	8005e68 <_dtoa_r+0x1b0>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	dc35      	bgt.n	8005f54 <_dtoa_r+0x29c>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	9307      	str	r3, [sp, #28]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ef2:	e00b      	b.n	8005f0c <_dtoa_r+0x254>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e7f3      	b.n	8005ee0 <_dtoa_r+0x228>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005efc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	3301      	adds	r3, #1
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	9307      	str	r3, [sp, #28]
 8005f08:	bfb8      	it	lt
 8005f0a:	2301      	movlt	r3, #1
 8005f0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005f10:	2100      	movs	r1, #0
 8005f12:	2204      	movs	r2, #4
 8005f14:	f102 0514 	add.w	r5, r2, #20
 8005f18:	429d      	cmp	r5, r3
 8005f1a:	d91f      	bls.n	8005f5c <_dtoa_r+0x2a4>
 8005f1c:	6041      	str	r1, [r0, #4]
 8005f1e:	4658      	mov	r0, fp
 8005f20:	f000 fd8e 	bl	8006a40 <_Balloc>
 8005f24:	4682      	mov	sl, r0
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d13c      	bne.n	8005fa4 <_dtoa_r+0x2ec>
 8005f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005f98 <_dtoa_r+0x2e0>)
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005f32:	e6d8      	b.n	8005ce6 <_dtoa_r+0x2e>
 8005f34:	2301      	movs	r3, #1
 8005f36:	e7e0      	b.n	8005efa <_dtoa_r+0x242>
 8005f38:	2401      	movs	r4, #1
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005f40:	f04f 33ff 	mov.w	r3, #4294967295
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	9307      	str	r3, [sp, #28]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2312      	movs	r3, #18
 8005f4c:	e7d0      	b.n	8005ef0 <_dtoa_r+0x238>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f52:	e7f5      	b.n	8005f40 <_dtoa_r+0x288>
 8005f54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	9307      	str	r3, [sp, #28]
 8005f5a:	e7d7      	b.n	8005f0c <_dtoa_r+0x254>
 8005f5c:	3101      	adds	r1, #1
 8005f5e:	0052      	lsls	r2, r2, #1
 8005f60:	e7d8      	b.n	8005f14 <_dtoa_r+0x25c>
 8005f62:	bf00      	nop
 8005f64:	f3af 8000 	nop.w
 8005f68:	636f4361 	.word	0x636f4361
 8005f6c:	3fd287a7 	.word	0x3fd287a7
 8005f70:	8b60c8b3 	.word	0x8b60c8b3
 8005f74:	3fc68a28 	.word	0x3fc68a28
 8005f78:	509f79fb 	.word	0x509f79fb
 8005f7c:	3fd34413 	.word	0x3fd34413
 8005f80:	080079b1 	.word	0x080079b1
 8005f84:	080079c8 	.word	0x080079c8
 8005f88:	7ff00000 	.word	0x7ff00000
 8005f8c:	08007981 	.word	0x08007981
 8005f90:	3ff80000 	.word	0x3ff80000
 8005f94:	08007ac0 	.word	0x08007ac0
 8005f98:	08007a20 	.word	0x08007a20
 8005f9c:	080079ad 	.word	0x080079ad
 8005fa0:	08007980 	.word	0x08007980
 8005fa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005fa8:	6018      	str	r0, [r3, #0]
 8005faa:	9b07      	ldr	r3, [sp, #28]
 8005fac:	2b0e      	cmp	r3, #14
 8005fae:	f200 80a4 	bhi.w	80060fa <_dtoa_r+0x442>
 8005fb2:	2c00      	cmp	r4, #0
 8005fb4:	f000 80a1 	beq.w	80060fa <_dtoa_r+0x442>
 8005fb8:	2f00      	cmp	r7, #0
 8005fba:	dd33      	ble.n	8006024 <_dtoa_r+0x36c>
 8005fbc:	4bad      	ldr	r3, [pc, #692]	@ (8006274 <_dtoa_r+0x5bc>)
 8005fbe:	f007 020f 	and.w	r2, r7, #15
 8005fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fc6:	ed93 7b00 	vldr	d7, [r3]
 8005fca:	05f8      	lsls	r0, r7, #23
 8005fcc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005fd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005fd4:	d516      	bpl.n	8006004 <_dtoa_r+0x34c>
 8005fd6:	4ba8      	ldr	r3, [pc, #672]	@ (8006278 <_dtoa_r+0x5c0>)
 8005fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fe0:	f7fa fc4c 	bl	800087c <__aeabi_ddiv>
 8005fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fe8:	f004 040f 	and.w	r4, r4, #15
 8005fec:	2603      	movs	r6, #3
 8005fee:	4da2      	ldr	r5, [pc, #648]	@ (8006278 <_dtoa_r+0x5c0>)
 8005ff0:	b954      	cbnz	r4, 8006008 <_dtoa_r+0x350>
 8005ff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ffa:	f7fa fc3f 	bl	800087c <__aeabi_ddiv>
 8005ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006002:	e028      	b.n	8006056 <_dtoa_r+0x39e>
 8006004:	2602      	movs	r6, #2
 8006006:	e7f2      	b.n	8005fee <_dtoa_r+0x336>
 8006008:	07e1      	lsls	r1, r4, #31
 800600a:	d508      	bpl.n	800601e <_dtoa_r+0x366>
 800600c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006010:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006014:	f7fa fb08 	bl	8000628 <__aeabi_dmul>
 8006018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800601c:	3601      	adds	r6, #1
 800601e:	1064      	asrs	r4, r4, #1
 8006020:	3508      	adds	r5, #8
 8006022:	e7e5      	b.n	8005ff0 <_dtoa_r+0x338>
 8006024:	f000 80d2 	beq.w	80061cc <_dtoa_r+0x514>
 8006028:	427c      	negs	r4, r7
 800602a:	4b92      	ldr	r3, [pc, #584]	@ (8006274 <_dtoa_r+0x5bc>)
 800602c:	4d92      	ldr	r5, [pc, #584]	@ (8006278 <_dtoa_r+0x5c0>)
 800602e:	f004 020f 	and.w	r2, r4, #15
 8006032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800603e:	f7fa faf3 	bl	8000628 <__aeabi_dmul>
 8006042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006046:	1124      	asrs	r4, r4, #4
 8006048:	2300      	movs	r3, #0
 800604a:	2602      	movs	r6, #2
 800604c:	2c00      	cmp	r4, #0
 800604e:	f040 80b2 	bne.w	80061b6 <_dtoa_r+0x4fe>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1d3      	bne.n	8005ffe <_dtoa_r+0x346>
 8006056:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006058:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 80b7 	beq.w	80061d0 <_dtoa_r+0x518>
 8006062:	4b86      	ldr	r3, [pc, #536]	@ (800627c <_dtoa_r+0x5c4>)
 8006064:	2200      	movs	r2, #0
 8006066:	4620      	mov	r0, r4
 8006068:	4629      	mov	r1, r5
 800606a:	f7fa fd4f 	bl	8000b0c <__aeabi_dcmplt>
 800606e:	2800      	cmp	r0, #0
 8006070:	f000 80ae 	beq.w	80061d0 <_dtoa_r+0x518>
 8006074:	9b07      	ldr	r3, [sp, #28]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 80aa 	beq.w	80061d0 <_dtoa_r+0x518>
 800607c:	9b00      	ldr	r3, [sp, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	dd37      	ble.n	80060f2 <_dtoa_r+0x43a>
 8006082:	1e7b      	subs	r3, r7, #1
 8006084:	9304      	str	r3, [sp, #16]
 8006086:	4620      	mov	r0, r4
 8006088:	4b7d      	ldr	r3, [pc, #500]	@ (8006280 <_dtoa_r+0x5c8>)
 800608a:	2200      	movs	r2, #0
 800608c:	4629      	mov	r1, r5
 800608e:	f7fa facb 	bl	8000628 <__aeabi_dmul>
 8006092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006096:	9c00      	ldr	r4, [sp, #0]
 8006098:	3601      	adds	r6, #1
 800609a:	4630      	mov	r0, r6
 800609c:	f7fa fa5a 	bl	8000554 <__aeabi_i2d>
 80060a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060a4:	f7fa fac0 	bl	8000628 <__aeabi_dmul>
 80060a8:	4b76      	ldr	r3, [pc, #472]	@ (8006284 <_dtoa_r+0x5cc>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	f7fa f906 	bl	80002bc <__adddf3>
 80060b0:	4605      	mov	r5, r0
 80060b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80060b6:	2c00      	cmp	r4, #0
 80060b8:	f040 808d 	bne.w	80061d6 <_dtoa_r+0x51e>
 80060bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060c0:	4b71      	ldr	r3, [pc, #452]	@ (8006288 <_dtoa_r+0x5d0>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	f7fa f8f8 	bl	80002b8 <__aeabi_dsub>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060d0:	462a      	mov	r2, r5
 80060d2:	4633      	mov	r3, r6
 80060d4:	f7fa fd38 	bl	8000b48 <__aeabi_dcmpgt>
 80060d8:	2800      	cmp	r0, #0
 80060da:	f040 828b 	bne.w	80065f4 <_dtoa_r+0x93c>
 80060de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060e2:	462a      	mov	r2, r5
 80060e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80060e8:	f7fa fd10 	bl	8000b0c <__aeabi_dcmplt>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	f040 8128 	bne.w	8006342 <_dtoa_r+0x68a>
 80060f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80060f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80060fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f2c0 815a 	blt.w	80063b6 <_dtoa_r+0x6fe>
 8006102:	2f0e      	cmp	r7, #14
 8006104:	f300 8157 	bgt.w	80063b6 <_dtoa_r+0x6fe>
 8006108:	4b5a      	ldr	r3, [pc, #360]	@ (8006274 <_dtoa_r+0x5bc>)
 800610a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800610e:	ed93 7b00 	vldr	d7, [r3]
 8006112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006114:	2b00      	cmp	r3, #0
 8006116:	ed8d 7b00 	vstr	d7, [sp]
 800611a:	da03      	bge.n	8006124 <_dtoa_r+0x46c>
 800611c:	9b07      	ldr	r3, [sp, #28]
 800611e:	2b00      	cmp	r3, #0
 8006120:	f340 8101 	ble.w	8006326 <_dtoa_r+0x66e>
 8006124:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006128:	4656      	mov	r6, sl
 800612a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800612e:	4620      	mov	r0, r4
 8006130:	4629      	mov	r1, r5
 8006132:	f7fa fba3 	bl	800087c <__aeabi_ddiv>
 8006136:	f7fa fd27 	bl	8000b88 <__aeabi_d2iz>
 800613a:	4680      	mov	r8, r0
 800613c:	f7fa fa0a 	bl	8000554 <__aeabi_i2d>
 8006140:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006144:	f7fa fa70 	bl	8000628 <__aeabi_dmul>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4620      	mov	r0, r4
 800614e:	4629      	mov	r1, r5
 8006150:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006154:	f7fa f8b0 	bl	80002b8 <__aeabi_dsub>
 8006158:	f806 4b01 	strb.w	r4, [r6], #1
 800615c:	9d07      	ldr	r5, [sp, #28]
 800615e:	eba6 040a 	sub.w	r4, r6, sl
 8006162:	42a5      	cmp	r5, r4
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	f040 8117 	bne.w	800639a <_dtoa_r+0x6e2>
 800616c:	f7fa f8a6 	bl	80002bc <__adddf3>
 8006170:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006174:	4604      	mov	r4, r0
 8006176:	460d      	mov	r5, r1
 8006178:	f7fa fce6 	bl	8000b48 <__aeabi_dcmpgt>
 800617c:	2800      	cmp	r0, #0
 800617e:	f040 80f9 	bne.w	8006374 <_dtoa_r+0x6bc>
 8006182:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006186:	4620      	mov	r0, r4
 8006188:	4629      	mov	r1, r5
 800618a:	f7fa fcb5 	bl	8000af8 <__aeabi_dcmpeq>
 800618e:	b118      	cbz	r0, 8006198 <_dtoa_r+0x4e0>
 8006190:	f018 0f01 	tst.w	r8, #1
 8006194:	f040 80ee 	bne.w	8006374 <_dtoa_r+0x6bc>
 8006198:	4649      	mov	r1, r9
 800619a:	4658      	mov	r0, fp
 800619c:	f000 fc90 	bl	8006ac0 <_Bfree>
 80061a0:	2300      	movs	r3, #0
 80061a2:	7033      	strb	r3, [r6, #0]
 80061a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80061a6:	3701      	adds	r7, #1
 80061a8:	601f      	str	r7, [r3, #0]
 80061aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 831d 	beq.w	80067ec <_dtoa_r+0xb34>
 80061b2:	601e      	str	r6, [r3, #0]
 80061b4:	e31a      	b.n	80067ec <_dtoa_r+0xb34>
 80061b6:	07e2      	lsls	r2, r4, #31
 80061b8:	d505      	bpl.n	80061c6 <_dtoa_r+0x50e>
 80061ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061be:	f7fa fa33 	bl	8000628 <__aeabi_dmul>
 80061c2:	3601      	adds	r6, #1
 80061c4:	2301      	movs	r3, #1
 80061c6:	1064      	asrs	r4, r4, #1
 80061c8:	3508      	adds	r5, #8
 80061ca:	e73f      	b.n	800604c <_dtoa_r+0x394>
 80061cc:	2602      	movs	r6, #2
 80061ce:	e742      	b.n	8006056 <_dtoa_r+0x39e>
 80061d0:	9c07      	ldr	r4, [sp, #28]
 80061d2:	9704      	str	r7, [sp, #16]
 80061d4:	e761      	b.n	800609a <_dtoa_r+0x3e2>
 80061d6:	4b27      	ldr	r3, [pc, #156]	@ (8006274 <_dtoa_r+0x5bc>)
 80061d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80061da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80061de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061e2:	4454      	add	r4, sl
 80061e4:	2900      	cmp	r1, #0
 80061e6:	d053      	beq.n	8006290 <_dtoa_r+0x5d8>
 80061e8:	4928      	ldr	r1, [pc, #160]	@ (800628c <_dtoa_r+0x5d4>)
 80061ea:	2000      	movs	r0, #0
 80061ec:	f7fa fb46 	bl	800087c <__aeabi_ddiv>
 80061f0:	4633      	mov	r3, r6
 80061f2:	462a      	mov	r2, r5
 80061f4:	f7fa f860 	bl	80002b8 <__aeabi_dsub>
 80061f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061fc:	4656      	mov	r6, sl
 80061fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006202:	f7fa fcc1 	bl	8000b88 <__aeabi_d2iz>
 8006206:	4605      	mov	r5, r0
 8006208:	f7fa f9a4 	bl	8000554 <__aeabi_i2d>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006214:	f7fa f850 	bl	80002b8 <__aeabi_dsub>
 8006218:	3530      	adds	r5, #48	@ 0x30
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006222:	f806 5b01 	strb.w	r5, [r6], #1
 8006226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800622a:	f7fa fc6f 	bl	8000b0c <__aeabi_dcmplt>
 800622e:	2800      	cmp	r0, #0
 8006230:	d171      	bne.n	8006316 <_dtoa_r+0x65e>
 8006232:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006236:	4911      	ldr	r1, [pc, #68]	@ (800627c <_dtoa_r+0x5c4>)
 8006238:	2000      	movs	r0, #0
 800623a:	f7fa f83d 	bl	80002b8 <__aeabi_dsub>
 800623e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006242:	f7fa fc63 	bl	8000b0c <__aeabi_dcmplt>
 8006246:	2800      	cmp	r0, #0
 8006248:	f040 8095 	bne.w	8006376 <_dtoa_r+0x6be>
 800624c:	42a6      	cmp	r6, r4
 800624e:	f43f af50 	beq.w	80060f2 <_dtoa_r+0x43a>
 8006252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006256:	4b0a      	ldr	r3, [pc, #40]	@ (8006280 <_dtoa_r+0x5c8>)
 8006258:	2200      	movs	r2, #0
 800625a:	f7fa f9e5 	bl	8000628 <__aeabi_dmul>
 800625e:	4b08      	ldr	r3, [pc, #32]	@ (8006280 <_dtoa_r+0x5c8>)
 8006260:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006264:	2200      	movs	r2, #0
 8006266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800626a:	f7fa f9dd 	bl	8000628 <__aeabi_dmul>
 800626e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006272:	e7c4      	b.n	80061fe <_dtoa_r+0x546>
 8006274:	08007ac0 	.word	0x08007ac0
 8006278:	08007a98 	.word	0x08007a98
 800627c:	3ff00000 	.word	0x3ff00000
 8006280:	40240000 	.word	0x40240000
 8006284:	401c0000 	.word	0x401c0000
 8006288:	40140000 	.word	0x40140000
 800628c:	3fe00000 	.word	0x3fe00000
 8006290:	4631      	mov	r1, r6
 8006292:	4628      	mov	r0, r5
 8006294:	f7fa f9c8 	bl	8000628 <__aeabi_dmul>
 8006298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800629c:	9415      	str	r4, [sp, #84]	@ 0x54
 800629e:	4656      	mov	r6, sl
 80062a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062a4:	f7fa fc70 	bl	8000b88 <__aeabi_d2iz>
 80062a8:	4605      	mov	r5, r0
 80062aa:	f7fa f953 	bl	8000554 <__aeabi_i2d>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062b6:	f7f9 ffff 	bl	80002b8 <__aeabi_dsub>
 80062ba:	3530      	adds	r5, #48	@ 0x30
 80062bc:	f806 5b01 	strb.w	r5, [r6], #1
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	42a6      	cmp	r6, r4
 80062c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062ca:	f04f 0200 	mov.w	r2, #0
 80062ce:	d124      	bne.n	800631a <_dtoa_r+0x662>
 80062d0:	4bac      	ldr	r3, [pc, #688]	@ (8006584 <_dtoa_r+0x8cc>)
 80062d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80062d6:	f7f9 fff1 	bl	80002bc <__adddf3>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062e2:	f7fa fc31 	bl	8000b48 <__aeabi_dcmpgt>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d145      	bne.n	8006376 <_dtoa_r+0x6be>
 80062ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062ee:	49a5      	ldr	r1, [pc, #660]	@ (8006584 <_dtoa_r+0x8cc>)
 80062f0:	2000      	movs	r0, #0
 80062f2:	f7f9 ffe1 	bl	80002b8 <__aeabi_dsub>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062fe:	f7fa fc05 	bl	8000b0c <__aeabi_dcmplt>
 8006302:	2800      	cmp	r0, #0
 8006304:	f43f aef5 	beq.w	80060f2 <_dtoa_r+0x43a>
 8006308:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800630a:	1e73      	subs	r3, r6, #1
 800630c:	9315      	str	r3, [sp, #84]	@ 0x54
 800630e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006312:	2b30      	cmp	r3, #48	@ 0x30
 8006314:	d0f8      	beq.n	8006308 <_dtoa_r+0x650>
 8006316:	9f04      	ldr	r7, [sp, #16]
 8006318:	e73e      	b.n	8006198 <_dtoa_r+0x4e0>
 800631a:	4b9b      	ldr	r3, [pc, #620]	@ (8006588 <_dtoa_r+0x8d0>)
 800631c:	f7fa f984 	bl	8000628 <__aeabi_dmul>
 8006320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006324:	e7bc      	b.n	80062a0 <_dtoa_r+0x5e8>
 8006326:	d10c      	bne.n	8006342 <_dtoa_r+0x68a>
 8006328:	4b98      	ldr	r3, [pc, #608]	@ (800658c <_dtoa_r+0x8d4>)
 800632a:	2200      	movs	r2, #0
 800632c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006330:	f7fa f97a 	bl	8000628 <__aeabi_dmul>
 8006334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006338:	f7fa fbfc 	bl	8000b34 <__aeabi_dcmpge>
 800633c:	2800      	cmp	r0, #0
 800633e:	f000 8157 	beq.w	80065f0 <_dtoa_r+0x938>
 8006342:	2400      	movs	r4, #0
 8006344:	4625      	mov	r5, r4
 8006346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006348:	43db      	mvns	r3, r3
 800634a:	9304      	str	r3, [sp, #16]
 800634c:	4656      	mov	r6, sl
 800634e:	2700      	movs	r7, #0
 8006350:	4621      	mov	r1, r4
 8006352:	4658      	mov	r0, fp
 8006354:	f000 fbb4 	bl	8006ac0 <_Bfree>
 8006358:	2d00      	cmp	r5, #0
 800635a:	d0dc      	beq.n	8006316 <_dtoa_r+0x65e>
 800635c:	b12f      	cbz	r7, 800636a <_dtoa_r+0x6b2>
 800635e:	42af      	cmp	r7, r5
 8006360:	d003      	beq.n	800636a <_dtoa_r+0x6b2>
 8006362:	4639      	mov	r1, r7
 8006364:	4658      	mov	r0, fp
 8006366:	f000 fbab 	bl	8006ac0 <_Bfree>
 800636a:	4629      	mov	r1, r5
 800636c:	4658      	mov	r0, fp
 800636e:	f000 fba7 	bl	8006ac0 <_Bfree>
 8006372:	e7d0      	b.n	8006316 <_dtoa_r+0x65e>
 8006374:	9704      	str	r7, [sp, #16]
 8006376:	4633      	mov	r3, r6
 8006378:	461e      	mov	r6, r3
 800637a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800637e:	2a39      	cmp	r2, #57	@ 0x39
 8006380:	d107      	bne.n	8006392 <_dtoa_r+0x6da>
 8006382:	459a      	cmp	sl, r3
 8006384:	d1f8      	bne.n	8006378 <_dtoa_r+0x6c0>
 8006386:	9a04      	ldr	r2, [sp, #16]
 8006388:	3201      	adds	r2, #1
 800638a:	9204      	str	r2, [sp, #16]
 800638c:	2230      	movs	r2, #48	@ 0x30
 800638e:	f88a 2000 	strb.w	r2, [sl]
 8006392:	781a      	ldrb	r2, [r3, #0]
 8006394:	3201      	adds	r2, #1
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	e7bd      	b.n	8006316 <_dtoa_r+0x65e>
 800639a:	4b7b      	ldr	r3, [pc, #492]	@ (8006588 <_dtoa_r+0x8d0>)
 800639c:	2200      	movs	r2, #0
 800639e:	f7fa f943 	bl	8000628 <__aeabi_dmul>
 80063a2:	2200      	movs	r2, #0
 80063a4:	2300      	movs	r3, #0
 80063a6:	4604      	mov	r4, r0
 80063a8:	460d      	mov	r5, r1
 80063aa:	f7fa fba5 	bl	8000af8 <__aeabi_dcmpeq>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	f43f aebb 	beq.w	800612a <_dtoa_r+0x472>
 80063b4:	e6f0      	b.n	8006198 <_dtoa_r+0x4e0>
 80063b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80063b8:	2a00      	cmp	r2, #0
 80063ba:	f000 80db 	beq.w	8006574 <_dtoa_r+0x8bc>
 80063be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063c0:	2a01      	cmp	r2, #1
 80063c2:	f300 80bf 	bgt.w	8006544 <_dtoa_r+0x88c>
 80063c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80063c8:	2a00      	cmp	r2, #0
 80063ca:	f000 80b7 	beq.w	800653c <_dtoa_r+0x884>
 80063ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80063d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80063d4:	4646      	mov	r6, r8
 80063d6:	9a08      	ldr	r2, [sp, #32]
 80063d8:	2101      	movs	r1, #1
 80063da:	441a      	add	r2, r3
 80063dc:	4658      	mov	r0, fp
 80063de:	4498      	add	r8, r3
 80063e0:	9208      	str	r2, [sp, #32]
 80063e2:	f000 fc21 	bl	8006c28 <__i2b>
 80063e6:	4605      	mov	r5, r0
 80063e8:	b15e      	cbz	r6, 8006402 <_dtoa_r+0x74a>
 80063ea:	9b08      	ldr	r3, [sp, #32]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dd08      	ble.n	8006402 <_dtoa_r+0x74a>
 80063f0:	42b3      	cmp	r3, r6
 80063f2:	9a08      	ldr	r2, [sp, #32]
 80063f4:	bfa8      	it	ge
 80063f6:	4633      	movge	r3, r6
 80063f8:	eba8 0803 	sub.w	r8, r8, r3
 80063fc:	1af6      	subs	r6, r6, r3
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	9308      	str	r3, [sp, #32]
 8006402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006404:	b1f3      	cbz	r3, 8006444 <_dtoa_r+0x78c>
 8006406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 80b7 	beq.w	800657c <_dtoa_r+0x8c4>
 800640e:	b18c      	cbz	r4, 8006434 <_dtoa_r+0x77c>
 8006410:	4629      	mov	r1, r5
 8006412:	4622      	mov	r2, r4
 8006414:	4658      	mov	r0, fp
 8006416:	f000 fcc7 	bl	8006da8 <__pow5mult>
 800641a:	464a      	mov	r2, r9
 800641c:	4601      	mov	r1, r0
 800641e:	4605      	mov	r5, r0
 8006420:	4658      	mov	r0, fp
 8006422:	f000 fc17 	bl	8006c54 <__multiply>
 8006426:	4649      	mov	r1, r9
 8006428:	9004      	str	r0, [sp, #16]
 800642a:	4658      	mov	r0, fp
 800642c:	f000 fb48 	bl	8006ac0 <_Bfree>
 8006430:	9b04      	ldr	r3, [sp, #16]
 8006432:	4699      	mov	r9, r3
 8006434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006436:	1b1a      	subs	r2, r3, r4
 8006438:	d004      	beq.n	8006444 <_dtoa_r+0x78c>
 800643a:	4649      	mov	r1, r9
 800643c:	4658      	mov	r0, fp
 800643e:	f000 fcb3 	bl	8006da8 <__pow5mult>
 8006442:	4681      	mov	r9, r0
 8006444:	2101      	movs	r1, #1
 8006446:	4658      	mov	r0, fp
 8006448:	f000 fbee 	bl	8006c28 <__i2b>
 800644c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800644e:	4604      	mov	r4, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 81cf 	beq.w	80067f4 <_dtoa_r+0xb3c>
 8006456:	461a      	mov	r2, r3
 8006458:	4601      	mov	r1, r0
 800645a:	4658      	mov	r0, fp
 800645c:	f000 fca4 	bl	8006da8 <__pow5mult>
 8006460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006462:	2b01      	cmp	r3, #1
 8006464:	4604      	mov	r4, r0
 8006466:	f300 8095 	bgt.w	8006594 <_dtoa_r+0x8dc>
 800646a:	9b02      	ldr	r3, [sp, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f040 8087 	bne.w	8006580 <_dtoa_r+0x8c8>
 8006472:	9b03      	ldr	r3, [sp, #12]
 8006474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006478:	2b00      	cmp	r3, #0
 800647a:	f040 8089 	bne.w	8006590 <_dtoa_r+0x8d8>
 800647e:	9b03      	ldr	r3, [sp, #12]
 8006480:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006484:	0d1b      	lsrs	r3, r3, #20
 8006486:	051b      	lsls	r3, r3, #20
 8006488:	b12b      	cbz	r3, 8006496 <_dtoa_r+0x7de>
 800648a:	9b08      	ldr	r3, [sp, #32]
 800648c:	3301      	adds	r3, #1
 800648e:	9308      	str	r3, [sp, #32]
 8006490:	f108 0801 	add.w	r8, r8, #1
 8006494:	2301      	movs	r3, #1
 8006496:	930a      	str	r3, [sp, #40]	@ 0x28
 8006498:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 81b0 	beq.w	8006800 <_dtoa_r+0xb48>
 80064a0:	6923      	ldr	r3, [r4, #16]
 80064a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80064a6:	6918      	ldr	r0, [r3, #16]
 80064a8:	f000 fb72 	bl	8006b90 <__hi0bits>
 80064ac:	f1c0 0020 	rsb	r0, r0, #32
 80064b0:	9b08      	ldr	r3, [sp, #32]
 80064b2:	4418      	add	r0, r3
 80064b4:	f010 001f 	ands.w	r0, r0, #31
 80064b8:	d077      	beq.n	80065aa <_dtoa_r+0x8f2>
 80064ba:	f1c0 0320 	rsb	r3, r0, #32
 80064be:	2b04      	cmp	r3, #4
 80064c0:	dd6b      	ble.n	800659a <_dtoa_r+0x8e2>
 80064c2:	9b08      	ldr	r3, [sp, #32]
 80064c4:	f1c0 001c 	rsb	r0, r0, #28
 80064c8:	4403      	add	r3, r0
 80064ca:	4480      	add	r8, r0
 80064cc:	4406      	add	r6, r0
 80064ce:	9308      	str	r3, [sp, #32]
 80064d0:	f1b8 0f00 	cmp.w	r8, #0
 80064d4:	dd05      	ble.n	80064e2 <_dtoa_r+0x82a>
 80064d6:	4649      	mov	r1, r9
 80064d8:	4642      	mov	r2, r8
 80064da:	4658      	mov	r0, fp
 80064dc:	f000 fcbe 	bl	8006e5c <__lshift>
 80064e0:	4681      	mov	r9, r0
 80064e2:	9b08      	ldr	r3, [sp, #32]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	dd05      	ble.n	80064f4 <_dtoa_r+0x83c>
 80064e8:	4621      	mov	r1, r4
 80064ea:	461a      	mov	r2, r3
 80064ec:	4658      	mov	r0, fp
 80064ee:	f000 fcb5 	bl	8006e5c <__lshift>
 80064f2:	4604      	mov	r4, r0
 80064f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d059      	beq.n	80065ae <_dtoa_r+0x8f6>
 80064fa:	4621      	mov	r1, r4
 80064fc:	4648      	mov	r0, r9
 80064fe:	f000 fd19 	bl	8006f34 <__mcmp>
 8006502:	2800      	cmp	r0, #0
 8006504:	da53      	bge.n	80065ae <_dtoa_r+0x8f6>
 8006506:	1e7b      	subs	r3, r7, #1
 8006508:	9304      	str	r3, [sp, #16]
 800650a:	4649      	mov	r1, r9
 800650c:	2300      	movs	r3, #0
 800650e:	220a      	movs	r2, #10
 8006510:	4658      	mov	r0, fp
 8006512:	f000 faf7 	bl	8006b04 <__multadd>
 8006516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006518:	4681      	mov	r9, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8172 	beq.w	8006804 <_dtoa_r+0xb4c>
 8006520:	2300      	movs	r3, #0
 8006522:	4629      	mov	r1, r5
 8006524:	220a      	movs	r2, #10
 8006526:	4658      	mov	r0, fp
 8006528:	f000 faec 	bl	8006b04 <__multadd>
 800652c:	9b00      	ldr	r3, [sp, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	4605      	mov	r5, r0
 8006532:	dc67      	bgt.n	8006604 <_dtoa_r+0x94c>
 8006534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006536:	2b02      	cmp	r3, #2
 8006538:	dc41      	bgt.n	80065be <_dtoa_r+0x906>
 800653a:	e063      	b.n	8006604 <_dtoa_r+0x94c>
 800653c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800653e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006542:	e746      	b.n	80063d2 <_dtoa_r+0x71a>
 8006544:	9b07      	ldr	r3, [sp, #28]
 8006546:	1e5c      	subs	r4, r3, #1
 8006548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800654a:	42a3      	cmp	r3, r4
 800654c:	bfbf      	itttt	lt
 800654e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006550:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006552:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006554:	1ae3      	sublt	r3, r4, r3
 8006556:	bfb4      	ite	lt
 8006558:	18d2      	addlt	r2, r2, r3
 800655a:	1b1c      	subge	r4, r3, r4
 800655c:	9b07      	ldr	r3, [sp, #28]
 800655e:	bfbc      	itt	lt
 8006560:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006562:	2400      	movlt	r4, #0
 8006564:	2b00      	cmp	r3, #0
 8006566:	bfb5      	itete	lt
 8006568:	eba8 0603 	sublt.w	r6, r8, r3
 800656c:	9b07      	ldrge	r3, [sp, #28]
 800656e:	2300      	movlt	r3, #0
 8006570:	4646      	movge	r6, r8
 8006572:	e730      	b.n	80063d6 <_dtoa_r+0x71e>
 8006574:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006576:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006578:	4646      	mov	r6, r8
 800657a:	e735      	b.n	80063e8 <_dtoa_r+0x730>
 800657c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800657e:	e75c      	b.n	800643a <_dtoa_r+0x782>
 8006580:	2300      	movs	r3, #0
 8006582:	e788      	b.n	8006496 <_dtoa_r+0x7de>
 8006584:	3fe00000 	.word	0x3fe00000
 8006588:	40240000 	.word	0x40240000
 800658c:	40140000 	.word	0x40140000
 8006590:	9b02      	ldr	r3, [sp, #8]
 8006592:	e780      	b.n	8006496 <_dtoa_r+0x7de>
 8006594:	2300      	movs	r3, #0
 8006596:	930a      	str	r3, [sp, #40]	@ 0x28
 8006598:	e782      	b.n	80064a0 <_dtoa_r+0x7e8>
 800659a:	d099      	beq.n	80064d0 <_dtoa_r+0x818>
 800659c:	9a08      	ldr	r2, [sp, #32]
 800659e:	331c      	adds	r3, #28
 80065a0:	441a      	add	r2, r3
 80065a2:	4498      	add	r8, r3
 80065a4:	441e      	add	r6, r3
 80065a6:	9208      	str	r2, [sp, #32]
 80065a8:	e792      	b.n	80064d0 <_dtoa_r+0x818>
 80065aa:	4603      	mov	r3, r0
 80065ac:	e7f6      	b.n	800659c <_dtoa_r+0x8e4>
 80065ae:	9b07      	ldr	r3, [sp, #28]
 80065b0:	9704      	str	r7, [sp, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	dc20      	bgt.n	80065f8 <_dtoa_r+0x940>
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	dd1e      	ble.n	80065fc <_dtoa_r+0x944>
 80065be:	9b00      	ldr	r3, [sp, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f47f aec0 	bne.w	8006346 <_dtoa_r+0x68e>
 80065c6:	4621      	mov	r1, r4
 80065c8:	2205      	movs	r2, #5
 80065ca:	4658      	mov	r0, fp
 80065cc:	f000 fa9a 	bl	8006b04 <__multadd>
 80065d0:	4601      	mov	r1, r0
 80065d2:	4604      	mov	r4, r0
 80065d4:	4648      	mov	r0, r9
 80065d6:	f000 fcad 	bl	8006f34 <__mcmp>
 80065da:	2800      	cmp	r0, #0
 80065dc:	f77f aeb3 	ble.w	8006346 <_dtoa_r+0x68e>
 80065e0:	4656      	mov	r6, sl
 80065e2:	2331      	movs	r3, #49	@ 0x31
 80065e4:	f806 3b01 	strb.w	r3, [r6], #1
 80065e8:	9b04      	ldr	r3, [sp, #16]
 80065ea:	3301      	adds	r3, #1
 80065ec:	9304      	str	r3, [sp, #16]
 80065ee:	e6ae      	b.n	800634e <_dtoa_r+0x696>
 80065f0:	9c07      	ldr	r4, [sp, #28]
 80065f2:	9704      	str	r7, [sp, #16]
 80065f4:	4625      	mov	r5, r4
 80065f6:	e7f3      	b.n	80065e0 <_dtoa_r+0x928>
 80065f8:	9b07      	ldr	r3, [sp, #28]
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 8104 	beq.w	800680c <_dtoa_r+0xb54>
 8006604:	2e00      	cmp	r6, #0
 8006606:	dd05      	ble.n	8006614 <_dtoa_r+0x95c>
 8006608:	4629      	mov	r1, r5
 800660a:	4632      	mov	r2, r6
 800660c:	4658      	mov	r0, fp
 800660e:	f000 fc25 	bl	8006e5c <__lshift>
 8006612:	4605      	mov	r5, r0
 8006614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006616:	2b00      	cmp	r3, #0
 8006618:	d05a      	beq.n	80066d0 <_dtoa_r+0xa18>
 800661a:	6869      	ldr	r1, [r5, #4]
 800661c:	4658      	mov	r0, fp
 800661e:	f000 fa0f 	bl	8006a40 <_Balloc>
 8006622:	4606      	mov	r6, r0
 8006624:	b928      	cbnz	r0, 8006632 <_dtoa_r+0x97a>
 8006626:	4b84      	ldr	r3, [pc, #528]	@ (8006838 <_dtoa_r+0xb80>)
 8006628:	4602      	mov	r2, r0
 800662a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800662e:	f7ff bb5a 	b.w	8005ce6 <_dtoa_r+0x2e>
 8006632:	692a      	ldr	r2, [r5, #16]
 8006634:	3202      	adds	r2, #2
 8006636:	0092      	lsls	r2, r2, #2
 8006638:	f105 010c 	add.w	r1, r5, #12
 800663c:	300c      	adds	r0, #12
 800663e:	f000 fe3d 	bl	80072bc <memcpy>
 8006642:	2201      	movs	r2, #1
 8006644:	4631      	mov	r1, r6
 8006646:	4658      	mov	r0, fp
 8006648:	f000 fc08 	bl	8006e5c <__lshift>
 800664c:	f10a 0301 	add.w	r3, sl, #1
 8006650:	9307      	str	r3, [sp, #28]
 8006652:	9b00      	ldr	r3, [sp, #0]
 8006654:	4453      	add	r3, sl
 8006656:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006658:	9b02      	ldr	r3, [sp, #8]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	462f      	mov	r7, r5
 8006660:	930a      	str	r3, [sp, #40]	@ 0x28
 8006662:	4605      	mov	r5, r0
 8006664:	9b07      	ldr	r3, [sp, #28]
 8006666:	4621      	mov	r1, r4
 8006668:	3b01      	subs	r3, #1
 800666a:	4648      	mov	r0, r9
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	f7ff fa98 	bl	8005ba2 <quorem>
 8006672:	4639      	mov	r1, r7
 8006674:	9002      	str	r0, [sp, #8]
 8006676:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800667a:	4648      	mov	r0, r9
 800667c:	f000 fc5a 	bl	8006f34 <__mcmp>
 8006680:	462a      	mov	r2, r5
 8006682:	9008      	str	r0, [sp, #32]
 8006684:	4621      	mov	r1, r4
 8006686:	4658      	mov	r0, fp
 8006688:	f000 fc70 	bl	8006f6c <__mdiff>
 800668c:	68c2      	ldr	r2, [r0, #12]
 800668e:	4606      	mov	r6, r0
 8006690:	bb02      	cbnz	r2, 80066d4 <_dtoa_r+0xa1c>
 8006692:	4601      	mov	r1, r0
 8006694:	4648      	mov	r0, r9
 8006696:	f000 fc4d 	bl	8006f34 <__mcmp>
 800669a:	4602      	mov	r2, r0
 800669c:	4631      	mov	r1, r6
 800669e:	4658      	mov	r0, fp
 80066a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80066a2:	f000 fa0d 	bl	8006ac0 <_Bfree>
 80066a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066aa:	9e07      	ldr	r6, [sp, #28]
 80066ac:	ea43 0102 	orr.w	r1, r3, r2
 80066b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066b2:	4319      	orrs	r1, r3
 80066b4:	d110      	bne.n	80066d8 <_dtoa_r+0xa20>
 80066b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066ba:	d029      	beq.n	8006710 <_dtoa_r+0xa58>
 80066bc:	9b08      	ldr	r3, [sp, #32]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	dd02      	ble.n	80066c8 <_dtoa_r+0xa10>
 80066c2:	9b02      	ldr	r3, [sp, #8]
 80066c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80066c8:	9b00      	ldr	r3, [sp, #0]
 80066ca:	f883 8000 	strb.w	r8, [r3]
 80066ce:	e63f      	b.n	8006350 <_dtoa_r+0x698>
 80066d0:	4628      	mov	r0, r5
 80066d2:	e7bb      	b.n	800664c <_dtoa_r+0x994>
 80066d4:	2201      	movs	r2, #1
 80066d6:	e7e1      	b.n	800669c <_dtoa_r+0x9e4>
 80066d8:	9b08      	ldr	r3, [sp, #32]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	db04      	blt.n	80066e8 <_dtoa_r+0xa30>
 80066de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066e0:	430b      	orrs	r3, r1
 80066e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80066e4:	430b      	orrs	r3, r1
 80066e6:	d120      	bne.n	800672a <_dtoa_r+0xa72>
 80066e8:	2a00      	cmp	r2, #0
 80066ea:	dded      	ble.n	80066c8 <_dtoa_r+0xa10>
 80066ec:	4649      	mov	r1, r9
 80066ee:	2201      	movs	r2, #1
 80066f0:	4658      	mov	r0, fp
 80066f2:	f000 fbb3 	bl	8006e5c <__lshift>
 80066f6:	4621      	mov	r1, r4
 80066f8:	4681      	mov	r9, r0
 80066fa:	f000 fc1b 	bl	8006f34 <__mcmp>
 80066fe:	2800      	cmp	r0, #0
 8006700:	dc03      	bgt.n	800670a <_dtoa_r+0xa52>
 8006702:	d1e1      	bne.n	80066c8 <_dtoa_r+0xa10>
 8006704:	f018 0f01 	tst.w	r8, #1
 8006708:	d0de      	beq.n	80066c8 <_dtoa_r+0xa10>
 800670a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800670e:	d1d8      	bne.n	80066c2 <_dtoa_r+0xa0a>
 8006710:	9a00      	ldr	r2, [sp, #0]
 8006712:	2339      	movs	r3, #57	@ 0x39
 8006714:	7013      	strb	r3, [r2, #0]
 8006716:	4633      	mov	r3, r6
 8006718:	461e      	mov	r6, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006720:	2a39      	cmp	r2, #57	@ 0x39
 8006722:	d052      	beq.n	80067ca <_dtoa_r+0xb12>
 8006724:	3201      	adds	r2, #1
 8006726:	701a      	strb	r2, [r3, #0]
 8006728:	e612      	b.n	8006350 <_dtoa_r+0x698>
 800672a:	2a00      	cmp	r2, #0
 800672c:	dd07      	ble.n	800673e <_dtoa_r+0xa86>
 800672e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006732:	d0ed      	beq.n	8006710 <_dtoa_r+0xa58>
 8006734:	9a00      	ldr	r2, [sp, #0]
 8006736:	f108 0301 	add.w	r3, r8, #1
 800673a:	7013      	strb	r3, [r2, #0]
 800673c:	e608      	b.n	8006350 <_dtoa_r+0x698>
 800673e:	9b07      	ldr	r3, [sp, #28]
 8006740:	9a07      	ldr	r2, [sp, #28]
 8006742:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006748:	4293      	cmp	r3, r2
 800674a:	d028      	beq.n	800679e <_dtoa_r+0xae6>
 800674c:	4649      	mov	r1, r9
 800674e:	2300      	movs	r3, #0
 8006750:	220a      	movs	r2, #10
 8006752:	4658      	mov	r0, fp
 8006754:	f000 f9d6 	bl	8006b04 <__multadd>
 8006758:	42af      	cmp	r7, r5
 800675a:	4681      	mov	r9, r0
 800675c:	f04f 0300 	mov.w	r3, #0
 8006760:	f04f 020a 	mov.w	r2, #10
 8006764:	4639      	mov	r1, r7
 8006766:	4658      	mov	r0, fp
 8006768:	d107      	bne.n	800677a <_dtoa_r+0xac2>
 800676a:	f000 f9cb 	bl	8006b04 <__multadd>
 800676e:	4607      	mov	r7, r0
 8006770:	4605      	mov	r5, r0
 8006772:	9b07      	ldr	r3, [sp, #28]
 8006774:	3301      	adds	r3, #1
 8006776:	9307      	str	r3, [sp, #28]
 8006778:	e774      	b.n	8006664 <_dtoa_r+0x9ac>
 800677a:	f000 f9c3 	bl	8006b04 <__multadd>
 800677e:	4629      	mov	r1, r5
 8006780:	4607      	mov	r7, r0
 8006782:	2300      	movs	r3, #0
 8006784:	220a      	movs	r2, #10
 8006786:	4658      	mov	r0, fp
 8006788:	f000 f9bc 	bl	8006b04 <__multadd>
 800678c:	4605      	mov	r5, r0
 800678e:	e7f0      	b.n	8006772 <_dtoa_r+0xaba>
 8006790:	9b00      	ldr	r3, [sp, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	bfcc      	ite	gt
 8006796:	461e      	movgt	r6, r3
 8006798:	2601      	movle	r6, #1
 800679a:	4456      	add	r6, sl
 800679c:	2700      	movs	r7, #0
 800679e:	4649      	mov	r1, r9
 80067a0:	2201      	movs	r2, #1
 80067a2:	4658      	mov	r0, fp
 80067a4:	f000 fb5a 	bl	8006e5c <__lshift>
 80067a8:	4621      	mov	r1, r4
 80067aa:	4681      	mov	r9, r0
 80067ac:	f000 fbc2 	bl	8006f34 <__mcmp>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	dcb0      	bgt.n	8006716 <_dtoa_r+0xa5e>
 80067b4:	d102      	bne.n	80067bc <_dtoa_r+0xb04>
 80067b6:	f018 0f01 	tst.w	r8, #1
 80067ba:	d1ac      	bne.n	8006716 <_dtoa_r+0xa5e>
 80067bc:	4633      	mov	r3, r6
 80067be:	461e      	mov	r6, r3
 80067c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067c4:	2a30      	cmp	r2, #48	@ 0x30
 80067c6:	d0fa      	beq.n	80067be <_dtoa_r+0xb06>
 80067c8:	e5c2      	b.n	8006350 <_dtoa_r+0x698>
 80067ca:	459a      	cmp	sl, r3
 80067cc:	d1a4      	bne.n	8006718 <_dtoa_r+0xa60>
 80067ce:	9b04      	ldr	r3, [sp, #16]
 80067d0:	3301      	adds	r3, #1
 80067d2:	9304      	str	r3, [sp, #16]
 80067d4:	2331      	movs	r3, #49	@ 0x31
 80067d6:	f88a 3000 	strb.w	r3, [sl]
 80067da:	e5b9      	b.n	8006350 <_dtoa_r+0x698>
 80067dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800683c <_dtoa_r+0xb84>
 80067e2:	b11b      	cbz	r3, 80067ec <_dtoa_r+0xb34>
 80067e4:	f10a 0308 	add.w	r3, sl, #8
 80067e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	4650      	mov	r0, sl
 80067ee:	b019      	add	sp, #100	@ 0x64
 80067f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	f77f ae37 	ble.w	800646a <_dtoa_r+0x7b2>
 80067fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006800:	2001      	movs	r0, #1
 8006802:	e655      	b.n	80064b0 <_dtoa_r+0x7f8>
 8006804:	9b00      	ldr	r3, [sp, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f77f aed6 	ble.w	80065b8 <_dtoa_r+0x900>
 800680c:	4656      	mov	r6, sl
 800680e:	4621      	mov	r1, r4
 8006810:	4648      	mov	r0, r9
 8006812:	f7ff f9c6 	bl	8005ba2 <quorem>
 8006816:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800681a:	f806 8b01 	strb.w	r8, [r6], #1
 800681e:	9b00      	ldr	r3, [sp, #0]
 8006820:	eba6 020a 	sub.w	r2, r6, sl
 8006824:	4293      	cmp	r3, r2
 8006826:	ddb3      	ble.n	8006790 <_dtoa_r+0xad8>
 8006828:	4649      	mov	r1, r9
 800682a:	2300      	movs	r3, #0
 800682c:	220a      	movs	r2, #10
 800682e:	4658      	mov	r0, fp
 8006830:	f000 f968 	bl	8006b04 <__multadd>
 8006834:	4681      	mov	r9, r0
 8006836:	e7ea      	b.n	800680e <_dtoa_r+0xb56>
 8006838:	08007a20 	.word	0x08007a20
 800683c:	080079a4 	.word	0x080079a4

08006840 <_free_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4605      	mov	r5, r0
 8006844:	2900      	cmp	r1, #0
 8006846:	d041      	beq.n	80068cc <_free_r+0x8c>
 8006848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800684c:	1f0c      	subs	r4, r1, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	bfb8      	it	lt
 8006852:	18e4      	addlt	r4, r4, r3
 8006854:	f000 f8e8 	bl	8006a28 <__malloc_lock>
 8006858:	4a1d      	ldr	r2, [pc, #116]	@ (80068d0 <_free_r+0x90>)
 800685a:	6813      	ldr	r3, [r2, #0]
 800685c:	b933      	cbnz	r3, 800686c <_free_r+0x2c>
 800685e:	6063      	str	r3, [r4, #4]
 8006860:	6014      	str	r4, [r2, #0]
 8006862:	4628      	mov	r0, r5
 8006864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006868:	f000 b8e4 	b.w	8006a34 <__malloc_unlock>
 800686c:	42a3      	cmp	r3, r4
 800686e:	d908      	bls.n	8006882 <_free_r+0x42>
 8006870:	6820      	ldr	r0, [r4, #0]
 8006872:	1821      	adds	r1, r4, r0
 8006874:	428b      	cmp	r3, r1
 8006876:	bf01      	itttt	eq
 8006878:	6819      	ldreq	r1, [r3, #0]
 800687a:	685b      	ldreq	r3, [r3, #4]
 800687c:	1809      	addeq	r1, r1, r0
 800687e:	6021      	streq	r1, [r4, #0]
 8006880:	e7ed      	b.n	800685e <_free_r+0x1e>
 8006882:	461a      	mov	r2, r3
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	b10b      	cbz	r3, 800688c <_free_r+0x4c>
 8006888:	42a3      	cmp	r3, r4
 800688a:	d9fa      	bls.n	8006882 <_free_r+0x42>
 800688c:	6811      	ldr	r1, [r2, #0]
 800688e:	1850      	adds	r0, r2, r1
 8006890:	42a0      	cmp	r0, r4
 8006892:	d10b      	bne.n	80068ac <_free_r+0x6c>
 8006894:	6820      	ldr	r0, [r4, #0]
 8006896:	4401      	add	r1, r0
 8006898:	1850      	adds	r0, r2, r1
 800689a:	4283      	cmp	r3, r0
 800689c:	6011      	str	r1, [r2, #0]
 800689e:	d1e0      	bne.n	8006862 <_free_r+0x22>
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	6053      	str	r3, [r2, #4]
 80068a6:	4408      	add	r0, r1
 80068a8:	6010      	str	r0, [r2, #0]
 80068aa:	e7da      	b.n	8006862 <_free_r+0x22>
 80068ac:	d902      	bls.n	80068b4 <_free_r+0x74>
 80068ae:	230c      	movs	r3, #12
 80068b0:	602b      	str	r3, [r5, #0]
 80068b2:	e7d6      	b.n	8006862 <_free_r+0x22>
 80068b4:	6820      	ldr	r0, [r4, #0]
 80068b6:	1821      	adds	r1, r4, r0
 80068b8:	428b      	cmp	r3, r1
 80068ba:	bf04      	itt	eq
 80068bc:	6819      	ldreq	r1, [r3, #0]
 80068be:	685b      	ldreq	r3, [r3, #4]
 80068c0:	6063      	str	r3, [r4, #4]
 80068c2:	bf04      	itt	eq
 80068c4:	1809      	addeq	r1, r1, r0
 80068c6:	6021      	streq	r1, [r4, #0]
 80068c8:	6054      	str	r4, [r2, #4]
 80068ca:	e7ca      	b.n	8006862 <_free_r+0x22>
 80068cc:	bd38      	pop	{r3, r4, r5, pc}
 80068ce:	bf00      	nop
 80068d0:	20040430 	.word	0x20040430

080068d4 <malloc>:
 80068d4:	4b02      	ldr	r3, [pc, #8]	@ (80068e0 <malloc+0xc>)
 80068d6:	4601      	mov	r1, r0
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	f000 b825 	b.w	8006928 <_malloc_r>
 80068de:	bf00      	nop
 80068e0:	20040024 	.word	0x20040024

080068e4 <sbrk_aligned>:
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	4e0f      	ldr	r6, [pc, #60]	@ (8006924 <sbrk_aligned+0x40>)
 80068e8:	460c      	mov	r4, r1
 80068ea:	6831      	ldr	r1, [r6, #0]
 80068ec:	4605      	mov	r5, r0
 80068ee:	b911      	cbnz	r1, 80068f6 <sbrk_aligned+0x12>
 80068f0:	f000 fcd4 	bl	800729c <_sbrk_r>
 80068f4:	6030      	str	r0, [r6, #0]
 80068f6:	4621      	mov	r1, r4
 80068f8:	4628      	mov	r0, r5
 80068fa:	f000 fccf 	bl	800729c <_sbrk_r>
 80068fe:	1c43      	adds	r3, r0, #1
 8006900:	d103      	bne.n	800690a <sbrk_aligned+0x26>
 8006902:	f04f 34ff 	mov.w	r4, #4294967295
 8006906:	4620      	mov	r0, r4
 8006908:	bd70      	pop	{r4, r5, r6, pc}
 800690a:	1cc4      	adds	r4, r0, #3
 800690c:	f024 0403 	bic.w	r4, r4, #3
 8006910:	42a0      	cmp	r0, r4
 8006912:	d0f8      	beq.n	8006906 <sbrk_aligned+0x22>
 8006914:	1a21      	subs	r1, r4, r0
 8006916:	4628      	mov	r0, r5
 8006918:	f000 fcc0 	bl	800729c <_sbrk_r>
 800691c:	3001      	adds	r0, #1
 800691e:	d1f2      	bne.n	8006906 <sbrk_aligned+0x22>
 8006920:	e7ef      	b.n	8006902 <sbrk_aligned+0x1e>
 8006922:	bf00      	nop
 8006924:	2004042c 	.word	0x2004042c

08006928 <_malloc_r>:
 8006928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800692c:	1ccd      	adds	r5, r1, #3
 800692e:	f025 0503 	bic.w	r5, r5, #3
 8006932:	3508      	adds	r5, #8
 8006934:	2d0c      	cmp	r5, #12
 8006936:	bf38      	it	cc
 8006938:	250c      	movcc	r5, #12
 800693a:	2d00      	cmp	r5, #0
 800693c:	4606      	mov	r6, r0
 800693e:	db01      	blt.n	8006944 <_malloc_r+0x1c>
 8006940:	42a9      	cmp	r1, r5
 8006942:	d904      	bls.n	800694e <_malloc_r+0x26>
 8006944:	230c      	movs	r3, #12
 8006946:	6033      	str	r3, [r6, #0]
 8006948:	2000      	movs	r0, #0
 800694a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800694e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a24 <_malloc_r+0xfc>
 8006952:	f000 f869 	bl	8006a28 <__malloc_lock>
 8006956:	f8d8 3000 	ldr.w	r3, [r8]
 800695a:	461c      	mov	r4, r3
 800695c:	bb44      	cbnz	r4, 80069b0 <_malloc_r+0x88>
 800695e:	4629      	mov	r1, r5
 8006960:	4630      	mov	r0, r6
 8006962:	f7ff ffbf 	bl	80068e4 <sbrk_aligned>
 8006966:	1c43      	adds	r3, r0, #1
 8006968:	4604      	mov	r4, r0
 800696a:	d158      	bne.n	8006a1e <_malloc_r+0xf6>
 800696c:	f8d8 4000 	ldr.w	r4, [r8]
 8006970:	4627      	mov	r7, r4
 8006972:	2f00      	cmp	r7, #0
 8006974:	d143      	bne.n	80069fe <_malloc_r+0xd6>
 8006976:	2c00      	cmp	r4, #0
 8006978:	d04b      	beq.n	8006a12 <_malloc_r+0xea>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	4639      	mov	r1, r7
 800697e:	4630      	mov	r0, r6
 8006980:	eb04 0903 	add.w	r9, r4, r3
 8006984:	f000 fc8a 	bl	800729c <_sbrk_r>
 8006988:	4581      	cmp	r9, r0
 800698a:	d142      	bne.n	8006a12 <_malloc_r+0xea>
 800698c:	6821      	ldr	r1, [r4, #0]
 800698e:	1a6d      	subs	r5, r5, r1
 8006990:	4629      	mov	r1, r5
 8006992:	4630      	mov	r0, r6
 8006994:	f7ff ffa6 	bl	80068e4 <sbrk_aligned>
 8006998:	3001      	adds	r0, #1
 800699a:	d03a      	beq.n	8006a12 <_malloc_r+0xea>
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	442b      	add	r3, r5
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	f8d8 3000 	ldr.w	r3, [r8]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	bb62      	cbnz	r2, 8006a04 <_malloc_r+0xdc>
 80069aa:	f8c8 7000 	str.w	r7, [r8]
 80069ae:	e00f      	b.n	80069d0 <_malloc_r+0xa8>
 80069b0:	6822      	ldr	r2, [r4, #0]
 80069b2:	1b52      	subs	r2, r2, r5
 80069b4:	d420      	bmi.n	80069f8 <_malloc_r+0xd0>
 80069b6:	2a0b      	cmp	r2, #11
 80069b8:	d917      	bls.n	80069ea <_malloc_r+0xc2>
 80069ba:	1961      	adds	r1, r4, r5
 80069bc:	42a3      	cmp	r3, r4
 80069be:	6025      	str	r5, [r4, #0]
 80069c0:	bf18      	it	ne
 80069c2:	6059      	strne	r1, [r3, #4]
 80069c4:	6863      	ldr	r3, [r4, #4]
 80069c6:	bf08      	it	eq
 80069c8:	f8c8 1000 	streq.w	r1, [r8]
 80069cc:	5162      	str	r2, [r4, r5]
 80069ce:	604b      	str	r3, [r1, #4]
 80069d0:	4630      	mov	r0, r6
 80069d2:	f000 f82f 	bl	8006a34 <__malloc_unlock>
 80069d6:	f104 000b 	add.w	r0, r4, #11
 80069da:	1d23      	adds	r3, r4, #4
 80069dc:	f020 0007 	bic.w	r0, r0, #7
 80069e0:	1ac2      	subs	r2, r0, r3
 80069e2:	bf1c      	itt	ne
 80069e4:	1a1b      	subne	r3, r3, r0
 80069e6:	50a3      	strne	r3, [r4, r2]
 80069e8:	e7af      	b.n	800694a <_malloc_r+0x22>
 80069ea:	6862      	ldr	r2, [r4, #4]
 80069ec:	42a3      	cmp	r3, r4
 80069ee:	bf0c      	ite	eq
 80069f0:	f8c8 2000 	streq.w	r2, [r8]
 80069f4:	605a      	strne	r2, [r3, #4]
 80069f6:	e7eb      	b.n	80069d0 <_malloc_r+0xa8>
 80069f8:	4623      	mov	r3, r4
 80069fa:	6864      	ldr	r4, [r4, #4]
 80069fc:	e7ae      	b.n	800695c <_malloc_r+0x34>
 80069fe:	463c      	mov	r4, r7
 8006a00:	687f      	ldr	r7, [r7, #4]
 8006a02:	e7b6      	b.n	8006972 <_malloc_r+0x4a>
 8006a04:	461a      	mov	r2, r3
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	42a3      	cmp	r3, r4
 8006a0a:	d1fb      	bne.n	8006a04 <_malloc_r+0xdc>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	6053      	str	r3, [r2, #4]
 8006a10:	e7de      	b.n	80069d0 <_malloc_r+0xa8>
 8006a12:	230c      	movs	r3, #12
 8006a14:	6033      	str	r3, [r6, #0]
 8006a16:	4630      	mov	r0, r6
 8006a18:	f000 f80c 	bl	8006a34 <__malloc_unlock>
 8006a1c:	e794      	b.n	8006948 <_malloc_r+0x20>
 8006a1e:	6005      	str	r5, [r0, #0]
 8006a20:	e7d6      	b.n	80069d0 <_malloc_r+0xa8>
 8006a22:	bf00      	nop
 8006a24:	20040430 	.word	0x20040430

08006a28 <__malloc_lock>:
 8006a28:	4801      	ldr	r0, [pc, #4]	@ (8006a30 <__malloc_lock+0x8>)
 8006a2a:	f7ff b8b8 	b.w	8005b9e <__retarget_lock_acquire_recursive>
 8006a2e:	bf00      	nop
 8006a30:	20040428 	.word	0x20040428

08006a34 <__malloc_unlock>:
 8006a34:	4801      	ldr	r0, [pc, #4]	@ (8006a3c <__malloc_unlock+0x8>)
 8006a36:	f7ff b8b3 	b.w	8005ba0 <__retarget_lock_release_recursive>
 8006a3a:	bf00      	nop
 8006a3c:	20040428 	.word	0x20040428

08006a40 <_Balloc>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	69c6      	ldr	r6, [r0, #28]
 8006a44:	4604      	mov	r4, r0
 8006a46:	460d      	mov	r5, r1
 8006a48:	b976      	cbnz	r6, 8006a68 <_Balloc+0x28>
 8006a4a:	2010      	movs	r0, #16
 8006a4c:	f7ff ff42 	bl	80068d4 <malloc>
 8006a50:	4602      	mov	r2, r0
 8006a52:	61e0      	str	r0, [r4, #28]
 8006a54:	b920      	cbnz	r0, 8006a60 <_Balloc+0x20>
 8006a56:	4b18      	ldr	r3, [pc, #96]	@ (8006ab8 <_Balloc+0x78>)
 8006a58:	4818      	ldr	r0, [pc, #96]	@ (8006abc <_Balloc+0x7c>)
 8006a5a:	216b      	movs	r1, #107	@ 0x6b
 8006a5c:	f000 fc3c 	bl	80072d8 <__assert_func>
 8006a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a64:	6006      	str	r6, [r0, #0]
 8006a66:	60c6      	str	r6, [r0, #12]
 8006a68:	69e6      	ldr	r6, [r4, #28]
 8006a6a:	68f3      	ldr	r3, [r6, #12]
 8006a6c:	b183      	cbz	r3, 8006a90 <_Balloc+0x50>
 8006a6e:	69e3      	ldr	r3, [r4, #28]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a76:	b9b8      	cbnz	r0, 8006aa8 <_Balloc+0x68>
 8006a78:	2101      	movs	r1, #1
 8006a7a:	fa01 f605 	lsl.w	r6, r1, r5
 8006a7e:	1d72      	adds	r2, r6, #5
 8006a80:	0092      	lsls	r2, r2, #2
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 fc46 	bl	8007314 <_calloc_r>
 8006a88:	b160      	cbz	r0, 8006aa4 <_Balloc+0x64>
 8006a8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a8e:	e00e      	b.n	8006aae <_Balloc+0x6e>
 8006a90:	2221      	movs	r2, #33	@ 0x21
 8006a92:	2104      	movs	r1, #4
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 fc3d 	bl	8007314 <_calloc_r>
 8006a9a:	69e3      	ldr	r3, [r4, #28]
 8006a9c:	60f0      	str	r0, [r6, #12]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e4      	bne.n	8006a6e <_Balloc+0x2e>
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
 8006aa8:	6802      	ldr	r2, [r0, #0]
 8006aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ab4:	e7f7      	b.n	8006aa6 <_Balloc+0x66>
 8006ab6:	bf00      	nop
 8006ab8:	080079b1 	.word	0x080079b1
 8006abc:	08007a31 	.word	0x08007a31

08006ac0 <_Bfree>:
 8006ac0:	b570      	push	{r4, r5, r6, lr}
 8006ac2:	69c6      	ldr	r6, [r0, #28]
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	b976      	cbnz	r6, 8006ae8 <_Bfree+0x28>
 8006aca:	2010      	movs	r0, #16
 8006acc:	f7ff ff02 	bl	80068d4 <malloc>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	61e8      	str	r0, [r5, #28]
 8006ad4:	b920      	cbnz	r0, 8006ae0 <_Bfree+0x20>
 8006ad6:	4b09      	ldr	r3, [pc, #36]	@ (8006afc <_Bfree+0x3c>)
 8006ad8:	4809      	ldr	r0, [pc, #36]	@ (8006b00 <_Bfree+0x40>)
 8006ada:	218f      	movs	r1, #143	@ 0x8f
 8006adc:	f000 fbfc 	bl	80072d8 <__assert_func>
 8006ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ae4:	6006      	str	r6, [r0, #0]
 8006ae6:	60c6      	str	r6, [r0, #12]
 8006ae8:	b13c      	cbz	r4, 8006afa <_Bfree+0x3a>
 8006aea:	69eb      	ldr	r3, [r5, #28]
 8006aec:	6862      	ldr	r2, [r4, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006af4:	6021      	str	r1, [r4, #0]
 8006af6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006afa:	bd70      	pop	{r4, r5, r6, pc}
 8006afc:	080079b1 	.word	0x080079b1
 8006b00:	08007a31 	.word	0x08007a31

08006b04 <__multadd>:
 8006b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b08:	690d      	ldr	r5, [r1, #16]
 8006b0a:	4607      	mov	r7, r0
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	461e      	mov	r6, r3
 8006b10:	f101 0c14 	add.w	ip, r1, #20
 8006b14:	2000      	movs	r0, #0
 8006b16:	f8dc 3000 	ldr.w	r3, [ip]
 8006b1a:	b299      	uxth	r1, r3
 8006b1c:	fb02 6101 	mla	r1, r2, r1, r6
 8006b20:	0c1e      	lsrs	r6, r3, #16
 8006b22:	0c0b      	lsrs	r3, r1, #16
 8006b24:	fb02 3306 	mla	r3, r2, r6, r3
 8006b28:	b289      	uxth	r1, r1
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b30:	4285      	cmp	r5, r0
 8006b32:	f84c 1b04 	str.w	r1, [ip], #4
 8006b36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b3a:	dcec      	bgt.n	8006b16 <__multadd+0x12>
 8006b3c:	b30e      	cbz	r6, 8006b82 <__multadd+0x7e>
 8006b3e:	68a3      	ldr	r3, [r4, #8]
 8006b40:	42ab      	cmp	r3, r5
 8006b42:	dc19      	bgt.n	8006b78 <__multadd+0x74>
 8006b44:	6861      	ldr	r1, [r4, #4]
 8006b46:	4638      	mov	r0, r7
 8006b48:	3101      	adds	r1, #1
 8006b4a:	f7ff ff79 	bl	8006a40 <_Balloc>
 8006b4e:	4680      	mov	r8, r0
 8006b50:	b928      	cbnz	r0, 8006b5e <__multadd+0x5a>
 8006b52:	4602      	mov	r2, r0
 8006b54:	4b0c      	ldr	r3, [pc, #48]	@ (8006b88 <__multadd+0x84>)
 8006b56:	480d      	ldr	r0, [pc, #52]	@ (8006b8c <__multadd+0x88>)
 8006b58:	21ba      	movs	r1, #186	@ 0xba
 8006b5a:	f000 fbbd 	bl	80072d8 <__assert_func>
 8006b5e:	6922      	ldr	r2, [r4, #16]
 8006b60:	3202      	adds	r2, #2
 8006b62:	f104 010c 	add.w	r1, r4, #12
 8006b66:	0092      	lsls	r2, r2, #2
 8006b68:	300c      	adds	r0, #12
 8006b6a:	f000 fba7 	bl	80072bc <memcpy>
 8006b6e:	4621      	mov	r1, r4
 8006b70:	4638      	mov	r0, r7
 8006b72:	f7ff ffa5 	bl	8006ac0 <_Bfree>
 8006b76:	4644      	mov	r4, r8
 8006b78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b7c:	3501      	adds	r5, #1
 8006b7e:	615e      	str	r6, [r3, #20]
 8006b80:	6125      	str	r5, [r4, #16]
 8006b82:	4620      	mov	r0, r4
 8006b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b88:	08007a20 	.word	0x08007a20
 8006b8c:	08007a31 	.word	0x08007a31

08006b90 <__hi0bits>:
 8006b90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b94:	4603      	mov	r3, r0
 8006b96:	bf36      	itet	cc
 8006b98:	0403      	lslcc	r3, r0, #16
 8006b9a:	2000      	movcs	r0, #0
 8006b9c:	2010      	movcc	r0, #16
 8006b9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ba2:	bf3c      	itt	cc
 8006ba4:	021b      	lslcc	r3, r3, #8
 8006ba6:	3008      	addcc	r0, #8
 8006ba8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bac:	bf3c      	itt	cc
 8006bae:	011b      	lslcc	r3, r3, #4
 8006bb0:	3004      	addcc	r0, #4
 8006bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb6:	bf3c      	itt	cc
 8006bb8:	009b      	lslcc	r3, r3, #2
 8006bba:	3002      	addcc	r0, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	db05      	blt.n	8006bcc <__hi0bits+0x3c>
 8006bc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006bc4:	f100 0001 	add.w	r0, r0, #1
 8006bc8:	bf08      	it	eq
 8006bca:	2020      	moveq	r0, #32
 8006bcc:	4770      	bx	lr

08006bce <__lo0bits>:
 8006bce:	6803      	ldr	r3, [r0, #0]
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	f013 0007 	ands.w	r0, r3, #7
 8006bd6:	d00b      	beq.n	8006bf0 <__lo0bits+0x22>
 8006bd8:	07d9      	lsls	r1, r3, #31
 8006bda:	d421      	bmi.n	8006c20 <__lo0bits+0x52>
 8006bdc:	0798      	lsls	r0, r3, #30
 8006bde:	bf49      	itett	mi
 8006be0:	085b      	lsrmi	r3, r3, #1
 8006be2:	089b      	lsrpl	r3, r3, #2
 8006be4:	2001      	movmi	r0, #1
 8006be6:	6013      	strmi	r3, [r2, #0]
 8006be8:	bf5c      	itt	pl
 8006bea:	6013      	strpl	r3, [r2, #0]
 8006bec:	2002      	movpl	r0, #2
 8006bee:	4770      	bx	lr
 8006bf0:	b299      	uxth	r1, r3
 8006bf2:	b909      	cbnz	r1, 8006bf8 <__lo0bits+0x2a>
 8006bf4:	0c1b      	lsrs	r3, r3, #16
 8006bf6:	2010      	movs	r0, #16
 8006bf8:	b2d9      	uxtb	r1, r3
 8006bfa:	b909      	cbnz	r1, 8006c00 <__lo0bits+0x32>
 8006bfc:	3008      	adds	r0, #8
 8006bfe:	0a1b      	lsrs	r3, r3, #8
 8006c00:	0719      	lsls	r1, r3, #28
 8006c02:	bf04      	itt	eq
 8006c04:	091b      	lsreq	r3, r3, #4
 8006c06:	3004      	addeq	r0, #4
 8006c08:	0799      	lsls	r1, r3, #30
 8006c0a:	bf04      	itt	eq
 8006c0c:	089b      	lsreq	r3, r3, #2
 8006c0e:	3002      	addeq	r0, #2
 8006c10:	07d9      	lsls	r1, r3, #31
 8006c12:	d403      	bmi.n	8006c1c <__lo0bits+0x4e>
 8006c14:	085b      	lsrs	r3, r3, #1
 8006c16:	f100 0001 	add.w	r0, r0, #1
 8006c1a:	d003      	beq.n	8006c24 <__lo0bits+0x56>
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	4770      	bx	lr
 8006c20:	2000      	movs	r0, #0
 8006c22:	4770      	bx	lr
 8006c24:	2020      	movs	r0, #32
 8006c26:	4770      	bx	lr

08006c28 <__i2b>:
 8006c28:	b510      	push	{r4, lr}
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	f7ff ff07 	bl	8006a40 <_Balloc>
 8006c32:	4602      	mov	r2, r0
 8006c34:	b928      	cbnz	r0, 8006c42 <__i2b+0x1a>
 8006c36:	4b05      	ldr	r3, [pc, #20]	@ (8006c4c <__i2b+0x24>)
 8006c38:	4805      	ldr	r0, [pc, #20]	@ (8006c50 <__i2b+0x28>)
 8006c3a:	f240 1145 	movw	r1, #325	@ 0x145
 8006c3e:	f000 fb4b 	bl	80072d8 <__assert_func>
 8006c42:	2301      	movs	r3, #1
 8006c44:	6144      	str	r4, [r0, #20]
 8006c46:	6103      	str	r3, [r0, #16]
 8006c48:	bd10      	pop	{r4, pc}
 8006c4a:	bf00      	nop
 8006c4c:	08007a20 	.word	0x08007a20
 8006c50:	08007a31 	.word	0x08007a31

08006c54 <__multiply>:
 8006c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c58:	4614      	mov	r4, r2
 8006c5a:	690a      	ldr	r2, [r1, #16]
 8006c5c:	6923      	ldr	r3, [r4, #16]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	bfa8      	it	ge
 8006c62:	4623      	movge	r3, r4
 8006c64:	460f      	mov	r7, r1
 8006c66:	bfa4      	itt	ge
 8006c68:	460c      	movge	r4, r1
 8006c6a:	461f      	movge	r7, r3
 8006c6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006c70:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006c74:	68a3      	ldr	r3, [r4, #8]
 8006c76:	6861      	ldr	r1, [r4, #4]
 8006c78:	eb0a 0609 	add.w	r6, sl, r9
 8006c7c:	42b3      	cmp	r3, r6
 8006c7e:	b085      	sub	sp, #20
 8006c80:	bfb8      	it	lt
 8006c82:	3101      	addlt	r1, #1
 8006c84:	f7ff fedc 	bl	8006a40 <_Balloc>
 8006c88:	b930      	cbnz	r0, 8006c98 <__multiply+0x44>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	4b44      	ldr	r3, [pc, #272]	@ (8006da0 <__multiply+0x14c>)
 8006c8e:	4845      	ldr	r0, [pc, #276]	@ (8006da4 <__multiply+0x150>)
 8006c90:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c94:	f000 fb20 	bl	80072d8 <__assert_func>
 8006c98:	f100 0514 	add.w	r5, r0, #20
 8006c9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ca0:	462b      	mov	r3, r5
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	4543      	cmp	r3, r8
 8006ca6:	d321      	bcc.n	8006cec <__multiply+0x98>
 8006ca8:	f107 0114 	add.w	r1, r7, #20
 8006cac:	f104 0214 	add.w	r2, r4, #20
 8006cb0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006cb4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006cb8:	9302      	str	r3, [sp, #8]
 8006cba:	1b13      	subs	r3, r2, r4
 8006cbc:	3b15      	subs	r3, #21
 8006cbe:	f023 0303 	bic.w	r3, r3, #3
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	f104 0715 	add.w	r7, r4, #21
 8006cc8:	42ba      	cmp	r2, r7
 8006cca:	bf38      	it	cc
 8006ccc:	2304      	movcc	r3, #4
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	9b02      	ldr	r3, [sp, #8]
 8006cd2:	9103      	str	r1, [sp, #12]
 8006cd4:	428b      	cmp	r3, r1
 8006cd6:	d80c      	bhi.n	8006cf2 <__multiply+0x9e>
 8006cd8:	2e00      	cmp	r6, #0
 8006cda:	dd03      	ble.n	8006ce4 <__multiply+0x90>
 8006cdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d05b      	beq.n	8006d9c <__multiply+0x148>
 8006ce4:	6106      	str	r6, [r0, #16]
 8006ce6:	b005      	add	sp, #20
 8006ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cec:	f843 2b04 	str.w	r2, [r3], #4
 8006cf0:	e7d8      	b.n	8006ca4 <__multiply+0x50>
 8006cf2:	f8b1 a000 	ldrh.w	sl, [r1]
 8006cf6:	f1ba 0f00 	cmp.w	sl, #0
 8006cfa:	d024      	beq.n	8006d46 <__multiply+0xf2>
 8006cfc:	f104 0e14 	add.w	lr, r4, #20
 8006d00:	46a9      	mov	r9, r5
 8006d02:	f04f 0c00 	mov.w	ip, #0
 8006d06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d0a:	f8d9 3000 	ldr.w	r3, [r9]
 8006d0e:	fa1f fb87 	uxth.w	fp, r7
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	fb0a 330b 	mla	r3, sl, fp, r3
 8006d18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006d1c:	f8d9 7000 	ldr.w	r7, [r9]
 8006d20:	4463      	add	r3, ip
 8006d22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006d26:	fb0a c70b 	mla	r7, sl, fp, ip
 8006d2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d34:	4572      	cmp	r2, lr
 8006d36:	f849 3b04 	str.w	r3, [r9], #4
 8006d3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006d3e:	d8e2      	bhi.n	8006d06 <__multiply+0xb2>
 8006d40:	9b01      	ldr	r3, [sp, #4]
 8006d42:	f845 c003 	str.w	ip, [r5, r3]
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d4c:	3104      	adds	r1, #4
 8006d4e:	f1b9 0f00 	cmp.w	r9, #0
 8006d52:	d021      	beq.n	8006d98 <__multiply+0x144>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	f104 0c14 	add.w	ip, r4, #20
 8006d5a:	46ae      	mov	lr, r5
 8006d5c:	f04f 0a00 	mov.w	sl, #0
 8006d60:	f8bc b000 	ldrh.w	fp, [ip]
 8006d64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006d68:	fb09 770b 	mla	r7, r9, fp, r7
 8006d6c:	4457      	add	r7, sl
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d74:	f84e 3b04 	str.w	r3, [lr], #4
 8006d78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d80:	f8be 3000 	ldrh.w	r3, [lr]
 8006d84:	fb09 330a 	mla	r3, r9, sl, r3
 8006d88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d8c:	4562      	cmp	r2, ip
 8006d8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d92:	d8e5      	bhi.n	8006d60 <__multiply+0x10c>
 8006d94:	9f01      	ldr	r7, [sp, #4]
 8006d96:	51eb      	str	r3, [r5, r7]
 8006d98:	3504      	adds	r5, #4
 8006d9a:	e799      	b.n	8006cd0 <__multiply+0x7c>
 8006d9c:	3e01      	subs	r6, #1
 8006d9e:	e79b      	b.n	8006cd8 <__multiply+0x84>
 8006da0:	08007a20 	.word	0x08007a20
 8006da4:	08007a31 	.word	0x08007a31

08006da8 <__pow5mult>:
 8006da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dac:	4615      	mov	r5, r2
 8006dae:	f012 0203 	ands.w	r2, r2, #3
 8006db2:	4607      	mov	r7, r0
 8006db4:	460e      	mov	r6, r1
 8006db6:	d007      	beq.n	8006dc8 <__pow5mult+0x20>
 8006db8:	4c25      	ldr	r4, [pc, #148]	@ (8006e50 <__pow5mult+0xa8>)
 8006dba:	3a01      	subs	r2, #1
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dc2:	f7ff fe9f 	bl	8006b04 <__multadd>
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	10ad      	asrs	r5, r5, #2
 8006dca:	d03d      	beq.n	8006e48 <__pow5mult+0xa0>
 8006dcc:	69fc      	ldr	r4, [r7, #28]
 8006dce:	b97c      	cbnz	r4, 8006df0 <__pow5mult+0x48>
 8006dd0:	2010      	movs	r0, #16
 8006dd2:	f7ff fd7f 	bl	80068d4 <malloc>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	61f8      	str	r0, [r7, #28]
 8006dda:	b928      	cbnz	r0, 8006de8 <__pow5mult+0x40>
 8006ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8006e54 <__pow5mult+0xac>)
 8006dde:	481e      	ldr	r0, [pc, #120]	@ (8006e58 <__pow5mult+0xb0>)
 8006de0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006de4:	f000 fa78 	bl	80072d8 <__assert_func>
 8006de8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dec:	6004      	str	r4, [r0, #0]
 8006dee:	60c4      	str	r4, [r0, #12]
 8006df0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006df4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006df8:	b94c      	cbnz	r4, 8006e0e <__pow5mult+0x66>
 8006dfa:	f240 2171 	movw	r1, #625	@ 0x271
 8006dfe:	4638      	mov	r0, r7
 8006e00:	f7ff ff12 	bl	8006c28 <__i2b>
 8006e04:	2300      	movs	r3, #0
 8006e06:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	6003      	str	r3, [r0, #0]
 8006e0e:	f04f 0900 	mov.w	r9, #0
 8006e12:	07eb      	lsls	r3, r5, #31
 8006e14:	d50a      	bpl.n	8006e2c <__pow5mult+0x84>
 8006e16:	4631      	mov	r1, r6
 8006e18:	4622      	mov	r2, r4
 8006e1a:	4638      	mov	r0, r7
 8006e1c:	f7ff ff1a 	bl	8006c54 <__multiply>
 8006e20:	4631      	mov	r1, r6
 8006e22:	4680      	mov	r8, r0
 8006e24:	4638      	mov	r0, r7
 8006e26:	f7ff fe4b 	bl	8006ac0 <_Bfree>
 8006e2a:	4646      	mov	r6, r8
 8006e2c:	106d      	asrs	r5, r5, #1
 8006e2e:	d00b      	beq.n	8006e48 <__pow5mult+0xa0>
 8006e30:	6820      	ldr	r0, [r4, #0]
 8006e32:	b938      	cbnz	r0, 8006e44 <__pow5mult+0x9c>
 8006e34:	4622      	mov	r2, r4
 8006e36:	4621      	mov	r1, r4
 8006e38:	4638      	mov	r0, r7
 8006e3a:	f7ff ff0b 	bl	8006c54 <__multiply>
 8006e3e:	6020      	str	r0, [r4, #0]
 8006e40:	f8c0 9000 	str.w	r9, [r0]
 8006e44:	4604      	mov	r4, r0
 8006e46:	e7e4      	b.n	8006e12 <__pow5mult+0x6a>
 8006e48:	4630      	mov	r0, r6
 8006e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e4e:	bf00      	nop
 8006e50:	08007a8c 	.word	0x08007a8c
 8006e54:	080079b1 	.word	0x080079b1
 8006e58:	08007a31 	.word	0x08007a31

08006e5c <__lshift>:
 8006e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e60:	460c      	mov	r4, r1
 8006e62:	6849      	ldr	r1, [r1, #4]
 8006e64:	6923      	ldr	r3, [r4, #16]
 8006e66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e6a:	68a3      	ldr	r3, [r4, #8]
 8006e6c:	4607      	mov	r7, r0
 8006e6e:	4691      	mov	r9, r2
 8006e70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e74:	f108 0601 	add.w	r6, r8, #1
 8006e78:	42b3      	cmp	r3, r6
 8006e7a:	db0b      	blt.n	8006e94 <__lshift+0x38>
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	f7ff fddf 	bl	8006a40 <_Balloc>
 8006e82:	4605      	mov	r5, r0
 8006e84:	b948      	cbnz	r0, 8006e9a <__lshift+0x3e>
 8006e86:	4602      	mov	r2, r0
 8006e88:	4b28      	ldr	r3, [pc, #160]	@ (8006f2c <__lshift+0xd0>)
 8006e8a:	4829      	ldr	r0, [pc, #164]	@ (8006f30 <__lshift+0xd4>)
 8006e8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e90:	f000 fa22 	bl	80072d8 <__assert_func>
 8006e94:	3101      	adds	r1, #1
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	e7ee      	b.n	8006e78 <__lshift+0x1c>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f100 0114 	add.w	r1, r0, #20
 8006ea0:	f100 0210 	add.w	r2, r0, #16
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	4553      	cmp	r3, sl
 8006ea8:	db33      	blt.n	8006f12 <__lshift+0xb6>
 8006eaa:	6920      	ldr	r0, [r4, #16]
 8006eac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006eb0:	f104 0314 	add.w	r3, r4, #20
 8006eb4:	f019 091f 	ands.w	r9, r9, #31
 8006eb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ebc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ec0:	d02b      	beq.n	8006f1a <__lshift+0xbe>
 8006ec2:	f1c9 0e20 	rsb	lr, r9, #32
 8006ec6:	468a      	mov	sl, r1
 8006ec8:	2200      	movs	r2, #0
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	fa00 f009 	lsl.w	r0, r0, r9
 8006ed0:	4310      	orrs	r0, r2
 8006ed2:	f84a 0b04 	str.w	r0, [sl], #4
 8006ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eda:	459c      	cmp	ip, r3
 8006edc:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ee0:	d8f3      	bhi.n	8006eca <__lshift+0x6e>
 8006ee2:	ebac 0304 	sub.w	r3, ip, r4
 8006ee6:	3b15      	subs	r3, #21
 8006ee8:	f023 0303 	bic.w	r3, r3, #3
 8006eec:	3304      	adds	r3, #4
 8006eee:	f104 0015 	add.w	r0, r4, #21
 8006ef2:	4584      	cmp	ip, r0
 8006ef4:	bf38      	it	cc
 8006ef6:	2304      	movcc	r3, #4
 8006ef8:	50ca      	str	r2, [r1, r3]
 8006efa:	b10a      	cbz	r2, 8006f00 <__lshift+0xa4>
 8006efc:	f108 0602 	add.w	r6, r8, #2
 8006f00:	3e01      	subs	r6, #1
 8006f02:	4638      	mov	r0, r7
 8006f04:	612e      	str	r6, [r5, #16]
 8006f06:	4621      	mov	r1, r4
 8006f08:	f7ff fdda 	bl	8006ac0 <_Bfree>
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f12:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f16:	3301      	adds	r3, #1
 8006f18:	e7c5      	b.n	8006ea6 <__lshift+0x4a>
 8006f1a:	3904      	subs	r1, #4
 8006f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f20:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f24:	459c      	cmp	ip, r3
 8006f26:	d8f9      	bhi.n	8006f1c <__lshift+0xc0>
 8006f28:	e7ea      	b.n	8006f00 <__lshift+0xa4>
 8006f2a:	bf00      	nop
 8006f2c:	08007a20 	.word	0x08007a20
 8006f30:	08007a31 	.word	0x08007a31

08006f34 <__mcmp>:
 8006f34:	690a      	ldr	r2, [r1, #16]
 8006f36:	4603      	mov	r3, r0
 8006f38:	6900      	ldr	r0, [r0, #16]
 8006f3a:	1a80      	subs	r0, r0, r2
 8006f3c:	b530      	push	{r4, r5, lr}
 8006f3e:	d10e      	bne.n	8006f5e <__mcmp+0x2a>
 8006f40:	3314      	adds	r3, #20
 8006f42:	3114      	adds	r1, #20
 8006f44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f54:	4295      	cmp	r5, r2
 8006f56:	d003      	beq.n	8006f60 <__mcmp+0x2c>
 8006f58:	d205      	bcs.n	8006f66 <__mcmp+0x32>
 8006f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5e:	bd30      	pop	{r4, r5, pc}
 8006f60:	42a3      	cmp	r3, r4
 8006f62:	d3f3      	bcc.n	8006f4c <__mcmp+0x18>
 8006f64:	e7fb      	b.n	8006f5e <__mcmp+0x2a>
 8006f66:	2001      	movs	r0, #1
 8006f68:	e7f9      	b.n	8006f5e <__mcmp+0x2a>
	...

08006f6c <__mdiff>:
 8006f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f70:	4689      	mov	r9, r1
 8006f72:	4606      	mov	r6, r0
 8006f74:	4611      	mov	r1, r2
 8006f76:	4648      	mov	r0, r9
 8006f78:	4614      	mov	r4, r2
 8006f7a:	f7ff ffdb 	bl	8006f34 <__mcmp>
 8006f7e:	1e05      	subs	r5, r0, #0
 8006f80:	d112      	bne.n	8006fa8 <__mdiff+0x3c>
 8006f82:	4629      	mov	r1, r5
 8006f84:	4630      	mov	r0, r6
 8006f86:	f7ff fd5b 	bl	8006a40 <_Balloc>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	b928      	cbnz	r0, 8006f9a <__mdiff+0x2e>
 8006f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800708c <__mdiff+0x120>)
 8006f90:	f240 2137 	movw	r1, #567	@ 0x237
 8006f94:	483e      	ldr	r0, [pc, #248]	@ (8007090 <__mdiff+0x124>)
 8006f96:	f000 f99f 	bl	80072d8 <__assert_func>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	b003      	add	sp, #12
 8006fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa8:	bfbc      	itt	lt
 8006faa:	464b      	movlt	r3, r9
 8006fac:	46a1      	movlt	r9, r4
 8006fae:	4630      	mov	r0, r6
 8006fb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006fb4:	bfba      	itte	lt
 8006fb6:	461c      	movlt	r4, r3
 8006fb8:	2501      	movlt	r5, #1
 8006fba:	2500      	movge	r5, #0
 8006fbc:	f7ff fd40 	bl	8006a40 <_Balloc>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	b918      	cbnz	r0, 8006fcc <__mdiff+0x60>
 8006fc4:	4b31      	ldr	r3, [pc, #196]	@ (800708c <__mdiff+0x120>)
 8006fc6:	f240 2145 	movw	r1, #581	@ 0x245
 8006fca:	e7e3      	b.n	8006f94 <__mdiff+0x28>
 8006fcc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006fd0:	6926      	ldr	r6, [r4, #16]
 8006fd2:	60c5      	str	r5, [r0, #12]
 8006fd4:	f109 0310 	add.w	r3, r9, #16
 8006fd8:	f109 0514 	add.w	r5, r9, #20
 8006fdc:	f104 0e14 	add.w	lr, r4, #20
 8006fe0:	f100 0b14 	add.w	fp, r0, #20
 8006fe4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006fe8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	46d9      	mov	r9, fp
 8006ff0:	f04f 0c00 	mov.w	ip, #0
 8006ff4:	9b01      	ldr	r3, [sp, #4]
 8006ff6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006ffa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006ffe:	9301      	str	r3, [sp, #4]
 8007000:	fa1f f38a 	uxth.w	r3, sl
 8007004:	4619      	mov	r1, r3
 8007006:	b283      	uxth	r3, r0
 8007008:	1acb      	subs	r3, r1, r3
 800700a:	0c00      	lsrs	r0, r0, #16
 800700c:	4463      	add	r3, ip
 800700e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007012:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007016:	b29b      	uxth	r3, r3
 8007018:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800701c:	4576      	cmp	r6, lr
 800701e:	f849 3b04 	str.w	r3, [r9], #4
 8007022:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007026:	d8e5      	bhi.n	8006ff4 <__mdiff+0x88>
 8007028:	1b33      	subs	r3, r6, r4
 800702a:	3b15      	subs	r3, #21
 800702c:	f023 0303 	bic.w	r3, r3, #3
 8007030:	3415      	adds	r4, #21
 8007032:	3304      	adds	r3, #4
 8007034:	42a6      	cmp	r6, r4
 8007036:	bf38      	it	cc
 8007038:	2304      	movcc	r3, #4
 800703a:	441d      	add	r5, r3
 800703c:	445b      	add	r3, fp
 800703e:	461e      	mov	r6, r3
 8007040:	462c      	mov	r4, r5
 8007042:	4544      	cmp	r4, r8
 8007044:	d30e      	bcc.n	8007064 <__mdiff+0xf8>
 8007046:	f108 0103 	add.w	r1, r8, #3
 800704a:	1b49      	subs	r1, r1, r5
 800704c:	f021 0103 	bic.w	r1, r1, #3
 8007050:	3d03      	subs	r5, #3
 8007052:	45a8      	cmp	r8, r5
 8007054:	bf38      	it	cc
 8007056:	2100      	movcc	r1, #0
 8007058:	440b      	add	r3, r1
 800705a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800705e:	b191      	cbz	r1, 8007086 <__mdiff+0x11a>
 8007060:	6117      	str	r7, [r2, #16]
 8007062:	e79d      	b.n	8006fa0 <__mdiff+0x34>
 8007064:	f854 1b04 	ldr.w	r1, [r4], #4
 8007068:	46e6      	mov	lr, ip
 800706a:	0c08      	lsrs	r0, r1, #16
 800706c:	fa1c fc81 	uxtah	ip, ip, r1
 8007070:	4471      	add	r1, lr
 8007072:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007076:	b289      	uxth	r1, r1
 8007078:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800707c:	f846 1b04 	str.w	r1, [r6], #4
 8007080:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007084:	e7dd      	b.n	8007042 <__mdiff+0xd6>
 8007086:	3f01      	subs	r7, #1
 8007088:	e7e7      	b.n	800705a <__mdiff+0xee>
 800708a:	bf00      	nop
 800708c:	08007a20 	.word	0x08007a20
 8007090:	08007a31 	.word	0x08007a31

08007094 <__d2b>:
 8007094:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007098:	460f      	mov	r7, r1
 800709a:	2101      	movs	r1, #1
 800709c:	ec59 8b10 	vmov	r8, r9, d0
 80070a0:	4616      	mov	r6, r2
 80070a2:	f7ff fccd 	bl	8006a40 <_Balloc>
 80070a6:	4604      	mov	r4, r0
 80070a8:	b930      	cbnz	r0, 80070b8 <__d2b+0x24>
 80070aa:	4602      	mov	r2, r0
 80070ac:	4b23      	ldr	r3, [pc, #140]	@ (800713c <__d2b+0xa8>)
 80070ae:	4824      	ldr	r0, [pc, #144]	@ (8007140 <__d2b+0xac>)
 80070b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80070b4:	f000 f910 	bl	80072d8 <__assert_func>
 80070b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80070bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070c0:	b10d      	cbz	r5, 80070c6 <__d2b+0x32>
 80070c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	f1b8 0300 	subs.w	r3, r8, #0
 80070cc:	d023      	beq.n	8007116 <__d2b+0x82>
 80070ce:	4668      	mov	r0, sp
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	f7ff fd7c 	bl	8006bce <__lo0bits>
 80070d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80070da:	b1d0      	cbz	r0, 8007112 <__d2b+0x7e>
 80070dc:	f1c0 0320 	rsb	r3, r0, #32
 80070e0:	fa02 f303 	lsl.w	r3, r2, r3
 80070e4:	430b      	orrs	r3, r1
 80070e6:	40c2      	lsrs	r2, r0
 80070e8:	6163      	str	r3, [r4, #20]
 80070ea:	9201      	str	r2, [sp, #4]
 80070ec:	9b01      	ldr	r3, [sp, #4]
 80070ee:	61a3      	str	r3, [r4, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	bf0c      	ite	eq
 80070f4:	2201      	moveq	r2, #1
 80070f6:	2202      	movne	r2, #2
 80070f8:	6122      	str	r2, [r4, #16]
 80070fa:	b1a5      	cbz	r5, 8007126 <__d2b+0x92>
 80070fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007100:	4405      	add	r5, r0
 8007102:	603d      	str	r5, [r7, #0]
 8007104:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007108:	6030      	str	r0, [r6, #0]
 800710a:	4620      	mov	r0, r4
 800710c:	b003      	add	sp, #12
 800710e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007112:	6161      	str	r1, [r4, #20]
 8007114:	e7ea      	b.n	80070ec <__d2b+0x58>
 8007116:	a801      	add	r0, sp, #4
 8007118:	f7ff fd59 	bl	8006bce <__lo0bits>
 800711c:	9b01      	ldr	r3, [sp, #4]
 800711e:	6163      	str	r3, [r4, #20]
 8007120:	3020      	adds	r0, #32
 8007122:	2201      	movs	r2, #1
 8007124:	e7e8      	b.n	80070f8 <__d2b+0x64>
 8007126:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800712a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800712e:	6038      	str	r0, [r7, #0]
 8007130:	6918      	ldr	r0, [r3, #16]
 8007132:	f7ff fd2d 	bl	8006b90 <__hi0bits>
 8007136:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800713a:	e7e5      	b.n	8007108 <__d2b+0x74>
 800713c:	08007a20 	.word	0x08007a20
 8007140:	08007a31 	.word	0x08007a31

08007144 <__sflush_r>:
 8007144:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800714c:	0716      	lsls	r6, r2, #28
 800714e:	4605      	mov	r5, r0
 8007150:	460c      	mov	r4, r1
 8007152:	d454      	bmi.n	80071fe <__sflush_r+0xba>
 8007154:	684b      	ldr	r3, [r1, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	dc02      	bgt.n	8007160 <__sflush_r+0x1c>
 800715a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800715c:	2b00      	cmp	r3, #0
 800715e:	dd48      	ble.n	80071f2 <__sflush_r+0xae>
 8007160:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007162:	2e00      	cmp	r6, #0
 8007164:	d045      	beq.n	80071f2 <__sflush_r+0xae>
 8007166:	2300      	movs	r3, #0
 8007168:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800716c:	682f      	ldr	r7, [r5, #0]
 800716e:	6a21      	ldr	r1, [r4, #32]
 8007170:	602b      	str	r3, [r5, #0]
 8007172:	d030      	beq.n	80071d6 <__sflush_r+0x92>
 8007174:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	0759      	lsls	r1, r3, #29
 800717a:	d505      	bpl.n	8007188 <__sflush_r+0x44>
 800717c:	6863      	ldr	r3, [r4, #4]
 800717e:	1ad2      	subs	r2, r2, r3
 8007180:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007182:	b10b      	cbz	r3, 8007188 <__sflush_r+0x44>
 8007184:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007186:	1ad2      	subs	r2, r2, r3
 8007188:	2300      	movs	r3, #0
 800718a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800718c:	6a21      	ldr	r1, [r4, #32]
 800718e:	4628      	mov	r0, r5
 8007190:	47b0      	blx	r6
 8007192:	1c43      	adds	r3, r0, #1
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	d106      	bne.n	80071a6 <__sflush_r+0x62>
 8007198:	6829      	ldr	r1, [r5, #0]
 800719a:	291d      	cmp	r1, #29
 800719c:	d82b      	bhi.n	80071f6 <__sflush_r+0xb2>
 800719e:	4a2a      	ldr	r2, [pc, #168]	@ (8007248 <__sflush_r+0x104>)
 80071a0:	410a      	asrs	r2, r1
 80071a2:	07d6      	lsls	r6, r2, #31
 80071a4:	d427      	bmi.n	80071f6 <__sflush_r+0xb2>
 80071a6:	2200      	movs	r2, #0
 80071a8:	6062      	str	r2, [r4, #4]
 80071aa:	04d9      	lsls	r1, r3, #19
 80071ac:	6922      	ldr	r2, [r4, #16]
 80071ae:	6022      	str	r2, [r4, #0]
 80071b0:	d504      	bpl.n	80071bc <__sflush_r+0x78>
 80071b2:	1c42      	adds	r2, r0, #1
 80071b4:	d101      	bne.n	80071ba <__sflush_r+0x76>
 80071b6:	682b      	ldr	r3, [r5, #0]
 80071b8:	b903      	cbnz	r3, 80071bc <__sflush_r+0x78>
 80071ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80071bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071be:	602f      	str	r7, [r5, #0]
 80071c0:	b1b9      	cbz	r1, 80071f2 <__sflush_r+0xae>
 80071c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071c6:	4299      	cmp	r1, r3
 80071c8:	d002      	beq.n	80071d0 <__sflush_r+0x8c>
 80071ca:	4628      	mov	r0, r5
 80071cc:	f7ff fb38 	bl	8006840 <_free_r>
 80071d0:	2300      	movs	r3, #0
 80071d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80071d4:	e00d      	b.n	80071f2 <__sflush_r+0xae>
 80071d6:	2301      	movs	r3, #1
 80071d8:	4628      	mov	r0, r5
 80071da:	47b0      	blx	r6
 80071dc:	4602      	mov	r2, r0
 80071de:	1c50      	adds	r0, r2, #1
 80071e0:	d1c9      	bne.n	8007176 <__sflush_r+0x32>
 80071e2:	682b      	ldr	r3, [r5, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0c6      	beq.n	8007176 <__sflush_r+0x32>
 80071e8:	2b1d      	cmp	r3, #29
 80071ea:	d001      	beq.n	80071f0 <__sflush_r+0xac>
 80071ec:	2b16      	cmp	r3, #22
 80071ee:	d11e      	bne.n	800722e <__sflush_r+0xea>
 80071f0:	602f      	str	r7, [r5, #0]
 80071f2:	2000      	movs	r0, #0
 80071f4:	e022      	b.n	800723c <__sflush_r+0xf8>
 80071f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071fa:	b21b      	sxth	r3, r3
 80071fc:	e01b      	b.n	8007236 <__sflush_r+0xf2>
 80071fe:	690f      	ldr	r7, [r1, #16]
 8007200:	2f00      	cmp	r7, #0
 8007202:	d0f6      	beq.n	80071f2 <__sflush_r+0xae>
 8007204:	0793      	lsls	r3, r2, #30
 8007206:	680e      	ldr	r6, [r1, #0]
 8007208:	bf08      	it	eq
 800720a:	694b      	ldreq	r3, [r1, #20]
 800720c:	600f      	str	r7, [r1, #0]
 800720e:	bf18      	it	ne
 8007210:	2300      	movne	r3, #0
 8007212:	eba6 0807 	sub.w	r8, r6, r7
 8007216:	608b      	str	r3, [r1, #8]
 8007218:	f1b8 0f00 	cmp.w	r8, #0
 800721c:	dde9      	ble.n	80071f2 <__sflush_r+0xae>
 800721e:	6a21      	ldr	r1, [r4, #32]
 8007220:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007222:	4643      	mov	r3, r8
 8007224:	463a      	mov	r2, r7
 8007226:	4628      	mov	r0, r5
 8007228:	47b0      	blx	r6
 800722a:	2800      	cmp	r0, #0
 800722c:	dc08      	bgt.n	8007240 <__sflush_r+0xfc>
 800722e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007236:	81a3      	strh	r3, [r4, #12]
 8007238:	f04f 30ff 	mov.w	r0, #4294967295
 800723c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007240:	4407      	add	r7, r0
 8007242:	eba8 0800 	sub.w	r8, r8, r0
 8007246:	e7e7      	b.n	8007218 <__sflush_r+0xd4>
 8007248:	dfbffffe 	.word	0xdfbffffe

0800724c <_fflush_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	690b      	ldr	r3, [r1, #16]
 8007250:	4605      	mov	r5, r0
 8007252:	460c      	mov	r4, r1
 8007254:	b913      	cbnz	r3, 800725c <_fflush_r+0x10>
 8007256:	2500      	movs	r5, #0
 8007258:	4628      	mov	r0, r5
 800725a:	bd38      	pop	{r3, r4, r5, pc}
 800725c:	b118      	cbz	r0, 8007266 <_fflush_r+0x1a>
 800725e:	6a03      	ldr	r3, [r0, #32]
 8007260:	b90b      	cbnz	r3, 8007266 <_fflush_r+0x1a>
 8007262:	f7fe fba5 	bl	80059b0 <__sinit>
 8007266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0f3      	beq.n	8007256 <_fflush_r+0xa>
 800726e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007270:	07d0      	lsls	r0, r2, #31
 8007272:	d404      	bmi.n	800727e <_fflush_r+0x32>
 8007274:	0599      	lsls	r1, r3, #22
 8007276:	d402      	bmi.n	800727e <_fflush_r+0x32>
 8007278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800727a:	f7fe fc90 	bl	8005b9e <__retarget_lock_acquire_recursive>
 800727e:	4628      	mov	r0, r5
 8007280:	4621      	mov	r1, r4
 8007282:	f7ff ff5f 	bl	8007144 <__sflush_r>
 8007286:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007288:	07da      	lsls	r2, r3, #31
 800728a:	4605      	mov	r5, r0
 800728c:	d4e4      	bmi.n	8007258 <_fflush_r+0xc>
 800728e:	89a3      	ldrh	r3, [r4, #12]
 8007290:	059b      	lsls	r3, r3, #22
 8007292:	d4e1      	bmi.n	8007258 <_fflush_r+0xc>
 8007294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007296:	f7fe fc83 	bl	8005ba0 <__retarget_lock_release_recursive>
 800729a:	e7dd      	b.n	8007258 <_fflush_r+0xc>

0800729c <_sbrk_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4d06      	ldr	r5, [pc, #24]	@ (80072b8 <_sbrk_r+0x1c>)
 80072a0:	2300      	movs	r3, #0
 80072a2:	4604      	mov	r4, r0
 80072a4:	4608      	mov	r0, r1
 80072a6:	602b      	str	r3, [r5, #0]
 80072a8:	f7fa fbda 	bl	8001a60 <_sbrk>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d102      	bne.n	80072b6 <_sbrk_r+0x1a>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	b103      	cbz	r3, 80072b6 <_sbrk_r+0x1a>
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	20040424 	.word	0x20040424

080072bc <memcpy>:
 80072bc:	440a      	add	r2, r1
 80072be:	4291      	cmp	r1, r2
 80072c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80072c4:	d100      	bne.n	80072c8 <memcpy+0xc>
 80072c6:	4770      	bx	lr
 80072c8:	b510      	push	{r4, lr}
 80072ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072d2:	4291      	cmp	r1, r2
 80072d4:	d1f9      	bne.n	80072ca <memcpy+0xe>
 80072d6:	bd10      	pop	{r4, pc}

080072d8 <__assert_func>:
 80072d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072da:	4614      	mov	r4, r2
 80072dc:	461a      	mov	r2, r3
 80072de:	4b09      	ldr	r3, [pc, #36]	@ (8007304 <__assert_func+0x2c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4605      	mov	r5, r0
 80072e4:	68d8      	ldr	r0, [r3, #12]
 80072e6:	b954      	cbnz	r4, 80072fe <__assert_func+0x26>
 80072e8:	4b07      	ldr	r3, [pc, #28]	@ (8007308 <__assert_func+0x30>)
 80072ea:	461c      	mov	r4, r3
 80072ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072f0:	9100      	str	r1, [sp, #0]
 80072f2:	462b      	mov	r3, r5
 80072f4:	4905      	ldr	r1, [pc, #20]	@ (800730c <__assert_func+0x34>)
 80072f6:	f000 f841 	bl	800737c <fiprintf>
 80072fa:	f000 f851 	bl	80073a0 <abort>
 80072fe:	4b04      	ldr	r3, [pc, #16]	@ (8007310 <__assert_func+0x38>)
 8007300:	e7f4      	b.n	80072ec <__assert_func+0x14>
 8007302:	bf00      	nop
 8007304:	20040024 	.word	0x20040024
 8007308:	08007bcd 	.word	0x08007bcd
 800730c:	08007b9f 	.word	0x08007b9f
 8007310:	08007b92 	.word	0x08007b92

08007314 <_calloc_r>:
 8007314:	b570      	push	{r4, r5, r6, lr}
 8007316:	fba1 5402 	umull	r5, r4, r1, r2
 800731a:	b93c      	cbnz	r4, 800732c <_calloc_r+0x18>
 800731c:	4629      	mov	r1, r5
 800731e:	f7ff fb03 	bl	8006928 <_malloc_r>
 8007322:	4606      	mov	r6, r0
 8007324:	b928      	cbnz	r0, 8007332 <_calloc_r+0x1e>
 8007326:	2600      	movs	r6, #0
 8007328:	4630      	mov	r0, r6
 800732a:	bd70      	pop	{r4, r5, r6, pc}
 800732c:	220c      	movs	r2, #12
 800732e:	6002      	str	r2, [r0, #0]
 8007330:	e7f9      	b.n	8007326 <_calloc_r+0x12>
 8007332:	462a      	mov	r2, r5
 8007334:	4621      	mov	r1, r4
 8007336:	f7fe fbb4 	bl	8005aa2 <memset>
 800733a:	e7f5      	b.n	8007328 <_calloc_r+0x14>

0800733c <__ascii_mbtowc>:
 800733c:	b082      	sub	sp, #8
 800733e:	b901      	cbnz	r1, 8007342 <__ascii_mbtowc+0x6>
 8007340:	a901      	add	r1, sp, #4
 8007342:	b142      	cbz	r2, 8007356 <__ascii_mbtowc+0x1a>
 8007344:	b14b      	cbz	r3, 800735a <__ascii_mbtowc+0x1e>
 8007346:	7813      	ldrb	r3, [r2, #0]
 8007348:	600b      	str	r3, [r1, #0]
 800734a:	7812      	ldrb	r2, [r2, #0]
 800734c:	1e10      	subs	r0, r2, #0
 800734e:	bf18      	it	ne
 8007350:	2001      	movne	r0, #1
 8007352:	b002      	add	sp, #8
 8007354:	4770      	bx	lr
 8007356:	4610      	mov	r0, r2
 8007358:	e7fb      	b.n	8007352 <__ascii_mbtowc+0x16>
 800735a:	f06f 0001 	mvn.w	r0, #1
 800735e:	e7f8      	b.n	8007352 <__ascii_mbtowc+0x16>

08007360 <__ascii_wctomb>:
 8007360:	4603      	mov	r3, r0
 8007362:	4608      	mov	r0, r1
 8007364:	b141      	cbz	r1, 8007378 <__ascii_wctomb+0x18>
 8007366:	2aff      	cmp	r2, #255	@ 0xff
 8007368:	d904      	bls.n	8007374 <__ascii_wctomb+0x14>
 800736a:	228a      	movs	r2, #138	@ 0x8a
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	f04f 30ff 	mov.w	r0, #4294967295
 8007372:	4770      	bx	lr
 8007374:	700a      	strb	r2, [r1, #0]
 8007376:	2001      	movs	r0, #1
 8007378:	4770      	bx	lr
	...

0800737c <fiprintf>:
 800737c:	b40e      	push	{r1, r2, r3}
 800737e:	b503      	push	{r0, r1, lr}
 8007380:	4601      	mov	r1, r0
 8007382:	ab03      	add	r3, sp, #12
 8007384:	4805      	ldr	r0, [pc, #20]	@ (800739c <fiprintf+0x20>)
 8007386:	f853 2b04 	ldr.w	r2, [r3], #4
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	f000 f837 	bl	8007400 <_vfiprintf_r>
 8007392:	b002      	add	sp, #8
 8007394:	f85d eb04 	ldr.w	lr, [sp], #4
 8007398:	b003      	add	sp, #12
 800739a:	4770      	bx	lr
 800739c:	20040024 	.word	0x20040024

080073a0 <abort>:
 80073a0:	b508      	push	{r3, lr}
 80073a2:	2006      	movs	r0, #6
 80073a4:	f000 fa00 	bl	80077a8 <raise>
 80073a8:	2001      	movs	r0, #1
 80073aa:	f7fa fae0 	bl	800196e <_exit>

080073ae <__sfputc_r>:
 80073ae:	6893      	ldr	r3, [r2, #8]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	b410      	push	{r4}
 80073b6:	6093      	str	r3, [r2, #8]
 80073b8:	da08      	bge.n	80073cc <__sfputc_r+0x1e>
 80073ba:	6994      	ldr	r4, [r2, #24]
 80073bc:	42a3      	cmp	r3, r4
 80073be:	db01      	blt.n	80073c4 <__sfputc_r+0x16>
 80073c0:	290a      	cmp	r1, #10
 80073c2:	d103      	bne.n	80073cc <__sfputc_r+0x1e>
 80073c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073c8:	f000 b932 	b.w	8007630 <__swbuf_r>
 80073cc:	6813      	ldr	r3, [r2, #0]
 80073ce:	1c58      	adds	r0, r3, #1
 80073d0:	6010      	str	r0, [r2, #0]
 80073d2:	7019      	strb	r1, [r3, #0]
 80073d4:	4608      	mov	r0, r1
 80073d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073da:	4770      	bx	lr

080073dc <__sfputs_r>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	4606      	mov	r6, r0
 80073e0:	460f      	mov	r7, r1
 80073e2:	4614      	mov	r4, r2
 80073e4:	18d5      	adds	r5, r2, r3
 80073e6:	42ac      	cmp	r4, r5
 80073e8:	d101      	bne.n	80073ee <__sfputs_r+0x12>
 80073ea:	2000      	movs	r0, #0
 80073ec:	e007      	b.n	80073fe <__sfputs_r+0x22>
 80073ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f2:	463a      	mov	r2, r7
 80073f4:	4630      	mov	r0, r6
 80073f6:	f7ff ffda 	bl	80073ae <__sfputc_r>
 80073fa:	1c43      	adds	r3, r0, #1
 80073fc:	d1f3      	bne.n	80073e6 <__sfputs_r+0xa>
 80073fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007400 <_vfiprintf_r>:
 8007400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	460d      	mov	r5, r1
 8007406:	b09d      	sub	sp, #116	@ 0x74
 8007408:	4614      	mov	r4, r2
 800740a:	4698      	mov	r8, r3
 800740c:	4606      	mov	r6, r0
 800740e:	b118      	cbz	r0, 8007418 <_vfiprintf_r+0x18>
 8007410:	6a03      	ldr	r3, [r0, #32]
 8007412:	b90b      	cbnz	r3, 8007418 <_vfiprintf_r+0x18>
 8007414:	f7fe facc 	bl	80059b0 <__sinit>
 8007418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800741a:	07d9      	lsls	r1, r3, #31
 800741c:	d405      	bmi.n	800742a <_vfiprintf_r+0x2a>
 800741e:	89ab      	ldrh	r3, [r5, #12]
 8007420:	059a      	lsls	r2, r3, #22
 8007422:	d402      	bmi.n	800742a <_vfiprintf_r+0x2a>
 8007424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007426:	f7fe fbba 	bl	8005b9e <__retarget_lock_acquire_recursive>
 800742a:	89ab      	ldrh	r3, [r5, #12]
 800742c:	071b      	lsls	r3, r3, #28
 800742e:	d501      	bpl.n	8007434 <_vfiprintf_r+0x34>
 8007430:	692b      	ldr	r3, [r5, #16]
 8007432:	b99b      	cbnz	r3, 800745c <_vfiprintf_r+0x5c>
 8007434:	4629      	mov	r1, r5
 8007436:	4630      	mov	r0, r6
 8007438:	f000 f938 	bl	80076ac <__swsetup_r>
 800743c:	b170      	cbz	r0, 800745c <_vfiprintf_r+0x5c>
 800743e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007440:	07dc      	lsls	r4, r3, #31
 8007442:	d504      	bpl.n	800744e <_vfiprintf_r+0x4e>
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
 8007448:	b01d      	add	sp, #116	@ 0x74
 800744a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744e:	89ab      	ldrh	r3, [r5, #12]
 8007450:	0598      	lsls	r0, r3, #22
 8007452:	d4f7      	bmi.n	8007444 <_vfiprintf_r+0x44>
 8007454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007456:	f7fe fba3 	bl	8005ba0 <__retarget_lock_release_recursive>
 800745a:	e7f3      	b.n	8007444 <_vfiprintf_r+0x44>
 800745c:	2300      	movs	r3, #0
 800745e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007460:	2320      	movs	r3, #32
 8007462:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007466:	f8cd 800c 	str.w	r8, [sp, #12]
 800746a:	2330      	movs	r3, #48	@ 0x30
 800746c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800761c <_vfiprintf_r+0x21c>
 8007470:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007474:	f04f 0901 	mov.w	r9, #1
 8007478:	4623      	mov	r3, r4
 800747a:	469a      	mov	sl, r3
 800747c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007480:	b10a      	cbz	r2, 8007486 <_vfiprintf_r+0x86>
 8007482:	2a25      	cmp	r2, #37	@ 0x25
 8007484:	d1f9      	bne.n	800747a <_vfiprintf_r+0x7a>
 8007486:	ebba 0b04 	subs.w	fp, sl, r4
 800748a:	d00b      	beq.n	80074a4 <_vfiprintf_r+0xa4>
 800748c:	465b      	mov	r3, fp
 800748e:	4622      	mov	r2, r4
 8007490:	4629      	mov	r1, r5
 8007492:	4630      	mov	r0, r6
 8007494:	f7ff ffa2 	bl	80073dc <__sfputs_r>
 8007498:	3001      	adds	r0, #1
 800749a:	f000 80a7 	beq.w	80075ec <_vfiprintf_r+0x1ec>
 800749e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074a0:	445a      	add	r2, fp
 80074a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80074a4:	f89a 3000 	ldrb.w	r3, [sl]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 809f 	beq.w	80075ec <_vfiprintf_r+0x1ec>
 80074ae:	2300      	movs	r3, #0
 80074b0:	f04f 32ff 	mov.w	r2, #4294967295
 80074b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074b8:	f10a 0a01 	add.w	sl, sl, #1
 80074bc:	9304      	str	r3, [sp, #16]
 80074be:	9307      	str	r3, [sp, #28]
 80074c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80074c6:	4654      	mov	r4, sl
 80074c8:	2205      	movs	r2, #5
 80074ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ce:	4853      	ldr	r0, [pc, #332]	@ (800761c <_vfiprintf_r+0x21c>)
 80074d0:	f7f8 fe96 	bl	8000200 <memchr>
 80074d4:	9a04      	ldr	r2, [sp, #16]
 80074d6:	b9d8      	cbnz	r0, 8007510 <_vfiprintf_r+0x110>
 80074d8:	06d1      	lsls	r1, r2, #27
 80074da:	bf44      	itt	mi
 80074dc:	2320      	movmi	r3, #32
 80074de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074e2:	0713      	lsls	r3, r2, #28
 80074e4:	bf44      	itt	mi
 80074e6:	232b      	movmi	r3, #43	@ 0x2b
 80074e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ec:	f89a 3000 	ldrb.w	r3, [sl]
 80074f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80074f2:	d015      	beq.n	8007520 <_vfiprintf_r+0x120>
 80074f4:	9a07      	ldr	r2, [sp, #28]
 80074f6:	4654      	mov	r4, sl
 80074f8:	2000      	movs	r0, #0
 80074fa:	f04f 0c0a 	mov.w	ip, #10
 80074fe:	4621      	mov	r1, r4
 8007500:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007504:	3b30      	subs	r3, #48	@ 0x30
 8007506:	2b09      	cmp	r3, #9
 8007508:	d94b      	bls.n	80075a2 <_vfiprintf_r+0x1a2>
 800750a:	b1b0      	cbz	r0, 800753a <_vfiprintf_r+0x13a>
 800750c:	9207      	str	r2, [sp, #28]
 800750e:	e014      	b.n	800753a <_vfiprintf_r+0x13a>
 8007510:	eba0 0308 	sub.w	r3, r0, r8
 8007514:	fa09 f303 	lsl.w	r3, r9, r3
 8007518:	4313      	orrs	r3, r2
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	46a2      	mov	sl, r4
 800751e:	e7d2      	b.n	80074c6 <_vfiprintf_r+0xc6>
 8007520:	9b03      	ldr	r3, [sp, #12]
 8007522:	1d19      	adds	r1, r3, #4
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	9103      	str	r1, [sp, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	bfbb      	ittet	lt
 800752c:	425b      	neglt	r3, r3
 800752e:	f042 0202 	orrlt.w	r2, r2, #2
 8007532:	9307      	strge	r3, [sp, #28]
 8007534:	9307      	strlt	r3, [sp, #28]
 8007536:	bfb8      	it	lt
 8007538:	9204      	strlt	r2, [sp, #16]
 800753a:	7823      	ldrb	r3, [r4, #0]
 800753c:	2b2e      	cmp	r3, #46	@ 0x2e
 800753e:	d10a      	bne.n	8007556 <_vfiprintf_r+0x156>
 8007540:	7863      	ldrb	r3, [r4, #1]
 8007542:	2b2a      	cmp	r3, #42	@ 0x2a
 8007544:	d132      	bne.n	80075ac <_vfiprintf_r+0x1ac>
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	1d1a      	adds	r2, r3, #4
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	9203      	str	r2, [sp, #12]
 800754e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007552:	3402      	adds	r4, #2
 8007554:	9305      	str	r3, [sp, #20]
 8007556:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800762c <_vfiprintf_r+0x22c>
 800755a:	7821      	ldrb	r1, [r4, #0]
 800755c:	2203      	movs	r2, #3
 800755e:	4650      	mov	r0, sl
 8007560:	f7f8 fe4e 	bl	8000200 <memchr>
 8007564:	b138      	cbz	r0, 8007576 <_vfiprintf_r+0x176>
 8007566:	9b04      	ldr	r3, [sp, #16]
 8007568:	eba0 000a 	sub.w	r0, r0, sl
 800756c:	2240      	movs	r2, #64	@ 0x40
 800756e:	4082      	lsls	r2, r0
 8007570:	4313      	orrs	r3, r2
 8007572:	3401      	adds	r4, #1
 8007574:	9304      	str	r3, [sp, #16]
 8007576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800757a:	4829      	ldr	r0, [pc, #164]	@ (8007620 <_vfiprintf_r+0x220>)
 800757c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007580:	2206      	movs	r2, #6
 8007582:	f7f8 fe3d 	bl	8000200 <memchr>
 8007586:	2800      	cmp	r0, #0
 8007588:	d03f      	beq.n	800760a <_vfiprintf_r+0x20a>
 800758a:	4b26      	ldr	r3, [pc, #152]	@ (8007624 <_vfiprintf_r+0x224>)
 800758c:	bb1b      	cbnz	r3, 80075d6 <_vfiprintf_r+0x1d6>
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	3307      	adds	r3, #7
 8007592:	f023 0307 	bic.w	r3, r3, #7
 8007596:	3308      	adds	r3, #8
 8007598:	9303      	str	r3, [sp, #12]
 800759a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800759c:	443b      	add	r3, r7
 800759e:	9309      	str	r3, [sp, #36]	@ 0x24
 80075a0:	e76a      	b.n	8007478 <_vfiprintf_r+0x78>
 80075a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075a6:	460c      	mov	r4, r1
 80075a8:	2001      	movs	r0, #1
 80075aa:	e7a8      	b.n	80074fe <_vfiprintf_r+0xfe>
 80075ac:	2300      	movs	r3, #0
 80075ae:	3401      	adds	r4, #1
 80075b0:	9305      	str	r3, [sp, #20]
 80075b2:	4619      	mov	r1, r3
 80075b4:	f04f 0c0a 	mov.w	ip, #10
 80075b8:	4620      	mov	r0, r4
 80075ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075be:	3a30      	subs	r2, #48	@ 0x30
 80075c0:	2a09      	cmp	r2, #9
 80075c2:	d903      	bls.n	80075cc <_vfiprintf_r+0x1cc>
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0c6      	beq.n	8007556 <_vfiprintf_r+0x156>
 80075c8:	9105      	str	r1, [sp, #20]
 80075ca:	e7c4      	b.n	8007556 <_vfiprintf_r+0x156>
 80075cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80075d0:	4604      	mov	r4, r0
 80075d2:	2301      	movs	r3, #1
 80075d4:	e7f0      	b.n	80075b8 <_vfiprintf_r+0x1b8>
 80075d6:	ab03      	add	r3, sp, #12
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	462a      	mov	r2, r5
 80075dc:	4b12      	ldr	r3, [pc, #72]	@ (8007628 <_vfiprintf_r+0x228>)
 80075de:	a904      	add	r1, sp, #16
 80075e0:	4630      	mov	r0, r6
 80075e2:	f7fd fda1 	bl	8005128 <_printf_float>
 80075e6:	4607      	mov	r7, r0
 80075e8:	1c78      	adds	r0, r7, #1
 80075ea:	d1d6      	bne.n	800759a <_vfiprintf_r+0x19a>
 80075ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ee:	07d9      	lsls	r1, r3, #31
 80075f0:	d405      	bmi.n	80075fe <_vfiprintf_r+0x1fe>
 80075f2:	89ab      	ldrh	r3, [r5, #12]
 80075f4:	059a      	lsls	r2, r3, #22
 80075f6:	d402      	bmi.n	80075fe <_vfiprintf_r+0x1fe>
 80075f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075fa:	f7fe fad1 	bl	8005ba0 <__retarget_lock_release_recursive>
 80075fe:	89ab      	ldrh	r3, [r5, #12]
 8007600:	065b      	lsls	r3, r3, #25
 8007602:	f53f af1f 	bmi.w	8007444 <_vfiprintf_r+0x44>
 8007606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007608:	e71e      	b.n	8007448 <_vfiprintf_r+0x48>
 800760a:	ab03      	add	r3, sp, #12
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	462a      	mov	r2, r5
 8007610:	4b05      	ldr	r3, [pc, #20]	@ (8007628 <_vfiprintf_r+0x228>)
 8007612:	a904      	add	r1, sp, #16
 8007614:	4630      	mov	r0, r6
 8007616:	f7fe f81f 	bl	8005658 <_printf_i>
 800761a:	e7e4      	b.n	80075e6 <_vfiprintf_r+0x1e6>
 800761c:	08007ccf 	.word	0x08007ccf
 8007620:	08007cd9 	.word	0x08007cd9
 8007624:	08005129 	.word	0x08005129
 8007628:	080073dd 	.word	0x080073dd
 800762c:	08007cd5 	.word	0x08007cd5

08007630 <__swbuf_r>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	460e      	mov	r6, r1
 8007634:	4614      	mov	r4, r2
 8007636:	4605      	mov	r5, r0
 8007638:	b118      	cbz	r0, 8007642 <__swbuf_r+0x12>
 800763a:	6a03      	ldr	r3, [r0, #32]
 800763c:	b90b      	cbnz	r3, 8007642 <__swbuf_r+0x12>
 800763e:	f7fe f9b7 	bl	80059b0 <__sinit>
 8007642:	69a3      	ldr	r3, [r4, #24]
 8007644:	60a3      	str	r3, [r4, #8]
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	071a      	lsls	r2, r3, #28
 800764a:	d501      	bpl.n	8007650 <__swbuf_r+0x20>
 800764c:	6923      	ldr	r3, [r4, #16]
 800764e:	b943      	cbnz	r3, 8007662 <__swbuf_r+0x32>
 8007650:	4621      	mov	r1, r4
 8007652:	4628      	mov	r0, r5
 8007654:	f000 f82a 	bl	80076ac <__swsetup_r>
 8007658:	b118      	cbz	r0, 8007662 <__swbuf_r+0x32>
 800765a:	f04f 37ff 	mov.w	r7, #4294967295
 800765e:	4638      	mov	r0, r7
 8007660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	6922      	ldr	r2, [r4, #16]
 8007666:	1a98      	subs	r0, r3, r2
 8007668:	6963      	ldr	r3, [r4, #20]
 800766a:	b2f6      	uxtb	r6, r6
 800766c:	4283      	cmp	r3, r0
 800766e:	4637      	mov	r7, r6
 8007670:	dc05      	bgt.n	800767e <__swbuf_r+0x4e>
 8007672:	4621      	mov	r1, r4
 8007674:	4628      	mov	r0, r5
 8007676:	f7ff fde9 	bl	800724c <_fflush_r>
 800767a:	2800      	cmp	r0, #0
 800767c:	d1ed      	bne.n	800765a <__swbuf_r+0x2a>
 800767e:	68a3      	ldr	r3, [r4, #8]
 8007680:	3b01      	subs	r3, #1
 8007682:	60a3      	str	r3, [r4, #8]
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	6022      	str	r2, [r4, #0]
 800768a:	701e      	strb	r6, [r3, #0]
 800768c:	6962      	ldr	r2, [r4, #20]
 800768e:	1c43      	adds	r3, r0, #1
 8007690:	429a      	cmp	r2, r3
 8007692:	d004      	beq.n	800769e <__swbuf_r+0x6e>
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	07db      	lsls	r3, r3, #31
 8007698:	d5e1      	bpl.n	800765e <__swbuf_r+0x2e>
 800769a:	2e0a      	cmp	r6, #10
 800769c:	d1df      	bne.n	800765e <__swbuf_r+0x2e>
 800769e:	4621      	mov	r1, r4
 80076a0:	4628      	mov	r0, r5
 80076a2:	f7ff fdd3 	bl	800724c <_fflush_r>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d0d9      	beq.n	800765e <__swbuf_r+0x2e>
 80076aa:	e7d6      	b.n	800765a <__swbuf_r+0x2a>

080076ac <__swsetup_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4b29      	ldr	r3, [pc, #164]	@ (8007754 <__swsetup_r+0xa8>)
 80076b0:	4605      	mov	r5, r0
 80076b2:	6818      	ldr	r0, [r3, #0]
 80076b4:	460c      	mov	r4, r1
 80076b6:	b118      	cbz	r0, 80076c0 <__swsetup_r+0x14>
 80076b8:	6a03      	ldr	r3, [r0, #32]
 80076ba:	b90b      	cbnz	r3, 80076c0 <__swsetup_r+0x14>
 80076bc:	f7fe f978 	bl	80059b0 <__sinit>
 80076c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c4:	0719      	lsls	r1, r3, #28
 80076c6:	d422      	bmi.n	800770e <__swsetup_r+0x62>
 80076c8:	06da      	lsls	r2, r3, #27
 80076ca:	d407      	bmi.n	80076dc <__swsetup_r+0x30>
 80076cc:	2209      	movs	r2, #9
 80076ce:	602a      	str	r2, [r5, #0]
 80076d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076d4:	81a3      	strh	r3, [r4, #12]
 80076d6:	f04f 30ff 	mov.w	r0, #4294967295
 80076da:	e033      	b.n	8007744 <__swsetup_r+0x98>
 80076dc:	0758      	lsls	r0, r3, #29
 80076de:	d512      	bpl.n	8007706 <__swsetup_r+0x5a>
 80076e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076e2:	b141      	cbz	r1, 80076f6 <__swsetup_r+0x4a>
 80076e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076e8:	4299      	cmp	r1, r3
 80076ea:	d002      	beq.n	80076f2 <__swsetup_r+0x46>
 80076ec:	4628      	mov	r0, r5
 80076ee:	f7ff f8a7 	bl	8006840 <_free_r>
 80076f2:	2300      	movs	r3, #0
 80076f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80076f6:	89a3      	ldrh	r3, [r4, #12]
 80076f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	2300      	movs	r3, #0
 8007700:	6063      	str	r3, [r4, #4]
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f043 0308 	orr.w	r3, r3, #8
 800770c:	81a3      	strh	r3, [r4, #12]
 800770e:	6923      	ldr	r3, [r4, #16]
 8007710:	b94b      	cbnz	r3, 8007726 <__swsetup_r+0x7a>
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800771c:	d003      	beq.n	8007726 <__swsetup_r+0x7a>
 800771e:	4621      	mov	r1, r4
 8007720:	4628      	mov	r0, r5
 8007722:	f000 f883 	bl	800782c <__smakebuf_r>
 8007726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800772a:	f013 0201 	ands.w	r2, r3, #1
 800772e:	d00a      	beq.n	8007746 <__swsetup_r+0x9a>
 8007730:	2200      	movs	r2, #0
 8007732:	60a2      	str	r2, [r4, #8]
 8007734:	6962      	ldr	r2, [r4, #20]
 8007736:	4252      	negs	r2, r2
 8007738:	61a2      	str	r2, [r4, #24]
 800773a:	6922      	ldr	r2, [r4, #16]
 800773c:	b942      	cbnz	r2, 8007750 <__swsetup_r+0xa4>
 800773e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007742:	d1c5      	bne.n	80076d0 <__swsetup_r+0x24>
 8007744:	bd38      	pop	{r3, r4, r5, pc}
 8007746:	0799      	lsls	r1, r3, #30
 8007748:	bf58      	it	pl
 800774a:	6962      	ldrpl	r2, [r4, #20]
 800774c:	60a2      	str	r2, [r4, #8]
 800774e:	e7f4      	b.n	800773a <__swsetup_r+0x8e>
 8007750:	2000      	movs	r0, #0
 8007752:	e7f7      	b.n	8007744 <__swsetup_r+0x98>
 8007754:	20040024 	.word	0x20040024

08007758 <_raise_r>:
 8007758:	291f      	cmp	r1, #31
 800775a:	b538      	push	{r3, r4, r5, lr}
 800775c:	4605      	mov	r5, r0
 800775e:	460c      	mov	r4, r1
 8007760:	d904      	bls.n	800776c <_raise_r+0x14>
 8007762:	2316      	movs	r3, #22
 8007764:	6003      	str	r3, [r0, #0]
 8007766:	f04f 30ff 	mov.w	r0, #4294967295
 800776a:	bd38      	pop	{r3, r4, r5, pc}
 800776c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800776e:	b112      	cbz	r2, 8007776 <_raise_r+0x1e>
 8007770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007774:	b94b      	cbnz	r3, 800778a <_raise_r+0x32>
 8007776:	4628      	mov	r0, r5
 8007778:	f000 f830 	bl	80077dc <_getpid_r>
 800777c:	4622      	mov	r2, r4
 800777e:	4601      	mov	r1, r0
 8007780:	4628      	mov	r0, r5
 8007782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007786:	f000 b817 	b.w	80077b8 <_kill_r>
 800778a:	2b01      	cmp	r3, #1
 800778c:	d00a      	beq.n	80077a4 <_raise_r+0x4c>
 800778e:	1c59      	adds	r1, r3, #1
 8007790:	d103      	bne.n	800779a <_raise_r+0x42>
 8007792:	2316      	movs	r3, #22
 8007794:	6003      	str	r3, [r0, #0]
 8007796:	2001      	movs	r0, #1
 8007798:	e7e7      	b.n	800776a <_raise_r+0x12>
 800779a:	2100      	movs	r1, #0
 800779c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80077a0:	4620      	mov	r0, r4
 80077a2:	4798      	blx	r3
 80077a4:	2000      	movs	r0, #0
 80077a6:	e7e0      	b.n	800776a <_raise_r+0x12>

080077a8 <raise>:
 80077a8:	4b02      	ldr	r3, [pc, #8]	@ (80077b4 <raise+0xc>)
 80077aa:	4601      	mov	r1, r0
 80077ac:	6818      	ldr	r0, [r3, #0]
 80077ae:	f7ff bfd3 	b.w	8007758 <_raise_r>
 80077b2:	bf00      	nop
 80077b4:	20040024 	.word	0x20040024

080077b8 <_kill_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	4d07      	ldr	r5, [pc, #28]	@ (80077d8 <_kill_r+0x20>)
 80077bc:	2300      	movs	r3, #0
 80077be:	4604      	mov	r4, r0
 80077c0:	4608      	mov	r0, r1
 80077c2:	4611      	mov	r1, r2
 80077c4:	602b      	str	r3, [r5, #0]
 80077c6:	f7fa f8c2 	bl	800194e <_kill>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	d102      	bne.n	80077d4 <_kill_r+0x1c>
 80077ce:	682b      	ldr	r3, [r5, #0]
 80077d0:	b103      	cbz	r3, 80077d4 <_kill_r+0x1c>
 80077d2:	6023      	str	r3, [r4, #0]
 80077d4:	bd38      	pop	{r3, r4, r5, pc}
 80077d6:	bf00      	nop
 80077d8:	20040424 	.word	0x20040424

080077dc <_getpid_r>:
 80077dc:	f7fa b8af 	b.w	800193e <_getpid>

080077e0 <__swhatbuf_r>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	460c      	mov	r4, r1
 80077e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e8:	2900      	cmp	r1, #0
 80077ea:	b096      	sub	sp, #88	@ 0x58
 80077ec:	4615      	mov	r5, r2
 80077ee:	461e      	mov	r6, r3
 80077f0:	da0d      	bge.n	800780e <__swhatbuf_r+0x2e>
 80077f2:	89a3      	ldrh	r3, [r4, #12]
 80077f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80077f8:	f04f 0100 	mov.w	r1, #0
 80077fc:	bf14      	ite	ne
 80077fe:	2340      	movne	r3, #64	@ 0x40
 8007800:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007804:	2000      	movs	r0, #0
 8007806:	6031      	str	r1, [r6, #0]
 8007808:	602b      	str	r3, [r5, #0]
 800780a:	b016      	add	sp, #88	@ 0x58
 800780c:	bd70      	pop	{r4, r5, r6, pc}
 800780e:	466a      	mov	r2, sp
 8007810:	f000 f848 	bl	80078a4 <_fstat_r>
 8007814:	2800      	cmp	r0, #0
 8007816:	dbec      	blt.n	80077f2 <__swhatbuf_r+0x12>
 8007818:	9901      	ldr	r1, [sp, #4]
 800781a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800781e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007822:	4259      	negs	r1, r3
 8007824:	4159      	adcs	r1, r3
 8007826:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800782a:	e7eb      	b.n	8007804 <__swhatbuf_r+0x24>

0800782c <__smakebuf_r>:
 800782c:	898b      	ldrh	r3, [r1, #12]
 800782e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007830:	079d      	lsls	r5, r3, #30
 8007832:	4606      	mov	r6, r0
 8007834:	460c      	mov	r4, r1
 8007836:	d507      	bpl.n	8007848 <__smakebuf_r+0x1c>
 8007838:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	6123      	str	r3, [r4, #16]
 8007840:	2301      	movs	r3, #1
 8007842:	6163      	str	r3, [r4, #20]
 8007844:	b003      	add	sp, #12
 8007846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007848:	ab01      	add	r3, sp, #4
 800784a:	466a      	mov	r2, sp
 800784c:	f7ff ffc8 	bl	80077e0 <__swhatbuf_r>
 8007850:	9f00      	ldr	r7, [sp, #0]
 8007852:	4605      	mov	r5, r0
 8007854:	4639      	mov	r1, r7
 8007856:	4630      	mov	r0, r6
 8007858:	f7ff f866 	bl	8006928 <_malloc_r>
 800785c:	b948      	cbnz	r0, 8007872 <__smakebuf_r+0x46>
 800785e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007862:	059a      	lsls	r2, r3, #22
 8007864:	d4ee      	bmi.n	8007844 <__smakebuf_r+0x18>
 8007866:	f023 0303 	bic.w	r3, r3, #3
 800786a:	f043 0302 	orr.w	r3, r3, #2
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	e7e2      	b.n	8007838 <__smakebuf_r+0xc>
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	6020      	str	r0, [r4, #0]
 8007876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800787a:	81a3      	strh	r3, [r4, #12]
 800787c:	9b01      	ldr	r3, [sp, #4]
 800787e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007882:	b15b      	cbz	r3, 800789c <__smakebuf_r+0x70>
 8007884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007888:	4630      	mov	r0, r6
 800788a:	f000 f81d 	bl	80078c8 <_isatty_r>
 800788e:	b128      	cbz	r0, 800789c <__smakebuf_r+0x70>
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	f023 0303 	bic.w	r3, r3, #3
 8007896:	f043 0301 	orr.w	r3, r3, #1
 800789a:	81a3      	strh	r3, [r4, #12]
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	431d      	orrs	r5, r3
 80078a0:	81a5      	strh	r5, [r4, #12]
 80078a2:	e7cf      	b.n	8007844 <__smakebuf_r+0x18>

080078a4 <_fstat_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4d07      	ldr	r5, [pc, #28]	@ (80078c4 <_fstat_r+0x20>)
 80078a8:	2300      	movs	r3, #0
 80078aa:	4604      	mov	r4, r0
 80078ac:	4608      	mov	r0, r1
 80078ae:	4611      	mov	r1, r2
 80078b0:	602b      	str	r3, [r5, #0]
 80078b2:	f7fa f8ac 	bl	8001a0e <_fstat>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	d102      	bne.n	80078c0 <_fstat_r+0x1c>
 80078ba:	682b      	ldr	r3, [r5, #0]
 80078bc:	b103      	cbz	r3, 80078c0 <_fstat_r+0x1c>
 80078be:	6023      	str	r3, [r4, #0]
 80078c0:	bd38      	pop	{r3, r4, r5, pc}
 80078c2:	bf00      	nop
 80078c4:	20040424 	.word	0x20040424

080078c8 <_isatty_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d06      	ldr	r5, [pc, #24]	@ (80078e4 <_isatty_r+0x1c>)
 80078cc:	2300      	movs	r3, #0
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	602b      	str	r3, [r5, #0]
 80078d4:	f7fa f8ab 	bl	8001a2e <_isatty>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_isatty_r+0x1a>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_isatty_r+0x1a>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	20040424 	.word	0x20040424

080078e8 <_init>:
 80078e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ea:	bf00      	nop
 80078ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ee:	bc08      	pop	{r3}
 80078f0:	469e      	mov	lr, r3
 80078f2:	4770      	bx	lr

080078f4 <_fini>:
 80078f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f6:	bf00      	nop
 80078f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fa:	bc08      	pop	{r3}
 80078fc:	469e      	mov	lr, r3
 80078fe:	4770      	bx	lr
